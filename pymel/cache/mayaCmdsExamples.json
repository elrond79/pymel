{
    "TanimLayer": "", 
    "aaf2fcp": "    \n    \n    import pymel.core as pm\n    \n    handle = pm.aaf2fcp(srcFile='c:/tmp/test.aaf', dstPath='c:/tmp')\n    destinationFile = pm.aff2fcp(getFileName=handle)\n    pm.aaf2fcp(waitCompletion=handle)\n    pm.aaf2fcp(terminate=handle,deleteFile=False)", 
    "about": "    \n    \n    import pymel.core as pm\n    \n    pm.about( )\n    \n    version = pm.about(v=True)", 
    "addAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( name='earth' )\n    # Result: [nt.Transform(u'earth'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    # Add an attribute named ms/mass with a default value of 1 and a\n    # minimum value of 0.001 and a maximum of 10000.\n    #\n    pm.addAttr( shortName='ms', longName='mass', defaultValue=1.0, minValue=0.001, maxValue=10000 )\n    # Add a multi attribute named ff/forcefield of type double3.\n    #\n    pm.addAttr( shortName='ff', longName='forcefield', dataType='double3', multi=True )\n    # Add a compound attribute named sampson with children homeboy, midge,\n    # damien, elizabeth, and sweetpea of varying types\n    #\n    pm.addAttr( longName='sampson', numberOfChildren=5, attributeType='compound' )\n    pm.addAttr( longName='homeboy', attributeType='matrix', parent='sampson' )\n    pm.addAttr( longName='midge', attributeType='message', parent='sampson' )\n    pm.addAttr( longName='damien', attributeType='double', parent='sampson' )\n    pm.addAttr( longName='elizabeth', attributeType='double', parent='sampson' )\n    pm.addAttr( longName='sweetpea', attributeType='double', parent='sampson' )\n    # To add an attribute that is to be interpreted as a color the\n    # following attribute group must be used.\n    #\n    # Note that the word \"float\" must be in quotations since it is a\n    # MEL keyword.\n    #\n    pm.addAttr( longName='rainbow', usedAsColor=True, attributeType='float3' )\n    pm.addAttr( longName='redBow', attributeType='float', parent='rainbow' )\n    pm.addAttr( longName='greenBow', attributeType='float', parent='rainbow' )\n    pm.addAttr( longName='blueBow', attributeType='float', parent='rainbow' )\n    # Other legal attribute types that can be interpreted as colors need\n    # not specify the \"-usedAsColor\" flag as it will be assumed.  These\n    # include \"-attributeType spectrum\", \"-attributeType reflectance\",\n    # \"-dataType spectrumRGB\", and \"-dataType reflectanceRGB\".\n    #\n    pm.addAttr( longName='implColor', dataType='spectrumRGB' )\n    pm.addAttr( '.implColor', query=True, usedAsColor=True )\n    # Result: True #\n    # Add a double3 attribute named sanders with children bess, les and wes\n    #\n    pm.addAttr( longName='sanders', attributeType='double3' )\n    pm.addAttr( longName='bess', attributeType='double', parent='sanders' )\n    pm.addAttr( longName='les', attributeType='double', parent='sanders' )\n    pm.addAttr( longName='wes', attributeType='double', parent='sanders' )", 
    "addDynamic": "    \n    \n    import pymel.core as pm\n    \n    # Create an emitter\n    pm.emitter( pos=(0, 0, 0), type='omni', r=100, sro=0, nuv=0, cye='none', cyi=1, spd=1, srn=0, nsp=1, tsp=0, mxd=0, mnd=0, dx=1, dy=0, dz=0, sp=0 )\n    # Result: nt.PointEmitter(u'emitter1') #\n    \n    # Get the emitter to emit particles\n    pm.particle()\n    # Result: [nt.Transform(u'particle1'), nt.Particle(u'particleShape1')] #\n    # Result: particle2\n    pm.connectDynamic( 'particle1', em='emitter1' )\n    # Result: [u'particleShape1'] #\n    \n    # Create a particle to use as the source of the emitter\n    pm.particle( p=((6.0, 0, 7.0), (6.0, 0, 2.0)), c=1 )\n    # Result: [nt.Transform(u'particle2'), nt.Particle(u'particleShape2')] #\n    # Result: particle2\n    \n    # Use particle2 as a source of the emitter\n    pm.addDynamic( 'emitter1', 'particle2' )\n    # Result: [nt.PointEmitter(u'emitter1'), nt.Particle(u'particleShape2')] #", 
    "addExtension": "    \n    \n    import pymel.core as pm\n    \n    # Add an attribute named ms/mass with a default value of 1 and a\n    # minimum value of 0.001 and a maximum of 10000 to all mesh shapes.\n    #\n    pm.addExtension( nodeType='mesh', shortName='ms', longName='mass', defaultValue=1.0, minValue=0.001, maxValue=10000 )\n    # Add a multi attribute named ff/forcefield of type double3 to all mesh shapes.\n    #\n    pm.addExtension( nodeType='mesh', shortName='ff', longName='forcefield', dataType='double3', multi=True )\n    # Add a compound attribute named sampson with children homeboy, midge,\n    # damien, elizabeth, and sweetpea of varying types to all choice nodes.\n    #\n    pm.addExtension( nodeType='choice', longName='sampson', numberOfChildren=5, attributeType='compound' )\n    pm.addExtension( nodeType='choice', longName='homeboy', attributeType='matrix', parent='sampson' )\n    pm.addExtension( nodeType='choice', longName='midge', attributeType='message', parent='sampson' )\n    pm.addExtension( nodeType='choice', longName='damien', attributeType='double', parent='sampson' )\n    pm.addExtension( nodeType='choice', longName='elizabeth', attributeType='double', parent='sampson' )\n    pm.addExtension( nodeType='choice', longName='sweetpea', attributeType='double', parent='sampson' )\n    # To add an attribute that is to be interpreted as a color the\n    # following attribute group must be used.\n    #\n    # Note that the word \"float\" must be in quotations since it is a\n    # MEL keyword.\n    #\n    pm.addExtension( nodeType='phong', longName='rainbow', usedAsColor=True, attributeType='float3' )\n    pm.addExtension( nodeType='phong', longName='redBow', attributeType='float', parent='rainbow' )\n    pm.addExtension( nodeType='phong', longName='greenBow', attributeType='float', parent='rainbow' )\n    pm.addExtension( nodeType='phong', longName='blueBow', attributeType='float', parent='rainbow' )\n    # Other legal attribute types that can be interpreted as colors need\n    # not specify the \"-usedAsColor\" flag as it will be assumed.  These\n    # include \"-attributeType spectrum\", \"-attributeType reflectance\",\n    # \"-dataType spectrumRGB\", and \"-dataType reflectanceRGB\".\n    #\n    pm.addExtension( nodeType='phong', longName='implColor', dataType='spectrumRGB' )\n    # Add a double3 attribute named sanders with children bess, les and wes\n    # to all dag nodes, including shapes, transforms, and joints.\n    #\n    pm.addExtension( nodeType='dagNode', longName='sanders', attributeType='double3' )\n    pm.addExtension( nodeType='dagNode', longName='bess', attributeType='double', parent='sanders' )\n    pm.addExtension( nodeType='dagNode', longName='les', attributeType='double', parent='sanders' )\n    pm.addExtension( nodeType='dagNode', longName='wes', attributeType='double', parent='sanders' )", 
    "addMetadata": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.polyPlane( name='p', ch=False )\n    # Result: [nt.Transform(u'p')] #\n    pm.select( 'pShape', replace=True )\n    pm.dataStructure( format='raw', asString='name=IdStruct:int32=ID' )\n    # Result: u'IdStruct' #\n    pm.dataStructure( format='raw', asString='name=OffStruct:float=Offset' )\n    # Result: u'OffStruct' #\n    pm.dataStructure( format='raw', asString='name=OrgStruct:float[3]=Origin Point' )\n    # Result: u'OrgStruct' #\n    # Add three metadata streams\n    pm.addMetadata( streamName='IdStream', channelName='vertex', structure='IdStruct' )\n    # Result: [u'pShape'] #\n    pm.addMetadata( streamName='OffStream', channelName='vertex', structure='OffStruct' )\n    # Result: [u'pShape'] #\n    pm.addMetadata( streamName='OrgStream', channelName='edge', structure='OrgStruct' )\n    # Result: [u'pShape'] #\n    pm.addMetadata( streamName='VFStream', channelName='vertexFace', indexType='pair', structure='OrgStruct' )\n    # Result: [u'pShape'] #\n    # Query for the list of all channel types possessing metadata\n    pm.addMetadata( query=True, channelName=True )\n    # Result: [u'edge', u'vertex', u'vertexFace'] #\n    # Return: ['edge', 'vertex', 'vertexFace'] #\n    # Query for the structure assigned to a specific stream\n    pm.addMetadata( channelName='vertex', streamName='OffStream', query=True, structure=True )\n    # Result: [u'OffStruct'] #\n    # Return: 'OffStruct' #\n    # Query for the list of all streams on a specific channel type\n    pm.addMetadata( channelName='vertex', query=True, streamName=True )\n    # Result: [u'IdStream', u'OffStream'] #\n    # Return: ['IdStream', 'OffStream'] #\n    # Query for the list of all streams\n    pm.addMetadata( query=True, streamName=True )\n    # Result: [u'OrgStream', u'IdStream', u'OffStream', u'VFStream'] #\n    # Return: ['IdStream', 'OffStream', 'OrgStream', 'VFStream'] #\n    # You can combine queries to answer more general questions about the\n    # metadata on an object. For example suppose you wanted to know the\n    # index type used by all Streams on the 'vertex' Channel.\n    # First extract the list of Streams on the Channel\n    streams = pm.addMetadata( channelName='vertex', query=True, streamName=True )\n    # Loop through each Stream, querying the IndexType only for that Stream\n    for stream in streams:\n            indexType = pm.addMetadata( channelName='vertex', streamName=stream, query=True, indexType=True )[0]\n            print 'Index type on %s is %s' % (stream, indexType)", 
    "addPP": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    \n    pm.emitter( n='myEmitter1' )\n    # Result: nt.PointEmitter(u'myEmitter1') #\n    pm.particle( n='myParticle1' )\n    # Result: [nt.Transform(u'myParticle1'), nt.Particle(u'myParticle1Shape')] #\n    pm.connectDynamic( 'myParticle1', em='myEmitter1' )\n    # Result: [u'myParticle1Shape'] #\n    pm.select( 'myParticle1' )\n    pm.emitter( n='myEmitter2' )\n    # Result: nt.Transform(u'myParticle1') #\n    pm.particle( n='myParticle2' )\n    # Result: [nt.Transform(u'myParticle2'), nt.Particle(u'myParticle2Shape')] #\n    pm.connectDynamic( 'myParticle2', em='myEmitter2' )\n    # Result: [u'myParticle2Shape'] #\n    \n    pm.addPP( 'myEmitter2', atr='rate' )\n    # Result: [nt.PointEmitter(u'myEmitter2')] #\n    \n    # Suppose that myEmitter2 is owned by a particle shape, \"myParticle1.\"\n    # addPP will add an attribute \"myEmitter2RatePP\" to myParticle1, will connect\n    # myParticle1.myEmitter2RatePP to myEmitter2.ratePP, and will set myEmitter2.useRatePP\n    # to true.", 
    "adskAsset": "", 
    "adskAssetLibrary": "", 
    "adskAssetList": "", 
    "adskAssetListUI": "", 
    "affectedNet": "    \n    \n    import pymel.core as pm\n    \n    # Create a network of this transform node's attributes that affect\n    # each other\n    pm.affectedNet( 'transform1' )\n    \n    # Create a network all of the transform shared attributes that affect\n    # each other\n    pm.affectedNet( t='transform' )\n    \n    # Create a network of the revolve and shape node type attributes that\n    # affect each other\n    pm.affectedNet( t='revolve', t='shape' )", 
    "affects": "    \n    \n    import pymel.core as pm\n    \n    # List the attributes on node \"sphere\" that affect the \"tx\" attribute\n    pm.sphere( n='sphere' )\n    # Result: [nt.Transform(u'sphere'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.affects( 'tx', 'sphere' )\n    # Result: [u'minTransLimit', u'minTransXLimit', u'maxTransLimit', u'maxTransXLimit', u'minTransLimitEnable', u'minTransXLimitEnable', u'maxTransLimitEnable', u'maxTransXLimitEnable', u'geometry', u'dynamics'] #\n    # List the attributes on nodes of type \"transform\" that are affected by\n    # the \"ty\" attribute\n    pm.affects( 'ty', by=True, t='transform' )\n    # Result: [u'matrix', u'inverseMatrix', u'xformMatrix'] #\n    # List the attributes on nodes of type \"revolve\" that affect the\n    # \"outputSurface\" attribute\n    pm.affects( 'outputSurface', t='revolve' )\n    # Result: [u'inputCurve', u'startSweep', u'endSweep', u'useTolerance', u'degree', u'sections', u'tolerance', u'axis', u'axisX', u'axisY', u'axisZ', u'pivot', u'pivotX', u'pivotY', u'pivotZ', u'autoCorrectNormal', u'computePivotAndAxis', u'radius', u'radiusAnchor', u'axisChoice', u'bridge'] #", 
    "agFormatIn": "", 
    "agFormatOut": "", 
    "aimConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Orients the aim vector of cube1 in it's local coordinate space, to point at cone1.\n    pm.aimConstraint( 'cone1', 'cube1' )\n    \n    # Aims cube2 at the average of the position of cone1 and surf2\n    pm.aimConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.aimConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n    \n    # Removes surf2 from cube2's aimConstraint.\n    pm.aimConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's aimConstraint with the default weight.\n    pm.aimConstraint( 'surf3', 'cube2' )\n    \n    # Aim constrain the z-axis only of sph2 to sph1\n    pm.aimConstraint( 'sph1', 'sph2', skip=[\"x\",\"y\"] )", 
    "air": "    \n    \n    import pymel.core as pm\n    \n    pm.air( name='particle1', m=5.0, mxd=2.0 )\n    # Result: nt.AirField(u'particle1') #\n    # Creates an air field with magnitude 5.0 and maximum distance 2.0,\n    # and adds it to the list\n    # of fields particle1 owns.\n    \n    pm.air( wakeSetup=True )\n    # Creates an air field with no no velocity in and of itself (magnitude = 0).\n    # All of the air's\n    # velocity is derived from the motion of the objects that own the field.", 
    "aliasAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'blendShape', n='blender' )\n    # Result: nt.BlendShape(u'blender') #\n    #\n    # Define intuitive names for the weights of a blendShape.\n    # The blendShape command does this automatically to allow you\n    # to refer to the weight corresponding to a target shape by the name\n    # of that shape.\n    #\n    pm.aliasAttr( 'smile', 'blender.w[0]', 'frown', 'blender.w[1]' )\n    # Result: 2 #\n    #\n    # List all the attribute aliases for the node blendShape1\n    #\n    pm.aliasAttr( 'blender', query=True )\n    # Result: [u'smile', u'weight[0]', u'frown', u'weight[1]'] #\n    #\n    # Allow the X rotation on a joint to be called its \"roll\"\n    #\n    pm.createNode( 'joint', n='elbow' )\n    # Result: nt.Joint(u'elbow') #\n    pm.aliasAttr( 'roll', 'elbow.rx' )\n    # Result: 1 #\n    pm.aliasAttr( 'tuck', 'elbow.ry' )\n    # Result: 1 #\n    #\n    # Remove the roll alias defined above.\n    #\n    pm.aliasAttr( 'elbow.roll', rm=True )\n    #\n    # Remove the tuck alias defined above.\n    #\n    pm.aliasAttr( 'elbow.ry', rm=True )", 
    "align": "    \n    \n    import pymel.core as pm\n    \n    # align the selected objects to their average mid-point in x\n    pm.align(x='mid')\n    # align the selected objects to the mid-point in x of the first select object\n    pm.align(x='mid', alignToLead=True)", 
    "alignCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere and a poly cube, then move them apart\n    pm.polySphere(r=3, n='pSphere1')\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.move(5, 0, 0)\n    pm.polyCube(w=3, h=3, d=3, n='pCube1')\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    pm.move(-5, 3, 0)\n    pm.select('pSphere1', 'pCube1', r=True)\n    \n    # Create a new align context which is used to align objects, then switch to it\n    # Now you can use this tool to align objects\n    pm.alignCtx('alignCtx1',a=True)\n    # Result: u'alignCtx1' #\n    pm.setToolTo('alignCtx1')", 
    "alignCurve": "    \n    \n    import pymel.core as pm\n    \n    # Do modify positional continuity on both curves with no history:\n    pm.alignCurve( ch=False, pc=True, pct=6 )\n    \n    # Do positional and tangent continuity, with the second curve\n    # tangent modified (by default move position continuity is done\n    # on the first curve):\n    pm.alignCurve( tc=True, tct=2 )", 
    "alignSurface": "    \n    \n    import pymel.core as pm\n    \n    # Do modify positional continuity on both active surfaces with no history:\n    pm.alignSurface( ch=False, pc=True, pct=6 )\n    \n    # Do positional and tangent continuity, with the second surface\n    # tangent modified (by default move position continuity is done\n    # on the first surface):\n    pm.alignSurface( tc=True, tct=2 )", 
    "allNodeTypes": "    \n    \n    import pymel.core as pm\n    \n    pm.allNodeTypes()\n    # Result: [u'AISEnvFacade', u'AlembicNode', u'ComputeGlobal', u'ComputeLocal', u'CustomRigDefaultMappingNode', u'CustomRigRetargeterNode', u'HIKCharacterNode', u'HIKCharacterStateClient', u'HIKControlSetNode', u'HIKEffector2State', u'HIKEffectorFromCharacter', u'HIKFK2State', u'HIKPinning2State', u'HIKProperty2State', u'HIKRetargeterNode', u'HIKSK2State', u'HIKSkeletonGeneratorNode', u'HIKSolverNode', u'HIKState2Effector', u'HIKState2FK', u'HIKState2GlobalSK', u'HIKState2SK', u'abcimport', u'addDoubleLinear', u'addMatrix', u'adskMaterial', u'adskPrepareRenderGlobals', u'aimConstraint', u'airField', u'airManip', u'alignCurve', u'alignManip', u'alignSurface', u'ambientLight', u'angleBetween', u'angleDimension', u'animBlend', u'animBlendInOut', u'animBlendNodeAdditive', u'animBlendNodeAdditiveDA', u'animBlendNodeAdditiveDL', u'animBlendNodeAdditiveF', u'animBlendNodeAdditiveFA', u'animBlendNodeAdditiveFL', u'animBlendNodeAdditiveI16', u'animBlendNodeAdditiveI32', u'animBlendNodeAdditiveRotation', u'animBlendNodeAdditiveScale', u'animBlendNodeBoolean', u'animBlendNodeEnum', u'animBlendNodeTime', u'animClip', u'animCurveTA', u'animCurveTL', u'animCurveTT', u'animCurveTU', u'animCurveUA', u'animCurveUL', u'animCurveUT', u'animCurveUU', u'animLayer', u'anisotropic', u'annotationShape', u'apfEntityNode', u'apfFileNode', u'arcLengthDimension', u'areaLight', u'arrayMapper', u'arrowManip', u'artAttrPaintTest', u'assemblyDefinition', u'assemblyReference', u'attachCurve', u'attachSurface', u'attrHierarchyTest', u'audio', u'avgCurves', u'avgCurvesManip', u'avgNurbsSurfacePoints', u'avgSurfacePoints', u'axesActionManip', u'ballProjManip', u'barnDoorManip', u'baseLattice', u'bevel', u'bevelManip', u'bevelPlus', u'bezierCurve', u'bezierCurveToNurbs', u'blendColorSets', u'blendColors', u'blendDevice', u'blendManip', u'blendShape', u'blendTwoAttr', u'blendWeighted', u'blindDataTemplate', u'blinn', u'boneLattice', u'boolean', u'boundary', u'brownian', u'brush', u'builtin_bsdf_architectural', u'builtin_bsdf_architectural_comp', u'builtin_bsdf_ashikhmin', u'builtin_bsdf_carpaint', u'builtin_bsdf_lambert', u'builtin_bsdf_mirror', u'builtin_bsdf_phong', u'bulge', u'bump2d', u'bump3d', u'buttonManip', u'cMuscleCreator', u'cMuscleDebug', u'cMuscleDirection', u'cMuscleDisplace', u'cMuscleDisplay', u'cMuscleFalloff', u'cMuscleKeepOut', u'cMuscleMultiCollide', u'cMuscleObject', u'cMuscleRelative', u'cMuscleShader', u'cMuscleSmartCollide', u'cMuscleSmartConstraint', u'cMuscleSpline', u'cMuscleSplineDeformer', u'cMuscleStretch', u'cMuscleSurfAttach', u'cMuscleSystem', u'cacheBlend', u'cacheFile', u'camera', u'cameraManip', u'cameraPlaneManip', u'cameraSet', u'cameraView', u'centerManip', u'character', u'characterMap', u'characterOffset', u'checker', u'choice', u'chooser', u'circleManip', u'circleSweepManip', u'clamp', u'clipGhostShape', u'clipLibrary', u'clipScheduler', u'clipToGhostData', u'closeCurve', u'closeSurface', u'closestPointOnMesh', u'closestPointOnSurface', u'cloth', u'cloud', u'cluster', u'clusterFlexorShape', u'clusterHandle', u'coiManip', u'collisionModel', u'colorProfile', u'componentManip', u'composeMatrix', u'concentricProjManip', u'condition', u'container', u'containerBase', u'contour_composite', u'contour_contrast_function_levels', u'contour_contrast_function_simple', u'contour_only', u'contour_ps', u'contour_shader_combi', u'contour_shader_curvature', u'contour_shader_depthfade', u'contour_shader_factorcolor', u'contour_shader_framefade', u'contour_shader_layerthinner', u'contour_shader_maxcolor', u'contour_shader_silhouette', u'contour_shader_simple', u'contour_shader_widthfromcolor', u'contour_shader_widthfromlight', u'contour_shader_widthfromlightdir', u'contour_store_function', u'contour_store_function_simple', u'contrast', u'copyColorSet', u'copyUVSet', u'cpManip', u'crater', u'creaseSet', u'createBPManip', u'createCVManip', u'createColorSet', u'createEPManip', u'createUVSet', u'cubeManip', u'cubicProjManip', u'curveEdManip', u'curveFromMeshCoM', u'curveFromMeshEdge', u'curveFromSubdivEdge', u'curveFromSubdivFace', u'curveFromSurfaceBnd', u'curveFromSurfaceCoS', u'curveFromSurfaceIso', u'curveInfo', u'curveIntersect', u'curveNormalizerAngle', u'curveNormalizerLinear', u'curveSegmentManip', u'curveVarGroup', u'cylindricalLightLocator', u'cylindricalProjManip', u'dagContainer', u'dagPose', u'dataBlockTest', u'decomposeMatrix', u'defaultLightList', u'defaultRenderUtilityList', u'defaultRenderingList', u'defaultShaderList', u'defaultTextureList', u'deformBend', u'deformBendManip', u'deformFlare', u'deformFlareManip', u'deformSine', u'deformSineManip', u'deformSquash', u'deformSquashManip', u'deformTwist', u'deformTwistManip', u'deformWave', u'deformWaveManip', u'deleteColorSet', u'deleteComponent', u'deleteUVSet', u'detachCurve', u'detachSurface', u'dgs_material', u'dgs_material_photon', u'dielectric_material', u'dielectric_material_photon', u'directedDisc', u'directionManip', u'directionalLight', u'discLightLocator', u'discManip', u'diskCache', u'displacementShader', u'displayLayer', u'displayLayerManager', u'distanceBetween', u'distanceDimShape', u'distanceManip', u'dof', u'dofManip', u'doubleShadingSwitch', u'dpBirailSrf', u'dragField', u'dropoffLocator', u'dropoffManip', u'dynAttenuationManip', u'dynController', u'dynGlobals', u'dynHolder', u'dynSpreadManip', u'dynamicConstraint', u'editMetadata', u'emitterManip', u'enableManip', u'envBall', u'envChrome', u'envCube', u'envFacade', u'envFog', u'envSky', u'envSphere', u'environmentFog', u'eulerToQuat', u'explodeNurbsShell', u'expression', u'extendCurve', u'extendCurveDistanceManip', u'extendSurface', u'extendSurfaceDistanceManip', u'extrude', u'extrudeManip', u'facade', u'ffBlendSrf', u'ffBlendSrfObsolete', u'ffFilletSrf', u'ffd', u'fieldManip', u'fieldsManip', u'file', u'filletCurve', u'filterClosestSample', u'filterEuler', u'filterResample', u'filterSimplify', u'fitBspline', u'flexorShape', u'flow', u'fluidEmitter', u'fluidShape', u'fluidSliceManip', u'fluidTexture2D', u'fluidTexture3D', u'follicle', u'forceUpdateManip', u'fosterParent', u'fourByFourMatrix', u'fractal', u'frameCache', u'freePointManip', u'freePointTriadManip', u'gammaCorrect', u'geoConnectable', u'geoConnector', u'geometryConstraint', u'geometryFilter', u'geometryOnLineManip', u'geometryVarGroup', u'globalCacheControl', u'globalStitch', u'gpuCache', u'granite', u'gravityField', u'greasePencilSequence', u'greasePlane', u'greasePlaneRenderShape', u'grid', u'groupId', u'groupParts', u'guide', u'hairConstraint', u'hairSystem', u'hairTubeShader', u'hardenPoint', u'hardwareRenderGlobals', u'hardwareRenderingGlobals', u'heightField', u'hierarchyTestNode1', u'hierarchyTestNode2', u'hierarchyTestNode3', u'hikEffector', u'hikFKJoint', u'hikFloorContactMarker', u'hikGroundPlane', u'hikHandle', u'hikIKEffector', u'hikSolver', u'historySwitch', u'holdMatrix', u'hsvToRgb', u'hwReflectionMap', u'hwRenderGlobals', u'hyperGraphInfo', u'hyperLayout', u'hyperView', u'ik2Bsolver', u'ikEffector', u'ikHandle', u'ikMCsolver', u'ikPASolver', u'ikRPManip', u'ikRPsolver', u'ikSCsolver', u'ikSplineManip', u'ikSplineSolver', u'ikSpringSolver', u'ikSystem', u'imagePlane', u'implicitBox', u'implicitCone', u'implicitSphere', u'indexManip', u'insertKnotCurve', u'insertKnotSurface', u'instancer', u'intersectSurface', u'inverseMatrix', u'isoparmManip', u'jiggle', u'joint', u'jointCluster', u'jointClusterManip', u'jointFfd', u'jointLattice', u'jointTranslateManip', u'keyframeRegionManip', u'keyingGroup', u'lambert', u'lattice', u'layeredShader', u'layeredTexture', u'leastSquaresModifier', u'leather', u'lightFog', u'lightInfo', u'lightLinker', u'lightList', u'lightManip', u'limitManip', u'lineManip', u'lineModifier', u'locator', u'lodGroup', u'lodThresholds', u'loft', u'lookAt', u'luminance', u'makeGroup', u'makeIllustratorCurves', u'makeNurbCircle', u'makeNurbCone', u'makeNurbCube', u'makeNurbCylinder', u'makeNurbPlane', u'makeNurbSphere', u'makeNurbTorus', u'makeNurbsSquare', u'makeTextCurves', u'makeThreePointCircularArc', u'makeThreePointCircularArcManip', u'makeTwoPointCircularArc', u'makeTwoPointCircularArcManip', u'mandelbrot', u'mandelbrot3D', u'manip2DContainer', u'manipContainer', u'mapVizShape', u'marble', u'markerManip', u'materialFacade', u'materialInfo', u'membrane', u'mentalrayCCMeshProxy', u'mentalrayCurveApprox', u'mentalrayDisplaceApprox', u'mentalrayFramebuffer', u'mentalrayGlobals', u'mentalrayIblShape', u'mentalrayItemsList', u'mentalrayLightProfile', u'mentalrayOptions', u'mentalrayOutputPass', u'mentalrayPhenomenon', u'mentalrayRenderPass', u'mentalrayShader', u'mentalraySubdivApprox', u'mentalraySurfaceApprox', u'mentalrayTessellation', u'mentalrayText', u'mentalrayTexture', u'mentalrayUserBuffer', u'mentalrayUserData', u'mentalrayVertexColors', u'mesh', u'meshVarGroup', u'mi_bump_flakes', u'mi_car_paint_phen', u'mi_car_paint_phen_x', u'mi_car_paint_phen_x_passes', u'mi_metallic_paint', u'mi_metallic_paint_output_mixer', u'mi_metallic_paint_x', u'mi_metallic_paint_x_passes', u'mia_ciesky', u'mia_envblur', u'mia_exposure_photographic', u'mia_exposure_photographic_rev', u'mia_exposure_simple', u'mia_lens_bokeh', u'mia_light_surface', u'mia_material', u'mia_material_x', u'mia_material_x_passes', u'mia_photometric_light', u'mia_physicalsky', u'mia_physicalsun', u'mia_portal_light', u'mia_roundcorners', u'mib_amb_occlusion', u'mib_bent_normal_env', u'mib_blackbody', u'mib_bump_basis', u'mib_bump_map', u'mib_bump_map2', u'mib_cie_d', u'mib_color_alpha', u'mib_color_average', u'mib_color_intensity', u'mib_color_interpolate', u'mib_color_mix', u'mib_color_spread', u'mib_continue', u'mib_data_bool', u'mib_data_bool_array', u'mib_data_color', u'mib_data_color_array', u'mib_data_get_bool', u'mib_data_get_color', u'mib_data_get_int', u'mib_data_get_scalar', u'mib_data_get_shader', u'mib_data_get_shader_bool', u'mib_data_get_shader_color', u'mib_data_get_shader_int', u'mib_data_get_shader_scalar', u'mib_data_get_shader_vector', u'mib_data_get_string', u'mib_data_get_texture', u'mib_data_get_vector', u'mib_data_int', u'mib_data_int_array', u'mib_data_scalar', u'mib_data_scalar_array', u'mib_data_shader', u'mib_data_shader_array', u'mib_data_string', u'mib_data_string_array', u'mib_data_texture', u'mib_data_texture_array', u'mib_data_vector', u'mib_data_vector_array', u'mib_dielectric', u'mib_fast_occlusion', u'mib_fg_occlusion', u'mib_geo_add_uv_texsurf', u'mib_geo_cone', u'mib_geo_cube', u'mib_geo_cylinder', u'mib_geo_instance', u'mib_geo_instance_mlist', u'mib_geo_sphere', u'mib_geo_square', u'mib_geo_torus', u'mib_glossy_reflection', u'mib_glossy_refraction', u'mib_illum_blinn', u'mib_illum_cooktorr', u'mib_illum_hair', u'mib_illum_lambert', u'mib_illum_phong', u'mib_illum_ward', u'mib_illum_ward_deriv', u'mib_lens_clamp', u'mib_lens_stencil', u'mib_light_infinite', u'mib_light_photometric', u'mib_light_point', u'mib_light_spot', u'mib_lightmap_sample', u'mib_lightmap_write', u'mib_lookup_background', u'mib_lookup_cube1', u'mib_lookup_cube6', u'mib_lookup_cylindrical', u'mib_lookup_spherical', u'mib_map_get_color', u'mib_map_get_integer', u'mib_map_get_integer_array', u'mib_map_get_scalar', u'mib_map_get_scalar_array', u'mib_map_get_transform', u'mib_map_get_vector', u'mib_opacity', u'mib_passthrough_bump_map', u'mib_photon_basic', u'mib_ptex_lookup', u'mib_ray_marcher', u'mib_reflect', u'mib_refract', u'mib_refraction_index', u'mib_shadow_transparency', u'mib_texture_checkerboard', u'mib_texture_filter_lookup', u'mib_texture_lookup', u'mib_texture_lookup2', u'mib_texture_polkadot', u'mib_texture_polkasphere', u'mib_texture_remap', u'mib_texture_rotate', u'mib_texture_turbulence', u'mib_texture_vector', u'mib_texture_wave', u'mib_transparency', u'mib_twosided', u'mib_volume', u'mila_5layers', u'mila_5layers_phen', u'mila_adapter', u'mila_diffuse', u'mila_emission', u'mila_fastsss', u'mila_flakes_adapter', u'mila_get_normal', u'mila_layers', u'mila_material', u'mila_material_std', u'mila_reflection', u'mila_refraction', u'mila_translucency', u'mila_transparency', u'mip_binaryproxy', u'mip_cameramap', u'mip_card_opacity', u'mip_fgshooter', u'mip_gamma_gain', u'mip_grayball', u'mip_matteshadow', u'mip_matteshadow_mtl', u'mip_mirrorball', u'mip_motion_vector', u'mip_motionblur', u'mip_rayswitch', u'mip_rayswitch_advanced', u'mip_rayswitch_environment', u'mip_rayswitch_stage', u'mip_render_subset', u'misss_call_shader', u'misss_fast_lmap_maya', u'misss_fast_shader', u'misss_fast_shader2', u'misss_fast_shader2_x', u'misss_fast_shader_x', u'misss_fast_shader_x_passes', u'misss_fast_simple_maya', u'misss_fast_skin_maya', u'misss_fast_skin_phen', u'misss_fast_skin_phen_d', u'misss_lambert_gamma', u'misss_lightmap_phen', u'misss_lightmap_write', u'misss_mia_skin2_phen', u'misss_mia_skin2_phen_d', u'misss_mia_skin2_surface_phen', u'misss_physical', u'misss_physical_phen', u'misss_set_normal', u'misss_skin_specular', u'motionPath', u'motionPathManip', u'motionTrail', u'motionTrailShape', u'mountain', u'moveBezierHandleManip', u'moveVertexManip', u'movie', u'mpBirailSrf', u'multDoubleLinear', u'multMatrix', u'multilisterLight', u'multiplyDivide', u'mute', u'nCloth', u'nComponent', u'nParticle', u'nRigid', u'nearestPointOnCurve', u'network', u'newtonField', u'newtonManip', u'noise', u'nonLinear', u'normalConstraint', u'nucleus', u'nurbsCurve', u'nurbsCurveToBezier', u'nurbsSurface', u'nurbsTessellate', u'nurbsToSubdiv', u'nurbsToSubdivProc', u'objectAttrFilter', u'objectBinFilter', u'objectFilter', u'objectMultiFilter', u'objectNameFilter', u'objectRenderFilter', u'objectScriptFilter', u'objectSet', u'objectTypeFilter', u'ocean', u'oceanShader', u'offsetCos', u'offsetCosManip', u'offsetCurve', u'offsetCurveManip', u'offsetSurface', u'offsetSurfaceManip', u'oldBlindDataBase', u'oldGeometryConstraint', u'oldNormalConstraint', u'oldTangentConstraint', u'opticalFX', u'orientConstraint', u'orientationMarker', u'oversampling_lens', u'pairBlend', u'paramDimension', u'parentConstraint', u'parti_volume', u'parti_volume_photon', u'particle', u'particleAgeMapper', u'particleCloud', u'particleColorMapper', u'particleIncandMapper', u'particleSamplerInfo', u'particleTranspMapper', u'partition', u'passContributionMap', u'passMatrix', u'path_material', u'pfxHair', u'pfxToon', u'phong', u'phongE', u'physical_lens_dof', u'physical_light', u'pivot2dManip', u'pivotAndOrientManip', u'place2dTexture', u'place3dTexture', u'planarProjManip', u'planarTrimSurface', u'plusMinusAverage', u'pointConstraint', u'pointEmitter', u'pointLight', u'pointMatrixMult', u'pointOnCurveInfo', u'pointOnCurveManip', u'pointOnLineManip', u'pointOnPolyConstraint', u'pointOnSurfManip', u'pointOnSurfaceInfo', u'pointOnSurfaceManip', u'poleVectorConstraint', u'polyAppend', u'polyAppendVertex', u'polyAutoProj', u'polyAutoProjManip', u'polyAverageVertex', u'polyBevel', u'polyBlindData', u'polyBoolOp', u'polyBridgeEdge', u'polyChipOff', u'polyCloseBorder', u'polyCollapseEdge', u'polyCollapseF', u'polyColorDel', u'polyColorMod', u'polyColorPerVertex', u'polyCone', u'polyConnectComponents', u'polyCopyUV', u'polyCrease', u'polyCreaseEdge', u'polyCreateFace', u'polyCreateToolManip', u'polyCube', u'polyCut', u'polyCutManip', u'polyCutManipContainer', u'polyCylProj', u'polyCylinder', u'polyDelEdge', u'polyDelFacet', u'polyDelVertex', u'polyDuplicateEdge', u'polyEdgeToCurve', u'polyEditEdgeFlow', u'polyExtrudeEdge', u'polyExtrudeFace', u'polyExtrudeManip', u'polyExtrudeManipContainer', u'polyExtrudeVertex', u'polyFlipEdge', u'polyFlipUV', u'polyHelix', u'polyHoleFace', u'polyLayoutUV', u'polyMapCut', u'polyMapDel', u'polyMapSew', u'polyMapSewMove', u'polyMappingManip', u'polyMergeEdge', u'polyMergeFace', u'polyMergeUV', u'polyMergeVert', u'polyMergeVertsManip', u'polyMirror', u'polyModifierManip', u'polyMoveEdge', u'polyMoveFace', u'polyMoveFacetUV', u'polyMoveUV', u'polyMoveUVManip', u'polyMoveVertex', u'polyMoveVertexManip', u'polyNormal', u'polyNormalPerVertex', u'polyNormalizeUV', u'polyOptUvs', u'polyPipe', u'polyPlanarProj', u'polyPlane', u'polyPlatonicSolid', u'polyPoke', u'polyPokeManip', u'polyPrimitiveMisc', u'polyPrism', u'polyProj', u'polyProjManip', u'polyProjectCurve', u'polyPyramid', u'polyQuad', u'polyReduce', u'polySelectEditFeedbackManip', u'polySeparate', u'polySewEdge', u'polySmooth', u'polySmoothFace', u'polySmoothProxy', u'polySoftEdge', u'polySphProj', u'polySphere', u'polySpinEdge', u'polySplit', u'polySplitEdge', u'polySplitRing', u'polySplitToolManip1', u'polySplitVert', u'polyStraightenUVBorder', u'polySubdEdge', u'polySubdFace', u'polyToSubdiv', u'polyToolFeedbackManip', u'polyTorus', u'polyTransfer', u'polyTriangulate', u'polyTweak', u'polyTweakUV', u'polyUVRectangle', u'polyUnite', u'polyVertexNormalManip', u'polyWedgeFace', u'positionMarker', u'postProcessList', u'precompExport', u'projectCurve', u'projectTangent', u'projectTangentManip', u'projection', u'projectionManip', u'projectionMultiManip', u'projectionUVManip', u'propModManip', u'propMoveTriadManip', u'proxyManager', u'psdFileTex', u'quadPtOnLineManip', u'quadShadingSwitch', u'quatAdd', u'quatConjugate', u'quatInvert', u'quatNegate', u'quatNormalize', u'quatProd', u'quatSub', u'quatToEuler', u'radialField', u'ramp', u'rampShader', u'rbfSrf', u'rbfSrfManip', u'rebuildCurve', u'rebuildSurface', u'record', u'rectangularLightLocator', u'reference', u'remapColor', u'remapHsv', u'remapValue', u'renderBox', u'renderCone', u'renderGlobals', u'renderGlobalsList', u'renderLayer', u'renderLayerManager', u'renderPass', u'renderPassSet', u'renderQuality', u'renderRect', u'renderSphere', u'renderTarget', u'renderedImageSource', u'resolution', u'resultCurveTimeToAngular', u'resultCurveTimeToLinear', u'resultCurveTimeToTime', u'resultCurveTimeToUnitless', u'reverse', u'reverseCurve', u'reverseCurveManip', u'reverseSurface', u'reverseSurfaceManip', u'revolve', u'revolveManip', u'revolvedPrimitiveManip', u'rgbToHsv', u'rigidBody', u'rigidConstraint', u'rigidSolver', u'rock', u'rotateHelper', u'rotateLimitsManip', u'rotateManip', u'rotateUV2dManip', u'roundConstantRadius', u'roundConstantRadiusManip', u'roundRadiusCrvManip', u'roundRadiusManip', u'sampler', u'samplerInfo', u'scaleConstraint', u'scaleLimitsManip', u'scaleManip', u'scaleUV2dManip', u'screenAlignedCircleManip', u'script', u'scriptManip', u'sculpt', u'selectionListOperator', u'sequenceManager', u'sequencer', u'setRange', u'shaderGlow', u'shadingEngine', u'shadingMap', u'shellTessellate', u'shot', u'simpleTestNode', u'simpleVolumeShader', u'singleShadingSwitch', u'sketchPlane', u'skinBinding', u'skinCluster', u'smoothCurve', u'smoothTangentSrf', u'snapshot', u'snapshotShape', u'snow', u'softMod', u'softModHandle', u'softModManip', u'solidFractal', u'spBirailSrf', u'sphericalLightLocator', u'sphericalProjManip', u'spotCylinderManip', u'spotLight', u'spotManip', u'spring', u'squareSrf', u'squareSrfManip', u'stencil', u'stereoRigCamera', u'stitchAsNurbsShell', u'stitchSrf', u'stitchSrfManip', u'stroke', u'strokeGlobals', u'stucco', u'styleCurve', u'subCurve', u'subSurface', u'subdAddTopology', u'subdAutoProj', u'subdBlindData', u'subdCleanTopology', u'subdHierBlind', u'subdLayoutUV', u'subdMapCut', u'subdMapSewMove', u'subdMappingManip', u'subdPlanarProj', u'subdProjManip', u'subdTweak', u'subdTweakUV', u'subdiv', u'subdivCollapse', u'subdivComponentId', u'subdivReverseFaces', u'subdivSurfaceVarGroup', u'subdivToNurbs', u'subdivToPoly', u'substance', u'substanceOutput', u'surfaceEdManip', u'surfaceInfo', u'surfaceLuminance', u'surfaceSampler', u'surfaceShader', u'surfaceVarGroup', u'symmetryConstraint', u'tangentConstraint', u'texLattice', u'texLatticeDeformManip', u'texMoveShellManip', u'texSmoothManip', u'texSmudgeUVManip', u'textButtonManip', u'textManip2D', u'texture3dManip', u'textureBakeSet', u'textureToGeom', u'time', u'timeFunction', u'timeToUnitConversion', u'timeWarp', u'toggleManip', u'toggleOnLineManip', u'toolDrawManip', u'toolDrawManip2D', u'toonLineAttributes', u'towPointOnCurveManip', u'towPointOnSurfaceManip', u'trans2dManip', u'transUV2dManip', u'transferAttributes', u'transform', u'transformGeometry', u'translateLimitsManip', u'translateManip', u'translateUVManip', u'transmat', u'transmat_photon', u'transposeMatrix', u'trim', u'trimManip', u'trimWithBoundaries', u'triplanarProjManip', u'tripleShadingSwitch', u'trsInsertManip', u'trsManip', u'turbulenceField', u'turbulenceManip', u'tweak', u'uniformField', u'unitConversion', u'unitToTimeConversion', u'unknown', u'unknownDag', u'unknownTransform', u'untrim', u'useBackground', u'user_ibl_env', u'user_ibl_rect', u'uv2dManip', u'uvChooser', u'vectorProduct', u'vectorRenderGlobals', u'vertexBakeSet', u'viewColorManager', u'volumeAxisField', u'volumeBindManip', u'volumeFog', u'volumeLight', u'volumeNoise', u'volumeShader', u'vortexField', u'water', u'weightGeometryFilter', u'wire', u'wood', u'wrap', u'writeToColorBuffer', u'writeToDepthBuffer', u'writeToLabelBuffer', u'writeToVectorBuffer', u'wtAddMatrix', u'xformManip'] #\n    pm.allNodeTypes(includeAbstract=True)\n    # Result: [u'AISEnvFacade', u'AlembicNode', u'ComputeGlobal', u'ComputeLocal', u'CustomRigDefaultMappingNode', u'CustomRigRetargeterNode', u'HIKCharacterNode', u'HIKCharacterStateClient', u'HIKControlSetNode', u'HIKEffector2State', u'HIKEffectorFromCharacter', u'HIKFK2State', u'HIKPinning2State', u'HIKProperty2State', u'HIKRetargeterNode', u'HIKSK2State', u'HIKSkeletonGeneratorNode', u'HIKSolverNode', u'HIKState2Effector', u'HIKState2FK', u'HIKState2GlobalSK', u'HIKState2SK', u'abcimport', u'abstractBaseCreate (abstract)', u'abstractBaseNurbsConversion (abstract)', u'addDoubleLinear', u'addMatrix', u'adskAssetInstanceNode_TdependNode (abstract)', u'adskAssetInstanceNode_TdnTx2D (abstract)', u'adskAssetInstanceNode_TlightShape (abstract)', u'adskMaterial', u'adskPrepareRenderGlobals', u'aimConstraint', u'airField', u'airManip', u'alignCurve', u'alignManip', u'alignSurface', u'ambientLight', u'angleBetween', u'angleDimension', u'animBlend', u'animBlendInOut', u'animBlendNodeAdditive', u'animBlendNodeAdditiveDA', u'animBlendNodeAdditiveDL', u'animBlendNodeAdditiveF', u'animBlendNodeAdditiveFA', u'animBlendNodeAdditiveFL', u'animBlendNodeAdditiveI16', u'animBlendNodeAdditiveI32', u'animBlendNodeAdditiveRotation', u'animBlendNodeAdditiveScale', u'animBlendNodeBase (abstract)', u'animBlendNodeBoolean', u'animBlendNodeEnum', u'animBlendNodeTime', u'animClip', u'animCurve (abstract)', u'animCurveTA', u'animCurveTL', u'animCurveTT', u'animCurveTU', u'animCurveUA', u'animCurveUL', u'animCurveUT', u'animCurveUU', u'animLayer', u'anisotropic', u'annotationShape', u'apfEntityNode', u'apfFileNode', u'arcLengthDimension', u'areaLight', u'arrayMapper', u'arrowManip', u'artAttrPaintTest', u'assembly (abstract)', u'assemblyDefinition', u'assemblyReference', u'attachCurve', u'attachSurface', u'attrHierarchyTest', u'audio', u'avgCurves', u'avgCurvesManip', u'avgNurbsSurfacePoints', u'avgSurfacePoints', u'axesActionManip', u'bakeSet (abstract)', u'ballProjManip', u'barnDoorManip', u'baseGeometryVarGroup (abstract)', u'baseLattice', u'baseShadingSwitch (abstract)', u'bevel', u'bevelManip', u'bevelPlus', u'bezierCurve', u'bezierCurveToNurbs', u'birailSrf (abstract)', u'blend (abstract)', u'blendColorSets', u'blendColors', u'blendDevice', u'blendManip', u'blendShape', u'blendTwoAttr', u'blendWeighted', u'blindDataTemplate', u'blinn', u'boneLattice', u'boolean', u'boundary', u'boundaryBase (abstract)', u'brownian', u'brush', u'builtin_bsdf_architectural', u'builtin_bsdf_architectural_comp', u'builtin_bsdf_ashikhmin', u'builtin_bsdf_carpaint', u'builtin_bsdf_lambert', u'builtin_bsdf_mirror', u'builtin_bsdf_phong', u'bulge', u'bump2d', u'bump3d', u'buttonManip', u'cMuscleCreator', u'cMuscleDebug', u'cMuscleDirection', u'cMuscleDisplace', u'cMuscleDisplay', u'cMuscleFalloff', u'cMuscleKeepOut', u'cMuscleMultiCollide', u'cMuscleObject', u'cMuscleRelative', u'cMuscleShader', u'cMuscleSmartCollide', u'cMuscleSmartConstraint', u'cMuscleSpline', u'cMuscleSplineDeformer', u'cMuscleStretch', u'cMuscleSurfAttach', u'cMuscleSystem', u'cacheBase (abstract)', u'cacheBlend', u'cacheFile', u'camera', u'cameraManip', u'cameraPlaneManip', u'cameraSet', u'cameraView', u'centerManip', u'character', u'characterMap', u'characterOffset', u'checker', u'choice', u'chooser', u'circleManip', u'circleSweepManip', u'clamp', u'clientDevice (abstract)', u'clipGhostShape', u'clipLibrary', u'clipScheduler', u'clipToGhostData', u'closeCurve', u'closeSurface', u'closestPointOnMesh', u'closestPointOnSurface', u'cloth', u'cloud', u'cluster', u'clusterFlexorShape', u'clusterHandle', u'coiManip', u'collisionModel', u'colorProfile', u'componentManip', u'composeMatrix', u'concentricProjManip', u'condition', u'constraint (abstract)', u'container', u'containerBase', u'contour_composite', u'contour_contrast_function_levels', u'contour_contrast_function_simple', u'contour_only', u'contour_ps', u'contour_shader_combi', u'contour_shader_curvature', u'contour_shader_depthfade', u'contour_shader_factorcolor', u'contour_shader_framefade', u'contour_shader_layerthinner', u'contour_shader_maxcolor', u'contour_shader_silhouette', u'contour_shader_simple', u'contour_shader_widthfromcolor', u'contour_shader_widthfromlight', u'contour_shader_widthfromlightdir', u'contour_store_function', u'contour_store_function_simple', u'contrast', u'controlPoint (abstract)', u'copyColorSet', u'copyUVSet', u'cpManip', u'crater', u'creaseSet', u'createBPManip', u'createCVManip', u'createColorSet', u'createEPManip', u'createUVSet', u'cubeManip', u'cubicProjManip', u'curveEdManip', u'curveFromMesh (abstract)', u'curveFromMeshCoM', u'curveFromMeshEdge', u'curveFromSubdiv (abstract)', u'curveFromSubdivEdge', u'curveFromSubdivFace', u'curveFromSurface (abstract)', u'curveFromSurfaceBnd', u'curveFromSurfaceCoS', u'curveFromSurfaceIso', u'curveInfo', u'curveIntersect', u'curveNormalizer (abstract)', u'curveNormalizerAngle', u'curveNormalizerLinear', u'curveRange (abstract)', u'curveSegmentManip', u'curveShape (abstract)', u'curveVarGroup', u'cylindricalLightLocator', u'cylindricalProjManip', u'dagContainer', u'dagNode (abstract)', u'dagPose', u'dataBlockTest', u'decomposeMatrix', u'defaultLightList', u'defaultRenderUtilityList', u'defaultRenderingList', u'defaultShaderList', u'defaultTextureList', u'deformBend', u'deformBendManip', u'deformFlare', u'deformFlareManip', u'deformFunc (abstract)', u'deformSine', u'deformSineManip', u'deformSquash', u'deformSquashManip', u'deformTwist', u'deformTwistManip', u'deformWave', u'deformWaveManip', u'deformableShape (abstract)', u'deleteColorSet', u'deleteComponent', u'deleteUVSet', u'detachCurve', u'detachSurface', u'dgs_material', u'dgs_material_photon', u'dielectric_material', u'dielectric_material_photon', u'dimensionShape (abstract)', u'directedDisc', u'directionManip', u'directionalLight', u'discLightLocator', u'discManip', u'diskCache', u'displacementShader', u'displayLayer', u'displayLayerManager', u'distanceBetween', u'distanceDimShape', u'distanceManip', u'dof', u'dofManip', u'doubleShadingSwitch', u'dpBirailSrf', u'dragField', u'dropoffLocator', u'dropoffManip', u'dynAttenuationManip', u'dynBase (abstract)', u'dynController', u'dynGlobals', u'dynHolder', u'dynSpreadManip', u'dynamicConstraint', u'editMetadata', u'emitterManip', u'enableManip', u'entity (abstract)', u'envBall', u'envChrome', u'envCube', u'envFacade', u'envFog', u'envSky', u'envSphere', u'environmentFog', u'eulerToQuat', u'explodeNurbsShell', u'expression', u'extendCurve', u'extendCurveDistanceManip', u'extendSurface', u'extendSurfaceDistanceManip', u'extrude', u'extrudeManip', u'facade', u'ffBlendSrf', u'ffBlendSrfObsolete', u'ffFilletSrf', u'ffd', u'field (abstract)', u'fieldManip', u'fieldsManip', u'file', u'filletCurve', u'filter (abstract)', u'filterClosestSample', u'filterEuler', u'filterResample', u'filterSimplify', u'fitBspline', u'flexorShape', u'flow', u'fluidEmitter', u'fluidShape', u'fluidSliceManip', u'fluidTexture2D', u'fluidTexture3D', u'follicle', u'forceUpdateManip', u'fosterParent', u'fourByFourMatrix', u'fractal', u'frameCache', u'freePointManip', u'freePointTriadManip', u'gammaCorrect', u'geoConnectable', u'geoConnector', u'geometryConstraint', u'geometryFilter', u'geometryOnLineManip', u'geometryShape (abstract)', u'geometryVarGroup', u'globalCacheControl', u'globalStitch', u'gpuCache', u'granite', u'gravityField', u'greasePencilSequence', u'greasePlane', u'greasePlaneRenderShape', u'grid', u'groundPlane (abstract)', u'groupId', u'groupParts', u'guide', u'hairConstraint', u'hairSystem', u'hairTubeShader', u'hardenPoint', u'hardwareRenderGlobals', u'hardwareRenderingGlobals', u'heightField', u'hierarchyTestNode1', u'hierarchyTestNode2', u'hierarchyTestNode3', u'hikEffector', u'hikFKJoint', u'hikFloorContactMarker', u'hikGroundPlane', u'hikHandle', u'hikIKEffector', u'hikSolver', u'historySwitch', u'holdMatrix', u'hsvToRgb', u'hwReflectionMap', u'hwRenderGlobals', u'hwShader (abstract)', u'hyperGraphInfo', u'hyperLayout', u'hyperView', u'ik2Bsolver', u'ikEffector', u'ikHandle', u'ikMCsolver', u'ikPASolver', u'ikRPManip', u'ikRPsolver', u'ikSCsolver', u'ikSolver (abstract)', u'ikSplineManip', u'ikSplineSolver', u'ikSpringSolver', u'ikSystem', u'imagePlane', u'imageSource (abstract)', u'implicitBox', u'implicitCone', u'implicitSphere', u'indexManip', u'insertKnotCurve', u'insertKnotSurface', u'instancer', u'intersectSurface', u'inverseMatrix', u'isoparmManip', u'jiggle', u'joint', u'jointCluster', u'jointClusterManip', u'jointFfd', u'jointLattice', u'jointTranslateManip', u'keyframeRegionManip', u'keyingGroup', u'lambert', u'lattice', u'layeredShader', u'layeredTexture', u'leastSquaresModifier', u'leather', u'light (abstract)', u'lightFog', u'lightInfo', u'lightLinker', u'lightList', u'lightManip', u'limitManip', u'lineManip', u'lineModifier', u'locator', u'lodGroup', u'lodThresholds', u'loft', u'lookAt', u'luminance', u'makeCircularArc (abstract)', u'makeGroup', u'makeIllustratorCurves', u'makeNurbCircle', u'makeNurbCone', u'makeNurbCube', u'makeNurbCylinder', u'makeNurbPlane', u'makeNurbSphere', u'makeNurbTorus', u'makeNurbsSquare', u'makeTextCurves', u'makeThreePointCircularArc', u'makeThreePointCircularArcManip', u'makeTwoPointCircularArc', u'makeTwoPointCircularArcManip', u'mandelbrot', u'mandelbrot3D', u'manip2D (abstract)', u'manip2DContainer', u'manip3D (abstract)', u'manipContainer', u'mapVizShape', u'marble', u'markerManip', u'materialFacade', u'materialInfo', u'membrane', u'mentalrayCCMeshProxy', u'mentalrayCurveApprox', u'mentalrayDisplaceApprox', u'mentalrayFramebuffer', u'mentalrayGlobals', u'mentalrayIblShape', u'mentalrayItemsList', u'mentalrayLightProfile', u'mentalrayOptions', u'mentalrayOutputPass', u'mentalrayPhenomenon', u'mentalrayRenderPass', u'mentalrayShader', u'mentalraySubdivApprox', u'mentalraySurfaceApprox', u'mentalrayTessellation', u'mentalrayText', u'mentalrayTexture', u'mentalrayUserBuffer', u'mentalrayUserData', u'mentalrayVertexColors', u'mesh', u'meshVarGroup', u'mi_bump_flakes', u'mi_car_paint_phen', u'mi_car_paint_phen_x', u'mi_car_paint_phen_x_passes', u'mi_metallic_paint', u'mi_metallic_paint_output_mixer', u'mi_metallic_paint_x', u'mi_metallic_paint_x_passes', u'mia_ciesky', u'mia_envblur', u'mia_exposure_photographic', u'mia_exposure_photographic_rev', u'mia_exposure_simple', u'mia_lens_bokeh', u'mia_light_surface', u'mia_material', u'mia_material_x', u'mia_material_x_passes', u'mia_photometric_light', u'mia_physicalsky', u'mia_physicalsun', u'mia_portal_light', u'mia_roundcorners', u'mib_amb_occlusion', u'mib_bent_normal_env', u'mib_blackbody', u'mib_bump_basis', u'mib_bump_map', u'mib_bump_map2', u'mib_cie_d', u'mib_color_alpha', u'mib_color_average', u'mib_color_intensity', u'mib_color_interpolate', u'mib_color_mix', u'mib_color_spread', u'mib_continue', u'mib_data_bool', u'mib_data_bool_array', u'mib_data_color', u'mib_data_color_array', u'mib_data_get_bool', u'mib_data_get_color', u'mib_data_get_int', u'mib_data_get_scalar', u'mib_data_get_shader', u'mib_data_get_shader_bool', u'mib_data_get_shader_color', u'mib_data_get_shader_int', u'mib_data_get_shader_scalar', u'mib_data_get_shader_vector', u'mib_data_get_string', u'mib_data_get_texture', u'mib_data_get_vector', u'mib_data_int', u'mib_data_int_array', u'mib_data_scalar', u'mib_data_scalar_array', u'mib_data_shader', u'mib_data_shader_array', u'mib_data_string', u'mib_data_string_array', u'mib_data_texture', u'mib_data_texture_array', u'mib_data_vector', u'mib_data_vector_array', u'mib_dielectric', u'mib_fast_occlusion', u'mib_fg_occlusion', u'mib_geo_add_uv_texsurf', u'mib_geo_cone', u'mib_geo_cube', u'mib_geo_cylinder', u'mib_geo_instance', u'mib_geo_instance_mlist', u'mib_geo_sphere', u'mib_geo_square', u'mib_geo_torus', u'mib_glossy_reflection', u'mib_glossy_refraction', u'mib_illum_blinn', u'mib_illum_cooktorr', u'mib_illum_hair', u'mib_illum_lambert', u'mib_illum_phong', u'mib_illum_ward', u'mib_illum_ward_deriv', u'mib_lens_clamp', u'mib_lens_stencil', u'mib_light_infinite', u'mib_light_photometric', u'mib_light_point', u'mib_light_spot', u'mib_lightmap_sample', u'mib_lightmap_write', u'mib_lookup_background', u'mib_lookup_cube1', u'mib_lookup_cube6', u'mib_lookup_cylindrical', u'mib_lookup_spherical', u'mib_map_get_color', u'mib_map_get_integer', u'mib_map_get_integer_array', u'mib_map_get_scalar', u'mib_map_get_scalar_array', u'mib_map_get_transform', u'mib_map_get_vector', u'mib_opacity', u'mib_passthrough_bump_map', u'mib_photon_basic', u'mib_ptex_lookup', u'mib_ray_marcher', u'mib_reflect', u'mib_refract', u'mib_refraction_index', u'mib_shadow_transparency', u'mib_texture_checkerboard', u'mib_texture_filter_lookup', u'mib_texture_lookup', u'mib_texture_lookup2', u'mib_texture_polkadot', u'mib_texture_polkasphere', u'mib_texture_remap', u'mib_texture_rotate', u'mib_texture_turbulence', u'mib_texture_vector', u'mib_texture_wave', u'mib_transparency', u'mib_twosided', u'mib_volume', u'mila_5layers', u'mila_5layers_phen', u'mila_adapter', u'mila_diffuse', u'mila_emission', u'mila_fastsss', u'mila_flakes_adapter', u'mila_get_normal', u'mila_layers', u'mila_material', u'mila_material_std', u'mila_reflection', u'mila_refraction', u'mila_translucency', u'mila_transparency', u'mip_binaryproxy', u'mip_cameramap', u'mip_card_opacity', u'mip_fgshooter', u'mip_gamma_gain', u'mip_grayball', u'mip_matteshadow', u'mip_matteshadow_mtl', u'mip_mirrorball', u'mip_motion_vector', u'mip_motionblur', u'mip_rayswitch', u'mip_rayswitch_advanced', u'mip_rayswitch_environment', u'mip_rayswitch_stage', u'mip_render_subset', u'misss_call_shader', u'misss_fast_lmap_maya', u'misss_fast_shader', u'misss_fast_shader2', u'misss_fast_shader2_x', u'misss_fast_shader_x', u'misss_fast_shader_x_passes', u'misss_fast_simple_maya', u'misss_fast_skin_maya', u'misss_fast_skin_phen', u'misss_fast_skin_phen_d', u'misss_lambert_gamma', u'misss_lightmap_phen', u'misss_lightmap_write', u'misss_mia_skin2_phen', u'misss_mia_skin2_phen_d', u'misss_mia_skin2_surface_phen', u'misss_physical', u'misss_physical_phen', u'misss_set_normal', u'misss_skin_specular', u'motionPath', u'motionPathManip', u'motionTrail', u'motionTrailShape', u'mountain', u'moveBezierHandleManip', u'moveVertexManip', u'movie', u'mpBirailSrf', u'multDoubleLinear', u'multMatrix', u'multilisterLight', u'multiplyDivide', u'mute', u'nBase (abstract)', u'nCloth', u'nComponent', u'nParticle', u'nRigid', u'nearestPointOnCurve', u'network', u'newtonField', u'newtonManip', u'node (abstract)', u'noise', u'nonAmbientLightShapeNode (abstract)', u'nonExtendedLightShapeNode (abstract)', u'nonLinear', u'normalConstraint', u'nucleus', u'nurbsCurve', u'nurbsCurveToBezier', u'nurbsDimShape (abstract)', u'nurbsSurface', u'nurbsTessellate', u'nurbsToSubdiv', u'nurbsToSubdivProc', u'objectAttrFilter', u'objectBinFilter', u'objectFilter', u'objectMultiFilter', u'objectNameFilter', u'objectRenderFilter', u'objectScriptFilter', u'objectSet', u'objectTypeFilter', u'ocean', u'oceanShader', u'offsetCos', u'offsetCosManip', u'offsetCurve', u'offsetCurveManip', u'offsetSurface', u'offsetSurfaceManip', u'oldBlindDataBase', u'oldGeometryConstraint', u'oldNormalConstraint', u'oldTangentConstraint', u'opticalFX', u'orientConstraint', u'orientationMarker', u'orthoGrid (abstract)', u'oversampling_lens', u'pairBlend', u'paramDimension', u'parentConstraint', u'parentTessellate (abstract)', u'parti_volume', u'parti_volume_photon', u'particle', u'particleAgeMapper', u'particleCloud', u'particleColorMapper', u'particleIncandMapper', u'particleSamplerInfo', u'particleTranspMapper', u'partition', u'passContributionMap', u'passMatrix', u'path_material', u'pfxGeometry (abstract)', u'pfxHair', u'pfxToon', u'phong', u'phongE', u'physical_lens_dof', u'physical_light', u'pivot2dManip', u'pivotAndOrientManip', u'place2dTexture', u'place3dTexture', u'planarProjManip', u'planarTrimSurface', u'plane (abstract)', u'plusMinusAverage', u'pointConstraint', u'pointEmitter', u'pointLight', u'pointMatrixMult', u'pointOnCurveInfo', u'pointOnCurveManip', u'pointOnLineManip', u'pointOnPolyConstraint', u'pointOnSurfManip', u'pointOnSurfaceInfo', u'pointOnSurfaceManip', u'poleVectorConstraint', u'polyAppend', u'polyAppendVertex', u'polyAutoProj', u'polyAutoProjManip', u'polyAverageVertex', u'polyBase (abstract)', u'polyBevel', u'polyBlindData', u'polyBoolOp', u'polyBridgeEdge', u'polyChipOff', u'polyCloseBorder', u'polyCollapseEdge', u'polyCollapseF', u'polyColorDel', u'polyColorMod', u'polyColorPerVertex', u'polyCone', u'polyConnectComponents', u'polyCopyUV', u'polyCrease', u'polyCreaseEdge', u'polyCreateFace', u'polyCreateToolManip', u'polyCreator (abstract)', u'polyCube', u'polyCut', u'polyCutManip', u'polyCutManipContainer', u'polyCylProj', u'polyCylinder', u'polyDelEdge', u'polyDelFacet', u'polyDelVertex', u'polyDuplicateEdge', u'polyEdgeToCurve', u'polyEditEdgeFlow', u'polyExtrudeEdge', u'polyExtrudeFace', u'polyExtrudeManip', u'polyExtrudeManipContainer', u'polyExtrudeVertex', u'polyFlipEdge', u'polyFlipUV', u'polyHelix', u'polyHoleFace', u'polyLayoutUV', u'polyMapCut', u'polyMapDel', u'polyMapSew', u'polyMapSewMove', u'polyMappingManip', u'polyMergeEdge', u'polyMergeFace', u'polyMergeUV', u'polyMergeVert', u'polyMergeVertsManip', u'polyMirror', u'polyModifier (abstract)', u'polyModifierManip', u'polyModifierUV (abstract)', u'polyModifierWorld (abstract)', u'polyMoveEdge', u'polyMoveFace', u'polyMoveFacetUV', u'polyMoveUV', u'polyMoveUVManip', u'polyMoveVertex', u'polyMoveVertexManip', u'polyNormal', u'polyNormalPerVertex', u'polyNormalizeUV', u'polyOptUvs', u'polyPipe', u'polyPlanarProj', u'polyPlane', u'polyPlatonicSolid', u'polyPoke', u'polyPokeManip', u'polyPrimitive (abstract)', u'polyPrimitiveMisc', u'polyPrism', u'polyProj', u'polyProjManip', u'polyProjectCurve', u'polyPyramid', u'polyQuad', u'polyReduce', u'polySelectEditFeedbackManip', u'polySeparate', u'polySewEdge', u'polySmooth', u'polySmoothFace', u'polySmoothProxy', u'polySoftEdge', u'polySphProj', u'polySphere', u'polySpinEdge', u'polySplit', u'polySplitEdge', u'polySplitRing', u'polySplitToolManip1', u'polySplitVert', u'polyStraightenUVBorder', u'polySubdEdge', u'polySubdFace', u'polyToSubdiv', u'polyToolFeedbackManip', u'polyTorus', u'polyTransfer', u'polyTriangulate', u'polyTweak', u'polyTweakUV', u'polyUVRectangle', u'polyUnite', u'polyVertexNormalManip', u'polyWedgeFace', u'positionMarker', u'postProcessList', u'precompExport', u'primitive (abstract)', u'projectCurve', u'projectTangent', u'projectTangentManip', u'projection', u'projectionManip', u'projectionMultiManip', u'projectionUVManip', u'propModManip', u'propMoveTriadManip', u'proxyManager', u'psdFileTex', u'quadPtOnLineManip', u'quadShadingSwitch', u'quatAdd', u'quatConjugate', u'quatInvert', u'quatNegate', u'quatNormalize', u'quatProd', u'quatSub', u'quatToEuler', u'radialField', u'ramp', u'rampShader', u'rbfSrf', u'rbfSrfManip', u'rebuildCurve', u'rebuildSurface', u'record', u'rectangularLightLocator', u'reference', u'reflect (abstract)', u'remapColor', u'remapHsv', u'remapValue', u'renderBox', u'renderCone', u'renderGlobals', u'renderGlobalsList', u'renderLayer', u'renderLayerManager', u'renderLight (abstract)', u'renderPass', u'renderPassSet', u'renderQuality', u'renderRect', u'renderSphere', u'renderTarget', u'renderedImageSource', u'resolution', u'resultCurve (abstract)', u'resultCurveTimeToAngular', u'resultCurveTimeToLinear', u'resultCurveTimeToTime', u'resultCurveTimeToUnitless', u'reverse', u'reverseCurve', u'reverseCurveManip', u'reverseSurface', u'reverseSurfaceManip', u'revolve', u'revolveManip', u'revolvedPrimitive (abstract)', u'revolvedPrimitiveManip', u'rgbToHsv', u'rigidBody', u'rigidConstraint', u'rigidSolver', u'rock', u'rotateHelper', u'rotateLimitsManip', u'rotateManip', u'rotateUV2dManip', u'roundConstantRadius', u'roundConstantRadiusManip', u'roundRadiusCrvManip', u'roundRadiusManip', u'sampler', u'samplerInfo', u'scaleConstraint', u'scaleLimitsManip', u'scaleManip', u'scaleUV2dManip', u'screenAlignedCircleManip', u'script', u'scriptManip', u'sculpt', u'selectionListOperator', u'sequenceManager', u'sequencer', u'setRange', u'shaderGlow', u'shadingDependNode (abstract)', u'shadingEngine', u'shadingMap', u'shape (abstract)', u'shellTessellate', u'shot', u'simpleTestNode', u'simpleVolumeShader', u'singleShadingSwitch', u'sketchPlane', u'skinBinding', u'skinCluster', u'smoothCurve', u'smoothTangentSrf', u'snapshot', u'snapshotShape', u'snow', u'softMod', u'softModHandle', u'softModManip', u'solidFractal', u'spBirailSrf', u'sphericalLightLocator', u'sphericalProjManip', u'spotCylinderManip', u'spotLight', u'spotManip', u'spring', u'squareSrf', u'squareSrfManip', u'stencil', u'stereoRigCamera', u'stitchAsNurbsShell', u'stitchSrf', u'stitchSrfManip', u'stroke', u'strokeGlobals', u'stucco', u'styleCurve', u'subCurve', u'subSurface', u'subdAddTopology', u'subdAutoProj', u'subdBase (abstract)', u'subdBlindData', u'subdCleanTopology', u'subdHierBlind', u'subdLayoutUV', u'subdMapCut', u'subdMapSewMove', u'subdMappingManip', u'subdModifier (abstract)', u'subdModifierUV (abstract)', u'subdModifierWorld (abstract)', u'subdPlanarProj', u'subdProjManip', u'subdTweak', u'subdTweakUV', u'subdiv', u'subdivCollapse', u'subdivComponentId', u'subdivReverseFaces', u'subdivSurfaceVarGroup', u'subdivToNurbs', u'subdivToPoly', u'substance', u'substanceOutput', u'surfaceEdManip', u'surfaceInfo', u'surfaceLuminance', u'surfaceSampler', u'surfaceShader', u'surfaceShape (abstract)', u'surfaceVarGroup', u'symmetryConstraint', u'tangentConstraint', u'texBaseDeformManip (abstract)', u'texLattice', u'texLatticeDeformManip', u'texMoveShellManip', u'texSmoothManip', u'texSmudgeUVManip', u'textButtonManip', u'textManip2D', u'texture2d (abstract)', u'texture3d (abstract)', u'texture3dManip', u'textureBakeSet', u'textureEnv (abstract)', u'textureToGeom', u'threadedDevice (abstract)', u'time', u'timeFunction', u'timeToUnitConversion', u'timeWarp', u'toggleManip', u'toggleOnLineManip', u'toolDrawManip', u'toolDrawManip2D', u'toonLineAttributes', u'towPointOnCurveManip', u'towPointOnSurfaceManip', u'trans2dManip', u'transUV2dManip', u'transferAttributes', u'transform', u'transformGeometry', u'translateLimitsManip', u'translateManip', u'translateUVManip', u'transmat', u'transmat_photon', u'transposeMatrix', u'trim', u'trimManip', u'trimWithBoundaries', u'triplanarProjManip', u'tripleShadingSwitch', u'trsInsertManip', u'trsManip', u'turbulenceField', u'turbulenceManip', u'tweak', u'uniformField', u'unitConversion', u'unitToTimeConversion', u'unknown', u'unknownDag', u'unknownTransform', u'untrim', u'useBackground', u'user_ibl_env', u'user_ibl_rect', u'uv2dManip', u'uvChooser', u'vectorProduct', u'vectorRenderGlobals', u'vertexBakeSet', u'viewColorManager', u'volumeAxisField', u'volumeBindManip', u'volumeFog', u'volumeLight', u'volumeNoise', u'volumeShader', u'vortexField', u'water', u'weightGeometryFilter', u'wire', u'wood', u'wrap', u'writeToColorBuffer', u'writeToDepthBuffer', u'writeToFrameBuffer (abstract)', u'writeToLabelBuffer', u'writeToVectorBuffer', u'wtAddMatrix', u'xformManip'] #\n    # Trickier example using Python capabilities to get node types starting with 'l'\n    [item for item in pm.allNodeTypes(includeAbstract=True) if item[0].lower() == 'l']\n    # Result: [u'lambert', u'lattice', u'layeredShader', u'layeredTexture', u'leastSquaresModifier', u'leather', u'light (abstract)', u'lightFog', u'lightInfo', u'lightLinker', u'lightList', u'lightManip', u'limitManip', u'lineManip', u'lineModifier', u'locator', u'lodGroup', u'lodThresholds', u'loft', u'lookAt', u'luminance'] #", 
    "ambientLight": "    \n    \n    import pymel.core as pm\n    \n    # Create an ambientLight light\n    light = pm.ambientLight(intensity=0.8)\n    \n    # Change the light intensity\n    pm.ambientLight( light, e=True, intensity=0.5 )\n    \n    # Query it\n    pm.ambientLight( light, q=True, intensity=True )\n    # Result: 0.5 #", 
    "angleBetween": "    \n    \n    import pymel.core as pm\n    \n    # To find the euler angle between these two vectors. The result is three\n    # angles in the current angular unit. In this example, the first vector\n    # must be rotated -63.434949 degrees about the X axis, 16.60155 degrees\n    # about the Y axis and -26.565051 degrees about the Z axis to achieve\n    # the second vector.\n    \n    pm.angleBetween( euler=True, v1=(0.0, 1.0, 2.0), v2=(1.0, 2.0, 0.0) )\n    # Result: [-63.43494882292202, 16.601549599020235, -26.565051177077994] #\n    \n    # To find the angle between these two vectors.  The result is an axis and\n    # an angle (in the current angular unit).  In this example, the first\n    # vector must be rotated 66.421822 degrees about the axis\n    # (-0.8728716, 0.4364358, -0.2182179) to achieve the second vector.\n    \n    pm.angleBetween( v1=(0.0, 1.0, 2.0), v2=(1.0, 2.0, 0.0) )\n    # Result: [-0.8728715609439698, 0.4364357804719849, -0.21821789023599245, 66.42182152179817] #\n    \n    # How to create a dependency node that calculates the angle between two\n    # vectors. This example shows how the (x,z) position of a sphere\n    # can be used to control the rotate factors (about y) of a cone shape.\n    \n    angleBtwnNode = pm.angleBetween(v1=(1, 0, 0), v2=(1, 0, 0), ch=True)\n    sphere = pm.sphere()\n    pm.move( 5, 0, 5, sphere[0] )\n    pm.connectAttr( sphere[0]+'.translateX', angleBtwnNode+'.vector2X' )\n    pm.connectAttr( sphere[0]+'.translateZ', angleBtwnNode+'.vector2Z' )\n    \n    cone = pm.cone( ch=False )\n    convert = pm.createNode( 'unitConversion' )\n    pm.connectAttr( angleBtwnNode+'.eulerY', convert+'.input' )\n    pm.connectAttr( convert+'.output', cone[0]+'.rotateY' )", 
    "animCurveEditor": "    \n    \n    import pymel.core as pm\n    \n    # Check to see if the \"default\" graph editor has been created\n    #\n    pm.animCurveEditor( 'graphEditor1GraphEd', exists=True )\n    # Result: True #\n    # Show result curves\n    #\n    pm.animCurveEditor( 'graphEditor1GraphEd', edit=True, showResults='on' )\n    # Result: u'graphEditor1GraphEd' #\n    # Decrease the sampling rate for the result curves\n    #\n    pm.animCurveEditor( 'graphEditor1GraphEd', edit=True, resultSamples=5 )\n    # Result: u'graphEditor1GraphEd' #\n    \n    # Constrain all Graph Editor animation curve traversals to the X-axis\n    #\n    pm.animCurveEditor( 'graphEditor1GraphEd', edit=True, constrainDrag=1 )\n    # Result: u'graphEditor1GraphEd' #", 
    "animDisplay": "    \n    \n    import pymel.core as pm\n    \n    # If the current time unit were ntsc (30 frames per\n    # second) frame 50 would be displayed as \"00:00:01:20\".\n    #\n    pm.animDisplay( timeCode=True )\n    \n    \n    # Set the display option so that interactive operations\n    # in the graph editor or dope sheet will cause the\n    # model views to be updated simultaneously\n    #\n    pm.animDisplay( modelUpdate=\"interactive\" )", 
    "animLayer": "    \n    \n    import pymel.core as pm\n    \n    pm.animLayer(\"layer1\", mute=True, solo=True, override=True, passthrough=False, lock=True)\n    # Result: nt.AnimLayer(u'layer1') #\n    pm.animLayer(\"layer1\", query=True, mute=True)\n    # Result: True #\n    pm.animLayer(\"layer1\", query=True, solo=True)\n    # Result: True #\n    pm.animLayer(\"layer1\", query=True, override=True)\n    # Result: True #\n    pm.animLayer(\"layer1\", query=True, passthrough=True)\n    # Result: False #\n    pm.animLayer(\"layer1\", query=True, lock=True)\n    # Result: True #\n    pm.animLayer(\"layer1\", query=True, parent=True)\n    # Result: nt.AnimLayer(u'BaseAnimation') #", 
    "animView": "    \n    \n    import pymel.core as pm\n    \n    # Look at the area between 0 and 5 seconds, and the range 0 - 100\n    pm.animView( 'graphView', startTime='0sec', endTime='5sec', minValue=0, maxValue=100 )", 
    "annotate": "    \n    \n    import pymel.core as pm\n    \n    # The following specifies an annotation with text \"my annotation text\" on\n    # object mySphere, with the text being centered at point [5,6,3].\n    pm.sphere( name='mySphere' )\n    # Result: [nt.Transform(u'mySphere'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.annotate( 'mySphere', tx='my annotation text', p=(5, 6, 5) )\n    # Result: nt.AnnotationShape(u'annotationShape1') #", 
    "applyAttrPattern": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.polySphere( name=\"sphere1\" )\n    # Result: [nt.Transform(u'sphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.applyAttrPattern( patternName=\"myXMLPattern\" )\n    // Result: 1 //\n    name2 = pm.polySphere( name=\"sphere2\" )\n    name3 = pm.polySphere( name=\"sphere3\" )\n    pm.select( [name2, name3] )\n    pm.applyAttrPattern( patternName=\"myXMLPattern\" )\n    // Result: 2 //\n    pm.applyAttrPattern( patternName=\"myXMLPattern\", nodeType=\"transform\" )\n    // Result: 1 //", 
    "applyMetadata": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pNode = pm.polyPlane( name='p' )\n    # Create a sample structure\n    pm.dataStructure( format='raw', asString='name=IdStruct:int32=ID' )\n    # Result: u'IdStruct' #\n    # Apply some metadata based on the defined structure to the created mesh\n    # Normally you'll only see these in Maya files but it can be used from the\n    # command line.\n    pm.applyMetadata( pNode, value=\"channel face\\nstream\\nIdStream\\nIdStruct\\n0\\n99\\n1\\n999\\n2\\n9999\\nendStream\\nendChannel\\nendAssociations\" )\n    # Return: 1 #", 
    "applyTake": "    \n    \n    import pymel.core as pm\n    \n    #    Apply all of the recorded data to param curves.\n    pm.applyTake()\n    \n    #    Applies the takes from clock and ultra devices and starts the\n    #    data at anim time 100.\n    pm.applyTake( d=('clock', 'ultra'), st=100 )\n    \n    #    Applies the take from the ultra device and uses the euler and\n    #    simplify filters.\n    pm.applyTake( d='ultra', f=('euler', 'simplify') )\n    \n    #    Applies only the shoulder channel and all of its children.\n    pm.applyTake( d='ultra', c='shoulder', sc=True, rc=True )", 
    "arcLenDimContext": "    \n    \n    import pymel.core as pm\n    \n    pm.arcLenDimContext()\n    # Result: u'arcLenDimContext1' #", 
    "arcLengthDimension": "    \n    \n    import pymel.core as pm\n    \n    # Measure the arcLength of curve curveShape1 at u = 0.5\n    pm.curve( d=3, p=((-9.3, 0, 3.2), (-4.2, 0, 5.0), (6.0, 0, 8.6), (2.1, 0, -1.9)), k=(0, 0, 0, 1, 2, 2));\n    pm.arcLengthDimension( 'curveShape1.u[0.5]' )\n    # Result: nt.ArcLengthDimension(u'curveShape1->arcLengthDimensionShape1') #\n    \n    # Measure the arcLength of sphere nurbsSphere1 at u = 0.5 and v = 0.5\n    pm.sphere();\n    pm.arcLengthDimension( 'nurbsSphere1.uv[0.5][0.5]' );", 
    "arclen": "    \n    \n    import pymel.core as pm\n    \n    pm.arclen( 'curve1' )\n    # This command returns a float value that is the length of curve1 in\n    # the current linear units.\n    \n    curveInfoNode = pm.arclen('curve1', ch=True)\n    pm.expression( s= 'surface1.sx = %s.arcLength' %  curveInfoNode )\n    # The first command produces a curve info node for curve1 and returns\n    # the name of the curve info node.  The second command shows how the\n    # arc length attribute of the curve info node can be used to set up\n    # an expression, ie. it drives one of the scale factors of surface1.\n    #\n    # Note the expression command still only creates MEL expressions, although they can\n    # be called from Python.", 
    "arrayMapper": "    \n    \n    import pymel.core as pm\n    \n    pm.arrayMapper( target='particle1', destAttr='rgbPP', inputV='ageNormalized', type='ramp' )", 
    "art3dPaintCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new 3d paint context, then switch to it\n    pm.art3dPaintCtx('art3dPaintCtx1')\n    # Result: u'art3dPaintCtx1' #\n    pm.setToolTo('art3dPaintCtx1')\n    \n    # Set art3dPaintCtx1's radius to 2.0, lowerradius to 0.5\n    pm.art3dPaintCtx('art3dPaintCtx1', edit=True, r=2.0, lr=0.5)\n    # Result: u'art3dPaintCtx1' #", 
    "artAttr": "", 
    "artAttrCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new Attribute Paint Tool context, then switch to it\n    pm.artAttrCtx('artAttrCtx1')\n    # Result: u'artAttrCtx1' #\n    pm.setToolTo('artAttrCtx1')\n    \n    # Set brush's radius to 2.0, lower radius to 0.5\n    pm.artAttrCtx('artAttrCtx1', edit=True, r=2.0, lr=0.5)\n    # Result: u'artAttrCtx1' #", 
    "artAttrPaintVertexCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new vertexAttr paint context, then switch to it\n    pm.artAttrPaintVertexCtx('artAttrPaintVertexCtx1')\n    # Result: u'artAttrPaintVertexCtx1' #\n    pm.setToolTo('artAttrPaintVertexCtx1')", 
    "artAttrSkinPaint": "", 
    "artAttrSkinPaintCmd": "", 
    "artAttrSkinPaintCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new skinAttr paint context, then switch to it\n    pm.artAttrSkinPaintCtx('artAttrSkinPaintCtx1')\n    # Result: u'artAttrSkinPaintCtx1' #\n    pm.setToolTo('artAttrSkinPaintCtx1')\n    \n    # Set the edit weight operation to \"smooth\"\n    pm.artAttrSkinPaintCtx('artAttrSkinPaintCtx1', edit=True, sao='smooth')\n    # Result: u'artAttrSkinPaintCtx1' #", 
    "artAttrTool": "    \n    \n    import pymel.core as pm\n    \n    # Add a tool named \"customtoolPaint\" to the list of\n    # attribute painting tools, then creates a new context called\n    # \"customtoolPaintContext\" which utilises the \"customtoolPaint\" tool.\n    #\n    pm.artAttrTool( add='customtoolPaint' )\n    # Result: u'customtoolPaint' #\n    pm.artAttrCtx( 'customtoolPaintContext', whichTool='customtoolPaint' )\n    # Result: u'customtoolPaintContext' #\n    # List all tools currently defined.\n    #\n    pm.artAttrTool( query=True )\n    # Result: [u'general', u'blendShapeWeights', u'skinWeights', u'userPaint', u'colorPerVertex', u'artClothPaint', u'artClothCollPaint', u'fluid', u'putty', u'cacheFileWeights', u'NClothPaint', u'NComponentPaint', u'customtoolPaint'] #", 
    "artBaseCtx": "", 
    "artBuildPaintMenu": "    \n    \n    import pymel.core as pm\n    \n    # build a list of paintable attributes for the selected item(s)\n    #\n    pm.artBuildPaintMenu();", 
    "artFluidAttr": "", 
    "artFluidAttrCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new fluidAttr paint context, then switch to it\n    pm.artFluidAttrCtx('artFluidAttrCtx1')\n    # Result: u'artFluidAttrCtx1' #\n    pm.setToolTo('artFluidAttrCtx1')\n    \n    # Set to paint the color property on the fluid\n    pm.artFluidAttrCtx('artFluidAttrCtx1', edit=True, property='color')\n    # Result: u'artFluidAttrCtx1' #", 
    "artPuttyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Set the brush radius to 20.0\n    pm.artPuttyCtx( 'artPuttyContext', e=True, radius=20.00  )\n    \n    # Set the display of additional brush feedback\n    pm.artPuttyCtx( 'artPuttyContext', e=True, brushfeedback=True )", 
    "artSelect": "", 
    "artSelectCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new select context, then switch to it\n    pm.artSelectCtx('artSelectCtx1')\n    # Result: u'artSelectCtx1' #\n    pm.setToolTo('artSelectCtx1')\n    \n    # Set brush's radius to 2.0, lower radius to 0.5\n    pm.artSelectCtx('artSelectCtx1', edit=True, r=2.0, lr=0.5)\n    # Result: u'artSelectCtx1' #", 
    "artSetPaint": "", 
    "artSetPaintCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new set membership paint context, then switch to it\n    pm.artSetPaintCtx('artSetPaintCtx1')\n    # Result: u'artSetPaintCtx1' #\n    pm.setToolTo('artSetPaintCtx1')\n    \n    # Set brush's radius to 2.0, lower radius to 0.5\n    pm.artSetPaintCtx('artSetPaintCtx1', edit=True, r=2.0, lr=0.5)\n    # Result: u'artSetPaintCtx1' #", 
    "artUserPaintCtx": "    \n    \n    import pymel.core as pm\n    \n    # create the context\n    pm.artUserPaintCtx('artUserPaintCtx')\n    # Result: u'artUserPaintCtx' #\n    \n    # set the init mel script\n    pm.artUserPaintCtx( 'artUserPaintCtx', e=True, ic='spherePaint' )\n    # Result: u'artUserPaintCtx' #", 
    "assembly": "    \n    \n    import pymel.core as pm\n    \n    #Create a default type of assembly and name it MyAssembly.\n    #The assembly name is optional.\n    #\n    pm.assembly(name='MyAssembly')\n    # Result: nt.AssemblyDefinition(u'MyAssembly') #\n    #Create an assembly of type MyAssemblyType and name it MyAssembly.\n    #\n    pm.assembly(name='MyAssembly', type='MyAssemblyType')\n    #Set the default type to be MyAssemblyType.\n    #\n    pm.assembly(edit=True, defaultType='MyAssemblyType')\n    #Create a representation of type \"MyRepType\", on assembly myAssembly, and\n    #name it \"MyRepName\"\n    #\n    pm.assembly(myAssembly, edit=True, createRepresentation='MyRepType',\n                  repName='MyRepName')\n    #Rename representation \"MyRepName\" to \"MyNewRepName\" on assembly myAssembly.\n    #\n    pm.assembly(myAssembly, edit=True, renameRepresentation='MyRepName',\n                          repName='MyNewRepName')\n    #Set the procedure that provides the representation type label for\n    #an assembly type.\n    #\n    pm.assembly(edit=True, repTypeLabelProc='MyRepTypeLabelQuery', type='MyAssembly')\n    #Set the label for the default assembly type.\n    #\n    pm.assembly(edit=True, label='My Assembly Type')\n    #Set the procedure that provides the representation type list which the\n    #default assembly supports.\n    #\n    pm.assembly(edit=True, listRepTypesProc='MyRepTypesProc')\n    #Set the pre-create UI procedure for a representation type, for a\n    #specific type of assembly.\n    #\n    pm.assembly(edit=True, repPreCreateUIProc='MyRepresentation', proc='MyPreCreateProcedure', type='MyAssembly')\n    #Set the post-create UI procedure for a representation type, for the\n    #default assembly type.\n    #\n    pm.assembly(edit=True, repPostCreateUIProc='MyRepresentation', proc='MyPostCreateProcedure' )", 
    "assignCommand": "    \n    \n    import pymel.core as pm\n    \n    # Print out all the names of the named command objects and the\n    # hotkey attached to them.\n    #\n    count = pm.assignCommand(query=True, numElements=True)\n    print ('There are ' + str(count) + ' named command objects.')\n    \n    for index in range(1, count+1):\n            keyString = pm.assignCommand(index, query=True, keyString=True)\n    \n            displayString = '(';\n    \n            if 0 \" len(keyString):\n                    if \"1\" == keyString[2]: displayString += 'Ctrl+'\n                    if \"1\" == keyString[1]: displayString += 'Alt+'\n                    if \"1\" == keyString[4]: displayString += 'Command+'\n    \n                    displayString += keyString[0]\n    \n                    if \"1\" == keyString[3]: displayString += ' Release'\n    \n            displayString += ')'\n    \n            print pm.assignCommand(index, query=True, name=True), displayString", 
    "assignInputDevice": "    \n    \n    import pymel.core as pm\n    \n    pm.assignInputDevice( 'setKeyframe', d='spaceball', c='Button1' )\n    \n    # This command will assign button1 on the spaceball with\n    # the setKeyframe command.  This is very much like using\n    # the spaceball buttons as hotkeys.\n    \n    pm.assignInputDevice( '\"currentTime -e Axis0\"', d='midi', ct=True, m=True )\n    \n    # This command will execute the command to set the time\n    # to the value of the first midi slider.  As the slider\n    # moves this command will be executed.  So the slider\n    # will control time.", 
    "assignViewportFactories": "    \n    \n    import pymel.core as pm\n    \n    # To set the viewport factories for all dgs_material nodes.\n    #\n    pm.assignViewportFactories( materialFactory='MentalRayMaterial', textureFactory='MentalRayTexture', nodeType='dgs_material' )", 
    "attachCurve": "    \n    \n    import pymel.core as pm\n    \n    # Attach the curves and remove the multiple knots:\n    pm.attachCurve( 'curve1', 'curve2', kmk=False )", 
    "attachDeviceAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.attachDeviceAttr( 'surface1.translateX', d='spaceball', ax='XAxis' )\n    \n    # This command will assign the XAxis of the spaceball to\n    # the translateX attribute of surface1.  This\n    # assignment is independent of the selection list (i.e.\n    # if surface1 was selected when the command is executed,\n    # surface1 will be translated by the spaceball regardless\n    # of the current selection.)\n    \n    pm.attachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )\n    \n    # This command will assign the XAxis of the spaceball to\n    # the translateX attribute of the selected objects.\n    \n    pm.attachDeviceAttr( d='wacom', ax='puck:X', c='puckButton1', at='translateX', sl=True )\n    pm.attachDeviceAttr( d='wacom', ax='puck:Y', c='puckButton1', at='translateY', sl=True )\n    \n    # This command will attach the wacom puck X and Y axes to the\n    # X and Y translate attributes of the selected items.\n    # When the selection changes so does the attachment.\n    # The -c option means you can only move the selected items\n    # with the puck when button1 on the puck is down.", 
    "attachSurface": "    \n    \n    import pymel.core as pm\n    \n    # Attach the nurbs planes (in the default U direction) and remove the\n    # multiple knots:\n    pm.attachSurface( 'nurbsPlane1', 'nurbsPlane2', kmk=False )\n    \n    # Attach the two active surfaces along the v direction (keeps multiple\n    # knots by default):\n    pm.attachSurface( du=False )", 
    "attrColorSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window( title='Attr Field Slider Groups' )\n    # Result: ui.Window('window1') #\n    objName = pm.shadingNode('phong', asShader=True)\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout3') #\n    pm.attrColorSliderGrp( at='%s.color' % objName )\n    # Result: ui.AttrColorSliderGrp('window1|columnLayout3|attrColorSliderGrp1') #\n    pm.showWindow()", 
    "attrCompatibility": "    \n    \n    import pymel.core as pm\n    \n    # Rename '.x' attributes in old files to '.tx' for all nodes\n    # of type 'transform'\n    #\n    pm.attrCompatibility( 'transform', 'x', r='tx' )\n    \n    # Rename the old 'group' node to the new 'transform' node\n    #\n    pm.attrCompatibility( 'group', nr='transform' )\n    \n    # This will cause all subsequent attrCompatibility calls to translate\n    # files from older versions to version 1.0.\n    #\n    pm.attrCompatibility( v='1.0' )", 
    "attrControlGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout4') #\n    pm.attrControlGrp( attribute='defaultResolution.width' )\n    # Result: ui.AttrControlGrp('window1|columnLayout4|attrFieldSliderGrp1') #\n    pm.showWindow()", 
    "attrEnumOptionMenu": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout5') #\n    node = pm.createNode('opticalFX')\n    attrib = node + '.glowType'\n    pm.attrEnumOptionMenu( label='Glow Type', attribute=attrib );\n    pm.showWindow( window )", 
    "attrEnumOptionMenuGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout6') #\n    pm.attrEnumOptionMenuGrp( l='Output Format',\n                                at='defaultRenderGlobals.imageFormat',\n                                ei=[(0, 'GIF'),(1, 'SoftImage'), (2, 'RLA'),\n                                    (3, 'TIFF'), (4, 'TIFF16'), (5, 'SGI'),\n                                    (6, 'Alias PIX'), (7, 'Maya IFF'), (8, 'JPEG'),\n                                    (9, 'EPS'), (10, 'Maya16 IFF'), (11, 'Cineon'),\n                                    (12, 'Quantel'), (13, 'SGI16'), (19, 'Targa'),\n                                    (20, 'BMP') ] )\n    pm.showWindow()", 
    "attrFieldGrp": "    \n    \n    import pymel.core as pm\n    \n    #    Create an object and a window containing an 'attrFieldGrp' that will\n    #    manipulate the position of that object.\n    #\n    object = pm.sphere()\n    window = pm.window(title='attrFieldGrp Example')\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout7') #\n    pm.attrFieldGrp( attribute='%s.translate' % object[0] )\n    # Result: ui.AttrFieldGrp('window1|columnLayout7|attrFieldGrp1') #\n    pm.showWindow()", 
    "attrFieldSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window( title='Attr Field Slider Groups' )\n    # Result: ui.Window('window1') #\n    objName = pm.sphere()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout8') #\n    pm.attrFieldSliderGrp( min=-10.0, max=10.0, at='%s.tx' % objName[0] )\n    # Result: ui.AttrFieldSliderGrp('window1|columnLayout8|attrFieldSliderGrp2') #\n    pm.showWindow()", 
    "attrNavigationControlGrp": "    \n    \n    import pymel.core as pm\n    \n    newNode = pm.shadingNode( 'blinn', asShader=True )\n    newNodeAttr = newNode + '.normalCamera'\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout9') #\n    pm.attrNavigationControlGrp( l='bump mapping', at=newNodeAttr )\n    # Result: ui.AttrNavigationControlGrp('window1|columnLayout9|attrNavigationControlGrp1') #\n    pm.showWindow()", 
    "attributeInfo": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'choice' )\n    # Result: nt.Choice(u'choice1') #\n    # Get the list of only hidden choice node attributes\n    #\n    pm.attributeInfo( h=True, t='choice' )\n    # Result: [u'message', u'isHistoricallyInteresting', u'binMembership'] #\n    # Get the list of all attributes on choice nodes\n    pm.attributeInfo( all=True, t='choice' )\n    # Result: [u'message', u'caching', u'isHistoricallyInteresting', u'nodeState', u'binMembership', u'selector', u'input', u'output', u'sampson', u'homeboy', u'midge', u'damien', u'elizabeth', u'sweetpea'] #\n    # Get the list of boolean or enumerated transform node attributes\n    #\n    pm.attributeInfo( b=True, e=True, t='transform' )\n    # Result: [u'caching', u'nodeState', u'isCollapsed', u'blackBox', u'isHierarchicalConnection', u'isHierarchicalNode', u'viewMode', u'uiTreatment', u'visibility', u'intermediateObject', u'template', u'ghosting', u'useObjectColor', u'overrideDisplayType', u'overrideLevelOfDetail', u'overrideShading', u'overrideTexturing', u'overridePlayback', u'overrideEnabled', u'overrideVisibility', u'lodVisibility', u'selectionChildHighlighting', u'layerRenderable', u'renderLayerRenderable', u'ghostingControl', u'rotateOrder', u'minTransXLimitEnable', u'minTransYLimitEnable', u'minTransZLimitEnable', u'maxTransXLimitEnable', u'maxTransYLimitEnable', u'maxTransZLimitEnable', u'minRotXLimitEnable', u'minRotYLimitEnable', u'minRotZLimitEnable', u'maxRotXLimitEnable', u'maxRotYLimitEnable', u'maxRotZLimitEnable', u'minScaleXLimitEnable', u'minScaleYLimitEnable', u'minScaleZLimitEnable', u'maxScaleXLimitEnable', u'maxScaleYLimitEnable', u'maxScaleZLimitEnable', u'inheritsTransform', u'displayHandle', u'displayScalePivot', u'displayRotatePivot', u'displayLocalAxis', u'dynamics', u'showManipDefault', u'rotationInterpolation', u'miDeriveFromMaya', u'miHide', u'miVisible', u'miTrace', u'miShadow', u'miCaustic', u'miGlobillum', u'miExportGeoShader', u'miProxyRenderable'] #\n    # Get the list of short names of enumerated attributes on a particular choice\n    # node.\n    #\n    pm.attributeInfo( 'choice1', s=True, e=True )\n    # Result: [u'nds'] #\n    # Result: message input output selector\n    # Get the list of hidden or internal attributes on one particular choice node\n    # using the UI name for the attributes (that is the one that will show up\n    # in the attribute editor).\n    #\n    pm.attributeInfo( 'choice1', ui=True, h=True, i=True )\n    # Result: [u'Message', u'Caching', u'Is Historically Interesting', u'Node State', u'Bin Membership'] #", 
    "attributeMenu": "    \n    \n    import pymel.core as pm\n    \n    pm.attributeMenu( 'nodeName', inputs=1, beginMenu=True, editor='editor' )\n    pm.attributeMenu( 'nodeName', inputs=0, beginMenu=True, editor='editor' )", 
    "attributeName": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.attributeName( \"persp.tx\" )\n    # Result: u'Translate X' #\n    pm.attributeName( \"persp.translateX\", s=True )\n    # Result: u'tx' #\n    pm.attributeName( \"persp.tx\", l=True )\n    # Result: u'translateX' #\n    pm.attributeName( \"nurbsSphere1.controlPoints[50].xv\", leaf=True )\n    // Result: xValue //\n    pm.attributeName( \"nurbsSphere1.controlPoints[50].xv\", leaf=False )\n    // Result: Control Points[50].X Value //", 
    "attributeQuery": "    \n    \n    import pymel.core as pm\n    \n    # Determine the hidden status of the \"selector\" attribute on choice nodes.\n    #\n    pm.attributeQuery( 'selector', typ='choice', h=True )\n    # Result: False #\n    # Result: 0\n    # Determine the hidden status of the \"selector\" attribute on this choice node.\n    # (Usually the same but you can do this for dynamic attributes too.)\n    #\n    pm.createNode( 'choice', n='whoIsIt' )\n    # Result: nt.Choice(u'whoIsIt') #\n    # Result: choice1\n    pm.attributeQuery( 'selector', n='whoIsIt', h=True )\n    # Result: False #\n    # Result: 0\n    # Determine the range of the selector value on choice nodes.\n    # In this case there is no range.\n    # Note, if there is only a minimum or only a maximum range will not set.\n    #\n    pm.attributeQuery( 'selector', typ='choice', range=True )\n    # For the next several examples create a poly cube and add extra attributes.\n    pm.polyCube( cuv=4, ch=1, w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0) )\n    pm.addAttr( '|pCube1', ln='egRange', at='long', min=0, max=5, dv=2 )\n    pm.setAttr( '|pCube1.egRange', e=True, keyable=False )\n    # Determine if an attribute is keyable\n    #\n    pm.attributeQuery( 'egRange', node='pCube1', k=True )\n    # Result: 0\n    # Determine the minimum and maximum values of the added attribute egRange\n    #\n    pm.attributeQuery( 'egRange', node='pCube1', range=True )\n    # Result: [0.0, 5.0]\n    # Determine if there is a minimum for the attribute.\n    # Note, having a minimum or maximum value does not imply the attribute has a range.\n    pm.addAttr( '|pCube1', ln='egMin', at='long', min=2 )\n    pm.attributeQuery( 'egMin', node='pCube1', minExists=True )\n    # Result: 1\n    pm.attributeQuery( 'egMin', node='pCube1', maxExists=True )\n    # Result: 0\n    pm.attributeQuery( 'egMin', node='pCube1', min=True )\n    # Result: [2.0]\n    # Determine if an attribute is an enum\n    # List the enum strings. This will use ':' as a separator like the attr is written in\n    # an .ma file.\n    pm.addAttr( '|pCube1', ln='myEnum', at='enum', en='chicken:turkey:duck:', ct='fowl' )\n    pm.attributeQuery( 'myEnum', node='pCube1', listEnum=True )\n    [u'chicken:turkey:duck']\n    # Secondary way to find an attribute's type directly\n    pm.attributeQuery( 'myEnum', node='pCube1', attributeType=True )\n    ['enum']\n    # See to which categories and attribute belongs\n    pm.attributeQuery( 'myEnum', node='pCube1', categories=True )\n    ['fowl']", 
    "audioTrack": "    \n    \n    import pymel.core as pm\n    \n    #  Move the audio clip named \"audio2\" to track 3\n    #\n    pm.audioTrack( 'audio2', track=3 )\n    # Lock the track containing the audio clip named \"audio1\"\n    #\n    pm.audioTrack( 'audio1', lock=True )\n    # Remove any empty tracks\n    #\n    pm.audioTrack(removeEmptyTracks=True)\n    # audioTrack -q -track audio1;\n    #\n    pm.audioTrack( 'audio1', q=True, track=True )", 
    "autoKeyframe": "    \n    \n    import pymel.core as pm\n    \n    # Start remembering attributes that have changed\n    #\n    pm.autoKeyframe( state=True )\n    # Result: True #\n    \n    # Set a keyframe for all attributes that have changed\n    # since the last \"autoKeyframe( state=True )\n    #\n    pm.autoKeyframe()\n    # Result: 0 #\n    \n    # Stop remembering attributes that have changed.\n    # Note that Subsequent \"autoKeyframe\" commands\n    # (with no flags) will have no effect until an\n    # autoKeyframe( state=True ) command is executed.\n    #\n    pm.autoKeyframe( state=False )\n    # Result: False #\n    \n    # When auto-keying, key all character attributes, not just\n    # those that have changed.\n    #\n    pm.autoKeyframe( characterOption=\"all\" )\n    # Result: u'all' #", 
    "autoPlace": "    \n    \n    import pymel.core as pm\n    \n    #    Move the scene around a bit so the grid is no longer\n    #    centered in the view.\n    #\n    pm.track( right=10 )\n    pm.track( down=10 )\n    \n    #    Create a sphere.\n    #\n    sphere = pm.sphere()\n    \n    #    Reposition the sphere so that it is in the center of the\n    #    view.\n    #\n    position = pm.autoPlace()\n    pm.move( position[0], position[1], position[2], sphere[0], relative=True )", 
    "autoSave": "    \n    \n    import pymel.core as pm\n    \n    # set the interval between auto-saves to 5 minutes\n    #\n    pm.autoSave( int=300 )\n    \n    # query the auto-save interval\n    #\n    pm.autoSave( q=True, int=True )\n    # Result: 300.0 #", 
    "bakeClip": "    \n    \n    import pymel.core as pm\n    \n    #    First create a simple character.\n    #\n    pm.cone( n='bakeCone' )\n    # Result: [nt.Transform(u'bakeCone'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.character( n='coneCharacter' )\n    # Result: nt.Character(u'coneCharacter') #\n    #    Create some animation.\n    #\n    pm.select( 'bakeCone', r=True )\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.setKeyframe( 'bakeCone.tx', v=0 )\n    # Result: 1 #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.setKeyframe( 'bakeCone.tx', v=10 )\n    # Result: 1 #\n    #     Make a clip.\n    #\n    pm.clip( 'coneCharacter', startTime=0, endTime=10, name='up' )\n    # Result: [u'up'] #\n    #    Create a second clip.\n    #\n    pm.select( 'bakeCone', r=True )\n    pm.currentTime( 15 )\n    # Result: 15.0 #\n    pm.setKeyframe( 'bakeCone.tx', v=15 )\n    # Result: 1 #\n    pm.currentTime( 25 )\n    # Result: 25.0 #\n    pm.setKeyframe( 'bakeCone.tx', v=0 )\n    # Result: 1 #\n    # Make a clip.\n    #\n    pm.clip( 'coneCharacter', startTime=15, endTime=25, name='down' )\n    # Result: [u'down'] #\n    # Blend the clips, with a linear weighting function.\n    #\n    scheduler = pm.character('coneCharacter', query=True, sc=True)\n    pm.clipSchedule( scheduler, b=(0, 1) )\n    blendNode = pm.clipSchedule( scheduler, q=True, bn=(0, 1))\n    pm.setKeyframe( blendNode[0], at='weight', t=0.0, v=0.0 )\n    # Result: 1 #\n    pm.setKeyframe( blendNode[0], at='weight', t=1.0, v=1.0 )\n    # Result: 1 #\n    #    Bake out the two clips and the blend.\n    #\n    pm.bakeClip( 'coneCharacter', ci=[0, 1], name='bakedUpAndDown' )\n    # Result: u'bakedUpAndDown1' #", 
    "bakePartialHistory": "    \n    \n    import pymel.core as pm\n    \n    # create a cylinder with history to use as an example\n    #\n    cyl = pm.polyCylinder()\n    pm.polySmooth()\n    # Result: [nt.PolySmoothFace(u'polySmoothFace1')] #\n    pm.cluster()\n    # Result: [nt.Cluster(u'cluster1'), nt.Transform(u'cluster1Handle')] #\n    pm.select( cyl[0],r=True )\n    pm.polyTriangulate()\n    # Result: [nt.PolyTriangulate(u'polyTriangulate1')] #\n    # query what will be baked\n    #\n    pm.bakePartialHistory( cyl[0],query=True,prePostDeformers=True )\n    # Result: [u'polyTriangulate1', u'pCylinderShape1Orig', u'polySmoothFace1', u'polyCylinder1'] #\n    # perform the bake, baking history from before and after the\n    # deformer\n    #\n    pm.bakePartialHistory( cyl[0],prePostDeformers=True )\n    # Result: [u'pCylinderShape1'] #\n    # Bake the history before the geometry cache on the cylinder.\n    # To actually demo, add a geometry cache before executing the command\n    # below.\n    #\n    pm.select( cyl[0],r=True )\n    pm.bakePartialHistory( cyl[0],preCache=True )\n    # Result: [u'pCylinderShape1'] #", 
    "bakeResults": "    \n    \n    import pymel.core as pm\n    \n    # To replace the set of nodes controlling the animation of\n    # surface1.translateX with a single animation animCurve, between the\n    # time interval 5-44, with a sampling frequency of 2 timeUnits, use the\n    # following command:\n    pm.bakeResults( 'surface1.translateX', t=(5,44), sb=2 )\n    \n    # This bakes the joints on a skeleton over the time interval 1-40.\n    pm.bakeResults( 'joint*', t=(1,40), simulation=True )", 
    "bakeSimulation": "    \n    \n    import pymel.core as pm\n    \n    # To replace the animation driven by an ik handle of joints,\n    # starting from joint1, with separate animCurves, within the\n    # time interval 5-44, with a sampling frequency of 2 timeUnits,\n    # use the following command:\n    #\n    pm.bakeSimulation( 'joint1', t=(5,44), sb=2, at=[\"rx\",\"ry\",\"rz\"], hi=\"below\" )", 
    "baseTemplate": "    \n    \n    import pymel.core as pm\n    \n    #    Determine if template exists\n    #\n    pm.baseTemplate ('foo.xml', exists=True)\n    # Result: False #\n    #", 
    "baseView": "    \n    \n    import pymel.core as pm\n    \n    # Obtain a list of all available views for template1\n    #\n    pm.baseView ( 'AEblinn', query=True, viewList=True);\n    #", 
    "batchRender": "    \n    \n    import pymel.core as pm\n    \n    pm.batchRender()\n    \n    pm.batchRender( 'mayafile' )", 
    "bevel": "    \n    \n    import pymel.core as pm\n    \n    # Bevel (one) active curve with a width and depth of 1.5:\n    pm.bevel( w=1.5, d=1.5 )\n    \n    # Create a single-sided bevel (at start) surface using the specified\n    # curve (with the default dimensions):\n    pm.bevel( 'curve1', ns=2 )", 
    "bevelPlus": "    \n    \n    import pymel.core as pm\n    \n    pm.circle()\n    # Result: [nt.Transform(u'nurbsCircle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.scale( 10, 10, 10, r=True )\n    pm.circle()\n    # Result: [nt.Transform(u'nurbsCircle2'), nt.MakeNurbCircle(u'makeNurbCircle2')] #\n    pm.scale( 5, 5, 5, r=True )\n    pm.bevelPlus( 'nurbsCircle1', 'nurbsCircle2', po=1, cap=4, outerStyle=2, innerStyle=4 )\n    # Result: [nt.Transform(u'bevelPolygon1'), nt.BevelPlus(u'bevelPlus1')] #", 
    "bezierAnchorPreset": "    \n    \n    import pymel.core as pm\n    \n    # Applies the \"Bezier\" anchor preset to all selected anchors\n    pm.bezierAnchorPreset( p=0 )\n    \n    # Applies the \"Bezier Corner\" anchor preset to all selected anchors\n    pm.bezierAnchorPreset( p=1 )\n    \n    # Applies the \"Corner\" anchor preset to all selected anchors\n    pm.bezierAnchorPreset( p=2 )", 
    "bezierAnchorState": "    \n    \n    import pymel.core as pm\n    \n    # Sets all selected anchors (or attached tangent handles) to smooth and uneven\n    pm.bezierAnchorState( sm=1, ev=0 )", 
    "bezierCurveToNurbs": "    \n    \n    import pymel.core as pm\n    \n    pm.bezierCurveToNurbs( )\n    # Result: [] #\n    # Converts call selected Bezier curves to NURBS curves.", 
    "bezierInfo": "    \n    \n    import pymel.core as pm\n    \n    # Queries the CV index of the anchor index 1\n    pm.bezierInfo( cfa=1 )\n    # Result: 3 #\n    \n    # Queries the anchor index of a CV index 3\n    pm.bezierInfo( afc=3 );", 
    "binMembership": "    \n    \n    import pymel.core as pm\n    \n    # Add a given node to a bin.\n    #\n    pm.binMembership( 'lambert1', addToBin='wood' )\n    # Add a selection of nodes to a given bin.\n    #\n    newLambertNode = pm.createNode('lambert')\n    list = (\"lambert1\", newLambertNode)\n    pm.binMembership( list, addToBin='grass' )\n    # Check if a node exists in a bin.\n    #\n    pm.binMembership( 'lambert1', exists='wood' )\n    # Result: True #\n    # Query and return all the nodes which belong to the bin.\n    #\n    newLambertNode = pm.createNode('lambert')\n    nodeList = (\"lambert1\", newLambertNode)\n    pm.binMembership( nodeList, query=True, listBins=True )\n    # Result: [u'wood', u'grass'] #\n    # Make the nodes belong exclusively in bin \"wood\".\n    #\n    newLambertNode = pm.createNode('lambert')\n    nodeList = (\"lambert1\", newLambertNode)\n    pm.binMembership( nodeList, makeExclusive='wood' )\n    # Let the dest node inherit bins from nodes in the src node list.\n    # The dest node is specified by the \"inheritBinsFromNodes\" flag's\n    # argument.\n    #\n    pm.binMembership( 'lambert1', addToBin='wood' )\n    node = pm.createNode('lambert')\n    pm.binMembership( node, addToBin='grass' )\n    srcNodeList = (\"lambert1\", node)\n    destNode = pm.createNode('blinn')\n    pm.binMembership( srcNodeList, inheritBinsFromNodes=destNode )\n    # Notify that binMembership has been changed.\n    #\n    pm.binMembership( notifyChanged=True )\n    # Check if a bin name is valid or not.  If valid, return true.\n    # Otherwise, return false.\n    #\n    pm.binMembership( isValidBinName='wood' )\n    # Result: True #", 
    "bindSkin": "    \n    \n    import pymel.core as pm\n    \n    # Create a joint chain and a polygonal plane.\n    pm.select(d=True)\n    pm.joint(p=(-3.0, 0.0,-12.0))\n    # Result: nt.Joint(u'joint1') #\n    pm.joint(p=(-3.0, 0.0, -5.0))\n    # Result: nt.Joint(u'joint2') #\n    pm.joint(p=(1.0, 0.0, 5.5))\n    # Result: nt.Joint(u'joint3') #\n    pm.joint(p=(6.0, 0.0, 10.0))\n    # Result: nt.Joint(u'joint4') #\n    pm.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    pm.select('joint1',add=True)\n    \n    # to bind the selected objects to the selected skeleton\n    #\n    pm.bindSkin()\n    # Result: u'joint1skinPartition' #\n    \n    # to bind nurbsSphere1 and pPlane1 to the skeleton containing joint2\n    #\n    pm.bindSkin( 'nurbsSphere1', 'joint2', 'pPlane1' )\n    \n    # to bind the selected partition to the selected skeleton\n    #\n    pm.bindSkin( bp=True )\n    \n    # to bind the selected objects to the selected bones only,\n    # not the entire skeleton\n    #\n    pm.bindSkin( tsb=True )\n    \n    # to detach the selected objects and delete any unused\n    # bindSkin history\n    #\n    pm.bindSkin( unbind=True )\n    \n    # to detach pPlane1 and delete any unused\n    # bindSkin history\n    #\n    pm.bindSkin( 'pPlane1', unbind=True )\n    \n    # to detach the selected objects and keep the history\n    #\n    pm.bindSkin( unbindKeepHistory=True )\n    \n    # To disable the skin on the selected skeletons. This gives\n    # the effect of detaching the skin without removing the\n    # bindSkin groups on the object. You can then modify the joint\n    # positioning, and enable the binding, keeping your original\n    # groups.\n    #\n    pm.bindSkin( enable=False )\n    \n    # to enable skin on a skeleton which has been disabled\n    #\n    pm.bindSkin( enable=True )", 
    "blend": "", 
    "blend2": "    \n    \n    import pymel.core as pm\n    \n    # Do blend with auto normal and with no history:\n    pm.blend2( an=True, ch=False )\n    \n    # Do blend without auto normal\n    pm.blend2( an=False, fln=True, frn=True )", 
    "blendCtx": "", 
    "blendShape": "    \n    \n    import pymel.core as pm\n    \n    #\n    # Perform a blendShape using the currently-selected objects.\n    # The lead (last-selected) object will be the base shape, and each\n    # of the others become targets.\n    #\n    pm.blendShape()\n    \n    #\n    # Create a blendShape that starts with curve3 as the base, and blends\n    # in curve1 and curve2 as targets.\n    \n    pm.blendShape( 'curve1', 'curve2', 'curve3' )\n    \n    #\n    # Apply 80% of the total blendShape deformation, by setting\n    # the envelope parameter to 0.8\n    pm.blendShape( 'blendShape1', edit=True, en=0.8 )\n    \n    \n    #\n    # Set the weights for the first two target shapes to 0.6\n    # and 0.1 respecxtively\n    pm.blendShape( 'blendShape1', edit=True, w=[(0, 0.6), (1, 0.1)] )\n    \n    #\n    # Add a third target (target3) to the blendShape on curve3\n    pm.blendShape( 'blendShape1', edit=True, t=('curve3', 1, 'target3', 1.0) )\n    \n    #\n    # Add an inbetween (smirk) on target3 for base shape curve3\n    # The inbetween will take effect at a weight of 0.2\n    pm.blendShape( 'blendShape2', edit=True, ib=True, t=('curve3', 2, 'smirk', 0.2) )", 
    "blendShapeEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.blendShapeEditor( 'libEd' )", 
    "blendShapePanel": "    \n    \n    import pymel.core as pm\n    \n    pm.blendShapePanel( 'bsP' )", 
    "blendTwoAttr": "    \n    \n    import pymel.core as pm\n    \n    # Assume we have animated a bouncing sphere, sphere1, and we would like\n    # the sphere to smoothly transition into following a second sphere's,\n    # sphere2, animation between time 15 and 20.\n    #\n    pm.select( 'sphere1' )\n    pm.blendTwoAttr( at='tx', at1='sphere2.tx', t=(15,20) )\n    pm.blendTwoAttr( at='ty', at1='sphere2.ty', t=(15,20) )\n    pm.blendTwoAttr( at='tz', at1='sphere2.tz', t=(15,20) )\n    \n    # You can use the \"-at\" flag to narrow the query. For example, if\n    # you wanted to know the names of the newly created blender curves\n    # for only the tx and tz attributes of sphere1, you could say:\n    #\n    pm.blendTwoAttr( at=['tx','tz'], query=True, blender=True )\n    \n    # You can now keyframe the sphere2's animation by changing the\n    # driver on sphere1.\n    #\n    pm.blendTwoAttr( at='tx', edit=True, driver=1 )\n    # setKeyframe ...\n    \n    # If you already had two objects, sphere1 and sphere2 animated, and\n    # you wanted to blend between their animation abruptly at time 15,\n    # you could do:\n    #\n    pm.blendTwoAttr( 'newObject.tx', t=(15,15), at0='sphere1.tx', at1='sphere2.tx' )", 
    "blindDataType": "    \n    \n    import pymel.core as pm\n    \n    # To create a new blind data typeId with a floating point attribute\n    pm.blindDataType( id=9001, dt='float', longDataName='bdFloat', shortDataName='bdf' )\n    # Result: u'blindDataTemplate1' #\n    # To create a Blind Data type with several attributes\n    pm.blindDataType( 'ruf', '-dt', 'float', '-longDataName', 'smoothness', '-shortDataName', 'smo', '-dt', 'int' id=9005, dt='float', longDataName='roughness', shortDataName='', longDataName='count', shortDataName='cnt' )\n    # To query if a type is already used\n    pm.blindDataType( 9001\n    # to query the type of a single attribute\n     'blindDataType', '-q', '-id', 9001, '-tn', '-ldn', 'smoothness', query=True, id=True )\n    # to get the types and names for all attributes\n    pm.blindDataType( 9001, '-tn', query=True, id=True )", 
    "boneLattice": "    \n    \n    import pymel.core as pm\n    \n    # select a lattice that has been added to a rigid skin shape\n    #\n    pm.boneLattice( joint='joint2' )\n    pm.boneLattice( transform='joint1', joint='joint2' )\n    pm.boneLattice( 'boneLattice1', edit=True, bicep=0.5 )", 
    "boundary": "    \n    \n    import pymel.core as pm\n    \n    # Creating boundary surfaces with three curves:\n    \n    crv1 = pm.curve(d= 3, p= ((8, 0, 3), (5, 0, 3), (2, 0, 2), (0, 0, 0)) )\n    crv2 = pm.curve(d= 3, p= ((8, 0, -4), (5, 0, -3), (2, 0, -2), (0, 0, 0)) )\n    crv3 = pm.curve(d= 3, p= ((10, 0, 3), (9, 3, 2), (11, 3, 1), (9, 0, -3)) )\n    \n    # These curves form a rough triangle shape pointing at the origin.\n    # If order is OFF, then the apex of the surface will always between\n    # the 1st and 2nd curves.\n    \n    pm.boundary( crv3, crv1, crv2, order=False, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface1'), nt.Boundary(u'boundary1')] #\n    pm.boundary( crv3, crv2, crv1, order=False, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface2'), nt.Boundary(u'boundary2')] #\n    \n    # If order is ON, then think of the order of selection as \"rail, rail, profile\"\n    # where the boundary is formed by sweeping the profile along two rails.\n    # Direction of the curves becomes important as well; use the reverseCurve\n    # command if you want to change a curve's direction.\n    pm.boundary( crv1, crv2, crv3, order=True )\n    # Result: [nt.Transform(u'boundarySurface3'), nt.Boundary(u'boundary3')] #\n    \n    \n    # Creating boundary surfaces with four curves:\n    \n    crv1 = pm.curve(d= 3, p=((-2, 0, 5), (-1, 0, 3), (1, 0, 3), (3, 0, 4), (6, 0, 5)) )\n    crv2 = pm.curve(d= 3, p=(( 7, 0, 4), (8, 0, 2), (8, 0, -3), (7, 0, -4)) )\n    crv3 = pm.curve(d= 3, p=(( 6, 0, -5), (2, 0, -3), (1, 0, -5), (-3, 0, -5)) )\n    crv4 = pm.curve(d= 3, p=((-2, 0, 4), (-4, 0, 1), (-4, 0, -3), (-2, 0, -4)) )\n    \n    # These curves form a rough square shape around the origin.\n    # To make a boundary surface from four curves, two of the curves are\n    # \"rails\" while the other two are \"profiles\".\n    \n    pm.boundary( crv1, crv2, crv3, crv4, order=False, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface4'), nt.Boundary(u'boundary4')] #\n    pm.boundary( crv2, crv3, crv4, crv1, order=False, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface5'), nt.Boundary(u'boundary5')] #\n    \n    # profile, rail, profile, rail\n    # Notice that in both cases, the resulting boundary surface passes through\n    # the rail curves.\n    \n    # When order is ON, direction of the curves becomes important;\n    # use the reverseCurve command if you want to change a curve's direction.\n    # Notice the difference between:\n    \n    pm.boundary( crv1, crv2, crv3, crv4, order=False, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface6'), nt.Boundary(u'boundary6')] #\n    pm.boundary( crv1, crv2, crv3, crv4, order=True, ep=0 )\n    # Result: [nt.Transform(u'boundarySurface7'), nt.Boundary(u'boundary7')] #", 
    "boxDollyCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.boxDollyCtx( 'boxDollyContext', ac=False )\n    # Result: u'boxDollyContext' #", 
    "boxZoomCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.boxZoomCtx( 'boxZoomContext', zs=1.0 )", 
    "bufferCurve": "    \n    \n    import pymel.core as pm\n    \n    # Create a buffer curve for the selected keys\n    pm.bufferCurve( animation='keys', overwrite=True )\n    \n    # Set the referenced anim curve to the buffer curve\n    pm.bufferCurve( useReferencedCurve=True)\n    \n    # Swap the buffer curve for the selected keys\n    pm.bufferCurve( animation='keys', swap=True )", 
    "buildBookmarkMenu": "    \n    \n    import pymel.core as pm\n    \n    # Update the bookmarkMenu to show animation (bookmarkAnimCurves)\n    # bookmarks\n    #\n    pm.menu( 'bookmarkMenu' )\n    pm.buildBookmarkMenu( 'bookmarkMenu', type='bookmarkAnimCurves' )", 
    "buildKeyframeMenu": "    \n    \n    import pymel.core as pm\n    \n    # Set up \"myAttributeMenu\" as a menu to always\n    # reflect what's currently keyframable.\n    #\n    pm.buildKeyframeMenu( 'myAttributeMenu' )", 
    "button": "    \n    \n    import pymel.core as pm\n    \n    def defaultButtonPush(*args):\n      print 'Button 1 was pushed.'\n    \n    pm.window( width=150 )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout10') #\n    pm.button( label='Button 1', command=defaultButtonPush )\n    # Result: ui.Button('window1|columnLayout10|button5') #\n    pm.button( label='Button 2' )\n    # Result: ui.Button('window1|columnLayout10|button6') #\n    pm.button( label='Button 3' )\n    # Result: ui.Button('window1|columnLayout10|button7') #\n    pm.button( label='Button 4' )\n    # Result: ui.Button('window1|columnLayout10|button8') #\n    pm.showWindow()", 
    "buttonManip": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    #    Create a button manipulator that will be parented to a sphere and will\n    #    print \"Button Manipulator\" whenever it is pressed.\n    #\n    #    Note that moving the sphere will also move the manipulator.\n    #\n    sphere = pm.sphere()\n    pm.buttonManip( 'print \"Button Manipulator\"', sphere[0])\n    \n    #    Example 2.\n    #\n    #    Create a button manipulator that will execute the 'setKeyframe' command\n    #    when it is pressed.\n    #\n    pm.buttonManip( 'setKeyframe' )", 
    "cacheFile": "    \n    \n    import pymel.core as pm\n    \n    # Create a disk cache containing the points of a plane from\n    # frames 1 - 100. Typically the shape would be deforming.\n    #\n    pm.polyPlane()\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    cacheFiles = pm.cacheFile(f='shapeCache', st=1, et=100, points='pPlaneShape1')\n    # Add a historySwitch node to the history of the shape, and attach the\n    # newly created cache into the historySwitch node.\n    #\n    switch = maya.mel.eval('createHistorySwitch(\"pPlaneShape1\",false)')\n    cacheNode = pm.cacheFile(f=cacheFiles[0], cnm='pPlaneShape1', ia='%s.inp[0]' % switch ,attachFile=True)\n    pm.setAttr( '%s.playFromCache' % switch, 1 )\n    # query the files associated with a cacheFile node\n    #\n    pm.cacheFile( cacheNode, query=True, f=True )\n    # Now use the staticCache flag to indicate that the cache should not be\n    # created if the object appears to have no animation.\n    # Since the plane is not animated or deformed, no cache will be created.\n    #\n    pm.polyPlane()\n    cacheFiles = pm.cacheFile(f='shapeCache', staticCache=0, st=1, et=100, points='pPlaneShape2')\n    # Convert a maya cache into pc2 format. The maya cache is named\n    # pSphereShape1.xml and located in the directory \"c:/test/\".\n    #\n    pm.cacheFile(pc2=0,pcf='c:/test/mypc2.pc2',f='pSphereShape1',dir='c:/test/')\n    # Convert a pc2 cache into a maya cache, with the cache data in a single\n    # file.\n    #\n    pm.cacheFile(pc2=1,pcf='c:/test/mypc2.pc2',f='mayaCache2',dir='c:/test/',format='OneFile')", 
    "cacheFileCombine": "    \n    \n    import pymel.core as pm\n    \n    # Create a cacheBlend node so that additional caches can be added to\n    # the shape. This will attach the existing cacheFile on the shape\n    # to the new cacheBlend node.\n    #\n    pm.select( 'cachedShape', r=True )\n    newBlend = pm.cacheFileCombine()\n    # attach an additional cacheFile to the cacheBlend node\n    #\n    pm.cacheFileCombine( newBlend[0], e=True, cc='cacheFile2' )\n    # query the index of the newly connected cache\n    #\n    pm.cacheFileCombine( newBlend[0], cc='cacheFile2', query=True, cacheIndex=True )\n    # When more than one object is driven by the caches connected\n    # to the cacheBlend node, the -channelName and -objectIndex flags can be\n    # used to control which is connected.\n    #\n    # Query the objectIndex for the armShape geometry driven by cacheBlend3:\n    #\n    index = pm.cacheFileCombine('cacheBlend3' ,object='armShape', query=True, objectIndex=True)\n    # Connect another cache up to drive the armShape\n    #\n    pm.cacheFileCombine( 'cacheBlend3', channelName='myChannel', objectIndex=index, e=True, cc='cacheFile2' )", 
    "cacheFileMerge": "    \n    \n    import pymel.core as pm\n    \n    # Find associated geometry nodes\n    #\n    geom = pm.cacheFileMerge('cache1', 'cache2' ,query=True, geometry=True)\n    # Validate merging of caches and find out start/end times.\n    # This will give a warning if there is a gap letting you know that\n    # simulation data will fill the gap.\n    #\n    startEndTimes = pm.cacheFileMerge('cache1', 'cache2')\n    # Result: { 0, 20, 5, 10 }\n    start = startEndTimes[0]\n    end = startEndTimes[1]\n    gapStart = startEndTimes[2]\n    gapEnd = startEndTimes[3]\n    # Create a new merged cache, using simulation data to fill in\n    # any gaps between cache1 and cache2.\n    #\n    cacheFiles = pm.cacheFile(fileName='mergedCache', startTime=start, endTime=end, points=geom[0])\n    switch = maya.mel.eval('createHistorySwitch(\"pPlaneShape1\", false)');\n    pm.cacheFile( attachFile=True, f=cacheFiles[0], ia='%s.inp[0]' % switch)\n    pm.setAttr( '%s.playFromCache' % switch, 1 )\n    # Alternatively, can use append to make sure that we interpolate\n    # for the frames in the gap between cache1 and cache2.\n    #\n    cacheFiles = pm.cacheFile(fileName='mergedCache', startTime=start, endTime=gapStart, points=geom[0])\n    switch = maya.mel.eval('createHistorySwitch(\"pPlane1\", false)');\n    pm.cacheFile( attachFile=True, f=cacheFiles[0], ia='%s.inp[0]' % switch)\n    pm.setAttr( '%s.playFromCache' % switch, 1 )\n    pm.cacheFile( replaceCachedFrame=True, startTime=gapEnd, endTime=end, points=geom[0] )", 
    "cacheFileTrack": "    \n    \n    import pymel.core as pm\n    \n    # Move the cache clip named \"cubeCache2\" to track 3\n    #\n    pm.cacheFileTrack( 'cubeCache2', track=3 )\n    # Lock the track containing the cache clip named \"sphCache1\"\n    #\n    pm.cacheFileTrack( 'sphCache1', lock=True )\n    # Remove any empty cache tracks for the object \"sphereShape1\"\n    #\n    pm.cacheFileTrack('sphereShape1',removeEmptyTracks=True)\n    # query the track index of the cache clip named \"sphCache1\"\n    #\n    pm.cacheFileTrack( 'sphCache1', q=True, track=True )", 
    "callbacks": "    \n    \n    import pymel.core as pm\n    \n    def myCallbackFunction(arg1, arg2):\n                    return arg1 + arg2\n    # add a new callback for myPlugin to be called when creating the attribute editor UI\n    pm.callbacks(addCallback=myCallbackFunction, hook='desiredHook', owner='myPlugin')\n    # remove an individual callback\n    pm.callbacks(removeCallback=myCallbackFunction, hook='desiredHook', owner='myPlugin')\n    # remove all callbacks for myPlugin for a specified hook\n    pm.callbacks(clearCallbacks=True, hook='desiredHook', owner='myPlugin')\n    # remove all callbacks for myPlugin for all hooks\n    pm.callbacks(clearCallbacks=True, owner='myPlugin')\n    # list callbacks for a specified hook\n    callbacks = pm.callbacks(listCallbacks=True, hook='desiredHook')\n    # list callbacks for a specified hook and for a specified owner\n    callbacks = pm.callbacks(listCallbacks=True, hook='desiredHook', owner='myPlugin')\n    # get a list of the standard Maya hooks\n    pm.callbacks(describeHooks=True)\n    # Result: [u'hyperShadePanelBuildCreateMenu', u'hyperShadePanelBuildCreateSubMenu', u'hyperShadePanelPluginChange', u'createRenderNodeSelectNodeCategories', u'createRenderNodePluginChange', u'renderNodeClassification', u'createRenderNodeCommand', u'buildRenderNodeTreeListerContent', u'AETemplateCustomContent', u'firstConnectedShader', u'allConnectedShaders', u'renderLayerPresetMenu', u'addBakingMenuItems', u'addVertexBakingMenuItems', u'addPrelightMenuItems', u'addRMBBakingMenuItems', u'addMayaRenderingPreferences', u'updateMayaRenderingPreferences', u'addMayaMuscleShelfButtons', u'addMayaMuscleMenuItems', u'addBackburnerRendererMenuItems', u'provideAETemplateForNodeType', u'AEnewMultiHandler', u'AEreplaceMultiHandler', u'AEnewAttributeHandler', u'AEreplaceAttributeHandler', u'provideClassificationStrings', u'provideClassificationStringsForFilteredTreeLister', u'nodeCanBeUsedAsMaterial', u'addHeaderContentToMayaLambertianShadersAE', u'provideOutputAttributeNameForTextureNode', u'addItemsToHypergraphNodePopupMenu', u'addItemsToRenderLayerEditorPopupMenu', u'preventMaterialDeletionFromCleanUpSceneCommand', u'connectNodeToNodeOverrideCallback', u'prepareRenderChanged', u'enableRenderPassMenuOfRenderView', u'addItemsToRenderPassMenuOfRenderView'] #\n    # execute the callbacks for the hook 'desiredHook'\n    results = pm.callbacks('arg1', 'arg2', executeCallbacks=True, hook='desiredHook')", 
    "camera": "    \n    \n    import pymel.core as pm\n    \n    # Create a camera and get the shape name.\n    cameraName = pm.camera()\n    cameraShape = cameraName[1]\n    \n    # Get the focal length of the camera.\n    focalLength = pm.camera(cameraShape, q=True, fl=True)\n    \n    # Change the film fit type.\n    pm.camera( cameraShape, e=True, ff='overscan' )", 
    "cameraSet": "    \n    \n    import pymel.core as pm\n    \n    # create some objects\n    pm.sphere(n='sphere1')\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone(n='cone1')\n    # Result: [nt.Transform(u'cone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    \n    # create a set with whatever is currently active\n    pm.select( 'sphere1', 'cone1')\n    newSet2 = pm.sets()\n    \n    pm.loadPlugin( \"stereoCamera\", qt=True )\n    # Result: [u'stereoCamera'] #\n    from maya.app.stereo import stereoCameraRig\n    rig = stereoCameraRig.createStereoCameraRig('StereoCamera')\n    \n    # Create a new cameraSet node.\n    pm.cameraSet()\n    # Result: nt.CameraSet(u'cameraSet1') #\n    \n    # Add the cam \" object set to the set\n    pm.cameraSet( 'cameraSet1', edit=True, appendTo=True, cam=rig[0], objectSet=newSet2 )", 
    "cameraView": "    \n    \n    import pymel.core as pm\n    \n    # Save the current position of the persp camera.\n    homeName = pm.cameraView(camera='persp')\n    \n    # Add this view to the persp bookmark menu.\n    pm.cameraView( homeName, e=True, camera='persp', ab=True )\n    \n    # Change the persp camera position.\n    pm.dolly( 'persp', distance=-30 )\n    \n    # Create another bookmark for the zoomed position.\n    pm.cameraView( camera='persp', name='zoom', ab=True )\n    # Result: nt.CameraView(u'zoom') #\n    \n    # Restore original camera position.\n    pm.cameraView( homeName, e=True, camera='persp', sc=True )\n    \n    # Save the current 2D pan/zoom attributes of the persp camera\n    panZoomBookmark = pm.cameraView( camera='persp', ab=True, typ=1 )\n    \n    # Enable 2D pan/zoom\n    pm.setAttr( 'perspShape.panZoomEnabled', True )\n    \n    # Pan right\n    pm.panZoom( 'persp', r=0.6 )\n    \n    # Restore original film position\n    pm.cameraView( panZoomBookmark, e=True, camera='persp', sc=True )", 
    "canCreateManip": "    \n    \n    import pymel.core as pm\n    \n    canWeCreateIt = pm.canCreateManip('node')", 
    "canvas": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( rowSpacing=5 )\n    # Result: ui.ColumnLayout('window1|columnLayout11') #\n    pm.canvas( rgbValue=(0, 0, 1), width=100, height=20 )\n    # Result: ui.Canvas('window1|columnLayout11|canvas1') #\n    pm.canvas( hsvValue=(60, 1, 1), width=100, height=20 )\n    # Result: ui.Canvas('window1|columnLayout11|canvas2') #\n    pm.canvas( rgbValue=(1, 0, 1), width=100, height=20 )\n    # Result: ui.Canvas('window1|columnLayout11|canvas3') #\n    pm.showWindow()", 
    "changeSubdivComponentDisplayLevel": "    \n    \n    import pymel.core as pm\n    \n    # change the selected subdivision surface to display level 4 components\n    pm.changeSubdivComponentDisplayLevel( l=4 )\n    # increase the display level of the selected subivision surface by 1\n    pm.changeSubdivComponentDisplayLevel( l=1, r=True )", 
    "changeSubdivRegion": "    \n    \n    import pymel.core as pm\n    \n    # delete the selection region on the base mesh\n    pm.changeSubdivRegion( a=1, l=0 )\n    # expand the selection region at the current level\n    pm.changeSubdivRegion( a=2 )", 
    "channelBox": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.formLayout( 'form' )\n    # Result: ui.FormLayout('window1|form') #\n    pm.channelBox( 'dave' )\n    # Result: ui.ChannelBox('window1|form|dave') #\n    pm.formLayout( 'form', e=True, af=(('dave', 'top', 0), ('dave', 'left', 0), ('dave', 'right', 0), ('dave', 'bottom', 0)) )\n    # Result: ui.FormLayout('window1|form') #\n    pm.showWindow()\n    \n    // Color all attributes names, which have an attribute name\n    // beginning with \"T\", white for all current and future objects\n    // in the current Maya session\n    \n    pm.channelBox( 'cb1', attrRegex='T*', attrColor=(1.0, 1.0, 1.0), attrBgColor=(0.0, 0.0, 0.0) )\n    pm.channelBox( 'cb1', e=True, nodeRegex='D*', attrRegex='A*', attrColor=(0, 0, 0) )", 
    "character": "    \n    \n    import pymel.core as pm\n    \n    # create two characters with whatever is currently active\n    pm.character()\n    # Result: nt.Character(u'character1') #\n    pm.character()\n    # Result: nt.Character(u'character2') #\n    \n    # create a set which contains two sub characters\n    pm.character( 'character1', 'character2', n='parentCharacter' )\n    # Result: nt.Character(u'parentCharacter') #\n    \n    # Add the keyable attributes of ikHandle1 to a character\n    pm.character( 'ikHandle1', add='character1' )\n    \n    # Remove the scale attributes for a transform from a character\n    pm.character( 'sphere1.sx', 'sphere1.sy', 'sphere1.sz', remove='character1' )\n    \n    # Query the members of the character\n    members = pm.character('character1', query=True)\n    \n    # Query the character plug for a specified member\n    pm.character( members[0], q=True, cp=True )\n    \n    # Query the library and scheduler of the character\n    pm.character( 'character1', q=True, library=True )\n    pm.character( 'character2', q=True, sc=True )\n    \n    # Add the sphere as an offset object on the character\n    pm.character( 'pSphere1', e=True, addOffsetObject = 'character1' )", 
    "characterMap": "    \n    \n    import pymel.core as pm\n    \n    # Create a mapping between character1 and character2, or if a map already\n    # exists, update the mapping between any unmapped members.\n    #\n    pm.characterMap( 'character1', 'character2' )\n    # Query as to whether a mapping exists between two characters\n    #\n    pm.characterMap( 'character1', 'character2', query=True )\n    # Query which attributes are mapped between two characters\n    #\n    pm.characterMap( 'character1', 'character2', query=True, mapAttr=True )\n    # Delete the mapping between two pairs of attributes. If no mapping\n    # exists between the attributes, nothing will happen.\n    #\n    pm.characterMap( 'character1', 'character2', unmapAttr=('sphere1.tx','sphere2.tx') )\n    # Add a mapping between two attributes.  Only attributes that\n    # are members of characters can be mapped.\n    #\n    pm.characterMap( 'character1', 'character2', mapAttr=('sphere1.tx','sphere2.tx') )\n    # Query what attribute(s) are mapped to sphere1.tx between character1 and\n    # character2\n    #\n    pm.characterMap( 'character1', 'character2', mapping='sphere1.tx' )", 
    "characterize": "    \n    \n    import pymel.core as pm\n    \n    # Characterize a skeleton.  Select the root of the skeleton and enter\n    # the following. The skeleton joints must be named according to the\n    # FBIK naming conventions described in the main Maya documentation.\n    #\n    pm.characterize( pinHandFeet=True )\n    # Characterize a skeleton that has not been named according to the\n    # FBIK naming conventions by using the -sk flag to define the\n    # purpose of the joints. Select the skeleton and enter the following.\n    #\n    pm.characterize( sk = 'pelvis Hips,hipL LeftUpLeg,kneeL LeftLeg,footL LeftFoot,toeL LeftToeBase,hipR RightUpLeg,kneeR RightLeg,footR RightFoot,toeR RightToeBase,spine Spine,spine1 Spine1,collarL LeftShoulder,shoulderL LeftArm,elbowL LeftForeArm,handL LeftHand,collarR RightShoulder,shoulderR RightArm,elbowR RightForeArm,handR RightHand,neck Neck,head Head,spine2 Spine2' )\n    # Add a floor contact plane to the selected effector\n    #\n    pm.select('LeftFootEff', r=True)\n    pm.characterize( e=True, addFloorContactPlane=True )\n    # Add a full body pivot to the selected effector.\n    #\n    pm.select('LeftHandEff', r=True)\n    pm.characterize( e=True, placeNewPivot=True )\n    pm.move( 1, 1, 0, r=True)\n    # Activate a new pivot now that it has been placed in the desired location.\n    #\n    pm.characterize( e=True, activatePivot=True )\n    # De-activate a pivot so that it can be moved to another location.\n    #\n    pm.characterize( e=True, changePivotPlacement=True )", 
    "checkBox": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window('window', width=150)\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window|columnLayout12') #\n    pm.checkBox( label='One' )\n    # Result: ui.CheckBox('window|columnLayout12|checkBox1') #\n    pm.checkBox( label='Two' )\n    # Result: ui.CheckBox('window|columnLayout12|checkBox2') #\n    pm.checkBox( label='Three' )\n    # Result: ui.CheckBox('window|columnLayout12|checkBox3') #\n    pm.checkBox( label='Four' )\n    # Result: ui.CheckBox('window|columnLayout12|checkBox4') #\n    pm.showWindow( window )", 
    "checkBoxGrp": "    \n    \n    import pymel.core as pm\n    \n    exampleWindow = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout13') #\n    pm.checkBoxGrp( numberOfCheckBoxes=3, label='Three Buttons', labelArray3=['One', 'Two', 'Three'] )\n    # Result: ui.CheckBoxGrp('window1|columnLayout13|checkBoxGrp1') #\n    pm.checkBoxGrp( numberOfCheckBoxes=4, label='Four Buttons', labelArray4=['I', 'II', 'III', 'IV'] )\n    # Result: ui.CheckBoxGrp('window1|columnLayout13|checkBoxGrp2') #\n    pm.showWindow( exampleWindow )\n    \n    # Place a single checkbox with a label width of 100 pixels, and a checkbox\n    # width of 165 pixels.  In this example, the two columns of the checkBoxGrp\n    # controlled by the columnWidth2 flag are the label column and the checkbox\n    # column.  Horizontal positioning of the checkbox can be controlled by\n    # adjusting the width of the first column.\n    exampleWindow = pm.window()\n    pm.rowLayout()\n    # Result: ui.RowLayout('window2|rowLayout7') #\n    pm.checkBoxGrp(columnWidth2=[100, 165], numberOfCheckBoxes=1, label='A Label', label1='A Checkbox', v1=True)\n    # Result: ui.CheckBoxGrp('window2|rowLayout7|checkBoxGrp3') #\n    pm.showWindow(exampleWindow)", 
    "checkDefaultRenderGlobals": "    \n    \n    import pymel.core as pm\n    \n    # pm.checkDefaultRenderGlobals(q=1, changed=1) can be replaced with a call to the ls command\n    # To check if the defaultRenderGlobals node is marked dirty or not, do this:\n    if( 'defaultRenderGlobals' in pm.ls(modified=1) ):\n            # do something...\n            pass\n    # To mark the entire scene dirty.\n    pm.file( modified=1 )\n    # To mark the entire scene clean\n    pm.file( modified=0 )", 
    "choice": "    \n    \n    import pymel.core as pm\n    \n    # This example animates an object airplane along a motion path\n    # from frames 1 to 30, then continues with keyframe animation until\n    # frame 50, then returns to the motion path at frame 50.\n    path = pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    pm.polyPlane()\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    pm.pathAnimation('pPlane1',c=path,stu=1,etu=100)\n    # Result: u'motionPath1' #\n    \n    # Set a choice node on the path animation, ensuring that the choice\n    # selects path animation from 1 to 30, and then returns at 50.\n    pm.choice( 'pPlane1', at='ty', t=[1,30,50] )\n    # Result: [Attribute(u'choice1.input[0]')] #\n    \n    # Start a new kind of choice at time 31\n    pm.choice( 'pPlane1', at='ty', t=31 )\n    # Result: [Attribute(u'choice1.input[1]')] #\n    \n    # Create some keyframe animation between times 31 and 49\n    pm.currentTime( 31 )\n    # Result: 31.0 #\n    pm.setKeyframe( 'pPlane1', at=\"ty\" )\n    # Result: 1 #\n    pm.move( 1, 2, 3, r=True )\n    pm.setKeyframe( 'pPlane1', at=\"ty\", t=40 )\n    # Result: 1 #\n    pm.move( 4, 5, 6, r=True )\n    pm.setKeyframe( 'pPlane1', at=\"ty\", t=49 )\n    # Result: 1 #\n    \n    # Note that the -at/attribute and -t/time flags are not\n    # queryable in themselves, but they can be used to\n    # modify the choice nodes to query.\n    \n    # What is the attribute that is connected to the pPlane1.ty choice node's\n    # selector attribute?\n    pm.choice( 'pPlane1', at='ty', query=True, sl=True)\n    # Result: [u'choice1_selector.output'] #\n    \n    # Which indices will be evaluated for the choice node to pPlane1.ty\n    # at the given times?\n    pm.choice( 'pPlane1', at='ty', t=[1,30,50], query=True, index=True)\n    # Result: [0, 0, 0] #", 
    "circle": "    \n    \n    import pymel.core as pm\n    \n    # create full circle at origin on the x-y plane\n    pm.circle( nr=(0, 0, 1), c=(0, 0, 0) )\n    # Result: [nt.Transform(u'nurbsCircle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    \n    # create half circle at origin on the x-y plane with radius 2\n    pm.circle( nr=(0, 0, 1), c=(0, 0, 0), sw=180, r=2 )\n    # Result: [nt.Transform(u'nurbsCircle2'), nt.MakeNurbCircle(u'makeNurbCircle2')] #", 
    "circularFillet": "    \n    \n    import pymel.core as pm\n    \n    pm.circularFillet( 'surface1', 'surface2', ch=True, pr=-1.0, sr=1.0, cos=False )\n    pm.circularFillet( 'surface3', 'surface4', ch=False, pr=-1.0, sr=2.0, cos=True, pt=0.001 )", 
    "clearCache": "    \n    \n    import pymel.core as pm\n    \n    # Clear one node's datablock cache\n    pm.clearCache( 'node' )\n    # Clear caches in all dependency graph nodes\n    pm.clearCache( all=True )\n    # Result: 0 #", 
    "clearShear": "", 
    "clip": "    \n    \n    import pymel.core as pm\n    \n    # First, create a character to hold the clips. The character will be\n    # a 3-bone skeleton named \"arm\".\n    #\n    pm.select( d=True )\n    pm.joint( p=(0, 0, 0) )\n    # Result: nt.Joint(u'joint1') #\n    pm.joint( p=(0, 4, 0)  )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( p=(0, 8, -1) )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( 'joint2', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( p=(0, 9, -2) )\n    # Result: nt.Joint(u'joint4') #\n    pm.joint( 'joint3', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint4') #\n    pm.select( 'joint1', 'joint2', 'joint3', r=True )\n    pm.character( name='arm' )\n    # Result: nt.Character(u'arm') #\n    # Create some animation for the character. For this example the animation will\n    # be quite trivial.\n    #\n    pm.select( 'joint3', r=True )\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.setKeyframe( 'joint3.rx' )\n    # Result: 1 #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.setKeyframe( 'joint3.rx', v=90 )\n    # Result: 1 #\n    pm.currentTime( 20 )\n    # Result: 20.0 #\n    pm.setKeyframe( 'joint3.rx', v=0 )\n    # Result: 1 #\n    # Create a clip for the current animation named \"handWave\"\n    #\n    pm.clip( 'arm', startTime=0, endTime=20, name='handWave' )\n    # Result: [u'handWave'] #\n    # Create a 2nd animation for the character.\n    #\n    pm.select( 'joint2', r=True )\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.setKeyframe( 'joint2.rx' )\n    # Result: 1 #\n    pm.setKeyframe( 'joint2.ry', v=20 )\n    # Result: 1 #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.setKeyframe( 'joint2.rx', v=45 )\n    # Result: 1 #\n    pm.setKeyframe( 'joint2.ry', v=-20 )\n    # Result: 1 #\n    pm.currentTime( 20 )\n    # Result: 20.0 #\n    pm.setKeyframe( 'joint2.rx', v=0 )\n    # Result: 1 #\n    pm.setKeyframe( 'joint2.ry', v=20 )\n    # Result: 1 #\n    # Create a clip for the current animation named \"elbowWave\"\n    #\n    pm.clip( 'arm', startTime=0, endTime=20, name='elbowWave' )\n    # Result: [u'elbowWave'] #\n    # Query the existing source clips\n    #\n    pm.clip( 'arm', query=True, n=True )\n    # Result: [u'handWaveSource', u'elbowWaveSource'] #\n    # Query the active clip. Note that the default clip is always active unless\n    # another clip has been specified as active. This means that new keyframes\n    # always go into the default clip unless you make another clip active.\n    #\n    pm.clip( 'arm', query=True, active=True )\n    # Result: u'default' #\n    # Duplicate the clip named \"elbowWaveSource\" on the character named \"arm\" and\n    # place the duplicate in the schedule at a start time of 50\n    #\n    pm.clip( 'arm', duplicate=True, name='elbowWaveSource', s=50 )\n    # Result: u'elbowWave1' #\n    # Duplicate the clip named \"wiggle\" on the character named \"arm\" and\n    # do not place the duplicate in the schedule\n    #\n    pm.clip( 'arm', duplicate=True, sc=False, name='wiggle' )\n    # Remove the clip from the character altogether. All instances of the clip will be\n    # removed from the schedule and deleted from the library.\n    #\n    pm.clip( 'arm', rm=True, name='elbowWaveSource')\n    # Make the handWave clip active. This means that any new keyframes get\n    # placed in the handWave clip, and modifications to existing handWave\n    # keyframes can be made.\n    #\n    pm.clip( 'arm', edit=True, active='handWave' )\n    # Split the clip named \"handWave\" into two clips at time 10\n    #\n    pm.clip( 'arm', split=10, name='handWave' )\n    # Query the startTime of a clip. This is the start frame of the animation\n    # curve range of the clip, and may differ from the scheduled time of the clip,\n    # which is accessed using the clipSchedule command.\n    #\n    pm.clip( 'arm', name='handWave', query=True, s=True )", 
    "clipEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.clipEditor( \"clipEditorName\" )", 
    "clipEditorCurrentTimeCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.clipEditorCurrentTimeCtx()\n    # Result: u'clipEditorCurrentTimeCtx1' #", 
    "clipMatching": "    \n    \n    import pymel.core as pm\n    \n    # Compute and set the offset on the \"walk\" clip in order to have it's start\n    # pose align to the end of the \"tornadoKick\" clip at the LeftAnkle match\n    # element.  Note that here we are matching the translation by specifying\n    # with mt = 1.\n    #\n    pm.select( 'character', 'LeftAnkle' )\n    pm.clipMatching( mt=1, cs=(\"walk\",0.0), cd=(\"tornadoKick\",1.0) )", 
    "clipSchedule": "    \n    \n    import pymel.core as pm\n    \n    # First, create a character to hold the clips. The character will be\n    # a 3-bone skeleton named \"arm\".\n    #\n    pm.select( d=True )\n    pm.joint( p=(0, 0, 0) )\n    # Result: nt.Joint(u'joint1') #\n    pm.joint( p=(0, 4, 0)  )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( p=(0, 8, -1) )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( 'joint2', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( p=(0, 9, -2) )\n    # Result: nt.Joint(u'joint4') #\n    pm.joint( 'joint3', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint4') #\n    pm.select( 'joint1', 'joint2', 'joint3', r=True )\n    pm.character( name='arm' )\n    # Result: nt.Character(u'arm') #\n    # Create some animation for the character. For this example the animation will\n    # be quite trivial.\n    #\n    pm.select( 'joint3', r=True )\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.setKeyframe( 'joint3.rx' )\n    # Result: 1 #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.setKeyframe( 'joint3.rx', v=90 )\n    # Result: 1 #\n    pm.currentTime( 20 )\n    # Result: 20.0 #\n    pm.setKeyframe( 'joint3.rx', v=0 )\n    # Result: 1 #\n    # Create a clip for the current animation named \"handWave\"\n    #\n    pm.clip( 'arm', startTime=0, endTime=20, name='handWave' )\n    # Result: [u'handWave'] #\n    # Query the name of the clipScheduler for this character\n    #\n    pm.character( 'arm', query=True, sc=True )\n    # Result: u'armScheduler1' #\n    # Result: armScheduler1\n    # Create a 2nd animation for the character.\n    #\n    pm.select( 'joint2', r=True )\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.setKeyframe( 'arm' )\n    # Result: 30 #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.setKeyframe( 'joint2.rx', v=45 )\n    # Result: 1 #\n    pm.setKeyframe( 'joint2.ry', v=-20 )\n    # Result: 1 #\n    pm.currentTime( 20 )\n    # Result: 20.0 #\n    pm.setKeyframe( 'joint2.rx', v=0 )\n    # Result: 1 #\n    pm.setKeyframe( 'joint2.ry', v=20 )\n    # Result: 1 #\n    # Create a clip for the current animation named \"elbowWave\"\n    #\n    pm.clip( 'arm', startTime=0, endTime=20, name='elbowWave' )\n    # Result: [u'elbowWave'] #\n    # Instance handeWave at time 10\n    #\n    pm.clipSchedule( 'armScheduler1', instance='handWave', s=10 )\n    # Result: u'handWave1' #\n    # Query the clip index of the latest instance of handWave. Each instance\n    # of a clip received a unique clipIndex. The clip index is used to\n    # edit and query data for existing clips.\n    #\n    pm.clipSchedule( 'armScheduler1', name='handWave1', query=True, ci=True )\n    # Result: u'elbowWave' #\n    # Query whether the clip associated with index 2 is enabled or not\n    #\n    pm.clipSchedule( 'armScheduler1', ci=2, query=True, enable=True )\n    # Result: True #\n    # Query the name of the clip associated with index 2\n    #\n    pm.clipSchedule( 'armScheduler1', ci=2, query=True, n=True )\n    # Result: u'handWave1' #\n    # Query the weight of the clip associated with index 2\n    #\n    pm.clipSchedule( 'armScheduler1', ci=2, query=True, weight=True )\n    # Result: 1.0 #\n    # Modify the elbowWave clip to start at frame 10 instead of frame 0\n    #\n    pm.clipSchedule( 'armScheduler1', start=10, ci=1 )\n    # Trim the start of the elbowWave clip to\n    # use the animation starting at frame 5 instead 0\n    #\n    pm.clipSchedule( 'armScheduler1', sourceStart=5, ci=1 )\n    # Trim the end of the elbowWave clip to\n    # use the animation up to frame 15 instead 20\n    #\n    pm.clipSchedule( 'armScheduler1', sourceEnd=15, ci=1 )\n    # Modify the handWave clip to have two cycles instead of 1\n    #\n    pm.clipSchedule( 'armScheduler1', postCycle=1, ci=0 )\n    # list the animation curves associated with a particular clip\n    #\n    pm.clipSchedule( 'armScheduler1', ci=2, listCurves=True )\n    # Result: [u'arm_joint3_rotateX'] #\n    # Move a particular clip to a particular track\n    #\n    pm.clipSchedule( 'armScheduler1', track=2, ci=0 )\n    # Add a blend between clips 1 and 2\n    #\n    pm.clipSchedule( 'armScheduler1', b=(1, 2) )\n    # Query the name of the blendNode between clips 1 and 2\n    #\n    pm.clipSchedule( 'armScheduler1', q=True, bn=(1, 2) )\n    # Result: [u'animBlendInOut1'] #\n    # Lock the first track and then query its state\n    #\n    pm.clipSchedule( 'armScheduler1', track=1, e=True, lock=1 )\n    pm.clipSchedule( 'armScheduler1', track=1, query=True, lock=True )\n    # Result: True #\n    # Query the existing clips in the scheduler.\n    # In query mode, returns an array of strings in this form:\n    # (clipName,index,start,sourceStart,sourceEnd,scale,preCycle,postCycle,hold)\n    #\n    # In this case there are three scheduled clips:\n    #  2 instances of \"handWave\" and 1 of \"elbowWave\". The clip indices for \"handWave\" are 0\n    #  and 3. The clip index for \"elbowWave\" is 2. Note that the clip indices can be sparse\n    #  since a clip maintains its index as long as it is in the schedule (the TraX editor).\n    #\n    pm.clipSchedule( 'armScheduler1', query=True )\n    # Result: [u'handWave,0,0.000000,0.000000,20.000000,1.000000,0.000000,1.000000,0.000000\\n', u'elbowWave,1,10.000000,5.000000,15.000000,1.000000,0.000000,0.000000,0.000000\\n', u'handWave1,2,10.000000,0.000000,20.000000,1.000000,0.000000,0.000000,0.000000\\n'] #\n    # Result: handWave,0,0.000000,0.000000,20.000000,1.000000,0.00000,2.00000 elbowWave,1,0.000000,5.000000,15.000000,1.000000,0.00000,1.00000 handWave,2,10.000000,0.000000,20.000000,1.000000,0.00000,1.00000\n    #\n    # Shift clips 1 and 2 up 3 tracks\n    #\n    pm.clipSchedule( 'armScheduler1', sh=-3, shi=1, shi=2 )\n    # Print out which anim curves animate which channels for the\n    # clip with an index of 2.\n    #\n    out = pm.clipSchedule('armScheduler1' ,ci=2, query=True, lp=True)\n    for pair in out:\n       print pair", 
    "clipSchedulerOutliner": "    \n    \n    import pymel.core as pm\n    \n    pm.window( 'myWindow', rtf=0, width=200 )\n    # Result: ui.Window('myWindow') #\n    pm.formLayout( 'myForm' )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.clipSchedulerOutliner( 'myOutliner', clipScheduler='charScheduler1' )\n    # Result: u'myWindow|myForm|myOutliner' #\n    pm.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.showWindow()", 
    "closeCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.closeCurve( 'curve1', ch=True, ps=True )\n    # Closes curve1 with history and by preserving shape.  The result will\n    # be the name of the closed curve, and the name of the newly created\n    # dependency node.\n    \n    pm.closeCurve( 'curve1', ch=True, ps=False )\n    # Closes curve1 with history and will not preserve the shape of the\n    # curve.\n    \n    pm.closeCurve( 'curve1', ch=True, rpo=True )\n    # Closes curve1 with history and replaces the original curve with\n    # the closed one.", 
    "closeSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.closeSurface( 'surface1', ch=True, d=0, ps=True )\n    # Closes surface1 in the U direction with history and by preserving shape.\n    # The name of the closed surface, and the name of the newly created\n    # dependency node are returned.\n    \n    pm.closeSurface( 'surface1', ch=True, d=2, ps=False )\n    # Closes surface1 in both U and V directions, with history.  Closing\n    # the surface will not preserve the shape of the surface.\n    \n    pm.closeSurface( 'surface1.u[0.66]', ch= True )\n    # Closes surface1 in the V direction, with history.  The direction is\n    # implied from the specified isoparm.", 
    "cluster": "    \n    \n    import pymel.core as pm\n    \n    # Create a cluster which uses the transformation of elbow1\n    #\n    pm.joint(p=(2,0,0),name=\"elbow1\")\n    # Result: nt.Joint(u'elbow1') #\n    pm.joint(p=(4,0,0),name=\"wrist1\")\n    # Result: nt.Joint(u'wrist1') #\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cluster( wn=('elbow1', 'elbow1') )\n    # Result: [nt.Cluster(u'cluster1'), nt.Joint(u'elbow1')] #\n    \n    # Edit cluster1 to use the transformation of wrist1.\n    #\n    pm.cluster( 'cluster1', e=True, bs=1, wn=('wrist1', 'wrist1') )\n    \n    # Create a relative cluster with its own cluster handle. The\n    # cluster handle is drawn as the letter \"C\".\n    #\n    pm.cluster( rel=True )\n    \n    # Modify the membership of an existing cluster. First, find\n    # the name of the cluster's associated set, then use the sets\n    # command to edit the set membership (add a cube and remove a plane).\n    #\n    pm.listConnections( 'cluster1', type=\"objectSet\" )\n    # Result: cluster1Set\n    pm.sets( 'pCube1', add='cluster1Set' )\n    pm.sets( 'pPlane1', rm='cluster1Set' )", 
    "cmdFileOutput": "    \n    \n    import pymel.core as pm\n    \n    pm.cmdFileOutput( o='dbOutput.txt' )\n    # Result: 1 #\n    print( 'This message is in the file\\n' )\n    # This message is in the file\n    pm.cmdFileOutput( s=1 )\n    # Result: 0 #\n    pm.cmdFileOutput( s=2 )\n    # Result: -3 #\n    pm.cmdFileOutput( c=1 )\n    # Result: 0 #\n    # Notice that the 'This message is in the file' string is in the file,\n    # as are all of the entered commands and the\n    # '# Result: ...' lines, etc.\n    \n    # Turn on logging to a file on Maya startup so as to log all error\n    # messages which happen on startup.\n    #\n    # Set the environment variable MAYA_CMD_FILE_OUTPUT to \"trace.txt\"\n    # Start up Maya\n    # Messages should now be logged to the file \"trace.txt\" as well as the\n    # script editor window.\n    \n    # Turn off logging to the filename specified by $MAYA_CMD_FILE_OUTPUT\n    # after Maya has completed startup.\n    #\n    import os\n    traceFile = os.environ[ \"MAYA_CMD_FILE_OUTPUT\" ]\n    descriptor = pm.cmdFileOutput( q=True, o=traceFile )\n    if -1 != descriptor:\n            pm.cmdFileOutput( close=descriptor )", 
    "cmdScrollFieldExecuter": "    \n    \n    import pymel.core as pm\n    \n    # this will create a tiny window with a Mel command executer.\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout14') #\n    pm.cmdScrollFieldExecuter(width=200, height=100)\n    # Result: ui.CmdScrollFieldExecuter('window1|columnLayout14|cmdScrollFieldExecuter5') #\n    pm.showWindow()\n    \n    # this will create a tiny window with a Python command executer.\n    pm.window()\n    # Result: ui.Window('window2') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window2|columnLayout15') #\n    pm.cmdScrollFieldExecuter(width=200, height=100, sourceType=\"python\")\n    # Result: ui.CmdScrollFieldExecuter('window2|columnLayout15|cmdScrollFieldExecuter6') #\n    pm.showWindow()", 
    "cmdScrollFieldReporter": "    \n    \n    import pymel.core as pm\n    \n    # this will create a tiny window with a command history reporter\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout16') #\n    pm.cmdScrollFieldReporter(width=200, height=100)\n    # Result: ui.CmdScrollFieldReporter('window1|columnLayout16|cmdScrollFieldReporter2') #\n    pm.showWindow()", 
    "cmdShell": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    \n    #    Delete the window if it already exists.\n    #\n    if pm.window( 'ExampleWindow', exists=True):\n            pm.deleteUI( 'ExampleWindow', window=True)\n    \n    #    Create a window containing a cmdShell and a couple buttons.\n    #\n    #    Use a form layout to position the controls.\n    #\n    pm.window( 'ExampleWindow', widthHeight=(300, 300) )\n    # Result: ui.Window('ExampleWindow') #\n    form = pm.formLayout()\n    cmdShell = pm.cmdShell()\n    clearButton = pm.button(label='Clear', command=('pm.cmdShell(\\\"' + cmdShell + '\\\", edit=True, clear=True)' ))\n    closeButton = pm.button(label='Close', command=('pm.deleteUI( \"ExampleWindow\", window=True )' ) )\n    \n    #    Set up the attachments.\n    #\n    pm.formLayout( form, edit=True,\n            attachForm=((cmdShell, 'top', 0), (cmdShell, 'left', 0), (cmdShell, 'right', 0), (clearButton, 'left', 0),\n                                                                    (clearButton, 'bottom', 0), (closeButton, 'bottom', 0), (closeButton, 'right', 0)),\n            attachControl=(cmdShell, 'bottom', 0, clearButton),\n            attachNone=((clearButton, 'top'), (closeButton, 'top')),\n            attachPosition=((clearButton, 'right', 0, 50), (closeButton, 'left', 0, 50)))\n    \n    pm.showWindow( 'ExampleWindow' )", 
    "coarsenSubdivSelectionList": "    \n    \n    import pymel.core as pm\n    \n    # after selecting components of a subdivision surface\n    pm.coarsenSubdivSelectionList()", 
    "collision": "    \n    \n    import pymel.core as pm\n    \n    pm.collision( 'nurbsSphere1', 'particle1', r=.75, f=.1 )\n    # Causes particles of particle1 to collide with nurbsSphere1,\n    # and sets a resilience value of 0.75 and a friction value of 0.1\n    # for the surface.\n    \n    pm.collision( 'nurbsSphere1', q=True, f=1 )\n    # Returns the friction value stored in the geoConnector for nurbsSphere1.\n    \n    pm.collision( 'particleShape1', 'nurbsSphere1', q=True, f=1 )\n    # Returns the friction value that particleShape1 is using for collisions\n    # against nurbsSphere1.  This may be the same as the friction stored in\n    # nurbsSphere1's geoConnector.  Or, if the user broke that connection,\n    # then it is whatever value is in the particleShape1's collisionFriction\n    # attribute that is used for collision with nurbsSphere1.\n    \n    pm.collision( 'nurbsSphere1', 'particleShape1', q=True )\n    # Returns whether or not particleShape1 is checking for collisions\n    # against nurbsSphere1.\n    \n    pm.collision( 'particleShape1', q=True )\n    # Returns all of the geometries that particleShape1 is colliding with.", 
    "color": "    \n    \n    import pymel.core as pm\n    \n    # create a sphere and deselect it\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.select( d=True )\n    \n    # Set the inactive wireframe color of the sphere to the\n    # first user defined color\n    pm.color( 'sphere1', ud=1 )\n    \n    # set the wireframe color of the sphere back to its default color\n    pm.color( 'sphere1' )", 
    "colorAtPoint": "    \n    \n    import pymel.core as pm\n    \n    # The return value is the array of values determined by the number of\n    # coord flag uses or samplesU * samplesV. The default return value is alpha.\n    # If instead the return value is RGB there will be 3 times as many values returned,\n    # and if it is RGBA there will be 4 times as many values.\n    pm.createNode( 'checker' )\n    # Result: nt.Checker(u'checker1') #\n    pm.colorAtPoint( 'checker1' )\n    # Result: [0.5] #\n    # returns the alpha value at uv (0.0,0.0) for texture checker1\n    # The return array will have one entry corresponding to this alpha.\n    pm.colorAtPoint( 'checker1', u=.5, v=.5 )\n    # Result: [0.5] #\n    # returns the alpha value at uv (0.5,0.5) for texture checker1\n    # The return array will have one entry corresponding to this alpha.\n    pm.colorAtPoint( 'checker1', o='RGB', u=(.5, 0.0), v=(.5, 0.1) )\n    # Result: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5] #\n    # returns the colors at uv (0.5,0.5) and (0.0, 0.01) for texture checker1\n    # The return array will have 6 values in the following order: RGBRGB\n    pm.colorAtPoint( 'checker1', o='A', su=11, sv=6 )\n    # Result: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5] #\n    # returns the alpha for 50 points in a uniform 11 by 6 grid mapped across\n    # uv (0.0, 0.0) to uv (1.0, 1.0) The 12th point would be the first point\n    # in the second row of samples where uv = (0.0, 0.2)\n    pm.colorAtPoint( 'checker1', o='A', su=3, sv=3, mu=0.3, mv=0.3, xu=0.4, xv=0.4 )\n    # Result: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] #\n    # returns the alpha for 9 points in a uniform 3 by 3 grid mapped across\n    # uv (0.3, 0.3) to uv (0.4, 0.4) The 4th point would be the first point\n    # in the second row of samples where uv = (0.35, 0.3).", 
    "colorEditor": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    pm.colorEditor()\n    if pm.colorEditor(query=True, result=True):\n            values = pm.colorEditor(query=True, rgb=True)\n            print 'RGB = ' + str(values)\n            values = pm.colorEditor(query=True, hsv=True)\n            print 'HSV = ' + str(values)\n            alpha = pm.colorEditor(query=True, alpha=True)\n            print 'Alpha = ' + str(alpha)\n    else:\n            print 'Editor was dismissed'\n    \n    #    Example 2.\n    #\n    result = pm.colorEditor()\n    buffer = result.split()\n    if '1' == buffer[3]:\n            values = pm.colorEditor(query=True, rgb=True)\n            print 'RGB = ' + str(values)\n            alpha = pm.colorEditor(query=True, alpha=True)\n            print 'Alpha = ' + str(alpha)\n    else:\n            print 'Editor was dismissed'", 
    "colorIndex": "    \n    \n    import pymel.core as pm\n    \n    # Set the first entry in the color palette to have RGB values 1 0 0 - red.\n    pm.colorIndex( 1, 1, 0, 0 )\n    # Result: 1 #\n    \n    # Set the first entry in the color palette to have HSV values 360 1 1 - red.\n    pm.colorIndex( 1, 360, 0, 0, hsv=True )\n    # Result: 1 #\n    \n    # Return the RGB color values of the first entry of the color palette.\n    pm.colorIndex( 1, q=True )\n    # Result: [0.0, 0.0, 0.0] #\n    \n    # Return the HSV color values of the first entry of the color palette.\n    pm.colorIndex( 1, q=True, hsv=True )\n    # Result: [0.0, 0.0, 0.0] #", 
    "colorIndexSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout17') #\n    pm.colorIndexSliderGrp( label='Select Color', min=0, max=20, value=10 )\n    # Result: ui.ColorIndexSliderGrp('window1|columnLayout17|colorIndexSliderGrp1') #\n    pm.showWindow()", 
    "colorSliderButtonGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout18') #\n    pm.colorSliderButtonGrp( label='Label', buttonLabel='Button', rgb=(1, 0, 0), symbolButtonDisplay=True, columnWidth=(5, 30), image='navButtonUnconnected.png' )\n    # Result: ui.ColorSliderButtonGrp('window1|columnLayout18|colorSliderButtonGrp1') #\n    pm.showWindow()", 
    "colorSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout19') #\n    pm.colorSliderGrp( label='Blue', rgb=(0, 0, 1) )\n    # Result: ui.ColorSliderGrp('window1|columnLayout19|colorSliderGrp1') #\n    pm.colorSliderGrp( label='Green', hsv=(120, 1, 1) )\n    # Result: ui.ColorSliderGrp('window1|columnLayout19|colorSliderGrp2') #\n    pm.showWindow()", 
    "columnLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( columnAttach=('both', 5), rowSpacing=10, columnWidth=250 )\n    # Result: ui.ColumnLayout('window1|columnLayout20') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout20|button11') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout20|button12') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout20|button13') #\n    pm.showWindow()", 
    "commandEcho": "    \n    \n    import pymel.core as pm\n    \n    # Echo everything\n    pm.commandEcho( state=True )\n    # Go back to normal\n    pm.commandEcho( state=False )\n    # Display line number information in messages.  This is the default.\n    pm.commandEcho( lineNumbers=True )\n    # Do not display line number information in messages.\n    pm.commandEcho( lineNumbers=False )\n    # Do not display changeToolIcon, escapeCurrentTool or autoUpdateAttrEd commands when echoing everything\n    pm.commandEcho( filter=('changeToolIcon', 'escapeCurrentTool', 'autoUpdateAttrEd') );\n    # Do not display setLastFocusedCommandReporter or setLastFocusedCommandExecuter when echoing everything\n    pm.commandEcho( filter=('setLastFocusedCommand') );", 
    "commandLine": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window that contains a command line.\n    #\n    window = pm.window('window')\n    form = pm.formLayout()\n    field = pm.scrollField()\n    \n    cmdLine = pm.commandLine()\n    pm.commandLine( cmdLine, edit=True, height=25)\n    # Result: ui.CommandLine('window|formLayout51|commandLine2') #\n    pm.commandLine( cmdLine, edit=True, sourceType=\"python\")\n    # Result: ui.CommandLine('window|formLayout51|commandLine2') #\n    pm.formLayout( form, edit=True, attachForm=[(cmdLine, 'top', 0), (cmdLine, 'left', 0), (cmdLine, 'right', 0), (field, 'left', 0), (field, 'bottom', 0), (field, 'right', 0)], attachNone=(cmdLine, 'bottom'), attachControl=(field, 'top', 5, cmdLine) )\n    # Result: ui.FormLayout('window|formLayout51') #\n    \n    #    Give the command line initial keyboard focus.\n    #\n    pm.setFocus( cmdLine )\n    pm.showWindow( window )", 
    "commandPort": "    \n    \n    import pymel.core as pm\n    \n    # Open a command port with the default name \"mayaCommand\".\n    pm.commandPort()\n    \n    # Close the command port with the default name. Open client connections\n    # are not broken.\n    pm.commandPort( cl=True )\n    \n    # Query to see if the command command port \"mayaCommand\" exists.\n    pm.commandPort( 'mayaCommand', q=True )\n    # Result: False #", 
    "componentBox": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.formLayout( 'form' )\n    # Result: ui.FormLayout('window1|form') #\n    pm.componentBox( 'cbox' )\n    # Result: u'window1|form|cbox' #\n    pm.formLayout( 'form', e=True, af=(('cbox', 'top', 0), ('cbox', 'left', 0), ('cbox', 'right', 0), ('cbox', 'bottom', 0)) )\n    # Result: ui.FormLayout('window1|form') #\n    pm.showWindow()", 
    "componentEditor": "    \n    \n    import pymel.core as pm\n    \n    # componentEditorWindow is a MEL procedure so need to call through MEL.\n    import maya.mel\n    maya.mel.eval('componentEditorWindow()')\n    # Result: u'componentEditorWinComponEditor' #\n    pm.componentEditor( 'componentEditorWinComponEditor', q=True, ctl=True )\n    # Result: u'componentEditorWin|compEdMenLayout|compEdForm|compEdFrame|formLayout52|componentEditorWinComponEditor' #", 
    "condition": "    \n    \n    import pymel.core as pm\n    \n    #    Create a new condition, called \"UndoNorRedo\", which is true if\n    #    and only if undo is not available and redo is not available:\n    \n    def isUndoNorRedo() :\n            return not pm.isTrue('UndoAvailable') and not pm.isTrue('RedoAvailable')\n    \n    pm.condition('UndoNorRedo', initialize=True, d=['UndoAvailable', 'RedoAvailable'], s='isUndoNorRedo')\n    \n    # Try out the new condition\n    #\n    if pm.isTrue('UndoNorRedo') :\n            print 'Neither undo nor redo is available'\n    else :\n            print 'Undo or redo is available'\n    \n    pm.condition('UndoNorRedo', delete=True)", 
    "cone": "    \n    \n    import pymel.core as pm\n    \n    pm.cone()\n    # Result: [nt.Transform(u'nurbsCone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.cone( ch= True, radius=10, hr=3 )\n    # Result: [nt.Transform(u'nurbsCone2'), nt.MakeNurbCone(u'makeNurbCone2')] #\n    pm.cone( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg' )\n    # Result: [nt.Transform(u'nurbsCone3'), nt.MakeNurbCone(u'makeNurbCone3')] #\n    pm.cone( ut=True, tol=0.01 )\n    # Result: [nt.Transform(u'nurbsCone4'), nt.MakeNurbCone(u'makeNurbCone4')] #\n    \n    #Query the radius of the selected cone\n    r = pm.cone( q=True, r=True )", 
    "confirmDialog": "    \n    \n    import pymel.core as pm\n    \n    \n    # Create an empty single button dialog.\n    #\n    \n    pm.confirmDialog()\n    # Result: u'Confirm' #\n    \n    \n    # Create a basic Yes/No dialog.\n    #\n    \n    pm.confirmDialog( title='Confirm', message='Are you sure?', button=['Yes','No'], defaultButton='Yes', cancelButton='No', dismissString='No' )\n    # Result: u'Yes' #", 
    "connectAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'transform', n='firstGuy' )\n    # Result: nt.Transform(u'firstGuy') #\n    pm.createNode( 'transform', n='secondGuy' )\n    # Result: nt.Transform(u'secondGuy') #\n    \n    # Connect the translation of two nodes together\n    pm.connectAttr( 'firstGuy.t', 'secondGuy.translate' )\n    \n    # Connect the rotation of one node to the override colour\n    # of a second node.\n    pm.connectAttr( 'firstGuy.rotate', 'secondGuy.overrideColor' )", 
    "connectControl": "    \n    \n    import pymel.core as pm\n    \n    sphereNames = pm.sphere()\n    sphereName = sphereNames[0]\n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout21') #\n    pm.text( l='X Value:' )\n    # Result: ui.Text('window1|columnLayout21|text2') #\n    pm.floatField( 'xx' )\n    # Result: ui.FloatField('window1|columnLayout21|xx') #\n    pm.connectControl( 'xx', '%s.tx' % sphereName )\n    pm.text( l='Visibility' )\n    # Result: ui.Text('window1|columnLayout21|text3') #\n    pm.checkBox( 'vis' )\n    # Result: ui.CheckBox('window1|columnLayout21|vis') #\n    pm.connectControl( 'vis', '%s.visibility' % sphereName )\n    pm.floatFieldGrp( 'rot', l='Rotation:', numberOfFields=3 )\n    # Result: ui.FloatFieldGrp('window1|columnLayout21|rot') #\n    # index 1 would be the text label\n    pm.connectControl( 'rot', '%s.rx' % sphereName, index=2 )\n    pm.connectControl( 'rot', '%s.ry' % sphereName, index=3 )\n    pm.connectControl( 'rot', '%s.rz' % sphereName, index=4 )\n    pm.showWindow( window )\n    \n    # Connecting two attributes to a single control\n    #\n    pm.window()\n    # Result: ui.Window('window2') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window2|columnLayout22') #\n    pm.floatSlider( 'slider' )\n    # Result: ui.FloatSlider('window2|columnLayout22|slider') #\n    pm.showWindow()\n    \n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.polyCube()\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    pm.move( 0, 2, 0 )\n    pm.connectControl( 'slider', 'pCube1.tx', 'pSphere1.tx' )", 
    "connectDynamic": "    \n    \n    import pymel.core as pm\n    \n    pm.connectDynamic( 'Book', c='Floor' )\n    # Connects the dynamic object \"Book\" to the collision model of the\n    # \"Floor\". This means that the book will collide with and bounce off of\n    # the floor.\n    \n    pm.connectDynamic( 'Moon', 'Spaceship', f='Moon' )\n    # Connects dynamic object \"Spaceship\" to the all fields and emitters\n    # owned by \"Moon\".\n    \n    pm.connectDynamic( 'Spaceship', f='newtonField1' )\n    # Connects dynamic object \"Spaceship\" to \"newtonField1\" owned by \"Moon\".\n    \n    pm.connectDynamic( 'Moon', f='newtonField1' )\n    # If the selection list consists of \"Spaceship\", connects dynamic object\n    # \"Spaceship\" to \"newtonField1\" and all emitters owned by \"Moon\".\n    \n    pm.connectDynamic( 'Spaceship', d=True, f='Moon' )\n    # Deletes the field connection between all the fields owned by \"Moon\" and\n    # \"Spaceship\". Note that the command establishing the connection need not\n    # be in the undo queue.\n    \n    pm.connectDynamic( 'Spaceship', d=True, f='newtonField1' )\n    # Deletes the field connection between \"newtonField1\" owned by \"Moon\" and\n    # \"Spaceship\".", 
    "connectJoint": "    \n    \n    import pymel.core as pm\n    \n    # make joint1 a child of joint4.\n    #\n    pm.connectJoint( 'joint1', 'joint4', pm=True )\n    \n    # make joint1 a child of joint4's parent\n    #\n    pm.connectJoint( 'joint1', 'joint4', cm=True )", 
    "connectionInfo": "    \n    \n    import pymel.core as pm\n    \n    #    Create a sphere and a cone and make the Z translation of the cone\n    #    be dependent on the X translation of the sphere.\n    #\n    cone = pm.cone()\n    sphere = pm.sphere()\n    sphereTx = '%s.tx' % sphere[0]\n    coneTz = '%s.tz' % cone[0]\n    pm.connectAttr(sphereTx, coneTz)\n    \n    #    Verify the connection and print out the source plug.\n    #\n    if pm.connectionInfo( coneTz, isDestination=True):\n      print( 'Source: %s' % pm.connectionInfo(coneTz,sourceFromDestination=True) )\n    \n    #    Verify the connection and print out the destination plug.\n    #\n    if pm.connectionInfo( sphereTx, isSource=True):\n      destinations = pm.connectionInfo(sphereTx, destinationFromSource=True)\n      for destination in destinations:\n        print destination", 
    "constrain": "    \n    \n    import pymel.core as pm\n    \n    # \"Nail\" a rigid body at position \"\"0.0, 2.5, 0.0\"\"\n    #\n    pm.constrain( 'rigidBody1', nail=True, p=(0, 2.5, 0) )\n    \n    # \"Pin\" two rigid bodies together at the position \"\"0.0, 2.5, 0.0\"\".\n    #\n    pm.constrain( 'rigidBody1', 'rigidBody2', pin=True, n='pin', p=(0, 2.5, 0) )\n    \n    # \"Hinge\" a rigid body at the position \"\"0.0, 2.5, 0.0\"\".\n    #\n    pm.constrain( 'rigidBody1', hinge=True, p=(0, 2.5, 0) )\n    \n    # Create a barrier for a rigid body which will not allow the rigid body\n    # to fall below (in y by default) the plane defined by the\n    # barrier point \"\"0.0, 2.5, 0.0\"\".\n    #\n    pm.constrain( 'rigidBody1', barrier=True, p=(0, 2.5, 0) )\n    \n    # Add a \"Spring\" to a rigid body at the position \"\"0.0, 2.5, 0.0\"\"\n    # connected on the rigid body at point \"\"0, 0, 0\"\"\n    #\n    pm.constrain( 'rigidBody1', spring=True, name='spring', p=(0, 2.5, 0), rl=1.0 )", 
    "constructionHistory": "    \n    \n    import pymel.core as pm\n    \n    pm.constructionHistory( tgl=True )\n    pm.constructionHistory( tgl=False )\n    \n    # Returns true if construction history is on.\n    # Returns false if construction history is off.\n    pm.constructionHistory( q=True, tgl=True )\n    # Result: False #", 
    "container": "    \n    \n    import pymel.core as pm\n    \n    # Create a container holding a locator transform only (not its shape)\n    #\n    loc = pm.spaceLocator()\n    con1 = pm.container(addNode=[loc[0]])\n    \n    # Select the nodes that would be in the container, but don't create it\n    #\n    pm.container(preview=True,addNode=[cone[0]],includeNetwork=True,includeHierarchyBelow=True)\n    \n    \n    # Create a container holding a polygon shape, its transform and its\n    # history node. Publish its tx attr.\n    #\n    cone = pm.polyCone()\n    con2 = pm.container(addNode=[cone[0]],includeNetwork=True,includeHierarchyBelow=True)\n    \n    # Publish the cone's tx and the locator's tx with the same name\n    #\n    pm.container(con1,edit=True,publishName='main_tx')\n    pm.container(con1,edit=True,bindAttr=['%s.tx' % loc[0],'main_tx'])\n    pm.container(con2,edit=True,publishName='main_tx')\n    pm.container(con2,edit=True,bindAttr=['%s.tx' % cone[0],'main_tx'])\n    \n    # Publish the name \"sam\", but don't bind it to anything\n    #\n    pm.container(con1,edit=True,publishName='sam')\n    \n    # Query the bound publications\n    #\n    pm.container(con1,query=True,bindAttr=1)\n    [u'locator1.translateX', u'main_tx']\n    \n    # Query all the published names:\n    #\n    pm.container(con1,query=True,publishName=1)\n    [u'main_tx' u'sam']\n    \n    # Query just the bound published names:\n    #\n    pm.container(con1,query=True,publishName=1,bindAttr=1)\n    [u'main_tx']\n    \n    # Query just the unbound published names:\n    #\n    pm.container(con1,query=True,publishName=1,unbindAttr=1)\n    [u'sam']\n    \n    # Query just the published name for the published attribute locator1.translateX\n    #\n    pm.container(con1,query=True,publishName=1,publishAttr='locator1.translateX')\n    [u'main_tx']\n    \n    # keyframe the cone's tx\n    #\n    pm.currentTime(0)\n    coneTx = '%s.tx' % cone[0]\n    pm.setKeyframe(coneTx)\n    pm.currentTime(4)\n    pm.setAttr(coneTx,10.0)\n    pm.setKeyframe(coneTx)\n    \n    # Query the nodes in the container\n    #\n    nodes = pm.container(con2,query=True,nodeList=True)\n    \n    # Remove a node from the container\n    #\n    pm.container(con2,edit=True,removeNode=nodes[2])\n    \n    # Remove the container without deleting the nodes within it\n    #\n    pm.container(con2,edit=True,removeContainer=True)\n    \n    # query a referenced scenes for its assets\n    #\n    pm.container(q=True,fileName='C:/My Documents/maya/projects/default/scenes/refFile.mb')", 
    "containerBind": "    \n    \n    import pymel.core as pm\n    \n    # query the template binding sets available for this container\n    #\n    pm.containerBind(container1, query=1, bindingSetList=1)\n    # attempt to bind published names on the container\n    # using matching information in the bindingSet specified.\n    # By default only unbound names are considered.\n    #\n    pm.containerBind(container1, bindingSet=\"MayaBindings\")\n    # Attempt to bind all published names on the container\n    # using matching information in the bindingSet specified.\n    # Previously bound names will only be re-bound if the bindingSet\n    # produces an appropriate match.\n    #\n    pm.containerBind(container1, bindingSet=\"MayaBindings\", allNames=1)\n    # Forcibly re-bind all published names on the container\n    # using matching information in the bindingSet specified.\n    # All previously bound names will be unbound and will only\n    # be re-bound if the binding set produces an appropriate match.\n    #\n    pm.containerBind(container1, bindingSet=\"MayaBindings\", allNames=1, force=1)\n    # preview what the results of a binding operation would be, but do\n    # not actually perform it.\n    pm.containerBind(container1, bindingSet=\"MayaBindings\", preview=1, allNames=1, force=1)", 
    "containerProxy": "    \n    \n    import pymel.core as pm\n    \n    # create a proxy for container1\n    #\n    pm.containerProxy('container1')", 
    "containerPublish": "    \n    \n    import pymel.core as pm\n    \n    # create a proxy for container1\n    #\n    pm.containerPublish(container1,inConnections=True,mergeShared=True)\n    # add a published name 'mainShader' of type 'objectSet'\n    #\n    pm.containerPublish(container1,publishNode=['mainShadingSet','objectSet']\n    # bind a shading group to the published name\n    #\n    containerPublish -bindNode \"mainShadingSet\" blinn1SG container1;\n    # query what is bound\n    #\n    container -q -bindNode container1;\n    # unbind the shading group\n    #\n    containerPublish -unbindNode \"mainShadingSet\" container1;", 
    "containerTemplate": "    \n    \n    import pymel.core as pm\n    \n    #    Create a container template.\n    #\n    pm.containerTemplate( 'characterRig' )\n    # Create a container template using the published attribute information from\n    # container1.\n    pm.containerTemplate ('characterRig', fromContainer='container1')\n    #\n    # Save the template to a template file in the default template location.\n    pm.containerTemplate ('characterRig', save=True)\n    # Load a template (the template is located along the template search path)\n    pm.containerTemplate ('characterRig', load=True)\n    # Re-load a template that has already been loaded\n    # This is useful if you have made edits to the template outside of maya\n    pm.containerTemplate ('characterRig', force=True, load=True)\n    # Determine the file that a template was loaded from\n    pm.containerTemplate ('characterRig', query=True, fileName=True)\n    C:/myTemplates/characterRig.template\n    #\n    # Add a view to a container template. This view will be generated from the\n    # given container, and will use a group-by-node hierarchical layout.\n    # The view can be subesequently customized if desired.\n    #\n    pm.containerTemplate ('characterRig', edit=True, addView='newView', fromContainer='container1', layoutMode=1)\n    pm.containerTemplate ('characterRig', save=True)\n    #\n    # Add another view to a container template.\n    # This view will be generated with a default layout and can be\n    # subsequently customized.\n    #\n    pm.containerTemplate ('characterRig', edit=True, addView=\"newView2\")\n    pm.containerTemplate ('characterRig', save=True)\n    #\n    # Get the list of attributes in the template.  This will return\n    # a flat list of attribute names in the order in which they appear\n    # in the template definition.\n    #\n    pm.containerTemplate ('characterRig', query=True, attributeList=True)\n    [u'attribute1', u'attribute2', u'attribute3']\n    #\n    # List all loaded templates\n    list = pm.containerTemplate(query=True, templateList=True)\n    [u'Object', u'characterRig']\n    #\n    # List all templates matching a a given template name\n    # Note that all templates with matching base name (in any package) will\n    # be returned.\n    pm.containerTemplate (query=True, templateList=True, matchName='characterRig')\n    [u'characterRig']\n    #", 
    "containerView": "    \n    \n    import pymel.core as pm\n    \n    # Obtain a list of all available views for container1\n    #\n    pm.containerView ( 'container1', query=True, viewList=True);\n    [u'Animation', u'Rendering']\n    #\n    # Get a list of view items in the current view for container1\n    # In this example the list returned will include only the name for\n    # each item in the view.\n    pm.containerView ( 'container1', itemList=True, itemInfo=\"itemName\", query=True)\n    [u'RenderSetup', u'color', u'intensity', u'Transform', u'rotateY']\n    #\n    # Get a list of view items.\n    # In this query the list returned will include the group boolean and label\n    # for each item in the view.\n    pm.containerView ( 'container1', itemList=True, itemInfo=\"itemIsGroup:itemLabel\", query=True)\n    [u'1', u'RenderSetup', u'0', u'Color', u'0', u'Intensity', u'1', u'Transform', u'0', u'Rotate Y']", 
    "contextInfo": "    \n    \n    import pymel.core as pm\n    \n    # Create a particle tool context, then switch to it\n    pm.dynParticleCtx('dynParticleCtx1')\n    # Result: u'dynParticleCtx1' #\n    pm.setToolTo('dynParticleCtx1')\n    \n    # Get the class type of the current context\n    ctx = pm.currentCtx()\n    pm.contextInfo(ctx, c=True)\n    # Result: u'dynParticle' #\n    \n    # Get the title of the current context\n    pm.contextInfo(ctx, t=True)\n    # Result: u'Particle Tool' #", 
    "control": "    \n    \n    import pymel.core as pm\n    \n    #    Create a simple window containing a single column layout\n    #    and a button.\n    #\n    window = pm.window(title='Control Example')\n    column = pm.columnLayout()\n    button = pm.button()\n    pm.showWindow( window )\n    \n    #    If you don't know that the control is actually a 'button' then\n    #    you may use the 'control' command to determine certain properties.\n    #\n    pm.control( button, query=True, width=True )\n    # Result: 60 #\n    pm.control( button, query=True, height=True )\n    # Result: 23 #\n    pm.control( button, edit=True, visible=False )\n    # Result: u'window1|columnLayout23|button14' #\n    pm.control( button, query=True, visible=True )\n    # Result: False #", 
    "convertIffToPsd": "    \n    \n    import pymel.core as pm\n    \n    pm.convertIffToPsd( 'd:/test.iff', 'd:/test.psd', xr=640, yr=320 )", 
    "convertSolidTx": "    \n    \n    import pymel.core as pm\n    \n    pm.file( f=True, new=True )\n    \n    # Create a blinn shader with a marble texture.\n    pm.shadingNode( 'blinn', asShader=True )\n    pm.sets( renderable=True, noSurfaceShader=True, empty=True, name='blinn1SG' )\n    pm.connectAttr( 'blinn1.outColor', 'blinn1SG.surfaceShader', f=True )\n    pm.shadingNode( 'marble', asTexture=True )\n    pm.connectAttr( 'marble1.outColor', 'blinn1.color', f=True )\n    \n    # Create two objects, and assign the blinn shader to them.\n    pm.polySphere()\n    pm.sets( e=True, forceElement='blinn1SG' )\n    pm.polyPlane()\n    pm.move( 2, 0, 0 )\n    pm.sets( e=True, forceElement='blinn1SG' )\n    \n    # Create a low resolution texture for the sphere\n    pm.convertSolidTx( 'marble1', 'pSphere1', rx=64, ry=64 )\n    \n    # Create a transparency texture forthe plane.\n    pm.convertSolidTx( 'marble1.outAlpha', 'pPlane1' )\n    \n    # Create a texture named myTexture.iff for the sphere.\n    pm.convertSolidTx( 'marble1', 'pSphere1', bm='extend', fileImageName='myTexture.iff' )", 
    "convertTessellation": "    \n    \n    import pymel.core as pm\n    \n    # Convert the basic tessellation settings to advanced.\n    pm.convertTessellation( 'nurbsSphere1' )\n    # Set the tessellation for nurbsSphere1 based on camera projection\n    # from persp.\n    pm.convertTessellation( 'nurbsSphere1', camera='persp' )\n    # Set tessellation based on all renderable cameras.\n    pm.convertTessellation( 'nurbsSphere2', allCameras='nurbsSphere1' )\n    # Set the tessellation for all selected objects.\n    pm.convertTessellation()", 
    "convertUnit": "    \n    \n    import pymel.core as pm\n    \n    # Returns string \"4.80315in\", which is 12.2cm in inches.\n    pm.convertUnit( '12.2', fromUnit='cm', toUnit='in' )\n    # Result: u'4.80315in' #\n    \n    # Returns string \"3.499563yd\", which is 3.2m in yards.\n    pm.convertUnit( '3.2m', toUnit='yard' )\n    # Result: u'3.499563yd' #\n    \n    # Returns float value 13.716, which is 5.4 inches in cm (default system units).\n    pm.convertUnit( '5.4', fromUnit='inch' )\n    # Result: u'13.716' #", 
    "copyAttr": "    \n    \n    import pymel.core as pm\n    \n    # transfer input connections and values from locator1 to locator2\n    #\n    pm.copyAttr('locator1','locator2',inConnections=True,values=True)\n    # transfer only the translateX and translateY values\n    #\n    pm.copyAttr('locator1','locator2',values=True,attribute=['tx','translateY'])", 
    "copyDeformerWeights": "    \n    \n    import pymel.core as pm\n    \n    # Create plane and a cluster.\n    #\n    pm.file( f=True,new=True )\n    pm.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\n    pm.cluster( n='testCluster', 'pPlane1' )\n    # Modify some weights on the -x side of the character\n    #\n    pm.select( ['pPlane1.vtx[0]', 'pPlane1.vtx[6]', 'pPlane1.vtx[12]', 'pPlane1.vtx[18]'])\n    pm.percent( 'testCluster', v='0.5' )\n    # Mirror the skin weights to the other side of the character\n    # Mirror inverse is chosen since we want to go from -x to +x, not +x to -x.\n    #\n    pm.copyDeformerWeights( ss='pPlane1', ds='pPlane1', sd='testCluster', mirrorMode='YZ', mirrorInverse = True)\n    pm.select( ['pPlane1.vtx[5]', 'pPlane1.vtx[11]', 'pPlane1.vtx[17]', 'pPlane1.vtx[23]'])\n    pm.percent( 'testCluster', q=True, v=True )", 
    "copyFlexor": "    \n    \n    import pymel.core as pm\n    \n    # Copy flexor ffd1Lattice to joint8\n    #\n    pm.copyFlexor( 'ffd1Lattice', 'joint8' )", 
    "copyKey": "    \n    \n    import pymel.core as pm\n    \n    # Copy keyframes from frame 10 to 20 of cube1's \"Translate X\" attribute\n    #\n    pm.copyKey( 'cube1', time=(10,20), attribute='translateX', option=\"curve\" )\n    # Result: 0 #\n    \n    # Copy from all active objects all keys in the range 0 to 60\n    #\n    pm.copyKey( time=(0,60) )\n    # Result: 0 #", 
    "copyNode": "", 
    "copySkinWeights": "    \n    \n    import pymel.core as pm\n    \n    # Create plane and a skeleton. Bind the skin.\n    #\n    pm.file( f=True,new=True )\n    pm.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\n    pm.select( d=True )\n    pm.joint( p=(0, 0, -6) )\n    pm.joint( p=(0, 0, -4) )\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz')\n    pm.joint( p=(2, 0, -4) )\n    pm.joint( 'joint2', e=True, zso=True, oj='xyz')\n    pm.joint( p=(5, 0, -3) )\n    pm.joint( 'joint3', e=True, zso=True, oj='xyz')\n    pm.select( 'joint2', r=True )\n    pm.joint( p=(-2, 0, -4) )\n    pm.joint( 'joint4', e=True, zso=True, oj='xyz')\n    pm.joint( p=(-5, 0, -3) )\n    pm.joint( 'joint5', e=True, zso=True, oj='xyz')\n    pm.select( 'joint2', r=True )\n    pm.joint( p=(0, 0, 3) )\n    pm.joint( 'joint6', e=True, zso=True, oj='xyz')\n    pm.joint( p=(5, 0, 5) )\n    pm.joint( 'joint7', e=True, zso=True, oj='xyz')\n    pm.select( 'joint7', r=True )\n    pm.joint( p=(-5, 0, 5) )\n    pm.joint( 'joint8', e=True, zso=True, oj='xyz')\n    pm.select( 'pPlane1', 'joint1', r=True )\n    maya.mel.eval('createSkinCluster \"-mi 5 -dr 4\"' )\n    # Modify some weights on the -x side of the character\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[30]', tv=('joint2',0.200000) )\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[31]', tv=('joint2',0.200000) )\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[24]', tv=('joint5',0.550000) )\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[25]', tv=('joint5',0.550000) )\n    # Mirror the skin weights to the other side of the character\n    # Mirror inverse is chosen since we want to go from -x to +x, not +x to -x.\n    #\n    pm.copySkinWeights( ss='skinCluster1', ds='skinCluster1', mirrorMode='YZ', mirrorInverse=True )\n    # Now create a second plane and bind it as skin\n    #\n    pm.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\n    pm.select( 'pPlane2', r='joint1' )\n    maya.mel.eval('createSkinCluster \"-mi 5 -dr 4\"' )\n    # Copy the skin weights from the first plane onto the new plane.\n    # The -noMirror flag is used since we want to copy directly, not mirror.\n    #\n    pm.copySkinWeights( ss='skinCluster1', ds='skinCluster2', noMirror=True )", 
    "createAttrPatterns": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.createAttrPatterns( patternType=\"xmlPattern\", patternFile=\"patterns/patternFile.xml\" )\n    // Result: [myXMLPattern] //", 
    "createDisplayLayer": "    \n    \n    import pymel.core as pm\n    \n    #    Create a sphere.\n    #\n    objectArray = pm.sphere()\n    #    Select the sphere.\n    #\n    pm.select( objectArray[0] )\n    #    Create a layer. The selected object will be placed\n    #    in this layer. Note in this case both the nurbsSphere\n    #    and nurbsSphere shape are placed in the layer.\n    #\n    pm.createDisplayLayer()\n    # Result: nt.DisplayLayer(u'displayLayer') #\n    #    Create a cone.\n    #\n    objectArray = pm.cone()\n    #    Select the cone.\n    #\n    pm.select( objectArray[0] )\n    #    Create a layer but only put the nurbsCone in the layer.\n    #    The nurbsConeShape will remain in the default layer\n    #    as a result of specifying the -nr/noRecurse flag.\n    #\n    #    Note also that you can specify the name of the layer\n    #    with the -n/name flag.\n    #\n    pm.createDisplayLayer( noRecurse=True, name='ExampleLayer' )\n    # Result: nt.DisplayLayer(u'ExampleLayer') #", 
    "createEditor": "    \n    \n    import pymel.core as pm\n    \n    # The following command will create an attribute\n    # editor in someWindow|topLayout for curve2.\n    #\n    pm.createEditor( 'someWindow|toplayout', 'curve2' )", 
    "createLayeredPsdFile": "    \n    \n    import pymel.core as pm\n    \n    # Creates a layered PSD file with \"Layer 1\" as one of the layers. The image which\n    # gets transfered to \"Layer 1\" is picked from D:/test.iff. The blend mode assigned to\n    # is the \"Normal\" mode.\n    pm.createLayeredPsdFile( 'D:/test.psd', xr=640, yr=480, ifn=('D:/test.iff', 'Normal', 'Layer 1') )", 
    "createNode": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'transform', n='transform1' )\n    # Result: nt.Transform(u'transform1') #\n    pm.createNode( 'nurbsSurface', n='surface1', p='transform1' )\n    # Result: nt.NurbsSurface(u'surface1') #\n    pm.createNode( 'camera', shared=True, n='top' )\n    \n    # This transform will be selected when created\n    pm.createNode( 'transform', n='selectedTransform' )\n    # Result: nt.Transform(u'selectedTransform') #\n    \n    # This will create a new transform node, but 'selectedTransform'\n    # will still be selected.\n    pm.createNode( 'transform', ss=True )\n    # Result: nt.Transform(u'transform2') #\n    \n    # Create node under new namespace\n    pm.createNode( 'transform', n='newNS:transform1' )\n    # Result: nt.Transform(u'newNS:transform1') #", 
    "createNurbsCircleCtx": "", 
    "createNurbsConeCtx": "", 
    "createNurbsCubeCtx": "", 
    "createNurbsCylinderCtx": "", 
    "createNurbsPlaneCtx": "", 
    "createNurbsSphereCtx": "", 
    "createNurbsSquareCtx": "", 
    "createNurbsTorusCtx": "", 
    "createPolyConeCtx": "", 
    "createPolyCubeCtx": "", 
    "createPolyCylinderCtx": "", 
    "createPolyHelixCtx": "", 
    "createPolyPipeCtx": "", 
    "createPolyPlaneCtx": "", 
    "createPolyPlatonicSolidCtx": "", 
    "createPolyPrismCtx": "", 
    "createPolyPyramidCtx": "", 
    "createPolySoccerBallCtx": "", 
    "createPolySphereCtx": "", 
    "createPolyTorusCtx": "", 
    "createRenderLayer": "    \n    \n    import pymel.core as pm\n    \n    # Add nut and nutShape to a new render layer\n    #\n    pm.select( 'nut' )\n    pm.createRenderLayer()\n    renderLayer1\n    # Add only bolt to a new render layer\n    #\n    pm.createRenderLayer( 'bolt', noRecurse=True )\n    renderLayer2\n    # Add washer to the new render layer 'assembly'.\n    #\n    pm.createRenderLayer( 'washer', noRecurse=True, name='assembly' )\n    assembly\n    # Create a layer that will always contains everything\n    #\n    pm.createRenderLayer( g=True )\n    renderLayer3", 
    "createSubdivRegion": "    \n    \n    import pymel.core as pm\n    \n    # after selecting components of a subdivision surface\n    pm.createSubdivRegion()", 
    "ctxAbort": "    \n    \n    import pymel.core as pm\n    \n    # Create a new particle tool context, then switch to it\n    pm.dynParticleCtx('dynParticleCtx1')\n    pm.setToolTo('dynParticleCtx1')\n    # Click the positions where you want to place the particles\n    \n    # This command will reset the particle tool, clear the particles you have just created\n    pm.ctxAbort();", 
    "ctxCompletion": "    \n    \n    import pymel.core as pm\n    \n    # Create a curve\n    pm.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n    # Result: nt.Transform(u'curve1') #\n    \n    # Create a new curve editor context to modify the curve, then switch to it\n    # You can modify the curve using the manipulator handle\n    pm.curveEditorCtx('curveEditorCtx1')\n    # Result: u'curveEditorCtx1' #\n    pm.setToolTo('curveEditorCtx1')\n    \n    # This command ends curve editing, the manipulator handle will disappear, leaving the modified curve\n    pm.ctxCompletion()", 
    "ctxData": "", 
    "ctxEditMode": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly cube\n    pm.polyCube(w=2, h=2, d=2, n='pCube1')\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    \n    # Create a new rotate manip context, then switch to it.\n    pm.manipRotateContext('manipRotateContext1')\n    # Result: u'manipRotateContext1' #\n    pm.setToolTo('manipRotateContext1')\n    \n    # Switch to edit mode to change pivots\n    pm.ctxEditMode()", 
    "ctxTraverse": "    \n    \n    import pymel.core as pm\n    \n    # Create a particle context, then switch to it\n    pm.dynParticleCtx('dynParticleCtx1')\n    pm.setToolTo('dynParticleCtx1')\n    \n    # Now you can create particles by mouse clicking\n    # After creating several particles, we switch to edit mode\n    pm.ctxEditMode()\n    \n    # Traverse in the created particles\n    pm.ctxTraverse(left=True)\n    pm.ctxTraverse(left=True)\n    pm.ctxTraverse(right=True)", 
    "currentCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.currentCtx()\n    # Result: u'selectSuperContext' #", 
    "currentTime": "    \n    \n    import pymel.core as pm\n    \n    # Query the current time\n    #\n    pm.currentTime( query=True )\n    # Result: 1.0 #\n    \n    # Change the current time to \"30\" in current time units\n    #\n    pm.currentTime( 30, edit=True )\n    # Result: 30.0 #\n    pm.currentTime( 30 )\n    # Result: 30.0 #\n    \n    # Change the current time to 2 seconds\n    #\n    pm.currentTime( '2sec', edit=True )\n    # Result: 48.0 #\n    \n    # Change the current time, but do not cause the model\n    # to update.\n    #\n    pm.currentTime( -10, update=False, edit=True )\n    # Result: -10.0 #", 
    "currentTimeCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.currentTimeCtx()\n    # Result: u'currentTimeCtx1' #", 
    "currentUnit": "    \n    \n    import pymel.core as pm\n    \n    # What is the current linear unit?\n    pm.currentUnit( query=True, linear=True )\n    # Result: u'cm' #\n    \n    # What is the current angular unit in its long name form?\n    pm.currentUnit( fullName=True, query=True, angle=True )\n    # Result: u'degree' #\n    \n    # Change the current time unit to ntsc\n    pm.currentUnit( time='ntsc' )\n    # Result: u'ntsc' #\n    \n    # Change the current linear unit to inches\n    pm.currentUnit( linear='in' )\n    # Result: u'inch' #", 
    "curve": "    \n    \n    import pymel.core as pm\n    \n    # These commands create curves with four control vertices.\n    # The first one is created without weights.  The third command\n    # shows how you can use units to specify position.\n    pm.curve( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\n    # Result: nt.Transform(u'curve1') #\n    pm.curve( pw=[(0, 0, 0, 1), (3, 5, 6, 1), (5, 6, 7, 1), (9, 9, 9, 1)] )\n    # Result: nt.Transform(u'curve2') #\n    pm.curve( p=[('0cm', '0cm', '0cm'), ('3in', '5in', '6in'), ('5ft', '6ft', '7ft'), (9, 9, 9)] )\n    # Result: nt.Transform(u'curve3') #\n    \n    # This command replaces an existing curve, curve1, with the given points.\n    # Do not use this flag on a curve that is a result of a construction\n    # history operation.\n    pm.curve( 'curve1', r=True, p=[(0, 0, 0), (3, 5, 6), (10, 12, 14), (9, 9, 9)] )\n    # Result: nt.Transform(u'curve1') #\n    \n    # This command adds two CVs to an existing curve, curve1.\n    # The \"-ws\" flag can be used if the specified CVs are in world space.\n    # Do not use this flag on a curve that is a result of a construction\n    # history operation.\n    pm.curve( 'curve1', a=True, p=[(13, 13, 13), (13, 15, 16)] )\n    # Result: nt.Transform(u'curve1') #\n    \n    # This command creates a curve with five control vertices,\n    # with a knot vector. Notice that there must be\n    # (number of CVs + degree - 1) knots and that the knot\n    # vector must be non-decreasing.\n    pm.curve( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2] )\n    # Result: nt.Transform(u'curve4') #\n    \n    # This command creates a closed (or \"periodic\") curve with\n    # four distinct CVs. You must specify a knot vector when the\n    # \"-per\" flag is used. Notice that the first \"degree\" points\n    # are the same as the last \"degree\" points (ie. the first three\n    # points are the same as the last three points). Notice also\n    # that the knot spacing between the first \"degree\" knots must\n    # be the same as the spacing between the last \"degree\" knots\n    # (ie. the space between the 1st and 2nd knots is the same as\n    # the space between the 7th and 8th knots, and the space between\n    # the 2nd and 3rd knots is the same as the space between the\n    # 8th and 9th knots). There must be space between the first\n    # \"degree\" knots, unlike the previous example, where the first\n    # \"degree\" knots are the same.\n    pm.curve( per=True, p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (0, 0, 0), (3, 5, 6), (5, 6, 7)], k=[-2,-1,0,1,2,3,4,5,6] )\n    # Result: nt.Transform(u'curve5') #\n    \n    # How to query curve properties:\n    \n    # This returns the degree of the curve.  Note that the\n    # number of CVs = degree + spans.\n    pm.getAttr( 'curve1.degree' )\n    # Result: 3 #\n    \n    # This returns the number of spans in the curve.  Note that the\n    # number of CVs = degree + spans.\n    pm.getAttr( 'curve1.spans' )\n    # Result: 3 #\n    \n    # This returns the curve form.\n    pm.getAttr( 'curve1.form' )\n    # Result: 0 #\n    \n    # This returns the minimum parameter value on the curve.\n    pm.getAttr( 'curve1.minValue' )\n    # Result: 0.0 #\n    \n    # This returns the maximum parameter value on the curve.\n    pm.getAttr( 'curve1.maxValue' )\n    # Result: 3.0 #\n    \n    # This returns the local x,y,z of the 1st CV.  Use a curve info node if\n    # the curve is a result of a construction history operation.\n    pm.getAttr( 'curve1.cv[0]' )\n    # Result: dt.Vector([0.0, 0.0, 0.0]) #\n    \n    # This returns the local x,y,z of the 1st three CVs.  Use a curve info\n    # node if the curve is a result of a construction history operation.\n    pm.getAttr( 'curve1.cv[*]' )\n    # Result: (0.0, 0.0, 0.0) #\n    \n    # This returns the local x,y,z of all CVs.  Use a curve info node if\n    # the curve is a result of a construction history operation.\n    pm.getAttr( 'curve1.cv[0:2]' )\n    # Result: (0.0, 0.0, 0.0) #\n    \n    # This returns the arc length of the curve.  Use \"-ch\" flag with\n    # the arclen command to get a curve info node that constantly updates\n    # to the current arc length.\n    pm.arclen( 'curve1' )\n    # Result: 27.33287667066844 #\n    \n    # This sequence creates a curve info node, connects the info node to the\n    # curve and queries the knot vector of the curve using the curve info node.\n    # You can use the curve info node to query other attributes such as\n    # world space CV values and arc length.\n    pm.createNode( 'curveInfo' )\n    # Result: nt.CurveInfo(u'curveInfo1') #\n    pm.connectAttr( 'curveShape1.worldSpace', 'curveInfo1.inputCurve' )\n    pm.getAttr( 'curveInfo1.knots[*]' )", 
    "curveAddPtCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new context:\n    pm.curveAddPtCtx(\"CurveAddPtCtx\")\n    # Result: u'CurveAddPtCtx' #\n    pm.setToolTo(\"CurveAddPtCtx\")", 
    "curveBezierCtx": "", 
    "curveCVCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new context that will create curves of degree 5:\n    pm.curveCVCtx( \"curveCVContext\", degree=5 )\n    # Result: u'curveCVContext' #\n    pm.setToolTo(\"curveCVContext\")\n    \n    # To query the degree of an existing context:\n    pm.curveCVCtx( \"curveCVContext\", q=True, degree=True )\n    # Result: 5 #\n    \n    # To edit the degree of an existing context:\n    pm.curveCVCtx( \"curveCVContext\", , e=True, degree=7 )", 
    "curveEPCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new context that will create curves of degree 5:\n    pm.curveEPCtx( degree=5 )\n    # Result: u'curveEPCtx1' #\n    \n    # To query the degree of an existing context:\n    pm.curveEPCtx( 'curveEPCtx1', q=True, degree=True )\n    # Result: 5 #\n    \n    # To edit the degree of an existing context:\n    pm.curveEPCtx( 'curveEPCtx1', e=True, degree=7 )\n    # Result: u'curveEPCtx1' #", 
    "curveEditorCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a curve\n    pm.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n    # Result: nt.Transform(u'curve1') #\n    \n    # Create a new curve editor context to modify the curve, then switch to it\n    # You can modify the curve using the manipulator handle\n    pm.curveEditorCtx('curveEditorCtx1')\n    pm.setToolTo('curveEditorCtx1')", 
    "curveIntersect": "    \n    \n    import pymel.core as pm\n    \n    pm.curveIntersect( 'curve1', 'curve2' )\n    # Returns the parameter values that the curves intersect at.\n    # eg. if 6 parameter values are returned, the first 3 are\n    # on curve1 and the last 3 are on curve2.\n    \n    \n    pm.curveIntersect( 'curve1', 'curve2', useDirection=True, direction=(0, 1, 0) )\n    # Returns the parameter values that the curves intersect at\n    # when projected along vector (0, 1, 0).  This is useful\n    # for example when you are viewing the two curves in an orthographic\n    # view and the curves appear to intersect, even though\n    # they do not intersect in 3D.\n    \n    node = pm.curveIntersect('curve1', 'curve2', ch= True)\n    p1 = pm.getAttr(node + \".parameter1\" )   # or use \".p1\"\n    p2 = pm.getAttr(node + \".parameter2\" )   # or use \".p2\"\n    # Returns a string which is the name of a new curveIntersect\n    # dependency node.\n    # The \"getAttr\" commands return the parameter values at\n    # which the curves intersect each other.", 
    "curveMoveEPCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a curve\n    pm.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n    # Result: nt.Transform(u'curve1') #\n    \n    # Change the selection mode to components, and set edit-point selection mask on only\n    pm.selectMode(co=True)\n    pm.selectType(allComponents=False, editPoint=True)\n    \n    # Create a new curve edit point editor context, then switch to it\n    # You can move the edit points using manipulator\n    pm.curveMoveEPCtx('curveMoveEPCtx1')\n    # Result: u'curveMoveEPCtx1' #\n    pm.setToolTo('curveMoveEPCtx1')", 
    "curveOnSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.curveOnSurface( 'surface1', d=3, uv=((0, 0),(0.3, 0.5), (0.5, 0.6), (0.9, 1.0)) )\n    # This command creates a curve-on-surface of degree three with\n    # four control vertices on surface1.\n    \n    pm.curveOnSurface( 'surface1', uv=((0, 0), (0.3, 0.5), (0.5, 0.6), (0.7, 0.8), (1.0, 1.0)), k=(0, 0, 0, 1, 2, 2, 2) )\n    # This command creates a curve-on-surface with five CVs\n    # and a knot vector, on surface1. Notice that there must be\n    # (number of CVs + degree - 1) knots and that the knot\n    # vector must be non-decreasing.\n    \n    pm.curveOnSurface( 'surface1', degree=3, per=True, uv=((0, 0), (0.2, 0.6), (0.4, 0.7), (0.9, 0.9), (0.0, 0.0), (0.2, 0.6), (0.4, 0.7)), k=(-2, -1, 0, 1, 2, 3, 4, 5, 6) )\n    # This command creates a closed (or \"periodic\") curve-on-surface with\n    # four distinct CVs. You must specify a knot vector when the\n    # \"-per\" flag is on. Notice that the first \"degree\" points\n    # are the same as the last \"degree\" points (ie. the first three\n    # points are the same as the last three points). Notice also\n    # that the knot spacing between the first \"degree\" knots must\n    # be the same as the spacing between the last \"degree\" knots\n    # (ie. the space between the 1st and 2nd knots is the same as\n    # the space between the 7th and 8th knots, and the space between\n    # the 2nd and 3rd knots is the same as the space between the\n    # 8th and 9th knots). There must be space between the first\n    # \"degree\" knots, unlike the previous example, where the first\n    # \"degree\" knots are the same.\n    \n    pm.curveOnSurface( 'surface1-\"curve1', append=True, uv=(1.0, 1.0) )\n    # This command appends a point to an existing curve-on-surface.\n    # Notice that the curve-on-surface is specified, not just the surface.\n    \n    pm.curveOnSurface( 'surface1-\"curve1', replace=True, d=1, uv=((1.0, 1.0), (2.0, 2.0)) )\n    # This command replaces an existing curve, surface1-\"curve1, with a\n    # new curve of degree 1 having the given points. Do not use this\n    # flag on a curve that is a result of a construction history operation.", 
    "curveRGBColor": "    \n    \n    import pymel.core as pm\n    \n    # Set all \"translateX\" curves to draw magenta\n    pm.curveRGBColor( 'translateX', 1, 0, 1 )\n    \n    # Set all curves whose names end in \"Y\" to draw yellow\n    pm.curveRGBColor( '*Y', 1, 1, 0 )\n    \n    # Remove the custom color for \"translateX\" curves\n    # (which will revert to the standard UI color)\n    pm.curveRGBColor( r=True, 'translateX' )\n    \n    # List the currently defined custom curve colors\n    pm.curveRGBColor( list=True )", 
    "curveSketchCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new sketch context, which creates degree 3 curves:\n    pm.curveSketchCtx( \"pencilContext\", degree=3 )\n    # Result: u'pencilContext' #\n    pm.setToolTo(\"pencilContext\")\n    \n    # To query the degree of an existing context:\n    pm.curveSketchCtx( \"pencilContext\",q=True, degree=True )\n    # Result: 3 #\n    \n    # To edit the degree of an existing context:\n    pm.curveSketchCtx( \"pencilContext\", e=True, degree=1 )\n    # Result: u'pencilContext' #", 
    "customerInvolvementProgram": "", 
    "cutKey": "    \n    \n    import pymel.core as pm\n    \n    # Cut keyframes from frame 10 to 20 of cube1's \"Translate X\" attribute\n    #\n    pm.cutKey( 'cube1', time=(10,20), attribute='translateX', option=\"keys\" )\n    \n    # Cut from all active objects all keys in the range 0 to 60\n    #\n    pm.cutKey( time=(0,60) )", 
    "cycleCheck": "    \n    \n    import pymel.core as pm\n    \n    # Print a message if xNode.tx is in a cycle.\n    pm.createNode( 'transform', n='xNode' )\n    # Result: nt.Transform(u'xNode') #\n    if pm.cycleCheck('xNode.tx') \" 0:\n      print('xNode.tx is in a cycle')\n    \n    # Get the list of plugs in a cycle with xNode.ty\n    pm.connectAttr( 'xNode.tx', 'xNode.ty' )\n    pm.connectAttr( 'xNode.ty', 'xNode.tx' )\n    cycles = pm.cycleCheck()\n    \n    # Print a message if there are any cycles in the graph.\n    if pm.cycleCheck(all=True, tl='10sec') \" 0:\n      print(\"Your graph has a cycle.\")\n    else:\n      print(\"Your graph probably does not have a cycle\")\n    \n    # List all cycles involving the DG and DAG hierarchy.\n    pm.cycleCheck(all=True,dag=True,l=True )", 
    "cylinder": "    \n    \n    import pymel.core as pm\n    \n    pm.cylinder()\n    # Result: [nt.Transform(u'nurbsCylinder1'), nt.MakeNurbCylinder(u'makeNurbCylinder1')] #\n    pm.cylinder( ch=True, radius=10, hr=3 )\n    # Result: [nt.Transform(u'nurbsCylinder2'), nt.MakeNurbCylinder(u'makeNurbCylinder2')] #\n    pm.cylinder( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg' )\n    # Result: [nt.Transform(u'nurbsCylinder3'), nt.MakeNurbCylinder(u'makeNurbCylinder3')] #\n    pm.cylinder( ut=True, tol=0.01 )\n    # Result: [nt.Transform(u'nurbsCylinder4'), nt.MakeNurbCylinder(u'makeNurbCylinder4')] #\n    \n    #Query the radius of the selected cylinder\n    r = pm.cylinder( q=True, r=True )", 
    "dagObjectCompare": "    \n    \n    import pymel.core as pm\n    \n    # Compare two objects based on type and their relatives where one is in the namespace \"base\":\n    pm.dagObjectCompare( t=True, r=True, n=\"base\" )\n    # Compare two objects based on their connections and attributes where one is in the namespace \"base\" , break on first error:\n    pm.dagObjectCompare( c=True, a=True, b=\"first\")\n    # Compare two objects based on their type, connections, attributes, relatives and break on error while finishing current category:\n    pm.dagObjectCompare( t=True, r=True, c=True, a=True, b=True, category=True, n=\"base\")", 
    "dagObjectHit": "", 
    "dagPose": "    \n    \n    import pymel.core as pm\n    \n    # To create a pose for all objects parented above and below\n    # the selected items.\n    #\n    pm.dagPose( save=True )\n    \n    # To create a dagPose named \"mypose\" for the selected items only and not\n    # the dag objects parented below the selected items.\n    #\n    pm.dagPose( save=True, selection=True, name='mypose' )\n    \n    # To restore the local (rather than global) mypose pose\n    #\n    pm.dagPose( 'mypose', restore=True )\n    \n    # To restore the mypose pose in global mode.\n    #\n    pm.dagPose( 'mypose', restore=True, global=True )\n    \n    # To query the members of the mypose pose.\n    #\n    pm.dagPose( 'mypose', query=True, members=True )\n    \n    # To return the name (if any) of the bindPose attached to the\n    # selected items.\n    #\n    pm.dagPose( q=True, bindPose=True )\n    \n    # To reset the pose data on a joint named bigToe for \"mypose\"\n    #\n    pm.dagPose( 'bigToe', reset=True, n='mypose' )\n    \n    # To remove a joint named pinky from \"mypose\"\n    #\n    pm.dagPose( 'pinky', remove=True, n='mypose' )\n    \n    # To restore the skeleton to its bindPose\n    #\n    pm.dagPose( restore=True, global=True, bindPose=True )", 
    "dataStructure": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.dataStructure( query=True, format=True )\n    # Result: [u'raw'] #\n    pm.dataStructure( format='raw', asString='name=NameAndID:string=name:int32=ID' )\n    # Result: u'NameAndID' #\n    # Note that this file doesn't exist, it's just an example of how to read\n    # from the file after you've created it. The file contents should look\n    # like this:\n    #               name=FileBasedStructure\n    #               string=fileInformation\n    pm.dataStructure( asFile='someFile.raw' )\n    pm.dataStructure( query=True )\n    ['NameAndID', 'FileBasedStructure']\n    pm.dataStructure( name='NameAndID', format='raw', query=True, asString=True )\n    'name=NameAndID:string=name:int32=ID'\n    pm.dataStructure( remove=True, name='NameAndID' )\n    'NameAndID'\n    pm.dataStructure( query=True )\n    ['FileBasedStructure']\n    pm.dataStructure( removeAll=True )\n    ['FileBasedStructure']", 
    "date": "    \n    \n    import pymel.core as pm\n    \n    # Get the current date and time\n    pm.date()\n    # Result: u'2013/02/18 19:14:25' #\n    # Get only the month and day\n    pm.date( shortDate=True )\n    # Result: u'02/18' #\n    # Get the date and time in a fancy format\n    pm.date( format='Year is YY (or YYYY), month is MM, day is DD. And it is now hh:mm:ss' )\n    # Result: u'Year is 13 (or 2013), month is 02, day is 18. And it is now 19:14:25' #", 
    "dbPeek": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    // Find the available peek operations\n    pm.dbpeek( op=True, query=True )\n    # Return: ['metadata', 'nodes', 'references', 'plugIterator'] #\n    // Describe the detail of a single available type\n    pm.dbpeek( query=True, op='nodes' )\n    # Return: 'The operation 'nodes' understands type flags 'attributes, visible'.\n    The 'visible' flag filters the display list to ignore any hidden\n    or internal nodes. Default is to show all nodes\n    Normal display will show a count of nodes in the scene of each\n    type. Adding the 'attributes' flag includes the attribute count\n    for each node as well, segregated by static, extension, and dynamic types.\n    '#\n    # Describe the detail of a single available operation\n    pm.dbpeek( query=True, op='plugIterator' )\n    # Return: 'The test 'plugIterator' doesn't have any type flags.\n    Suggested iteration count minimum is 1000000 for which the test machine\n    measured a time of 19.234s.\n    This tests the performance of the class which iterates over all of the\n    networked plugs in a plug tree.\n    '#\n    pm.dbpeek( op='plugIterator', count=10000 )\n    # Return: 'Run 10,000 loops of plug iteration over a tree of size 51, depth 4\n    Total time:   17.0s\n    Maximum time: 0.81s\n    Minimum time: 0.23s\n    Average time: 0.30s\n    '#\n    # Run a performance test for 1000000 loops and store the results\n    pm.dbpeek( op='plugIterator', count=1000000, outputFile='MyFile.txt' )\n    # Return: 0 #\n    pm.loadPlugin( 'MetadataSample' )\n    pm.polyPlane( name='planeLuck' )\n    pm.dataStructure( asString='name=TestStructure:int32=ID )\n    pm.importMetadata( asString='channel face\\n stream\\n TestStream\\n TestStructure\\n 0\\n 99\\n 1\\n 999\\n 2\\n 9999\\n endStream\\n endChannel\\n endAssociations\" \"planeLuckShape' )\n    # Peek at the newly created metadata\n    #\n    pm.dbpeek( op='metadata', type='summary' )\n    # Return: 'Node planeLuckShape : face( TestStream[3] )' #", 
    "dbcount": "    \n    \n    import pymel.core as pm\n    \n    pm.dbcount( e='on' )              # Enable counters\n    pm.dbcount( )                     # Print all available counters\n    pm.dbcount( f='myCounts.txt' )    # Print all available counters to the file \"myCounts.txt\"\n    pm.dbcount( k='dirty' )           # Print all counters with \"dirty\" in their name\n    pm.dbcount( r=True, k='dirty' )   # Reset counters with \"dirty\" in their name\n    pm.dbcount( l=True )              # List all counters\n    pm.dbcount( l=True, k='dirty' )   # List all counters with \"dirty\" in their name\n    pm.dbcount( s=True, f='xls.txt' ) # Print all counters in spreadsheet form to the file \"xls.txt\"", 
    "dbmessage": "    \n    \n    import pymel.core as pm\n    \n    pm.dbmessage( m='on' )                  # Enable monitoring of all messages\n    pm.dbmessage( l=True )                  # Print all available messages and monitoring state\n    pm.dbmessage( f='msgs.txt' )            # Redirect all message output to the file \"msgs.txt\"\n    pm.dbmessage( t='dgNodeAdded', m='on' ) # Turn on monitoring for the \"dgNodeAdded\" message", 
    "dbpeek": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    // Find the available peek operations\n    pm.dbpeek( op=True, query=True )\n    # Return: ['metadata', 'nodes', 'references', 'plugIterator'] #\n    // Describe the detail of a single available type\n    pm.dbpeek( query=True, op='nodes' )\n    # Return: 'The operation 'nodes' understands type flags 'attributes, visible'.\n    The 'visible' flag filters the display list to ignore any hidden\n    or internal nodes. Default is to show all nodes\n    Normal display will show a count of nodes in the scene of each\n    type. Adding the 'attributes' flag includes the attribute count\n    for each node as well, segregated by static, extension, and dynamic types.\n    '#\n    # Describe the detail of a single available operation\n    pm.dbpeek( query=True, op='plugIterator' )\n    # Return: 'The test 'plugIterator' doesn't have any type flags.\n    Suggested iteration count minimum is 1000000 for which the test machine\n    measured a time of 19.234s.\n    This tests the performance of the class which iterates over all of the\n    networked plugs in a plug tree.\n    '#\n    pm.dbpeek( op='plugIterator', count=10000 )\n    # Return: 'Run 10,000 loops of plug iteration over a tree of size 51, depth 4\n    Total time:   17.0s\n    Maximum time: 0.81s\n    Minimum time: 0.23s\n    Average time: 0.30s\n    '#\n    # Run a performance test for 1000000 loops and store the results\n    pm.dbpeek( op='plugIterator', count=1000000, outputFile='MyFile.txt' )\n    # Return: 0 #\n    pm.loadPlugin( 'MetadataSample' )\n    pm.polyPlane( name='planeLuck' )\n    pm.dataStructure( asString='name=TestStructure:int32=ID )\n    pm.importMetadata( asString='channel face\\n stream\\n TestStream\\n TestStructure\\n 0\\n 99\\n 1\\n 999\\n 2\\n 9999\\n endStream\\n endChannel\\n endAssociations\" \"planeLuckShape' )\n    # Peek at the newly created metadata\n    #\n    pm.dbpeek( op='metadata', type='summary' )\n    # Return: 'Node planeLuckShape : face( TestStream[3] )' #", 
    "dbtrace": "", 
    "debug": "", 
    "debugNamespace": "", 
    "debugVar": "", 
    "defaultLightListCheckBox": "    \n    \n    import pymel.core as pm\n    \n    # Create a window with a check box for at most 10 shading groups\n    \n    pm.window( wh=(200, 100) )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adj=True )\n    # Result: ui.ColumnLayout('window1|columnLayout24') #\n    seList = pm.ls(type='shadingEngine')\n    numLines = min(len(seList), 10)\n    for i in range(numLines):\n        pm.defaultLightListCheckBox( sg=seList[i], label=seList[i] )\n    pm.showWindow()", 
    "defaultNavigation": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    # This will open the Create Render Node window from which you can select a node that you want to connect to the existing lambert1.color attribute\n    pm.defaultNavigation(createNew=True, destination='lambert1.color')\n    \n    # Select the Checker Node, you will find \"checker1.outColor\" is connected to \"lambert1.color\"\n    \n    # Break the connection between \"checker1.outColor\" and \"lambert1.color\" you have just established\n    pm.disconnectAttr('checker1.outColor', 'lambert1.color')\n    \n    # Connect \"checker1\" to \"lambert1\". Only node is specified here, but the command will make a best guess.\n    # So \"checker1.outColor\" and \"lambert1.color\" are connected\n    pm.defaultNavigation(connectToExisting=True, source='checker1', destination='lambert1')", 
    "defineDataServer": "    \n    \n    import pymel.core as pm\n    \n    pm.defineDataServer( s='ultratrak_server', d='melvin' )\n    \n    # Connects to the ultratrak_server running on the localhost and gives it\n    # the name \"melvin\"\n    \n    pm.defineDataServer( s='mocap_lab:5200', d='labFlock' )\n    \n    # Creates a device called \"labFlock\" which connects to the server running\n    # on host \"mocap_lab\" at port \"5200\".\n    \n    pm.defineDataServer( undefine=True, d='labFlock' )\n    \n    # Delete the device \"labFlock\" closing the connection with the server\n    # specified when it was created.", 
    "defineVirtualDevice": "    \n    \n    import pymel.core as pm\n    \n    #    Create a virtual clock and read in some data.\n    pm.defineVirtualDevice( create=True )\n    pm.defineVirtualDevice( channel='seconds', usage='rotZ', axis=2 )\n    pm.defineVirtualDevice( channel='minutes', usage='rotZ', axis=1 )\n    pm.defineVirtualDevice( channel='hours', usage='rotZ', axis=0 )\n    pm.defineVirtualDevice( device='virtualClock' )\n    pm.readTake( device='virtualClock', take='clock.mov' )\n    \n    #    Undefine the virtualClock\n    pm.defineVirtualDevice( device='virtualClock', undefine=True )\n    \n    #    Create a body device.\n    pm.defineVirtualDevice( create=True )\n    pm.defineVirtualDevice( channel='pelvis', usage='posRot' )\n    pm.defineVirtualDevice( channel='back', usage='posRot' )\n    pm.defineVirtualDevice( channel='head', usage='posRot' )\n    pm.defineVirtualDevice( device='body' )\n    \n    #    Explicitly order the axis of the device. The created device is\n    #    the same as the above body device.\n    pm.defineVirtualDevice( create=True )\n    pm.defineVirtualDevice( channel='head', usage='posRot', axis=12 )\n    pm.defineVirtualDevice( channel='back', usage='posRot', axis=6 )\n    pm.defineVirtualDevice( channel='pelvis', usage='posRot', axis=0 )\n    pm.defineVirtualDevice( device='body' )", 
    "deformer": "    \n    \n    import pymel.core as pm\n    \n    # To create a plugin of type \"squash\" on the selected object.\n    # First, load the plugin. The deformer command will not autoload\n    # your plugin. Then, select the geometries that you'd like to deform,\n    # and use the deformer command as follows. For example, to deform a\n    # cylinder with a squash:\n    #\n    pm.cylinder( ax=(0, 1, 0), r=1, hr=10, d=3, s=8, nsp=20, ch=1 )\n    # Result: [nt.Transform(u'nurbsCylinder1'), nt.MakeNurbCylinder(u'makeNurbCylinder1')] #\n    pm.select( 'nurbsCylinder1', r=True )\n    pm.deformer( type=\"squash\" )\n    \n    # To query the membership of the deformer\n    #\n    pm.deformer( 'squash1',q=True, g=True )\n    \n    # To add additional geometries from your deformer, type:\n    #\n    pm.select( 'nurbsCylinder1', r=True )\n    pm.duplicate()\n    nurbsCylinder2\n    pm.move( -2.749017, 0, 0, r=True )\n    pm.deformer( 'squash1', e=True, g='nurbsCylinder2' )\n    \n    # To remove a geometry from your deformer, type:\n    #\n    pm.deformer( 'squash1', e=True, rm=True, g='nurbsCylinder2' )", 
    "deformerWeights": "    import pymel.core as pm\n    \n    # Create plane and a cluster.\n    #\n    pm.file( f=True,new=True )\n    pm.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\n    pm.cluster('pPlane1', name='testCluster')\n    # Modify some weights on the -x side of the character\n    #\n    pm.select( ['pPlane1.vtx[5]', 'pPlane1.vtx[11]', 'pPlane1.vtx[17]', 'pPlane1.vtx[23]'])\n    pm.percent( 'testCluster', v=0.5 )\n    # export the weights from the cluster node\n    #\n    pm.deformerWeights (\"clusterWeights.xml\", ex=True, deformer=\"testCluster\")", 
    "delete": "    \n    \n    import pymel.core as pm\n    \n    # To delete selected objects use:\n    pm.delete()\n    \n    # To delete a few specific objects like surfaceShape1, surface1 and\n    # paramCurve1 use:\n    pm.delete( 'surfaceShape1', 'surface1', 'paramCurve1' )\n    \n    # To delete all channels in the scene:\n    pm.delete( all=True, c=True )\n    \n    # To delete static channels connected to selected nodes:\n    pm.delete( sc=True )\n    \n    # To delete motion path nodes connected to selected nodes:\n    pm.delete( mp=True )\n    \n    # To delete all expressions in the scene:\n    pm.delete( all=True, e=True )\n    \n    # To delete selected constraints and constraints attached to selected nodes:\n    pm.delete( cn=True )\n    \n    # Notes:\n    \n    # The at, h, s and cp flags only apply when either c/channels\n    # or sc/staticChannels or e/expressions options are specified.", 
    "deleteAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'planet', n='mars' )\n    # Result: nt.Unknown(u'mars') #\n    pm.addAttr( ln='martians', sn='mr', at='double' )\n    pm.addAttr( ln='greenMen', sn='gm', at='double' )\n    \n    # Delete an attribute named mr/martians.\n    pm.deleteAttr( 'mars', at='mr' )\n    \n    # Alternative syntax\n    pm.deleteAttr( 'mars.greenMen' )\n    \n    # Query for the list of dynamic attributes.\n    pm.deleteAttr( 'mars', q=True )", 
    "deleteAttrPattern": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.deleteAttrPattern( patternType=\"xmlPattern\" )\n    // Result: [myXMLPattern, myOtherXMLPattern] //\n    pm.deleteAttrPattern( patternName=\"myJSONPattern\" )\n    // Result: myJSONPattern //", 
    "deleteExtension": "    \n    \n    import pymel.core as pm\n    \n    pm.addExtension( nodeType='planet', longName='martians', shortName='mr', attributeType='double' )\n    pm.createNode( 'planet', name='jupiter' )\n    pm.createNode( 'planet', name='mars' )\n    pm.setAttr( 'mars.mr', 35 )\n    # Delete an extension attribute named mr/martians.\n    # Only returns 1 since the planet node 'jupiter'\n    # does not have a non-default value on the extension.\n    pm.deleteExtension( nodeType='planet', forceDelete=True, attribute='martians' )\n    # Return: 1 //\n    # The attribute is gone since it was forced out\n    pm.attributeQuery( type='planet', attribute='mr', query=True, exists=True )\n    # Return: 0 //\n    # Re-add and delete the extension again, forcing the\n    # attribute to remain if non-default values exist.\n    pm.addExtension( nodeType='planet', longName='martians', shortName='mr', attributeType='double' )\n    pm.setAttr( 'mars.mr', 35 )\n    pm.deleteExtension( nodeType='planet', forceDelete=False, attribute='mr' )\n    # Return: 0 //\n    # The attribute still exists since it had some non-default values\n    pm.attributeQuery( type='planet', attribute='mr', query=True, exists=True )\n    # Return: 1 //\n    pm.attributeQuery( name='jupiter', attribute='mr', query=True, exists=True )\n    # Return: 1 //", 
    "deleteUI": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    #    Create a simple window and then delete it and all of its children\n    #    with one 'deleteUI -window' command.\n    #\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout2') #\n    pm.button()\n    # Result: ui.Button('window1|paneLayout2|button15') #\n    pm.showWindow( window )\n    \n    pm.deleteUI( window, window=True )\n    # Result: u'' #\n    \n    #    Example 2.\n    #\n    #    Create a window with a number of buttons and delete a few of the\n    #    buttons with the 'deleteUI -control' command.\n    #\n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout25') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout25|button16') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout25|button17') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout25|button18') #\n    b1 = pm.button()\n    b2 = pm.button()\n    b3 = pm.button()\n    pm.showWindow( window )\n    \n    pm.deleteUI( b1, b2, b3, control=True )\n    # Result: u'' #", 
    "detachCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.detachCurve( 'curve1', ch=True, p=0.2, replaceOriginal=False )\n    # Detaches curve1 at parameter value 0.2.  The\n    # result is two curves and a detachCurve dependency node.\n    # The \"-rpo\" flag specifies that the original curve is not to be\n    # replaced; as a result a new curve is created for each curve piece.\n    # Note that if \"k\" flag is not used, then the default is that\n    # all pieces are kept.\n    \n    pm.detachCurve( 'curve1.ep[1]', ch=True, replaceOriginal=False )\n    # Detaches curve1 at its second edit point.\n    \n    pm.detachCurve( 'curve1.u[0.2]', ch=True, replaceOriginal=False )\n    # Detaches curve1 at parameter value 0.2\n    \n    pm.detachCurve( 'curve1', ch=True, p=0.4, k=(1 , 0), rpo=False )\n    # Detaches curve1 at parameter value 0.4 into two curves.  Because of\n    # the \"k\" flags, two curves are created, but the second one is empty.\n    # A detachCurve dependency node is also returned.\n    \n    pm.detachCurve( 'curve1', ch=True, p=(0.2, 0.4), rpo=True )\n    # Detaches curve1 into three pieces.  Because the \"rpo\" flag is on,\n    # the original curve is replaced with the first piece.  The names\n    # of all curve pieces are returned.  If curve1 is a result of history,\n    # then a dependency node is created and its output is connected as\n    # the input to curve1.  If curve1 is not a result of construction\n    # history, then a dependency node is not created (even though the\n    # \"ch\" flag is on).\n    \n    pm.detachCurve( 'circle1', ch=True, p=(0.2, 0.4) )\n    # Detaches a periodic curve, circle1, at two places.  Before\n    # the detach, the circle is periodic, with a start parameter of 0.0,\n    # and an end parameter of 8.0.\n    # The first parameter, 0.2, is used to move the start point of the curve,\n    # also called the \"seam\".  The second parameter, 0.4, is used to perform\n    # a detach operation.  The result is TWO curves only.  The first curve\n    # has a parameter range of 0.2 to 0.4.  The second curve has a parameter\n    # range of 0.4 to 8.2.", 
    "detachDeviceAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.detachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )", 
    "detachSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.detachSurface( 'surface1', ch=True, d=1, p=0.3, rpo=False )\n    pm.detachSurface( 'surface1.u[0.3]', ch=True )\n    # Detaches surface1 into two pieces at u = 0.3.\n    # The results are two surface pieces, and a detachSurface dependency node.\n    # Since no \"-keep\" flag is used, all pieces are kept.\n    \n    pm.detachSurface( 'surface1', ch=True, k=(1,0), rpo=False, p=0.34, d=0 )\n    pm.detachSurface( 'surface1.v[0.34]', ch=True, k=(1,0), rpo=False )\n    # Detaches surface1 at v = 0.34.  Because of the \"k\" flags, two\n    # surfaces are created but the second surface is empty.  A\n    # detachSurface dependency node is also returned.\n    \n    pm.detachSurface( 'surface1', ch=True, rpo=True, p=(0.2, 0.5), d=1 )\n    pm.detachSurface( 'surface1.u[0.2]', 'surface1.u[0.5]', ch=True, rpo=True )\n    # Detaches surface1 into three pieces.  Because of the \"-rpo\" flag,\n    # the first surface piece is used to replace the original surface1.\n    # The results are the three surfaces (including the original surface).\n    # Even though the \"ch\" flag is on, a dependency node is not created\n    # if surface1 is not a result of construction history.  If surface1\n    # is the result of construction history, then a dependency node is\n    # created and its name is returned.\n    \n    pm.detachSurface( 'cylinder1', ch=True, d=0, p=0.3, rpo=False )\n    # Detaches cylinder1, which is periodic in V, where the V parameter\n    # ranges between 0.0 and 8.0.  The parameter, 0.3, is used to move\n    # the start point of the cylinder, also known as the \"seam\".\n    # The resulting surface's V parameter range is 0.0 to 0.3.\n    \n    pm.detachSurface( 'cylinder1', ch=True, d=0, p=(0.3, 0.7), rpo=False )\n    # Detaches cylinder1, which is periodic in V, where the V parameter\n    # ranges between 0.0 and 8.0.  The 1st parameter, 0.3, is used to move\n    # the start point of the cylinder, also known as the \"seam\".\n    # The second parameter, 0.7, is used to detach the cylinder again.\n    # The result is only TWO surfaces; the first surface's V parameter ranges\n    # from 0.0 to 0.3. The second surface's V parameter ranges from 0.3 to 0.7.", 
    "deviceEditor": "    \n    \n    import pymel.core as pm\n    \n    # This example creates a new device editor in its own window\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout3') #\n    pm.deviceEditor('myDeviceEditor')\n    # Result: ui.DeviceEditor('myDeviceEditor') #\n    pm.showWindow( window )", 
    "deviceManager": "    \n    \n    import pymel.core as pm\n    \n    # FIXME: get python sytax for above query.\n    pm.deviceManager(\"layer1\", root=True)", 
    "devicePanel": "    \n    \n    import pymel.core as pm\n    \n    # This example creates a new device panel in its own window\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout4') #\n    pm.devicePanel()\n    # Result: ui.DevicePanel('devicePanel1') #\n    pm.showWindow( window )", 
    "dgControl": "", 
    "dgInfo": "    \n    \n    import pymel.core as pm\n    \n    # create a node\n    pm.createNode('transform',name='NODE')\n    # Result: nt.Transform(u'NODE') #\n    pm.setKeyframe('NODE.translate')\n    # Result: 3 #\n    # Print all things connected to node NODE\n    pm.dgInfo( 'NODE', c=True )\n    # Print all connections currently in the graph\n    pm.dgInfo( c=True, all=True )\n    # Print the datablock size of all nodes currently in the graph\n    pm.dgInfo( sz=True, all=True )\n    # Result: [281, 281, 38264] #\n    # Return: [12, 12, 12314]\n    # Print all connections to attribute tx on node NODE\n    pm.dgInfo('NODE.tx',c=True)\n    # Print all dirty connections in the entire graph\n    pm.dgInfo( c=True, all=True, d=True )", 
    "dgPerformance": "", 
    "dgcontrol": "", 
    "dgdebug": "", 
    "dgdirty": "    \n    \n    import pymel.core as pm\n    \n    # Set everything in the entire scene dirty\n    #\n    pm.dgdirty(a=True);\n    \n    # Set all connected plugs dirty on \"myNode\"\n    #\n    pm.dgdirty( 'myNode' )\n    # Result: 5\n    # 5 plugs were set dirty\n    \n    #  Set all connected plugs dirty on \"locator1\"\n    pm.dgdirty( 'locator1' )\n    # Result: 0\n    # 0 plugs were connected so no dirty message was sent\n    \n    # Set myNode.tx dirty\n    pm.select( 'myNode.tx' )\n    pm.dgdirty()\n    # Result: 1", 
    "dgeval": "    \n    \n    import pymel.core as pm\n    \n    # Evaluate all (connected) plugs on \"myNode\"\n    pm.dgeval( 'myNode' )\n    # Result: 5\n    # This means that 5 plugs were evaluated\n    \n    # Evaluate myNode.tx only\n    pm.select( 'myNode.tx' )\n    pm.dgeval()\n    # Result: 1", 
    "dgfilter": "", 
    "dgfootprint": "", 
    "dgmodified": "    \n    \n    import pymel.core as pm\n    \n    # list all modified nodes\n    pm.dgmodified()", 
    "dgstats": "", 
    "dgtimer": "    \n    \n    import pymel.core as pm\n    \n    # Turns on node timing and resets the timers.\n    pm.dgtimer( on=True )\n    # Turns off node timing. Note that this does not reset the\n    # timers.\n    pm.dgtimer( off=True )\n    # Prints the current timer values to the default (stdout).\n    pm.dgtimer( query=True )\n    # Result: [0.0] #\n    # To reset the timers:\n    pm.dgtimer( reset=True )\n    # Turn on node timing and reset the timer values to zero.\n    # Then, playback the scene, turn off timing and dump to a file.\n    # Turn on timing without resetting the timers, and repeat.\n    pm.dgtimer( on=True, reset=True )\n    pm.play( wait=True )\n    pm.dgtimer( off=True )\n    pm.dgtimer( outputFile='/home/virginia/timing/dgtrace_once.txt', query=True )\n    pm.dgtimer( on=True )\n    pm.play( wait=True )\n    pm.dgtimer( off=True )\n    pm.dgtimer( outputFile='/home/virginia/timing/dgtrace_twice.txt', query=True )", 
    "dimWhen": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a menu item and button that will dim if\n    #    there are no objects selected in the scene.\n    #\n    window = pm.window(menuBar=True, title='dimWhen Example')\n    pm.menu( label='Edit' )\n    # Result: ui.Menu('window1|menu39') #\n    menuItem = pm.menuItem(label='Delete Selection', command='pm.delete()')\n    pm.columnLayout(adjustableColumn=True)\n    # Result: ui.ColumnLayout('window1|columnLayout26') #\n    button = pm.button(label='Delete Selection', command='pm.delete()')\n    \n    #    Create a few buttons to create some objects, select all the objects in\n    #    the scene, and clear the selection.\n    #\n    pm.button(label='Create Objects', command='pm.sphere(); pm.cone(); pm.cylinder();')\n    # Result: ui.Button('window1|columnLayout26|button23') #\n    pm.button(label='Select All', command='pm.select(all=True)')\n    # Result: ui.Button('window1|columnLayout26|button24') #\n    pm.button(label='Select Nothing', command='pm.select(clear=True)')\n    # Result: ui.Button('window1|columnLayout26|button25') #\n    \n    #    Add the dim conditions.\n    #\n    pm.dimWhen( 'SomethingSelected', button, false=True )\n    pm.dimWhen( 'SomethingSelected', menuItem, false=True )\n    \n    pm.showWindow( window )", 
    "directConnectPath": "", 
    "directKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a directKeyCtx which works in insert mode\n    #\n    pm.directKeyCtx( 'specialDirectKeyContext', option='insert' )\n    # Result: u'specialDirectKeyContext' #", 
    "directionalLight": "    \n    \n    import pymel.core as pm\n    \n    # Create a directional light\n    light = pm.directionalLight(rotation=(45, 30, 15))\n    \n    # Change the light intensity\n    pm.directionalLight( light, e=True, intensity=0.5 )\n    \n    # Query it\n    pm.directionalLight( light, q=True, intensity=True )\n    # Result: 0.5 #\n    # Result:0.5#", 
    "dirmap": "    \n    \n    import pymel.core as pm\n    \n    pm.dirmap( en=True )\n    pm.dirmap( m=('/usr/maya/textures', '/share/store/textures') )\n    pm.dirmap( cd='/usr/maya/textures/characters/skin1.iff' )\n    # Result: u'/share/store/textures/characters/skin1.iff' #\n    # Result: /share/store/textures/characters/skin1.iff\"\n    pm.dirmap( m=('D:/mySoundfiles', '/usr/me/sounds') )\n    pm.dirmap( cd='D:/mySoundfiles/' )\n    # Result: u'/usr/me/sounds/' #\n    # Result: /usr/me/sounds/", 
    "disable": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    pm.formLayout()\n    pm.button( 'fred' )\n    pm.showWindow()\n    pm.disable( 'fred' ) # dims the button\n    pm.disable( 'fred', v=False ) # un-dims it", 
    "disconnectAttr": "    \n    \n    import pymel.core as pm\n    \n    #    Create a sphere and cone and connect their rotate attribute.\n    #\n    sph = pm.sphere()\n    con = pm.cone()\n    sphereR = '%s.r' % sph[0]\n    coneR = '%s.r' % con[0]\n    pm.connectAttr(sphereR, coneR)\n    \n    #    Break the connection between the rotate attributes.\n    #\n    pm.disconnectAttr(sphereR, coneR)", 
    "disconnectJoint": "    \n    \n    import pymel.core as pm\n    \n    pm.joint( p=(0, 0, 0), name='jointA' )\n    pm.joint( p=(0, 1, 0), name='jointB' )\n    pm.joint( p=(0, 2, 0), name='jointC' )\n    pm.disconnectJoint( 'jointB' )", 
    "diskCache": "    \n    \n    import pymel.core as pm\n    \n    # Explicitly specify the settings for disk cache\n    # creation: the start time to 3 and the end time to 10.\n    pm.diskCache( startTime=3, endTime=10 )\n    # Specify to use over sampling and with sampling\n    # rate set to 2, sampling twice for each frame.\n    pm.diskCache( overSample=True, samplingRate=2 )\n    # Delete all caches\n    pm.diskCache( deleteAll=True )\n    # Clear the cache content for diskCache3's cache.\n    pm.diskCache( empty='diskCache3' )\n    # Close all the disk caches.\n    pm.diskCache( emptyAll=True )", 
    "dispatchGenericCommand": "", 
    "displacementToPoly": "    \n    \n    import pymel.core as pm\n    \n    # To bake the rendered geometry and create a new meshShape, for the\n    # selected geometry shape use:\n    pm.displacementToPoly()", 
    "displayAffected": "    \n    \n    import pymel.core as pm\n    \n    # Turn on the display of affected objects\n    pm.displayAffected( True )\n    \n    # Query whether the display of affected objects is turned on:\n    pm.displayAffected( query=True )", 
    "displayColor": "    \n    \n    import pymel.core as pm\n    \n    pm.displayColor( 'grid', 15, dormant=True )\n    pm.displayColor( 'grid', q=True, dormant=True )\n    pm.displayColor( list=True )\n    pm.displayColor( resetToFactory=True )\n    pm.displayColor( queryIndex=15 )", 
    "displayCull": "    \n    \n    import pymel.core as pm\n    \n    pm.displayCull( bfc=True )\n    pm.displayCull( bfc=False )\n    pm.displayCull( q=True, bfc=True )\n    # Returns 0 if the back-face-culling on the selected object is false.\n    # Returns 1 if the back-face-culling on the selected object is true.", 
    "displayLevelOfDetail": "    \n    \n    import pymel.core as pm\n    \n    pm.displayLevelOfDetail( lod=True )\n    pm.displayLevelOfDetail( lod=False )\n    pm.displayLevelOfDetail( q=True, lod=True )\n    # Returns 0 if the level-of-detail display is false.\n    # Returns 1 if the level-of-detail display is true.", 
    "displayPref": "    \n    \n    import pymel.core as pm\n    \n    # Turn on the display of affected objects\n    pm.displayPref( displayAffected=True )\n    \n    # Query whether affected objects will be displayed\n    # in a special color or not.\n    pm.displayPref( q=True, displayAffected=True )\n    1\n    \n    # Turn on full wireframes on active shaded objects\n    pm.displayPref( wireframeOnShadedActive='full' )", 
    "displayRGBColor": "    \n    \n    import pymel.core as pm\n    \n    # Set the background colour to red\n    pm.displayRGBColor( 'background', 1, 0, 0 )\n    \n    # List the current RGB color settings\n    pm.displayRGBColor( list=True )", 
    "displaySmoothness": "    \n    \n    import pymel.core as pm\n    \n    # create a surface\n    pm.sphere()\n    \n    # set rough smoothness settings\n    pm.displaySmoothness( du=0, dv=0, pw=4, ps=1 )\n    \n    # set medium smoothness settings\n    pm.displaySmoothness( du=1, dv=1, pw=8, ps=2 )\n    \n    # set fine smoothness settings\n    pm.displaySmoothness( du=2, dv=2, pw=16, ps=4 )\n    \n    # Display surface as a hull\n    pm.displaySmoothness( hull=True )\n    \n    # Display with reduced number of points\n    pm.displaySmoothness( hull=True, su=2, sv=2 )\n    \n    # Display rendering tesselation\n    pm.displaySmoothness( rt=1 )\n    \n    # Set default value for pointsShaded.\n    # Subsequent surfaces created will have pointsShaded as 2.\n    pm.displaySmoothness( dc=True, ps=2 )\n    \n    # displaySmoothness queries\n    #\n    # query hull display, returns boolean\n    pm.displaySmoothness( q=True, hull=True )\n    \n    # query default pointsShaded value\n    pm.displaySmoothness( q=True, dc=True, ps=True )\n    \n    # query surface divisionsU value\n    pm.displaySmoothness( q=True, du=True )\n    \n    # Only the -pointsWire flag works on curves.\n    pm.circle()\n    \n    # change the number of points displayed per curve span.\n    pm.displaySmoothness( pw=3 )\n    # query default pointsWire value for curves.\n    pm.displaySmoothness( q=True, dc=True, pw=True )\n    \n    pm.polyCube()\n    \n    # Query the display resolution\n    pm.displaySmoothness( q=True, polygonObject=True )\n    # Result: 0\n    \n    # Change the display resolution\n    pm.displaySmoothness( polygonObject=2 )", 
    "displayStats": "", 
    "displayString": "    \n    \n    import pymel.core as pm\n    \n    #    Associate a string with an identifier.\n    #\n    pm.displayString( 'kExampleHelloWorld', value='Hello world' )\n    #    Query string associated with an identifer.\n    #\n    pm.displayString( 'kExampleHelloWorld', query=True, value=True )\n    #    Define a simple formatted string to append ellipses.\n    #\n    pm.displayString( 'kExampleEllipsesFormat', value='^1s...' )\n    pm.displayString( 'kExampleEllipsesFormat', 'kExampleHelloWorld', query=True, value=True )\n    #    Define a formatted string using all the available\n    #    embedded characters.\n    #\n    pm.displayString( 'kExampleAnotherFormat', value='These ^1s are ^2s me ^3s' )\n    pm.displayString( 'kExamplePretzels', value='pretzels' )\n    pm.displayString( 'kExampleAnotherFormat', 'kExamplePretzels', 'making', 'thirsty', query=True, value=True )\n    # Obtain a list of matching displayString keys.\n    # In the first example  a list of  all keys containing the substring\n    # \"niceName\".\n    # In the second example a list of all keys in the string set\n    # m_testStrings\n    pm.displayString( 'niceName', query=True, keys=True )\n    pm.displayString( 'm_testStrings.', query=True, keys=True )\n    #    If you do not specify the -v/value flag on creating then\n    #    the value will be the same as the identifier.\n    #\n    pm.displayString( 'kExampleMissingValue' )\n    pm.displayString( 'kExampleMissingValue', query=True, value=True )", 
    "displaySurface": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere(n='mySphere1')\n    pm.sphere(n='mySphere2')\n    pm.displaySurface( ['mySphere1', 'mySphere2'], two=False )\n    pm.displaySurface( xRay=True )", 
    "distanceDimContext": "    \n    \n    import pymel.core as pm\n    \n    pm.distanceDimContext()", 
    "distanceDimension": "    \n    \n    import pymel.core as pm\n    \n    # To measure ths distance between [0,2,2] and [1,5,6]:\n    pm.distanceDimension( sp=(0, 2, 2), ep=(1, 5, 6) )\n    #  Result: distanceDimensionShape1  #", 
    "doBlur": "    \n    \n    import pymel.core as pm\n    \n    pm.doBlur( l=2, s=1, m=2, c='testimage', v='testimage.motion' )", 
    "dockControl": "    \n    \n    import pymel.core as pm\n    \n    myWindow = pm.window()\n    buttonForm = pm.formLayout( parent = myWindow )\n    pm.button( parent = buttonForm )\n    # Result: ui.Button('window1|formLayout53|button26') #\n    allowedAreas = ['right', 'left']\n    pm.dockControl( area='left', content=myWindow, allowedArea=allowedAreas )\n    # Result: u'MayaWindow|dockControl6' #", 
    "dolly": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    \n    # Moves the persp camera forward through its center of interest\n    pm.dolly( 'persp', abs=True, d=-3 )\n    \n    # Move the persp camera and its center of interest.\n    pm.dolly( 'persp', d=-3 )\n    \n    # Changes the ortho-width of the top camera to 7.5\n    pm.dolly( 'top', abs=True, os=7.5 )\n    \n    # Scale the ortho-width of the top camera by a quarter from its current value.\n    pm.dolly( 'top', os=0.25 )", 
    "dollyCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.dollyCtx( 'dollyContext', s=1.0, ac=False, ld=False, cd=False )\n    \n    pm.dollyCtx( 'dollyContext', e=True, bdt='surface' )", 
    "dopeSheetEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.dopeSheetEditor( 'dopeSheetEditor' )", 
    "doubleProfileBirailSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.doubleProfileBirailSurface( 'curve1', 'curve2', 'curve3', 'curve4', bl=0.5 )\n    \n    # Tangent continuous birail surface across the two profiles.\n    pm.doubleProfileBirailSurface( 'surface1.u[0.5]', 'surface2.v[0.2]', 'curve1', 'curve2', bl=1.0, tp1=True, tp2=True )", 
    "dpBirailCtx": "", 
    "drag": "    \n    \n    import pymel.core as pm\n    \n    # Creates a drag field resisting in direction (0,1,0.5).\n    pm.drag( name='myDrag', dx=0, dy=1.0, dz=0.5, useDirection=1 )\n    # Result: nt.DragField(u'myDrag') #\n    \n    # Edits the acceleration value of the field myDrag\n    pm.drag( 'myDrag', e=True, m=0.75 )\n    # Result: nt.DragField(u'myDrag') #\n    \n    # Queries myDrag for its magnitude\n    pm.drag( 'myDrag', q=True, m=True )\n    # Result: 0.75 #", 
    "dragAttrContext": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( w=10, h=10, sx=3, sy=3, ax=(0, 1, 0), tx=1, ch=1 )\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    pm.dragAttrContext( 'myDragAttrContext' )\n    # Result: u'myDragAttrContext' #\n    \n    # Example 1: Move along X direction and rotate around X at the same time.\n    pm.dragAttrContext( 'myDragAttrContext', edit=True, connectTo=('pPlane1.translateX', 'pPlane1.rotateX') )\n    # Result: u'myDragAttrContext' #\n    pm.setToolTo( 'myDragAttrContext' )\n    \n    # Example 2: Extrude a face and then modify the distance that it is extruded by.\n    pm.polyExtrudeFacet( 'pPlane1.f[0]', ch=1, kft=0, pvx=-1.633333373, pvy=-1.111623654, pvz=3.142515589, tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, sx=1, sy=1, sz=1, ran=0, divisions=1, twist=0, taper=1, off=0, ltz=0, ws=0, ltx=0, lty=0, lrx=0, lry=0, lrz=0, lsx=1, lsy=1, lsz=1, ldx=1, ldy=0, ldz=0, w=0, gx=0, gy=-1, gz=0, att=0, mx=0, my=0, mz=0, sma=30 )\n    # Result: [u'polyExtrudeFace1'] #\n    pm.dragAttrContext( 'myDragAttrContext', edit=True, connectTo='polyExtrudeFace1.localTranslateZ' )\n    # Result: u'myDragAttrContext' #\n    pm.setToolTo( 'myDragAttrContext' )\n    \n    # Example 3: Do a wedge face and modify both the number of divisions and the\n    # angle at the same time.\n    pm.polyWedgeFace( 'pPlane1.f[0]', 'pPlane1.e[30]', ws=1, wedgeAngle=90, divisions=4, ed=30, ch=1 )\n    # Result: [nt.PolyWedgeFace(u'polyWedgeFace1')] #\n    pm.dragAttrContext( 'myDragAttrContext', edit=True, connectTo=('polyWedgeFace1.wedgeAngle', 'polyWedgeFace1.divisions') )\n    # Result: u'myDragAttrContext' #\n    pm.setToolTo( 'myDragAttrContext' )", 
    "draggerContext": "    \n    \n    import pymel.core as pm\n    \n    # Procedure called on press\n    def SampleContextPress():\n            pressPosition = pm.draggerContext( 'sampleContext', query=True, anchorPoint=True)\n            print (\"Press: \" + str(pressPosition))\n    \n    # Procedure called on drag\n    def SampleContextDrag():\n            dragPosition = pm.draggerContext( 'sampleContext', query=True, dragPoint=True)\n            button = pm.draggerContext( 'sampleContext', query=True, button=True)\n            modifier = pm.draggerContext( 'sampleContext', query=True, modifier=True)\n            print (\"Drag: \" + str(dragPosition) + \"  Button is \" + str(button) + \"  Modifier is \" + modifier + \"\\n\")\n            message = str(dragPosition[0]) + \", \" + str(dragPosition[1])\n            pm.draggerContext( 'sampleContext', edit=True, drawString=message)\n    \n    # Define draggerContext with press and drag procedures\n    pm.draggerContext( 'sampleContext', pressCommand='SampleContextPress()', dragCommand='SampleContextDrag()', cursor='hand' );\n    \n    # Set the tool to the sample context created\n    # Results can be observed by dragging mouse around main window\n    pm.setToolTo('sampleContext')", 
    "drawExtrudeFacetCtx": "", 
    "dropoffLocator": "    \n    \n    import pymel.core as pm\n    \n    # create a wire deformer\n    #\n    pm.polyPlane(w=24,h=24,sx=20,sy=20)\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    # Result: nt.Transform(u'curve1') #\n    pm.select('pPlane1')\n    pm.wire(w='curve1')\n    # Result: [nt.Wire(u'wire1'), nt.Transform(u'curve1')] #\n    \n    # add a locator at curve point 0.5, with envelope 2 and percent 1\n    #\n    pm.select( 'curve1.u[0.5]', r=True )\n    pm.dropoffLocator( 2.0, 1.0, 'wire1' )\n    # Result: [nt.DropoffLocator(u'curveShape1->locatorShape1')] #", 
    "duplicate": "    \n    \n    import pymel.core as pm\n    \n    # Create a hierarchy of two spheres;\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.move( 3, 0, 0 )\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.move( -3, 0, 0 )\n    pm.group( 'sphere1', 'sphere2', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    \n    # Create a duplicate of the group\n    pm.duplicate( 'group1' )\n    # Result: [nt.Transform(u'group2')] #\n    \n    pm.undo()\n    pm.duplicate( 'group1', rr=True )\n    group2\n    \n    # Create a row of 4 circles equally spaced using\n    # the -smartTransform flag.\n    pm.duplicate( 'circle1' )\n    pm.move( 3, 0, 0 )\n    pm.duplicate( st=True )\n    pm.duplicate( st=True )\n    \n    # Duplicate a sphere along with its input connections.\n    # If animCurves were feeding into original transforms of the\n    # sphere, they will feed into the duplicated ones also.\n    # If the sphere has history (in this case it does),\n    # then the history is connected to the duplicate. Note that\n    # changing the radius for the makeNurbSphere for the sphere1\n    # affects the duplicated sphere.\n    #\n    pm.duplicate( 'group1|sphere1', ic=True )\n    pm.move( 0, 0, 0 )\n    pm.setAttr( 'makeNurbSphere1.radius', 2 )\n    \n    # Duplicate selected objects along with their upstream nodes\n    # and connections. This will duplicate the history.\n    pm.select( 'group1|sphere2' )\n    pm.duplicate( un=True )", 
    "duplicateCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.cone( ch=True, o=True, po=0, ax=(0, 1, 0), r=3, hr=4 )\n    # Result: [nt.Transform(u'nurbsCone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    \n    # duplicate isoparm at v param 0.5 with history\n    pm.duplicateCurve( 'nurbsCone1.v[0.5]', ch= True, o=True )\n    # Result: [u'duplicatedCurve1', u'curveFromSurfaceIso1'] #\n    \n    # duplicate isoparm at normalized u param 0.1, no history\n    pm.duplicateCurve( 'nurbsCone1.un[0.1]', ch=False )\n    # Result: [u'duplicatedCurve2'] #\n    \n    pm.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=10, lr=1 ) ;\n    pm.circle( ch=True, o=True, nr=(0, 1, 0), r=4 ) ;\n    pm.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=False, rn=False, un=False, tol=0.01 )\n    # Result: [nt.CurveVarGroup(u'nurbsPlaneShape1->projectionCurve1')] #\n    # duplicate curve on surface\n    pm.duplicateCurve( 'nurbsPlaneShape1-\"projectionCurve1_1', ch=True, o=False )\n    \n    pm.trim( 'nurbsPlaneShape1', 'projectionCurve1_Shape1', ch=True, o=True, rpo=True, lu=0.2, lv=0.3 )\n    # duplicate trim edge\n    pm.duplicateCurve( 'nurbsPlane1.edge[1][1][1]', ch=True, o=False);", 
    "duplicateSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.nurbsPlane( u=4, v=3 )\n    # Result: [nt.Transform(u'nurbsPlane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    pm.duplicateSurface( 'nurbsPlane1.sf[1:2][0:1]', ch=True, o=True )\n    # Result: [u'duplicatedSurface1', u'subSurface1'] #\n    \n    # Duplicates 4 faces of a nurbs plane.", 
    "dynCache": "    \n    \n    import pymel.core as pm\n    \n    # Create an emitter and connect it to a particle shape\n    pm.emitter(typ='omni', pos=(1, 1, 1), n='myEmitter')\n    pm.particle(n='myParticles')\n    pm.connectDynamic('myParticles', em='myEmitter')\n    \n    # Cache all attributes of the particle shape at time 50\n    pm.playbackOptions(min=0, max=50, ast=0, aet=100)\n    pm.currentTime('0');\n    pm.play(w=True)\n    pm.dynCache()", 
    "dynControl": "", 
    "dynExport": "    \n    \n    import pymel.core as pm\n    \n    pm.dynExport( 'particle1', mnf=5, mxf=10, os=2, atr=('position', 'velocity'), p='PDB' )\n    \n    # Export position and velocity attributes for particle1\n    # for frames 5 through 10 at every half frame interval,\n    # to files in subdirectory \"PDB\" of the workspace root\n    # directory. The default format (binary) will be used.", 
    "dynExpression": "    \n    \n    import pymel.core as pm\n    \n    pm.dynExpression( 'particleShape1', s='rgbPP = \"\" 1, 0, 0 \"\"', c=1 )\n    \n    # This expression tells particleShape1 that whenever new particles are\n    # created for this object, then their color should start out as \"\" 1, 0, 0 \"\",\n    # which is red.\n    \n    pm.dynExpression( 'particleShape1', s='rgbPP = rgbPP * .9;', rbd=1 )\n    \n    # This sets the runtime before dynamics expression for rgbPP.  When a particle is\n    # first \"born\", its color will be red from the previous example.  Every other frame after\n    # that, its color is reduced by 10 percent each time the expression is executed.\n    \n    pm.dynExpression( 'particleShape1', s='rgbPP = rgbPP * .9;', rad=1 )\n    \n    # This sets the runtime after dynamics expression for rgbPP.  When a particle is\n    # first \"born\", its color will be red from the previous example.  Every other frame after\n    # that, its color is reduced by 10 percent each time the expression is executed.", 
    "dynGlobals": "    \n    \n    import pymel.core as pm\n    \n    pm.dynGlobals( e=True, os=5 )\n    # or\n    pm.dynGlobals( os=5 )\n    \n    # Both of these commands will edit the overSampling attribute of\n    # the active dynGlobals node.", 
    "dynPaintCtx": "", 
    "dynPaintEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.dynPaintEditor( 'editor' )\n    \n    pm.dynPaintEditor( 'editor', e=True, ni=(640, 480, 1.0, 0.5, 0.2) )", 
    "dynParticleCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.dynParticleCtx( 'dynParticleContext', e=True, nj=5, jr=1.5 )\n    # Set the option values for number of jitters to 5 and jitter\n    # radius to 1.5 in the particle context, which will result in\n    # creating 5 particles for each mouse click in the viewport,\n    # randomly placed, but all within 1.5 units of the mouse click.", 
    "dynPref": "    \n    \n    import pymel.core as pm\n    \n    # Sets autoCreate rigid bodies to \"on\"\n    pm.dynPref( autoCreate=1 )", 
    "dynSelectCtx": "", 
    "dynTestData": "", 
    "dynWireCtx": "", 
    "dynamicLoad": "    \n    \n    import pymel.core as pm\n    \n    pm.dynamicLoad( 'libDynSlice.dll' )", 
    "editDisplayLayerGlobals": "    \n    \n    import pymel.core as pm\n    \n    pm.editDisplayLayerGlobals( cdl='displayLayer1' )\n    pm.editDisplayLayerGlobals( query=True, cdl=True )\n    # Result: displayLayer1\n    pm.editDisplayLayerGlobals( 'bi', query=True )\n    # Result: 10\n    pm.editDisplayLayerGlobals( useCurrent='on' )", 
    "editDisplayLayerMembers": "    \n    \n    import pymel.core as pm\n    \n    pm.editDisplayLayerMembers( 'displayLayer1', 'sphere1', 'cone1' )\n    # Result : 2\n    pm.editDisplayLayerMembers( 'displayLayer1', query=True )\n    # Result : sphere1 cone1\n    pm.editDisplayLayerMembers( 'displayLayer1', 'expression1', 'sphere2' )\n    # Warning : Only DAG objects can be in a display layer.  'expression1' ignored.\n    # Result : 1", 
    "editMetadata": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.polyPlane( name='smcPlane', constructionHistory=False )\n    # Result: [nt.Transform(u'smcPlane')] #\n    pm.pickWalk( d='down' )\n    # Result: [u'smcPlaneShape'] #\n    # Create structure\n    pm.dataStructure( format='raw', asString='name=idStructure:int32=ID' )\n    # Result: u'idStructure' #\n    # Apply structure to plane\n    pm.addMetadata( structure='idStructure', streamName='idStream', channelName='vertex' )\n    # Result: [u'smcPlaneShape'] #\n    # Attach a metadata value to three of the components by selection\n    pm.select( 'smcPlaneShape.vtx[8:10]', replace=True )\n    pm.editMetadata( streamName='idStream', memberName='ID', value=7 )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    # Attach a metadata value to another component by manual indexing\n    pm.select( 'smcPlaneShape', replace=True )\n    pm.editMetadata( streamName='idStream', memberName='ID', channelName='vertex', value=8, index=14 )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    # Remove metadata from the middle of the three vertexes set earlier\n    pm.select( 'smcPlaneShape.vtx[9]', replace=True )\n    pm.editMetadata( streamName='idStream', remove=True )\n    # Result: nt.Mesh(u'smcPlaneShape') #", 
    "editRenderLayerAdjustment": "    \n    \n    import pymel.core as pm\n    \n    # Create two adjustments for layer1\n    pm.editRenderLayerAdjustment( 'lambert1.color', 'lambert1.diffuse', layer='layer1' )\n    # Result : 2\n    # List all the adjustments to renderlayer1\n    pm.editRenderLayerAdjustment( 'layer1', query=True, layer=True )\n    # Result : lambert1.color lambert1.diffuse\n    # Create adjustments for the current render layer\n    pm.editRenderLayerAdjustment( 'lambert1.color' )\n    # Result : 1\n    # Remove one adjustment from the current render layer\n    pm.editRenderLayerAdjustment( 'lambert1.color', remove=True )\n    # Result : 1\n    # Query the current layer for the list of adjustments\n    pm.editRenderLayerAdjustment( query=True, alg=True )\n    # castsShadows         nurbsSphereShape1.castsShadows\n    #                      pPlaneShape1.castsShadows\n    #                      pSphereShape1.castsShadows\n    # instObjGroups        pCylinderShape1.instObjGroups[0]\n    # motionBlurByFrame    defaultRenderGlobals.motionBlurByFrame\n    # receiveShadows       nurbsSphereShape1.receiveShadows\n    #                      pPlaneShape1.receiveShadows\n    #                      pSphereShape1.receiveShadows\n    # shadingSamples       defaultRenderQuality.shadingSamples", 
    "editRenderLayerGlobals": "    \n    \n    import pymel.core as pm\n    \n    pm.editRenderLayerGlobals( currentRenderLayer='layer1' )\n    pm.editRenderLayerGlobals( query=True, currentRenderLayer=True )\n    # Result: layer1\n    pm.editRenderLayerGlobals( query=True, baseId=True )\n    # Result: 1\n    pm.editRenderLayerGlobals( useCurrent=True )\n    # Enable automatic creation of adjustments\n    pm.editRenderLayerGlobals( enableAutoAdjustments=True )", 
    "editRenderLayerMembers": "    \n    \n    import pymel.core as pm\n    \n    pm.editRenderLayerMembers( 'layer1', 'sphere1', 'cone1' )\n    # Result : 4\n    pm.editRenderLayerMembers( 'layer1', query=True )\n    # Result : sphere1 sphere1Shape cone1 cone1Shape\n    pm.editRenderLayerMembers( 'layer1', 'expression1', 'sphere2' )\n    # Result : 2\n    pm.editRenderLayerMembers( 'layer1', 'sphere1', remove=True)\n    # Result : 2", 
    "editor": "    \n    \n    import pymel.core as pm\n    \n    # To change the selection connection for any editor\n    #\n    pm.editor( 'anyEditor', edit=True, mainListConnection='newConnection' )", 
    "editorTemplate": "    \n    \n    import pymel.core as pm\n    \n    # You will most likely want to use this command when defining the controls\n    # that appear in the Attribute Editor for a custom node created in a plugin.\n    \n    # To see how this is done compile and load the transCircleNode plugin. Then\n    # create a node of type \"transCircle\" and show the Attribute Editor.\n    \n    # Now look at the AEtransCircleTemplate.mel script to see how the\n    # editorTemplate command is used to define the controls that appear in\n    # the Attribute Editor.\n    \n    # As you may have noticed the name of the template script must match the\n    # node type you create, ie. AEnodeTypeTemplate.mel.", 
    "effector": "    \n    \n    import pymel.core as pm\n    \n    # Will cause effector1 not to be displayed if attached to a handle.\n    # This is the default.\n    #\n    pm.effector( 'effector1', e=True, hi=False )\n    \n    # Will cause effector1 to be displayed if attached to a handle.\n    #\n    pm.effector( 'effector1', e=True, hi=True )", 
    "emit": "    \n    \n    import pymel.core as pm\n    \n    pm.particle()\n    pm.emit( object='particle1', position=(1, 1, 1) )\n    \n    # This will create one particle at position \"\"1,1,1\"\" in the\n    # already-existing particle object \"i\"particle1\"/i\".\n    #\n    \n    pm.particle()\n    pm.emit( object='particle1', position=((1, 1, 1), (2, 2, 2)), attribute=('velocity', 'rgbPP'), vectorValue=((1, 2, 3), (2, 3, 4), (.5, 1, 0)), floatValue=.1 )\n    \n    # This will create two particles at positions \"\"1,1,1\"\" and \"\"2,2,2\"\" in\n    # the already-existing particle object \"i\"particle1\"/i\".  Then the velocity\n    # attribute of those particles is set to \"\"1,2,3\"\" and \"\"2,3,4\"\",\n    # respectively.  Also, the rgbPP values are set to \"\".5,1,0\"\" and\n    # \"\".1,.1,.1\"\", respectively.  Notice that the rgbPP value for the\n    # second particle was set with the -floatValue flag, even though rgbPP\n    # is a vector attribute.  The single value was converted into a vector.\n    \n    pm.particle()\n    pm.emit( object='particle1', position=((1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5)), attribute=('velocity', 'mass', 'velocity'), vectorValue=((1, 2, 3), (2, 3, 4), (.1, .2, .3), (3, 4, 5)), floatValue=.5)\n    \n    # This will create five particles in \"i\"particle1\"/i\".  The values\n    # for their attributes are:\n    #\n    # Attribute  Particle1   Particle2   Particle3   Particle4   Particle5\n    # ----------+-----------+-----------+-----------+-----------+---------\n    # position   \"\"\"\"1,1,1\"\"\"\"   \"\"\"\"2,2,2\"\"\"\"   \"\"\"\"3,3,3\"\"\"\"   \"\"\"\"4,4,4\"\"\"\"   \"\"\"\"5,5,5\"\"\"\"\n    # velocity   \"\"\"\"1,2,3\"\"\"\"   \"\"\"\"2,3,4\"\"\"\"   \"\"\"\"3,4,5\"\"\"\"   \"b\"\"\"\"\"3,4,5\"\"\"\"   \"\"\"\"3,4,5\"\"\"\"\"/b\"\n    # mass     .5          .3742       \"b\".3742       .3742       .3742\"/b\"\n    #\n    # Notice that the second value for mass was seet with the -vectorValue\n    # flag, even though mass is a float attribute.  The vector was\n    # converted into a float by taking its length.  Also, notice the \"b\"bold\"/b\"\n    # values in the table.  The values for those attribute values were not\n    # explicitly set in the command.  If there are fewer values given for\n    # an attribute than there are position flags, the remaining unset\n    # values are set to the last value set for that attribute.  This\n    # allows the user to set many of the values to be the same without\n    # having to use multiple value flags.  One last note.  Notice that the\n    # attribute flag was passed twice for the attribute velocity.  The value\n    # flags for repeated attributes pick up where the previous ones left\n    # off.\n    \n    x = rand(1)\n    y = rand(1)\n    z = rand(1)\n    p = sphrand(5)\n    pm.emit( object='particle1', pos=((x, y, z), ('($p.x)', '($p.y)', '($p.z)')) )\n    \n    # This is a piece of Python code that could be put in a script or\n    # even in an expression.  It adds a random number of particles\n    # to the already-existing particle object \"i\"particle1\"/i\".  Since\n    # the number of particles as well as the positions and velocities\n    # of the particles are random, it would be impossible to just have\n    # the emit action itself in the expression or script.  It must be\n    # built as a string and then sent to the command processor with the\n    # \"b\"eval\"/b\" or \"b\"evalEcho\"/b\" commands.  Notice that when appending\n    # the vector variables to the string, it is not necessary to append\n    # each component of the vectors separately.  When they are converted\n    # from a vector to a string, the three components get separated with\n    # a space automatically, thus formatting them in the desired way.\n    # An example of a possible result from this \"script\" could be:\n    \n    pm.emit( object='particle1', pos=((1.899864198, -6.721569708, 0.585203937), (8.103957656, -4.042442985, 2.047724209), (-1.392914569, -0.109724376, 8.62265813), (1.960103537, -3.203145195, -7.6892516), (2.564072614, -6.049536895, 1.334818295), (-5.603376821, 4.33595058, 6.952385447), (-2.478591746, 6.286855715, 6.851659059), (2.424670276, -4.083412217, 6.320538621), (6.440800453, 3.405519296, 5.462135819), (2.445192551, 1.397203422, 3.443755853)), at='velocity', vv=((-2.348796409, 4.022130218, 0.5316172944), (4.149667117, -1.023146404, 1.97965556), (-0.08429132578, -0.5518495233, 1.591812495), (2.597930963, 1.033536331, -1.398351383), (-3.102859272, 3.423569856, 0.7895603241), (-2.519331228, -2.5684916, -1.530779154), (-2.645169119, -0.3186551381, 0.9164776099), (-0.6183816487, -1.060784068, -0.8748223942), (-0.2460372256, 3.567980747, -2.007567372), (1.735044809, -3.660099445, -1.765401859)) )\n    \n    # The spacing in the string is just for formatting reasons and does\n    # not affect how the action executes or compiles.", 
    "emitter": "    \n    \n    import pymel.core as pm\n    \n    pm.particle( p=((-1, 5, 2), (2, 2, 2), (3, 3, 3)), n='particles' )\n    # Result: [nt.Transform(u'particles'), nt.Particle(u'particlesShape')] #\n    pm.emitter( 'particles', r=300, mnd=1.5, mxd=2.5, n='emitter' )\n    # Result: nt.Transform(u'particles') #\n    pm.particle( n='emitted' )\n    # Result: [nt.Transform(u'emitted'), nt.Particle(u'emittedShape')] #\n    pm.connectDynamic( 'emitted', em='emitter' )\n    # Result: [u'emittedShape'] #\n    \n    # Creates a particle emitter.\n    \n    pm.emitter( dx=1, dy=0, dz=0, sp=0.33, pos=(1, 1, 1), n='myEmitter' )\n    # Result: nt.PointEmitter(u'myEmitter') #\n    pm.particle( n='emittedParticles' )\n    # Result: [nt.Transform(u'emittedParticles'), nt.Particle(u'emittedParticlesShape')] #\n    pm.connectDynamic( 'emittedParticles', em='myEmitter' )\n    # Result: [u'emittedParticlesShape'] #\n    \n    # Creates a point emitter.", 
    "enableDevice": "    \n    \n    import pymel.core as pm\n    \n    # Enables all assignInputDevice and attachDeviceAttr actions for the\n    # device named \"clock\"\n    pm.enableDevice( enable=True, d='clock' )\n    \n    # Stops applyTake (with no arguments) from updating param curves\n    # attached to the minutes  and hours channels of device named \"clock\"\n    pm.enableDevice( 'minutes', 'hours', enable=False, d='clock', apply=True )", 
    "encodeString": "    \n    \n    import pymel.core as pm\n    \n    # Set the string s to: print('Hello\\n');\n    quote = '\\\"'\n    backslash = '\\\\'\n    s = 'print(' + quote + 'Hello' + backslash + 'n' + quote + ')'\n    print 's=' + s\n    s=print(\"Hello\\n\")\n    \n    es = pm.encodeString(s)\n    print 'es=' + es\n    es=print(\\\"Hello\\\\n\\\")", 
    "error": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    def lightError():\n        l = pm.ls( lights=True )\n        if len(l) == 0:\n            pm.error( \"No Lights\" )\n    lightError()\n    # The above will produce the following output and raise a RuntimeError\n    # exception from the script containing it:\n    #\n    #   # Error: No Lights #\n    #\n    # If the option to display line numbers or the stack trace is turned on\n    # the following output will be produced and the same exception raised:\n    #\n    #   # Error: line 13 of 'lightError' in '\"maya console'\": No Lights #\n    #", 
    "eval": "    \n    \n    import maya.mel as mel\n    \n    mel.eval('match \"a+b+\" \"abbcc\"')\n    # Result: u'abb' #\n    \n    # Eval can be used to access global MEL variables. For example, the following\n    # assigns the current value in $gMainWindow to a Python variable.\n    myPythonVar=mel.eval('$tempMelVar=$gMainWindow')\n    \n    # Print the value retrieved.\n    print myPythonVar\n    # Result: MayaWindow", 
    "evalContinue": "", 
    "evalDeferred": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout27') #\n    button = pm.button(label='Delete Me')\n    pm.button(button, edit=True, command=('pm.evalDeferred(\"pm.deleteUI(button)\")'))\n    # Result: ui.Button('window1|columnLayout27|button27') #\n    pm.showWindow()", 
    "evalEcho": "", 
    "evalNoSelectNotify": "", 
    "event": "    \n    \n    import pymel.core as pm\n    \n    pm.event( em=2, t='newCloud' )\n    # At every collision, emit two new particles into the object\n    # newCloud. The original colliding particles will survive and\n    # remain in their original object. This event will be\n    # assigned to the currently selected object.\n    \n    pm.event( em=2 )\n    # At every collision, emit two new particles into the same object.\n    \n    pm.event( count=1, em=2 )\n    # At the first collision for each particle, emit two new particles\n    # into the same object.\n    # Subsequent collisions for that same particle will not cause any\n    # additional particles to be emitted. However, the new particles will\n    # each emit two new ones at their first collision, since they also\n    # belong to the object for which this event has been assigned.\n    \n    pm.event( die=1, count=2 )\n    # All particles in the selected object will die at their second\n    # collision.\n    \n    pm.event( 'myCloud', name='foo', count=1, q=1 )\n    # Return the current value of the count parameter for the event \"foo\"\n    # assigned to particle shape myCloud.  The order of the flags is\n    # important.  Thef lag you are querying (in this case, -count) must\n    # come before the -q.  The -name flag and the particle object name must\n    # come after.\n    \n    pm.event( 'myCloud', d=True, name='foo' )\n    # Delete the event \"foo\" assigned to particle shape myCloud.\n    \n    pm.event( 'myCloud', e=True, name='foo', emit=2 )\n    # Edit the \"emit\" value of the event \"foo\" assigned to\n    # particle shape myCloud.\n    \n    pm.event( 'myCloud', proc='myProc' )\n    # Call the MEL proc \"myProc(name, id, name) each time a particle\n    # of myCloud collides with anything.\n    \n    pm.event( name='oldName', e=1, rename='newName' )\n    # For the selected particle shape, rename the event \"oldName\" to \"newName.\"", 
    "exactWorldBoundingBox": "    \n    \n    import pymel.core as pm\n    \n    bbox = pm.exactWorldBoundingBox( 'sphere1', 'cube1', 'cone2')\n    print 'Bounding box ranges from: %f' % bbox[0], ', %f' % bbox[1], ', %f' % bbox[2],\n    print ' to %f' % bbox[3], ', %f' % bbox[4], ', %f' % bbox[5]", 
    "exclusiveLightCheckBox": "    \n    \n    import pymel.core as pm\n    \n    # Create a spot light\n    myLight = pm.spotLight(coneAngle=45)\n    \n    myWindow = pm.window()\n    pm.columnLayout('cl')\n    # Result: ui.ColumnLayout('window1|cl') #\n    pm.exclusiveLightCheckBox(width=200, label='Exclusive', light=myLight)\n    # Result: u'window1|cl|exclusiveLightCheckBox1' #\n    pm.showWindow(myWindow)", 
    "exportEdits": "    \n    \n    import pymel.core as pm\n    \n    # query nodes to be exported, target is selected nodes, include related shaders\n    nodeList = pm.exportEdits(query=1,selected=1,includeShaders=1)\n    # exported selected nodes and related animation nodes to file\n    pm.exportEdits(\"myExportFile.ma\",type='editMA',selected=1,includeShaders=1)\n    # Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/myExportFile.editMA", 
    "expression": "    \n    \n    import pymel.core as pm\n    \n    pm.expression( s='a.translateX = b.translateX * sin(c.translateX)' )\n    \n    pm.expression( o='ball', s='tx = sin(time);' )", 
    "expressionEditorListen": "    \n    \n    import pymel.core as pm\n    \n    pm.expressionEditorListen()", 
    "extendCurve": "    \n    \n    import pymel.core as pm\n    \n    # to extend the start of a curve with a line of distance 3\n    pm.extendCurve( em=0, et=0, s=True, d=3.0 )\n    \n    # to extend the end of a curve to a point\n    pm.extendCurve( em=2, s=False, ip=(1, 2, 3) )", 
    "extendFluid": "", 
    "extendSurface": "    \n    \n    import pymel.core as pm\n    \n    #Create a nurbs plane, then extend both sides of the plane by 10\n    pm.nurbsPlane(n='plane1')\n    # Result: [nt.Transform(u'plane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    pm.extendSurface('plane1', d=10, es=2)\n    # Result: [nt.Transform(u'plane1'), nt.ExtendSurface(u'extendSurface1')] #", 
    "extrude": "    \n    \n    import pymel.core as pm\n    \n    # extrude profile curve \"distance\" 5 units along x axis\n    pm.extrude ('profile', et = 0, d= (1, 0, 0), l= 5)\n    \n    # extrude profile curve along path curve using \"flat\" method\n    pm.extrude( 'profile', 'path', et=1 )\n    \n    # extrude profile curve along path curve using \"tube\" method\n    pm.extrude( 'profile', 'path', et=2 )", 
    "fcheck": "    \n    \n    import pymel.core as pm\n    \n    # View the image \"myImage.iff\"\n    #\n    pm.fcheck( 'myImage.iff' )\n    # Result: u'' #\n    # You can also display several images at once using filenames with\n    # wildcards (each in a separate window)\n    #\n    pm.fcheck( 'myTest*' )\n    # Result: u'' #\n    # You can display an animation using a trailing dot (.) on the\n    # filename.\n    #\n    pm.fcheck( 'mySequence.' )\n    # Result: u'' #", 
    "file": "    \n    \n    import pymel.core as pm\n    \n    # save the current scene to an ascii file named \"fred.ma\"\n    #\n    pm.file( rename='fred.ma' )\n    pm.file( save=True, type='mayaAscii' )\n    \n    # save the current scene to an ascii file without the \".ma\" extension\n    #\n    pm.file( rename='tmp' )\n    pm.file( save=True, defaultExtensions=False, type='mayaAscii' )\n    \n    # open the file fred.ma, using the default load settings. Any references will\n    # be brought in in the same state they were in when fred.ma was last saved.\n    #\n    pm.file( 'fred.ma', open=True )\n    \n    # reference the file wilma.ma\n    #\n    pm.file( 'C:/mystuff/wilma.mb', reference=True )\n    \n    # reference the file barney.mb into a namespace called \"rubble\".\n    #\n    pm.file( 'C:/maya/projects/default/scenes/barney.ma', reference=True, type='mayaAscii', namespace='rubble' )\n    \n    # change the namespace containing barney.mb.\n    #\n    pm.file( 'C:/maya/projects/default/scenes/barney.ma', edit=True, namespace='purpleDinosaur' )\n    \n    # retrieve a string array of all files such as main scene and reference files in the scene\n    #\n    pm.file( query=True, list=True )\n    # Result: C:/maya/projects/default/scenes/fred.ma C:/mystuff/wilma.mb C:/maya/projects/default/scenes/barney.ma\n    \n    # Select \"betty\" and export betty to a separate file called \"betty.mb\".\n    # Reference the new betty file into this scene, replacing the\n    # previous betty object from this scene with the reference to betty.\n    #\n    pm.file( 'c:/mystuff/betty.mb', type='mayaBinary', namespace='rubble', exportAsReference=True )\n    \n    # Select all the objects associated with file betty.mb\n    #\n    pm.file( 'c:/mystuff/betty.mb', selectAll=True )\n    # Result: rubble:betty\n    \n    # Remove the reference file betty.mb. All nodes in betty.mb will\n    # be removed from the scene\n    pm.file( 'c:/mystuff/betty.mb', removeReference=True )\n    \n    # Query whether the file named \"foo.mb\" exists on disk\n    #\n    pm.file( 'foo.mb', query=True, exists=True )\n    0\n    \n    # Query whether the reference node \"rubble:betty is deferred loaded.\n    # Note, -referenceNode flag has to come before -q flag.\n    pm.file(referenceNode='rubbleRN', query=True, deferReference=True )\n    \n    # Query the last temp file during file save\n    #\n    pm.file( query=True, lastTempFile=True)\n    \n    ####################################/\n    #/   Example for the '-buildLoadSettings' and '-loadSettings' flags  #/\n    ####################################/\n    \n    # Build load settings for \"ref.ma\"\n    pm.file( 'ref.ma', open=True, buildLoadSettings=True )\n    # Edit those settings, to indicate that some reference should\n    # be brought in unloaded.\n    # Note: the following command is primarily intended for internal\n    # use. It may not be easy to determine the numeric ID of a given\n    # reference (\"2\" in this case) .\n    # pm.loadSettings( '2', deferReference=1 )\n    # Use the edited settings when opening the file\n    pm.file('ref.ma', open=True, loadSettings='implicitLoadSettings')\n    \n    #\n    #   Example for the '-cleanReference' and '-editCommand' flags\n    #\n    \n    # Create a simple reference to a sphere\n    #\n    pm.file( force=True, new=True )\n    pm.polySphere()\n    pm.file( rename='ref.ma' )\n    pm.file( force=True, type='mayaAscii', save=True )\n    pm.file( force=True, new=True )\n    pm.file( 'ref.ma', reference=True, namespace='ref' )\n    \n    # Scale the sphere\n    #\n    pm.setAttr( 'ref:pSphere1.s', 5, 5, 5 )\n    pm.getAttr( 'ref:pSphere1.s' )\n    5 5 5\n    \n    # The 'cleanReference' and 'editCommand' flags only work on\n    # unloaded references.\n    #\n    pm.file( unloadReference='refRN' )\n    \n    # Query the setAttr edits:\n    #\n    pm.reference( referenceNode='refRN', query=True, editCommand=True )\n    setAttr ref:pSphere1.s -type \"double3\" 5 5 5 setAttr ref:lightLinker1.lnk -s 2\n    \n    # Remove all setAttr edits on refRN:\n    #\n    pm.file( cleanReference='refRN', editCommand='setAttr' )\n    pm.reference( referenceNode='refRN', query=True, editCommand=True )\n    # Note that nothing is returned\n    \n    pm.file( loadReference='refRN' )\n    \n    pm.getAttr( 'ref:pSphere1.s' )\n    1 1 1\n    # Note that scale has returned to 1 1 1\n    \n    # apply the edit file to a reference\n    pm.file(\"translateSphere.editMA\", reference=True, applyTo=\"refRN\")\n    # Result: maps \"main\" to refRN's namespace\n    \n    # apply the edit file to nodes in the main scene\n    pm.file(\"translateSphere.editMA\", import=True, applyTo=\":\")\n    # Result: maps \"main\" to the root namespace\n    \n    # apply the edit file to a reference, but it also has connections between two refs\n    pm.file(\"connectionsBetweenRefs.editMA\", reference=True, applyTo=\"refRN\", mapPlaceHolderNamespace=(\"\"otherRef\"\", \"otherRefRN\"))\n    # Result: maps \"main\" to refRN's namespace and \"otherRef\" to otherRefRN's namespace\n    \n    # Change the modified state of the file.\n    pm.file(modified=True)\n    \n    # Set the file options\n    pm.file( force=True, save=True, options='v=1;p=17',type='mayaAscii');\n    # Result:The saved file uses full names for attributes on nodes and flags in command.Also the precision of values in file is 17.\n    \n    # Load Reference Preview\n    \n    # Create a nested reference with a child reference under a parent reference.\n    pm.file( force=True, new=True )\n    pm.polySphere()\n    pm.file( rename='child.ma' )\n    pm.file( force=True, type='mayaAscii', save=True )\n    pm.file( force=True, new=True )\n    pm.file( 'child.ma', reference=True, namespace='child_namespace' )\n    pm.file( rename='parent.ma' )\n    pm.file( force=True, type='mayaAscii', save=True )\n    \n    # Preview the unloaded child reference under the unloaded parent reference.\n    pm.file( force=True, new=True )\n    pm.file( 'parent.ma', reference=True, namespace='parent_namespace' )\n    pm.file( 'parent.ma', unloadReference=True )\n    pm.file( 'parent.ma', loadReferencePreview=True )\n    \n    #\n    #                          Example for 'mergeNamespacesOnClash'\n    #\n    \n    # Create a reference\n    pm.file( force=True, new=True )\n    pm.namespace( add=\"bar\" )\n    pm.namespace( set=\"bar\" )\n    pm.polySphere();\n    pm.file( rename=\"ref.ma\" )\n    pm.file( force=True, type='mayaAscii', save=True )\n    \n    # Create a scene with some namespaces and objects\n    pm.file( force=True, new=True )\n    pm.namespace( add=\"ref:foo:bar\" )\n    pm.namespace( set=\"ref:foo:bar\" )\n    pm.polySphere();\n    \n    # Merge into root\n    pm.file('ref.ma', reference=True, mergeNamespacesOnClash=True, namespace=':');\n    \n    # Merge into nested namespace\n    pm.file('ref.ma', import=True, mergeNamespacesOnClash=True, namespace=':ref:foo');\n    \n    # Don't merge namespace\n    pm.file('ref.ma', reference=True, mergeNamespacesOnClash=False, namespace=':ref:foo');\n    \n    # Now Edit the new namespace and merge it\n    pm.file('ref.ma', edit=True, mergeNamespacesOnClash=True, namespace=':ref:foo');\n    \n    \n    \n    \n    ###############################################/\n    #/ Example for export with relativeNamespace  #/\n    ###############################################/\n    \n    pm.file(new=True,force=True)\n    pm.sphere(name=\":A:sphereA\")\n    pm.sphere(name=\":A:B:sphereB\")\n    pm.sphere(name=\":A:B:C:sphereC\")\n    pm.sphere(name=\":D:sphereD\")\n    \n    # Select all the spheres.\n    #\n    pm.select(\":A:sphereA\", replace=True)\n    pm.select(\":A:B:sphereB\",add=True)\n    pm.select(\":A:B:C:sphereC\",add=True)\n    pm.select(\":D:sphereD\",add=True)\n    \n    # Export all these spheres with -relativeNamespace flag.\n    #\n    pm.file(rename=\"exp.ma\")\n    pm.file(force=True, exportSelected=True, type=\"mayaAscii\", relativeNamespace=\":A:B\")\n    # The result in the exported file:\n    # :A:sphereA\n    # :C:sphereC\n    # :D:sphereD\n    # -sphereB\n    #", 
    "fileBrowserDialog": "    \n    \n    import pymel.core as pm\n    \n    # Old way:\n    def importImage( fileName, fileType):\n       pm.file( fileName, i=True );\n       return 1\n    \n    pm.fileBrowserDialog( m=0, fc=importImage, ft='image', an='Import_Image', om='Import' )\n    \n    # Recommended way:\n    filename = pm.fileDialog2(fileMode=1, caption=\"Import Image\")\n    pm.file( filename[0], i=True );", 
    "fileDialog": "    \n    \n    import pymel.core as pm\n    \n    # Old way:\n    pm.fileDialog()\n    pm.fileDialog( directoryMask='/usr/u/bozo/myFiles/*.ma' )\n    pm.fileDialog( dm='*.cc' )\n    \n    # Recommended way:\n    pm.fileDialog2(startingDirectory =\"/usr/u/bozo/myFiles/\", fileFilter=\"Maya Ascii (*.ma)\")", 
    "fileDialog2": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    \n    basicFilter = \"*.mb\"\n    pm.fileDialog2(fileFilter=basicFilter, dialogStyle=2)\n    \n    singleFilter = \"All Files (*.*)\"\n    pm.fileDialog2(fileFilter=singleFilter, dialogStyle=2)\n    \n    multipleFilters = \"Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)\"\n    pm.fileDialog2(fileFilter=multipleFilters, dialogStyle=2)", 
    "fileInfo": "    \n    \n    import pymel.core as pm\n    \n    pm.fileInfo( 'application', 'maya' )\n    pm.fileInfo( 'product', 'Maya Unlimited 4.5' )\n    pm.fileInfo( 'version', '4.5' )\n    pm.fileInfo( 'cutIdentifier', '200111091529' )\n    pm.fileInfo( 'osv', 'IRIX 6.5 04151556 IP32' )\n    pm.fileInfo( 'application', query=True )\n    # Result: [(u'application', u'maya'), (u'product', u'Maya Unlimited 4.5'), (u'version', u'4.5'), (u'cutIdentifier', u'200111091529'), (u'osv', u'IRIX 6.5 04151556 IP32')] #\n    # maya\n    pm.fileInfo( query=True )\n    # Result: [(u'application', u'maya'), (u'product', u'Maya Unlimited 4.5'), (u'version', u'4.5'), (u'cutIdentifier', u'200111091529'), (u'osv', u'IRIX 6.5 04151556 IP32')] #\n    # returns a list of all keyword/value pairs, in the order they were\n    # defined.", 
    "filePathEditor": "    \n    \n    import pymel.core as pm\n    \n    #Return the directories of the external files in Maya scene.\n    #\n    pm.filePathEditor(query=True, listDirectories=\"\")\n    #Return the directories of the external files which are\n    #saved at the target location.\n    #\n    pm.filePathEditor(query=True, listDirectories=\"c:/textures/\", status=True)\n    #Return the files which are saved in the specified directory,\n    #but not including the files in the sub directories.\n    #Use \"withAttribute\" to return the associated plug\n    #which is using the file.\n    #Use \"status\" to return the information that if the files\n    #exist or not.\n    #For example, if \"stone.jpg\" exists and it is used by\n    #the plug \"node1.imageName\", then the returned result\n    #will be an ordered pair: \"stone.jpg node1.imageName 1\".\n    #\n    pm.filePathEditor(query=True, listFiles=\"c:/textures/\", withAttribute=True, status=True)\n    #Return the label of the specified type.\n    #For default types, they are localized strings.\n    #For other types, they are defined by user.\n    #\n    pm.filePathEditor(query=True, typeLabel=\"imagePlane\")\n    # Result: u'' #\n    #Register and save a new file type and type label.\n    #Then user can use it next time they open maya\n    #\n    pm.filePathEditor(registerType=\"containerBase.iconName\", registerLabel=\"ContainerIcon\")\n    #Deregister the file type and clean the saved information\n    #\n    pm.filePathEditor(deregisterType=\"containerBase.iconName\")\n    #Register a new file type and type label without saving\n    #\n    pm.filePathEditor(registerType=\"containerBase.iconName\", registerLabel=\"ContainerIcon\", temporary=True)\n    #Deregister the file type but do nothing on the saved information\n    #\n    pm.filePathEditor(deregisterType=\"containerBase.iconName\", temporary=True)\n    #Return all registered types, including default types\n    #\n    pm.filePathEditor(query=True, listRegisteredTypes=True)\n    #Query the attribute type of the plug instance\n    #\n    pm.filePathEditor(\"node1.fileTextureName\", query=True, attributeType=True)\n    #Refresh all file information in the scene\n    #\n    pm.filePathEditor(refresh=True)\n    #Recursively look for the files with the same name in\n    #the target directory. Repath the plug values to those files.\n    #Use \"force\" to edit all given plugs no matter if\n    #their original paths exist or not.\n    #Use \"recursive\" to find files recursively and to make\n    #sure the files must exist.\n    #\n    pm.filePathEditor(\"node1.fileTextureName\", \"node2.fileTextureName\", repath=\"e:/textures/\",\n                                                    force=True, recursive=True)\n    #Preview the result of edit, but not to do the replacement.\n    #Return the file name and the information that if the new file path\n    #exists. They are listed in pairs.\n    #\n    pm.filePathEditor(\"node1.fileTextureName\", \"node2.fileTextureName\", repath=\"e:/textures/\", preview=True)\n    #Replace strings in file path of the plugs.\n    #Here, only the string \"image\" in the directory part\n    #will be replaced by \"texture\".\n    #\n    pm.filePathEditor(\"node1.fileTextureName\", \"node2.fileTextureName\", replaceField=\"pathOnly\", replaceString=(\"image\", \"texture\"), replaceAll=True)\n    #Copy a file from the source to the destination and repath the plug data to the new file.\n    #Use \"force\" to overwrite the file at the destination, if it has a name clash.\n    #\n    pm.filePathEditor(\"node1.fileTextureName\", \"node2.fileTextureName\",  copyAndRepath=(\"e:/textures\", \"g:/image\"), force=True)", 
    "filletCurve": "    \n    \n    import pymel.core as pm\n    \n    # Create a circular fillet (by default) having radius 2.5 between the\n    # active curves:\n    pm.filletCurve( r=2.5 )\n    \n    # Create a freeform curve fillet between the two specified curves at\n    # these parameter values:\n    pm.filletCurve( 'curve1', 'curve2', cir=True, cp1=0.5, cp2=2.0 )", 
    "filter": "    \n    \n    import pymel.core as pm\n    \n    pm.filter( t='filterEuler', n='houston' )\n    pm.filter( 'houston', edit=True, irx=0.0 )\n    pm.filter( 'houston', query=True, irx=True )", 
    "filterCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.filterCurve( 'nurbsCone1_rotateX', 'nurbsCone1_rotateY', 'nurbsCone1_rotateZ' )", 
    "filterExpand": "    \n    \n    import pymel.core as pm\n    \n    # Returns any selected isoparms (mask 45) as individual items\n    # (because of \"ex=True\").\n    pm.filterExpand( ex=True, sm=45 )\n    \n    # Returns any selected CVs (mask 28) as compact items.  For example,\n    #   if curve.cv[0:3] is selected, then \"curve.cv[0:3]\" is returned.\n    #   If \"ex=True\", then four items are returned, one for each CV.\n    pm.filterExpand( ex=False, sm=28 )\n    \n    # Returns any selected CVs (mask 28) and edit points (mask 30).\n    pm.filterExpand( sm=(28,30) )\n    \n    # Returns any selected nurbs curves.\n    pm.filterExpand( sm=9 )\n    \n    # Returns any selected nurbs curves-on-surface.\n    pm.filterExpand( sm=11 )\n    \n    # return the poly faces (mask 34) from the specified arguments\n    pm.filterExpand([\"pCube1.f[1]\",\"pCube1.f[4]\",\"pCube1.vtx[0:3]\"], sm=34)", 
    "findKeyframe": "    \n    \n    import pymel.core as pm\n    \n    # Find the next key from the current time, based upon the ticks\n    # displayed within the time slider\n    #\n    pm.findKeyframe( timeSlider=True, which=\"next\" )\n    # Result: 1.0 #\n    \n    # Find the next key for nurbsCone1 after time 25\n    #\n    pm.findKeyframe( 'nurbsCone1', time=(25,25), which=\"next\" )\n    \n    # Find the curves driving the nurbsCone1's rotateX attribute\n    #\n    pm.findKeyframe( 'nurbsCone1', curve=True, at='rotateX' )", 
    "findType": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'transform', name='silly' )\n    # Result: nt.Transform(u'silly') #\n    pm.createNode( 'transform', name='putty' )\n    # Result: nt.Transform(u'putty') #\n    pm.connectAttr( 'silly.tx', 'putty.tx' )\n    # Find transform nodes connected to node \"silly\"\n    #\n    pm.findType( type='transform', 'silly' )\n    silly\n    pm.select( 'silly' )\n    #\n    # Same again from selection list\n    #\n    pm.findType( type='transform' )\n    silly\n    pm.setKeyframe( t=10 )\n    #\n    # Find all time nodes\n    #\n    pm.findType( type='time', deep=True, e=True )\n    u'time1'  \n    #\n    # Find all anim curve nodes\n    #\n    pm.findType( type=\"animCurve\", deep=True )\n    u'silly_visibility', u'silly_translateX', u'silly_translateY', u'silly_translateZ', u'silly_rotateX', u'silly_rotateY', u'silly_rotateZ', u'silly_scaleX', u'silly_scaleY', u'silly_scaleZ'  ", 
    "fitBspline": "    \n    \n    import pymel.core as pm\n    \n    pm.curve( d=1, p=((0.2662494, 0, 10.640916), (-4.71138, 0, 7.070603), (-7.849212, 0, 1.051444), (-6.646792, 0, -3.475301), (-2.499369, 0, -3.770414), (2.041102, 0, -1.381914), (5.408074, 0, 3.095469)), k=(0, 1, 2, 3, 4, 5, 6) )\n    # Result: nt.Transform(u'curve1') #\n    \n    pm.fitBspline( ch=1, tol=0.01 )\n    # Result: [nt.Transform(u'fitBsplineCurve1'), nt.FitBspline(u'fitBspline1')] #", 
    "flagTest": "", 
    "flexor": "    \n    \n    import pymel.core as pm\n    \n    # Create a sculpt object with a max displacement of 4.0 at the\n    # selected joint\n    pm.flexor( typ='sculpt', dc=\"sculpt -mxd 4.0\", aj=True )\n    \n    # Create a lattice flexor at all joints on the skeleton:\n    pm.flexor( type='jointLattice', aj=True, ts=True )\n    \n    # Create a lattice flexor of dimensions 4 6 4 on the selected joint\n    pm.flexor( type='jointLattice', dc=\"lattice -dv 4 6 4 -cp -dualBase true\", aj=True)", 
    "floatField": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout28') #\n    pm.floatField()\n    # Result: ui.FloatField('window1|columnLayout28|floatField9') #\n    pm.floatField( editable=False )\n    # Result: ui.FloatField('window1|columnLayout28|floatField10') #\n    pm.floatField( minValue=-10, maxValue=10, value=0 )\n    # Result: ui.FloatField('window1|columnLayout28|floatField11') #\n    pm.floatField( minValue=0, maxValue=1, precision=2 )\n    # Result: ui.FloatField('window1|columnLayout28|floatField12') #\n    pm.floatField( minValue=-1, maxValue=1, precision=4, step=.01 )\n    # Result: ui.FloatField('window1|columnLayout28|floatField13') #\n    pm.showWindow( window )", 
    "floatFieldGrp": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout29') #\n    pm.floatFieldGrp( numberOfFields=3, label='Scale', extraLabel='cm', value1=0.3, value2=0.5, value3=0.1 )\n    # Result: ui.FloatFieldGrp('window1|columnLayout29|floatFieldGrp1') #\n    pm.showWindow( window )", 
    "floatScrollBar": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout30') #\n    pm.floatScrollBar()\n    # Result: ui.FloatScrollBar('window1|columnLayout30|floatScrollBar1') #\n    pm.floatScrollBar( min=-100, max=100, value=0, step=1, largeStep=10 )\n    # Result: ui.FloatScrollBar('window1|columnLayout30|floatScrollBar2') #\n    pm.showWindow()", 
    "floatSlider": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout31') #\n    pm.floatSlider()\n    # Result: ui.FloatSlider('window1|columnLayout31|floatSlider2') #\n    pm.floatSlider( min=-100, max=100, value=0, step=1 )\n    # Result: ui.FloatSlider('window1|columnLayout31|floatSlider3') #\n    pm.showWindow()", 
    "floatSlider2": "    \n    \n    import pymel.core as pm\n    \n    ############ floatSlider2 example #############\n    #\n    # First, create one object to control with the slider. We will use one\n    # slider handle to control the startSweep and the other the endSweep so\n    # that the sphere can be made to open and close via the handles.\n    #\n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # Create a window containing a floatSlider2 (two handled float slider).\n    # The window also contains two floating-point textfields.\n    #    - Moving the handle updates the associated textfield.\n    #    - Typing a value into a textfield moves the associated handle.\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout32') #\n    \n    ff1    = pm.floatField()\n    slider = pm.floatSlider2()\n    ff2    = pm.floatField()\n    \n    # Hook the slider handles up to drive the textfields. When you move the\n    # slider handles, the textfields will update to display the\n    # position of the handle.\n    #\n    pm.floatSlider2( slider, edit=True, positionControl1=ff1, positionControl2=ff2 )\n    # Result: ui.FloatSlider2('window1|columnLayout32|floatSlider21') #\n    \n    # Set the slider direction (polarity) and upper limit.\n    #\n    pm.floatSlider2( slider, edit=True, polarity=1, max=360 )\n    # Result: ui.FloatSlider2('window1|columnLayout32|floatSlider21') #\n    \n    # Connect the slider so that the handles drive the sweep angles of\n    # the NURBS sphere.\n    #\n    pm.floatSlider2(slider, edit=True, cc1='setAttr makeNurbSphere1.endSweep', cc2='setAttr makeNurbSphere1.startSweep' )\n    # Result: ui.FloatSlider2('window1|columnLayout32|floatSlider21') #\n    \n    # Display the window.\n    #\n    pm.showWindow()", 
    "floatSliderButtonGrp": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout33') #\n    pm.floatSliderButtonGrp( label='Label', field=True, buttonLabel='Button', symbolButtonDisplay=True, columnWidth=(5, 23), image='cmdWndIcon.xpm' )\n    # Result: ui.FloatSliderButtonGrp('window1|columnLayout33|floatSliderButtonGrp1') #\n    pm.showWindow( window )", 
    "floatSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a couple float slider groups.  The first will\n    #    use default limit values, and the second will set up a group that has\n    #    a field range greater than the slider range.  Try entering values\n    #    greater than the slider limits in both groups.\n    #\n    window = pm.window(title='floatSliderGrp Example')\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout34') #\n    pm.floatSliderGrp( label='Group 1', field=True )\n    # Result: ui.FloatSliderGrp('window1|columnLayout34|floatSliderGrp1') #\n    pm.floatSliderGrp( label='Group 2', field=True, minValue=-10.0, maxValue=10.0, fieldMinValue=-100.0, fieldMaxValue=100.0, value=0 )\n    # Result: ui.FloatSliderGrp('window1|columnLayout34|floatSliderGrp2') #\n    pm.showWindow( window )", 
    "flow": "    \n    \n    import pymel.core as pm\n    \n    # Create a simple motion path animation\n    \n    # create a path, e,g, a curve\n    path = pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    \n    # create an object, e.g. a sphere\n    object = pm.sphere()\n    pm.scale( 0.5, 2.0, 0.2 )\n    \n    # animate the object using a motion path with follow on for 30 frames\n    pm.pathAnimation( object[0], f=1, stu=0, etu=30, c=path )\n    # Result: u'motionPath1' #\n    \n    # select only the animated object\n    pm.select( object[0], r=True )\n    \n    # Create flow deformation on the selected object with default values:\n    pm.flow()\n    # Result: [nt.Flow(u'flow1'), nt.Ffd(u'ffd1'), nt.Transform(u'ffd1Lattice'), nt.Transform(u'ffd1Base')] #\n    \n    # Create flow deformation on the selected object with\n    # the lattice around the path, and lattice division of 3,20,2:\n    pm.flow( oc=False, dv=(3, 20, 2) )\n    \n    # Create flow deformation on the selected object with\n    # lattice subdivisions 4, 7, and 3:\n    \n    pm.flow( dv=(4, 7, 3) )\n    \n    # When the object is not currently selected, the name of the object\n    # has to be specified in the command line (note: $object[0] has to\n    # have a motion path animation):\n    \n    pm.flow( object[0], dv=(4, 7, 3) )", 
    "flowLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.flowLayout( columnSpacing=10 )\n    # Result: u'window1|flowLayout8' #\n    pm.button()\n    # Result: ui.Button('window1|flowLayout8|button28') #\n    pm.button()\n    # Result: ui.Button('window1|flowLayout8|button29') #\n    pm.button()\n    # Result: ui.Button('window1|flowLayout8|button30') #\n    pm.showWindow()", 
    "fluidCacheInfo": "    \n    \n    import pymel.core as pm\n    \n    # get start frame for Initial Conditions Cache\n    pm.fluidCacheInfo( ic=True, sf=True )\n    # get resolution for Initial Conditions Cache\n    pm.fluidCacheInfo( ic=True, re=True )\n    # get end frame for Playback Cache\n    pm.fluidCacheInfo( pb=True, ef=True )\n    # get resolution for Playback Cache\n    pm.fluidCacheInfo( pb=True, re=True )\n    # Is there data for any of the valid properties\n    # in the playback cache?\n    pm.fluidCacheInfo( pb=True, hd=True )\n    # Is there density data in the playback cache?\n    pm.fluidCacheInfo( at='density', pb=True, hd=True )", 
    "fluidEmitter": "    \n    \n    import pymel.core as pm\n    \n    pm.fluidEmitter( pos=(0, 0, 0), type='omni', der=1, her=2, fer=3, fdr=1.5, r=100.0, cye='none', cyi=1, mxd=0, mnd=0 )\n    # Result: nt.FluidEmitter(u'fluidEmitter1') #\n    pm.connectDynamic( 'fluidShape1', em='emitter1' )\n    \n    # Creates an omni emitter that's emitting density, heat and fuel\n    # into fluidShape1", 
    "fluidVoxelInfo": "    \n    \n    import pymel.core as pm\n    \n    # fluid3D is a 10x10x5 three-dimensional fluid.\n    # fluid2D is a 9x9 two-dimensional fluid.\n    #\n    # Are the given indices within the bounds of the fluids?\n    #\n    pm.fluidVoxelInfo( 'fluid2D', inBounds=( 9, 9, 0) )\n    # Result: false\n    pm.fluidVoxelInfo( 'fluid2D', inBounds=( 8, 8, 0) )\n    # Result: true\n    pm.fluidVoxelInfo( 'fluid3D', inBounds=( 2, 3, 4 ) )\n    # Result: true\n    pm.fluidVoxelInfo( 'fluid3D', inBounds=( 12, 9, 2) )\n    # Result: false", 
    "flushIdleQueue": "", 
    "flushThumbnailCache": "", 
    "flushUndo": "    \n    \n    import pymel.core as pm\n    \n    pm.flushUndo()", 
    "fontAttributes": "", 
    "fontDialog": "    \n    \n    import pymel.core as pm\n    \n    font = pm.fontDialog()\n    print font;\n    \n    fonts = pm.fontDialog(FontList=True)\n    print fonts;", 
    "formLayout": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    form = pm.formLayout(numberOfDivisions=100)\n    b1 = pm.button()\n    b2 = pm.button()\n    column = pm.columnLayout()\n    pm.button()\n    # Result: ui.Button('window1|formLayout54|columnLayout35|button33') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout54|columnLayout35|button34') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout54|columnLayout35|button35') #\n    \n    pm.formLayout( form, edit=True, attachForm=[(b1, 'top', 5), (b1, 'left', 5), (b2, 'left', 5), (b2, 'bottom', 5), (b2, 'right', 5), (column, 'top', 5), (column, 'right', 5) ], attachControl=[(b1, 'bottom', 5, b2), (column, 'bottom', 5, b2)], attachPosition=[(b1, 'right', 5, 75), (column, 'left', 0, 75)], attachNone=(b2, 'top') )\n    # Result: ui.FormLayout('window1|formLayout54') #\n    \n    pm.showWindow( window )", 
    "format": "    \n    \n    import pymel.core as pm\n    \n    # The mel script below returns the sentence\n    #     \"Display all lambert and blinn nodes.\"\n    #\n    pm.format( 'Display all ^1s and ^2s nodes.', stringArg=('lambert', 'blinn') )\n    # Result: u'Display all lambert and blinn nodes.' #", 
    "frameBufferName": "    \n    \n    import pymel.core as pm\n    \n    pm.frameBufferName(renderLayer='layer1', renderPass='renderPass1', camera='camera1')", 
    "frameLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.scrollLayout( 'scrollLayout' )\n    # Result: ui.ScrollLayout('window1|scrollLayout') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|scrollLayout|columnLayout36') #\n    pm.frameLayout( label='Buttons', borderStyle='in' )\n    # Result: ui.FrameLayout('window1|scrollLayout|columnLayout36|frameLayout9') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|scrollLayout|columnLayout36|frameLayout9|columnLayout37') #\n    pm.button()\n    # Result: ui.Button('window1|scrollLayout|columnLayout36|frameLayout9|columnLayout37|button36') #\n    pm.button()\n    # Result: ui.Button('window1|scrollLayout|columnLayout36|frameLayout9|columnLayout37|button37') #\n    pm.button()\n    # Result: ui.Button('window1|scrollLayout|columnLayout36|frameLayout9|columnLayout37|button38') #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36|frameLayout9' #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36' #\n    pm.frameLayout( label='Scroll Bars', borderStyle='out' )\n    # Result: ui.FrameLayout('window1|scrollLayout|columnLayout36|frameLayout10') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|scrollLayout|columnLayout36|frameLayout10|columnLayout38') #\n    pm.intSlider()\n    # Result: ui.IntSlider('window1|scrollLayout|columnLayout36|frameLayout10|columnLayout38|intSlider1') #\n    pm.intSlider()\n    # Result: ui.IntSlider('window1|scrollLayout|columnLayout36|frameLayout10|columnLayout38|intSlider2') #\n    pm.intSlider()\n    # Result: ui.IntSlider('window1|scrollLayout|columnLayout36|frameLayout10|columnLayout38|intSlider3') #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36|frameLayout10' #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36' #\n    pm.frameLayout( label='Fields', borderStyle='etchedIn' )\n    # Result: ui.FrameLayout('window1|scrollLayout|columnLayout36|frameLayout11') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|scrollLayout|columnLayout36|frameLayout11|columnLayout39') #\n    pm.intField()\n    # Result: ui.IntField('window1|scrollLayout|columnLayout36|frameLayout11|columnLayout39|intField1') #\n    pm.intField()\n    # Result: ui.IntField('window1|scrollLayout|columnLayout36|frameLayout11|columnLayout39|intField2') #\n    pm.intField()\n    # Result: ui.IntField('window1|scrollLayout|columnLayout36|frameLayout11|columnLayout39|intField3') #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36|frameLayout11' #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36' #\n    pm.frameLayout( label='Check Boxes', borderStyle='etchedOut' )\n    # Result: ui.FrameLayout('window1|scrollLayout|columnLayout36|frameLayout12') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|scrollLayout|columnLayout36|frameLayout12|columnLayout40') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|scrollLayout|columnLayout36|frameLayout12|columnLayout40|checkBox5') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|scrollLayout|columnLayout36|frameLayout12|columnLayout40|checkBox6') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|scrollLayout|columnLayout36|frameLayout12|columnLayout40|checkBox7') #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36|frameLayout12' #\n    pm.setParent( '..' )\n    # Result: u'window1|scrollLayout|columnLayout36' #\n    pm.showWindow()", 
    "freeFormFillet": "    \n    \n    import pymel.core as pm\n    \n    # Create the fillet across a curve on surface and surface isoparm.\n    pm.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=11, lr=1 )\n    # Result: [nt.Transform(u'nurbsPlane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    pm.circle( ch=True, o=True, nr=(0, 1, 0), r=3.79518 )\n    # Result: [nt.Transform(u'nurbsCircle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=False, rn=False, un=False, tol=0.01 )\n    # Result: [nt.CurveVarGroup(u'nurbsPlaneShape1->projectionCurve1')] #\n    pm.nurbsPlane( p=(0, 6, 0), ax=(0, 1, 0), w=11, lr=1 )\n    # Result: [nt.Transform(u'nurbsPlane2'), nt.MakeNurbPlane(u'makeNurbPlane2')] #\n    pm.freeFormFillet( 'nurbsPlaneShape1-\"projectionCurve1_1', 'nurbsPlane2.v[1.0]', ch=True, bias=0.0, depth=0.5, po=True )\n    [u'freeformFilletSurface1', u'ffFilletSrf1']\n    \n    pm.trim( 'nurbsPlaneShape1', 'projectionCurve1_Shape1', ch=True, o=True, rpo=True, lu=0.2, lv=0.2 )\n    [u'nurbsPlaneShape1', u'trim1']\n    # Fillet across a surface trim edge boundary and surface isoparm.\n    pm.freeFormFillet( 'nurbsPlane1.edge[1][1][4]', 'nurbsPlane2.v[0][0.0:0.6]', ch=False )\n    [u'freeformFilletSurface2']", 
    "geomToBBox": "    \n    \n    import pymel.core as pm\n    \n    # Create two poly spheres and parent them together\n    #\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.move(-1, 0, 3)\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere2'), nt.PolySphere(u'polySphere2')] #\n    pm.move(3, 0, -1)\n    pm.parent( 'pSphere2', 'pSphere1' )\n    # Result: [nt.Transform(u'pSphere2')] #\n    # Select the parent sphere\n    #\n    pm.select( 'pSphere1', replace=True )\n    # Create a bounding box per shape in the object hierarchy selected,\n    # add a name and suffix for that bounding box and add a RGB color for the\n    # shader color.\n    #\n    pm.geomToBBox(name='MyBBox', nameSuffix='_perShape', shaderColor=[0,1,0.043])\n    # Result: [u'MyBBox_perShape', u'MyBBox_perShape1'] #\n    # Create two poly spheres and parent them together\n    #\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.move(-1, 5, 3)\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere2'), nt.PolySphere(u'polySphere2')] #\n    pm.move(3, 5, -1)\n    pm.parent( 'pSphere2', 'pSphere1' )\n    # Result: [nt.Transform(u'pSphere2')] #\n    # Select the parent sphere\n    #\n    pm.select( 'pSphere1', replace=True )\n    # Create one bounding box for the entire hierarchy selected,\n    # add a name and suffix for that bounding box and add a RGB color for the\n    # shader color.\n    #\n    pm.geomToBBox(single=True, name='MyBBox', nameSuffix='_hierarchy', shaderColor=[0.928,0.460,1])\n    # Result: [u'MyBBox_hierarchy'] #\n    # Create and simple animation and bake the animation on the bounding box for\n    # a specific time frame and incremental evaluation time.\n    pm.polySphere(name=\"BouncingBall\")\n    # Result: [nt.Transform(u'BouncingBall'), nt.PolySphere(u'polySphere1')] #\n    pm.currentTime(1)\n    # Result: 1.0 #\n    pm.setKeyframe()\n    # Result: 10 #\n    pm.currentTime(5)\n    # Result: 5.0 #\n    pm.move( 0, 10, 0)\n    pm.setKeyframe()\n    # Result: 10 #\n    pm.currentTime(9)\n    # Result: 9.0 #\n    pm.move( 0, 0, 0)\n    pm.setKeyframe()\n    # Result: 10 #\n    pm.geomToBBox(keepOriginal=True, name=\"BakedAnimBBox\", bakeAnimation=True, startTime=3, endTime=7, sampleBy=0.5)\n    # Result: [u'BakedAnimBBox1'] #\n    pm.currentTime(1)\n    # Result: 1.0 #", 
    "geometryConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Constrain cube1 to surf1 at the closest point to  cube1.\n    pm.geometryConstraint( 'surf1', 'cube1' )\n    \n    # Will prefer surf1 though the weights are equal\n    pm.geometryConstraint( 'surf1', 'surf2', 'cube2', w=.1 )\n    \n    # Now constraints cube2 to lie on surf2 as it's weight is greater\n    pm.geometryConstraint( 'surf2', 'cube2', e=True, w=10. )\n    \n    # Removes surf2 from cube2's geometryConstraint.\n    pm.geometryConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's geometryConstraint with the default weight.\n    pm.geometryConstraint( 'surf3', 'cube2' )", 
    "getAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode( 'revolve', n='gravityWell' )\n    # Result: nt.Revolve(u'gravityWell') #\n    pm.sphere( n='loxTank' )\n    # Result: [nt.Transform(u'loxTank'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone( n='noseCone' )\n    # Result: [nt.Transform(u'noseCone'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.cone( n='fin' )\n    # Result: [nt.Transform(u'fin'), nt.MakeNurbCone(u'makeNurbCone2')] #\n    pm.pointConstraint( 'fin', 'noseCone', n='weld' )\n    # Result: nt.PointConstraint(u'weld') #\n    \n    angle = pm.getAttr('gravityWell.esw')\n    type = pm.getAttr('loxTank.translate',type=True)\n    lock = pm.getAttr('noseCone.translateX',lock=True)\n    finZ = pm.getAttr('fin.translateZ',time=12)\n    size = pm.getAttr('weld.target',size=True)\n    size = pm.getAttr('weld.target',settable=True)\n    matrix = pm.getAttr('loxTank.matrix')\n    pm.createNode('file',n='file1')\n    # Result: nt.File(u'file1') #\n    pm.setAttr( 'file1.ftn', '$TMPDIR/smile.gif',type='string' )\n    s = pm.getAttr('file1.ftn')\n    s = pm.getAttr('file1.ftn',x=True)\n    \n    # Get the list of all used indices on a multi attribute\n    pm.getAttr('initialShadingGroup.dagSetMembers', multiIndices=True)\n    # Result: [0, 1, 2] #", 
    "getClassification": "    \n    \n    import pymel.core as pm\n    \n    # Get the classification string for the \"lambert\" node type\n    #\n    classifications = pm.getClassification('lambert')\n    for c in classifications[:]:\n        print '\\tClassified as ' + c + '\\n'\n    \n    isShader = pm.getClassification(\"lambert\",satisfies=\"shader\")", 
    "getDefaultBrush": "    \n    \n    import pymel.core as pm\n    \n    # get the name of the current brush\n    #\n    brush = pm.getDefaultBrush()", 
    "getFileList": "    \n    \n    import pymel.core as pm\n    \n    # List the contents of the user's projects directory\n    #\n    pm.getFileList( folder=pm.internalVar(userWorkspaceDir=True) )\n    # Result: [u'default', u'mydir'] #\n    \n    # List all MEL files in the user's script directory\n    #\n    pm.getFileList( folder=pm.internalVar(userScriptDir=True), filespec='*.mel' )\n    # Result: [] #", 
    "getFluidAttr": "    \n    \n    import pymel.core as pm\n    \n    # get density for entire fluid\n    pm.getFluidAttr( at='density' )\n    # get density at the cell x=1, y=2, z=3\n    pm.getFluidAttr( at='density', xi=1, yi=2, zi=3 )\n    # get the velocity at the cell  x=1, y=2, z=3\n    pm.getFluidAttr( at='velocity', xi=1, yi=2, zi=3 )\n    # get the x-component of the velocity at cell x=1,\n    # y=2, z=3\n    pm.getFluidAttr( xvalue=True, at='velocity', xi=1, yi=2, zi=3 )\n    # get the first component (red) of the rgb vector-valued\n    # attribute \"color\" at the cell x=1, y=2, z=3\n    pm.getFluidAttr( xvalue=True, at='color', xi=1, yi=2, zi=3 )\n    # get the velocity x component the plane x=5\n    pm.getFluidAttr( at='velocity', x=True, xi=5 )", 
    "getInputDeviceRange": "    \n    \n    import pymel.core as pm\n    \n    # This will return a single value which is the minimum value\n    # the spaceball translate:X axis can return.\n    pm.getInputDeviceRange( 'spaceball', 'translate:X', min=True )\n    \n    # This will return an array containing the maximum values for\n    # all of the spaceball axes.\n    pm.getInputDeviceRange( 'spaceball', max=True )\n    \n    # Warning:\n    #     Maya is dependent on the device driver or plugin to supply it with\n    #     the correct value.  Some device drivers don't return correct\n    #     information.", 
    "getLastError": "", 
    "getMetadata": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.polyPlane( name='smcPlane', constructionHistory=False )\n    # Result: [nt.Transform(u'smcPlane')] #\n    pm.pickWalk( d='down' )\n    # Result: [u'smcPlaneShape'] #\n    # Create structures\n    pm.dataStructure( format='raw', asString='name=idStructure:int32=ID' )\n    # Result: u'idStructure' #\n    pm.dataStructure( format='raw', asString='name=keyValueStructure:string=value' )\n    # Result: u'keyValueStructure' #\n    # Apply structures to plane\n    pm.addMetadata( structure='idStructure', streamName='idStream', channelName='vertex' )\n    # Result: [u'smcPlaneShape'] #\n    pm.addMetadata( structure='keyValueStructure', streamName='keyValueStream', channelName='key', indexType='string' )\n    # Result: [u'smcPlaneShape'] #\n    # Set the metadata values on three of the components by selection\n    pm.select( 'smcPlaneShape.vtx[8:10]', replace=True )\n    pm.editMetadata( streamName='idStream', memberName='ID', value=7 )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    # Retrieve the three newly set metadata values\n    pm.select( 'smcPlaneShape', replace=True )\n    pm.getMetadata( streamName='idStream', memberName='ID', channelName='vertex', index=['8','9','10'] )\n    # Result: [7, 7, 7] #\n    # Get metadata from a larger group of indices all at once.\n    # Note that unassigned metadata values assume the default (0 for numbers).\n    pm.select( 'smcPlaneShape.vtx[7:10]', replace=True )\n    pm.getMetadata( streamName='idStream', memberName='ID' )\n    [[0], [7], [7], [7]]\n    # Set metadata values using the complex index type stream\n    pm.editMetadata( streamName='keyValueStream', memberName='value', stringValue='Starry Night', index='Title' )\n    True\n    pm.editMetadata( streamName='keyValueStream', memberName='value', stringValue='Vincent Van Gogh', index='Artist' )\n    True\n    # Retrieve the complex index data (note return is in alphabetical order of index)\n    pm.getMetadata( streamName='keyValueStream', memberName='value', channelName='key', index=['Title', 'Artist'], indexType='string' )\n    [['Vincent Van Gogh'], ['Starry Night']]", 
    "getModifiers": "    \n    \n    import pymel.core as pm\n    \n    def PrintModifiers(*args):\n        mods = pm.getModifiers()\n        print 'Modifiers are:'\n        if (mods \" 1) \" 0: print ' Shift'\n        if (mods \" 4) \" 0: print ' Ctrl'\n        if (mods \" 8) \" 0: print ' Alt'\n        if (mods \" 16): print ' Command/Windows'\n    \n    pm.window()\n    pm.columnLayout()\n    pm.button( label='Press Me', command=PrintModifiers )\n    pm.showWindow()", 
    "getModulePath": "    \n    \n    import pymel.core as pm\n    \n    pm.getModulePath(moduleName='myModule')", 
    "getPanel": "    \n    \n    import pymel.core as pm\n    \n    pm.getPanel( all=True )\n    # Result: [ui.Panel('modelPanel1'), ui.Panel('modelPanel2'), ui.Panel('modelPanel3'), ui.Panel('modelPanel4'), ui.Panel('outlinerPanel1'), ui.Panel('graphEditor1'), ui.Panel('dopeSheetPanel1'), ui.Panel('clipEditorPanel1'), ui.Panel('sequenceEditorPanel1'), ui.Panel('hyperGraphPanel1'), ui.Panel('hyperShadePanel1'), ui.Panel('visorPanel1'), ui.Panel('nodeEditorPanel1'), ui.Panel('createNodePanel1'), ui.Panel('polyTexturePlacementPanel1'), ui.Panel('renderView'), ui.Panel('blendShapePanel1'), ui.Panel('dynRelEdPanel1'), ui.Panel('relationshipPanel1'), ui.Panel('referenceEditorPanel1'), ui.Panel('componentEditorPanel1'), ui.Panel('dynPaintScriptedPanel'), ui.Panel('scriptEditorPanel1'), ui.Panel('StereoPanel')] #\n    pm.getPanel( type='modelPanel' )\n    # Result: [ui.Panel('modelPanel1'), ui.Panel('modelPanel2'), ui.Panel('modelPanel3'), ui.Panel('modelPanel4')] #\n    pm.getPanel( containing='button0' )\n    pm.getPanel( underPointer=True )\n    pm.getPanel( withFocus=True )\n    # Result: ui.Panel('modelPanel4') #\n    \n    # Whenever the hotBox's 'noClickCommand' is invoked, have it switch the\n    # main Maya view to a single pane configuration, displaying the panel\n    # which was under the mouse pointer at the time the 'hotBox' command was\n    # executed.\n    def panePopAt(x, y):\n            panel = pm.getPanel(atPosition=(x, y))\n            if panel != '':\n                    mel.eval('doSwitchPanes(1, { \"single\", \"' + panel + '\" })')\n    \n    pm.hotBox(noClickCommand=panePopAt, noClickPosition=True)", 
    "getParticleAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.getParticleAttr( 'particle1', at='velocity' )\n    \n    # This will return the average velocity for the entire particle\n    # object as well as the maximum offset from the average.\n    \n    pm.getParticleAttr( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]', at='velocity' )\n    \n    # This will return the average velocity for particles 0-7 and 11\n    # as well as the maximum offset from the average.\n    \n    pm.getParticleAttr( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]', at='position', array=1 )\n    # This will return an array of 27 floats containing the position\n    # values for the nine specified particles.", 
    "getProcArguments": "", 
    "getRenderDependencies": "    \n    \n    import pymel.core as pm\n    \n    # Return the dependencies of render target myRenderTarget.\n    #\n    import maya.cmds as cmds\n    dependencies = pm.getRenderDependencies(myRenderTarget)", 
    "getRenderTasks": "    \n    \n    import pymel.core as pm\n    \n    # Return render tasks for myImageSource.\n    #\n    import maya.cmds as cmds\n    tasks = pm.getRenderTasks('myImageSource', c='myCamera', rl='myRenderLayer')", 
    "glRender": "    \n    \n    import pymel.core as pm\n    \n    # Do a hardware render\n    pm.glRender(e=1)", 
    "glRenderEditor": "    \n    \n    import pymel.core as pm\n    \n    # Create a glRender editor, using the top view\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout5') #\n    pm.glRenderEditor(lookThru='top')\n    # Result: u'glRenderEditor1' #\n    pm.showWindow( window )", 
    "globalStitch": "    \n    \n    import pymel.core as pm\n    \n    # GlobalStitch across three surfaces surface1, surface2, surface3.\n    pm.globalStitch( 'surface1', 'surface2', 'surface3', ch=True )", 
    "goal": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( name='surface1')\n    # Result: [nt.Transform(u'surface1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.particle( name='Particle')\n    # Result: [nt.Transform(u'Particle'), nt.Particle(u'ParticleShape')] #\n    \n    pm.goal( 'Particle', g='surface1', w=.75 )\n    # Result: [u'surface1Shape'] #\n    \n    # This command assigns surface1 as a goal of Particle with a goal\n    # weight of 0.75.\n    \n    pm.goal( 'Particle', g='surface1', w=.75, utr=1 )\n    # Result: [u'surface1'] #\n    \n    # This command assigns the transform of surface1 as a goal of Particle\n    # with a goal weight of 0.75.\n    \n    pm.goal( 'Particle', g='camera1', w=.75 )\n    \n    # This command assigns the transform of camera1 as a goal of Particle\n    # with a goal weight of 0.75.  The -utr flag is not relevant because\n    # only the transform can be used for any object other than geometry\n    # or particles.", 
    "grabColor": "    \n    \n    import pymel.core as pm\n    \n    pm.grabColor()\n    pm.grabColor( hsv=True )\n    color = pm.grabColor()", 
    "gradientControl": "    \n    \n    import pymel.core as pm\n    \n    # Create a ramp widget for the profileCurve attribute\n    #\n    pm.window( title='Gradient Control For Attribute' )\n    # Result: ui.Window('window1') #\n    objName = pm.createNode('polySplitRing')\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout41') #\n    pm.gradientControl( at='%s.profileCurve' % objName )\n    # Result: ui.GradientControl('window1|columnLayout41|gradientControl1') #\n    pm.showWindow()\n    \n    # To add a ramp widget in the attribute editor, call the\n    # AEaddRampControl mel script.\n    #", 
    "gradientControlNoAttr": "    \n    \n    import pymel.core as pm\n    \n    # Create a window with a gradient control for an optionVar\n    #\n    pm.window( title='Gradient Control For OptionVar' )\n    # Result: ui.Window('window1') #\n    pm.optionVar(stringValueAppend=['falloffCurveOptionVar', '0,1,2'])\n    pm.optionVar(stringValueAppend=['falloffCurveOptionVar', '1,0,2'])\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout42') #\n    pm.gradientControlNoAttr( 'falloffCurve', h=90)\n    # Result: ui.GradientControlNoAttr('window1|columnLayout42|falloffCurve') #\n    pm.gradientControlNoAttr( 'falloffCurve', e=True, optionVar='falloffCurveOptionVar' )\n    # Result: ui.GradientControlNoAttr('window1|columnLayout42|falloffCurve') #\n    pm.showWindow()\n    \n    # Query for the value on the curve at a given position.\n    #\n    pm.gradientControlNoAttr( 'falloffCurve', q=True, valueAtPoint=0.5 )\n    # Result: 0.5 #", 
    "graphDollyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a dolly view context for the graph editor\n    #\n    pm.graphDollyCtx( 'graphDollyContext' )", 
    "graphSelectContext": "    \n    \n    import pymel.core as pm\n    \n    # Create a selection context for the hypergraph editor.\n    #\n    pm.graphSelectContext( 'hyperGraphSelectContext' )\n    # Result: u'hyperGraphSelectContext' #", 
    "graphTrackCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a track view context for the graph editor\n    #\n    pm.graphTrackCtx( 'graphTrackContext' )", 
    "gravity": "    \n    \n    import pymel.core as pm\n    \n    pm.gravity( 'particle1' )\n    # Creates a gravity field and adds it to the list of fields\n    # owned by particle1.\n    \n    pm.gravity( pos=(-2, 0, 4) )\n    # Creates a gravity field at position (0,2,4) in world coordinates.\n    \n    pm.gravity( 'MyGravity', e=True, att=10.4 )\n    # Changes the gravitational acceleration of the field called\n    # \"MyGravity\" to 10.4.\n    \n    pm.gravity( dx=0, dy=1.0, dz=0.5 )\n    # Creates a gravity field pulling in direction (0,1,0.5) for every\n    # active selection. If there is no active selection, it creates this\n    # field at world position (0,0,0).", 
    "greasePencil": "", 
    "greasePencilCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new grease pencil context, then switch to it\n    pm.greasePencilCtx('greasePencilCtx1')\n    # Result: u'greasePencilCtx1' #\n    pm.setToolTo('greasePencilCtx1')", 
    "greasePencilHelper": "", 
    "greaseRenderPlane": "", 
    "grid": "    \n    \n    import pymel.core as pm\n    \n    #To toggle the grid display of the grid (in all views):\n    currState = pm.grid( toggle=True, q=True )\n    pm.grid( toggle=(currState == 0) )\n    \n    # To reset the grid to default values:\n    pm.grid( reset=True )\n    \n    # To change the grid spacing and subdivisions:\n    pm.grid( spacing=10, d=10 )\n    \n    # To set the defaults for inches\n    pm.grid( default=True, spacing='1in', size='1ft', divisions=4 )\n    \n    # To change the size of the grid to 20x20, extending 10 units\n    # in each direction:\n    pm.grid( spacing=10 )\n    \n    # To query the current size of the grid:\n    # returns a size in the current linear unit.\n    pm.grid( query=True, size=True )\n    # Result: 12.0 #\n    \n    # A typical grid would be a grid size of 20x20, with\n    # major grid lines every 5 units, with 5 divisions between\n    # major grid lines. This be done with the following command.\n    pm.grid( size='10cm', sp='5.0cm', d=5 )\n    \n    # Turn on numeric grid labels.\n    #\n    pm.grid( displayPerspectiveLabels=True )\n    \n    # Display grid labels along the axes.\n    #\n    pm.grid( perspectiveLabelPosition='axis' )", 
    "gridLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.gridLayout( numberOfColumns=2, cellWidthHeight=(50, 50) )\n    # Result: ui.GridLayout('window1|gridLayout2') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button39') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button40') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button41') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button42') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button43') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button44') #\n    pm.button()\n    # Result: ui.Button('window1|gridLayout2|button45') #\n    pm.showWindow()", 
    "group": "    \n    \n    import pymel.core as pm\n    \n    # create an empty group node with no children\n    pm.group( em=True, name='null1' )\n    # Result: nt.Transform(u'null1') #\n    \n    # create some objects and group them\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.group( 'circle1', 'sphere1', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    \n    # create a group node under another node and move\n    # the sphere under the new group node.\n    pm.group( 'sphere1', parent='null1' )\n    # Result: nt.Transform(u'group2') #", 
    "groupParts": "", 
    "hardenPointCurve": "    \n    \n    import pymel.core as pm\n    \n    # Make the example curve.\n    pm.curve( d=3, p=((-7.253894, 0, 10.835724), (-7.423939, 0, 6.977646), (-7.400778, 0, 2.798971), (-7.458196, 0, -1.524959), (-2.411453, 0, -1.07677), (1.44791, 0, -0.8977448), (5.526346, 0, -0.8610371), (5.740407, 0, 3.780402), (6.293634, 0, 7.571941), (5.957847, 0, 10.72273), (2.753946, 0, 10.894312), (-0.6375988, 0, 11.062571), (-5.889847, 0, 10.940658)), k=(0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10) )\n    # Result: nt.Transform(u'curve1') #\n    \n    # Raise the ones that you want to have \"sharp\" corners\n    pm.hardenPointCurve( 'curve1.cv[3]', 'curve1.cv[6]', 'curve1.cv[9]', ch=True, rpo=True, m=-1 )\n    # Result: [u'curve1'] #\n    \n    # Same result, as the in-between CVs are ignored:\n    pm.undo()\n    pm.hardenPointCurve( 'curve1.cv[0:12]', ch=1, rpo=1, m=-1 )", 
    "hardware": "    \n    \n    import pymel.core as pm\n    \n    pm.hardware( cpu=True )\n    # Result: [u'Quad-Core Intel Xeon Processor'] #\n    pm.hardware( brd=True )\n    # Result: [u'Intel Macintosh'] #", 
    "hardwareRenderPanel": "    \n    \n    import pymel.core as pm\n    \n    pm.window( width=500 )\n    # Result: ui.Window('window1') #\n    theLayout = pm.formLayout()\n    theHWbuffer = pm.hardwareRenderPanel()\n    pm.formLayout( theLayout, e=True, af=((theHWbuffer, 'top', 0), (theHWbuffer, 'left', 0), (theHWbuffer, 'bottom', 0), (theHWbuffer, 'right', 0)) )\n    # Result: ui.FormLayout('window1|formLayout55') #\n    pm.showWindow()", 
    "hasMetadata": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.polyPlane( name='smcPlane', constructionHistory=False )\n    # Result: [nt.Transform(u'smcPlane')] #\n    # Create structures\n    pm.dataStructure( format='raw', asString='name=idStructure:int32=ID' )\n    # Result: u'idStructure' #\n    pm.dataStructure( format='raw', asString='name=keyValueStructure:string=value' )\n    # Result: u'keyValueStructure' #\n    # Apply structures to plane\n    pm.select( 'smcPlaneShape', replace=True )\n    pm.addMetadata( structure='idStructure', streamName='idStream', channelName='vertex' )\n    # Result: [u'smcPlaneShape'] #\n    pm.addMetadata( structure='keyValueStructure', streamName='keyValueStream', channelName='key', indexType='string' )\n    # Result: [u'smcPlaneShape'] #\n    # Apply the metadata values to three of the components by selection\n    pm.select( 'smcPlaneShape.vtx[8:10]', replace=True )\n    pm.editMetadata( streamName='idStream', memberName='ID', value=7 )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    # Verify existence of the three newly set metadata values at the node level\n    pm.select( 'smcPlaneShape', replace=True )\n    pm.hasMetadata()\n    # Result: [True] #\n    # Verify existence of the three newly set metadata values at the Channel level\n    pm.hasMetadata( channelName='vertex' )\n    # Result: [True, True] #\n    pm.hasMetadata( channelName='edge' )\n    # Result: [False] #\n    # Verify existence of the three newly set metadata values at the Stream level\n    pm.hasMetadata( channelName='vertex', streamName='idStream' )\n    # Result: [True] #\n    pm.hasMetadata( channelName='edge', streamName='someOtherStream' )\n    # Result: [False] #\n    # Verify existence of the three newly set metadata values at the Index level\n    pm.hasMetadata( channelName='vertex', streamName='idStream', index=['8','9'] )\n    # Result: [True, True] #\n    pm.hasMetadata( channelName='vertex', streamName='idStream', index=['8','9999'] )\n    # Result: [True, False] #\n    # Verify existence of default metadata values at the Index level. Since the\n    # index range was established to be 0-17 by assignment and the Stream\n    # defaults to returning default values for unassigned indices the lower index\n    # values \"0\" and \"1\" do have metadata (as default values) but the higher one\n    # \"9999\" in the above example does not.\n    pm.hasMetadata( channelName='vertex', streamName='idStream', index=['0','1'] )\n    # Result: [False, False] #\n    # Verify non-existence of non-default metadata values at the Index level\n    pm.hasMetadata( ignoreDefault=True, channelName='edge', streamName='idStream', memberName='ID', index=['0','1'] )\n    # Result: [False, False] #\n    # Get the list of Index values with assigned metadata on the object\n    pm.select( 'smcPlaneShape.vtx[8:20]', replace=True )\n    pm.hasMetadata( channelName='vertex', streamName='idStream', asList=True )\n    # Result: [u'8', u'9', u'10'] #\n    # Set metadata values using the complex index type='string'\n    pm.editMetadata( streamName='keyValueStream', memberName='value', stringValue='Starry Night', indexType='string', index='Title' )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    pm.editMetadata( streamName='keyValueStream', memberName='value', stringValue='Vincent Van Gogh', indexType='string', index='Artist' )\n    # Result: nt.Mesh(u'smcPlaneShape') #\n    # Verify existence of the complex index data\n    pm.hasMetadata( streamName='keyValueStream', memberName='value', channelName='key', index=['Title','Artist'], indexType='string', asList=True )\n    # Result: [u'Artist', u'Title'] #", 
    "headsUpDisplay": "    \n    \n    import pymel.core as pm\n    \n    #\n    #Define a procedure that returns a value to be used by the Heads Up Display\n    #\n    def objectPosition(*args):\n            try:\n                    selectedNodes = pm.selectedNodes()\n                    mainObj = selectedNodes[-1]\n                    positionList = pm.getAttr('%s.translate' % mainObj)\n                    return positionList[0]\n            except:\n                    return (0.0,0.0,0.0)\n    #\n    #Now, create a HUD object to display the return value of the above procedure\n    #\n    #Attributes:\n    #\n    #        - Section 1, block 0, represents the top second slot of the view.\n    #        - Set the blockSize to \"medium\", instead of the default \"small\"\n    #        - Assigned the HUD the label: \"Position\"\n    #        - Defined the label font size to be large\n    #        - Assigned the HUD a command to run on a SelectionChanged trigger\n    #        - Attached the attributeChange node change to the SelectionChanged trigger\n    #          to allow the update of the data on attribute changes.\n    #\n    pm.headsUpDisplay( 'HUDObjectPosition', section=1, block=0, blockSize='medium', label='Position', labelFontSize='large', command=objectPosition, event='SelectionChanged', nodeChanges='attributeChange' )\n    # Result: u'30' #\n    #\n    #Create a preset HUD object to display the camera names.\n    #\n    #Attributes:\n    #\n    #    - Section 2, block 0, represents the top middle slot of the view.\n    #    - Using blockalign, the HUD object is centered in the middle of the block\n    #    - Setting a dw of 50, allocates a space of 50 pixels for the data to reside in.\n    #    - Finally setting the preset to \"cameraNames\", selects a preset which will\n    #      automatically insert the associated data into the data field.\n    #\n    pm.headsUpDisplay( 'HUDCameraName', s=2, b=0, ba='center', dw=50, pre='cameraNames')\n    # Result: u'31' #\n    #\n    #Now, remove these two HUDs. Both can be removed in three ways: name, ID or position.\n    #The following examples will demonstrate removal by name and position\n    #\n    pm.headsUpDisplay( 'HUDObjectPosition', rem=True )\n    # Result: [u'HUDObjectPosition'] #\n    pm.headsUpDisplay( rp=(7, 0) )\n    # Result: [7, 0] #", 
    "headsUpMessage": "    \n    \n    import pymel.core as pm\n    \n    pm.headsUpMessage( 'Ouch!' )\n    pm.headsUpMessage( 'This is Circle 1', object='circle1' )\n    pm.headsUpMessage( 'These objects are selected', selection=True )\n    pm.headsUpMessage( 'Text appears for minimum of 5 seconds.', time=5.0 )\n    pm.headsUpMessage( 'Text appears 0 pixels above point.', verticalOffset=20 )\n    pm.headsUpMessage( 'Text appears 20 pixels to the left of the point.', horizontalOffset=-20 )", 
    "help": "    \n    \n    import pymel.core as pm\n    \n    # List all commands starting with a, b or c\n    pm.help( '[a-c]*', list=True )\n    \n    # List all commands without vowels!\n    pm.help( '[^aeiou]+', list=True )\n    \n    # Print a message explaining how to use help\n    pm.help()\n    \n    # Bring up the main on-line help index\n    pm.help( doc=True)\n    \n    # Bring up the Python version of command documentation for the polySphere\n    # command\n    pm.help( language='python', doc='polySphere' )\n    \n    # Bring up the on-line help for the disable command.\n    pm.help( 'disable', doc=True )", 
    "helpLine": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a menu bar, some buttons and a help\n    #    line.  Attach some annontations to the UI so that they\n    #    appear in the help line.\n    #\n    window = pm.window( menuBar=True )\n    pm.menu( label='File' )\n    # Result: ui.Menu('window1|menu40') #\n    pm.menuItem( label='New', annotation='Help for New' )\n    # Result: ui.CommandMenuItem('window1|menu40|menuItem297') #\n    pm.menuItem( label='Open', annotation='Help for Open' )\n    # Result: ui.CommandMenuItem('window1|menu40|menuItem298') #\n    pm.menuItem( label='Close', annotation='Help for Close' )\n    # Result: ui.CommandMenuItem('window1|menu40|menuItem299') #\n    \n    form = pm.formLayout()\n    column = pm.rowLayout(numberOfColumns=4,\n                            columnWidth4=(32, 32, 32, 32),\n                            columnAttach4=('both', 'both', 'both', 'both'))\n    pm.button( label='A', height=32, annotation='Help for A' )\n    pm.button( label='B', height=32, annotation='Help for B' )\n    pm.button( label='C', height=32, annotation='Help for C' )\n    pm.button( label='D', height=32, annotation='Help for D' )\n    pm.setParent( '..' )\n    \n    frame = pm.frameLayout( labelVisible=False )\n    pm.helpLine()\n    pm.formLayout( form, edit=True,\n                     attachForm=((column, 'top', 0), (column, 'left', 0),\n                                 (column, 'right', 0), (frame, 'left', 0),\n                                 (frame, 'bottom', 0), (frame, 'right', 0)),\n                     attachNone=((column, 'bottom'), (frame, 'top')) )\n    pm.showWindow( window )", 
    "hide": "    \n    \n    import pymel.core as pm\n    \n    pm.hide( all=True )\n    pm.hide( pm.ls( type='nurbsSurface' ) )", 
    "hikGlobals": "    \n    \n    import pymel.core as pm\n    \n    # Enable the global release all pinning HIK flag\n    pm.hikGlobals( rap=1 )", 
    "hilite": "    \n    \n    import pymel.core as pm\n    \n    #    Create a few objects.\n    #\n    sphere = pm.sphere()\n    pm.move( 0, 0, 3, relative=True )\n    cone = pm.cone()\n    pm.move( 0, 0, -3, relative=True )\n    cylinder = pm.cylinder()\n    \n    #    Select the sphere.\n    #\n    pm.select( sphere, replace=True )\n    \n    #    Add the cone and cylinder to the hilite list.\n    #\n    pm.hilite( cone[0], cylinder[0] )\n    \n    #    Toggle the hilite state of the cylinder.\n    #\n    pm.hilite( cylinder[0], toggle=True )\n    \n    #    Replace the hilite list with the current selected objects.\n    #\n    pm.hilite( replace=True )", 
    "hitTest": "    \n    \n    import pymel.core as pm\n    \n    #    Let's say that you have the name of a model editor that was\n    #    created elsewhere.\n    #\n    editor = \"MyModelEditor\"\n    #    Here's your drop callback:\n    #\n    def myModelEditorDropCallback( dragControl,\n                                                               dropControl,\n                                                               msgs,\n                                                               x,\n                                                               y,\n                                                               type ):\n            #       Inside the callback we can hit-test the (x,y) drop-point\n            #       against the control. This will return a list of DAG objects\n            #       underneath the drop-point.\n            #\n            objects = pm.hitTest( dropControl, x, y )\n            if len( objects ):\n                    #       The hit-test returned something. You can now do something\n                    #       with these objects.\n                    pass\n    #\n    #       Attach a drop callback to this model editor.\n    #\n    try:\n            control = pm.editor( editor ,query=True, control=True )\n            if pm.control( control, exists=True ):\n                    pm.control( control, edit=True, dropCallback=myModelEditorDropCallback )\n    except RuntimeError:\n            pass", 
    "hotBox": "    \n    \n    import pymel.core as pm\n    \n    # Bind the hotBox to the spacebar.\n    #\n    pm.nameCommand( 'NameComPop_hotBox', annotation='Pop Hotbox', command='hotBox' )\n    # Result: u'NameComPop_hotBox' #\n    pm.hotkey( k=' ', name='NameComPop_hotBox' )\n    \n    # Give the hotBox a 'noClickCommand' which displays the screen position at\n    # which the hotBox was requested. Note that 'showPos' function is passed\n    # to the 'noClickCommand' flag as a function, not as a string. This is necessary\n    # to allow Maya to pass the coordinates to it properly.\n    #\n    def showPos(x, y):\n        print(\"hotBox requested at (%d, %d)\" % (x, y))\n    \n    pm.hotBox(noClickCommand=showPos, noClickPosition=True)", 
    "hotkey": "    \n    \n    import pymel.core as pm\n    \n    # Here's an example of how to create a namedCommand\n    # object and then map it to a key.\n    #\n    pm.nameCommand( 'circleToolNamedCommand', annotation='Select Circle Tool', command='setToolTo circleContext')\n    # Result: u'circleToolNamedCommand' #\n    pm.hotkey( k='F5', alt=True, name='circleToolNamedCommand' )\n    \n    \n    # Here are more examples of how to use the hotkey command.\n    #\n    pm.hotkey( k='d', name='Delete_Command' )\n    pm.hotkey( k='d', name='' ) # unsets the above command\n    \n    pm.hotkey( k='d', name='Delete_Command' )\n    pm.hotkey( k='d', releaseName='After_Delete_Command' )\n    pm.hotkey( k='d', name='' ) #only unsets the key press name\n    pm.hotkey( k='d', releaseName='' ) #only unsets the key release name\n    pm.hotkey( k='d', n='', rn='' ) #unsets both the key press and release name\n    \n    #    Determine if a command is attached to either the press or release\n    #    of the \"z\" hotkey.\n    #\n    pm.hotkey( 'z', query=True )\n    # Result: True #\n    \n    #    Likewise, for the modified variations of the \"z\" key.\n    #\n    pm.hotkey( 'z', query=True, alt=True )\n    # Result: True #\n    pm.hotkey( 'z', query=True, ctl=True )\n    # Result: True #\n    pm.hotkey( 'z', query=True, alt=True, ctl=True )\n    # Result: False #\n    \n    #    Determine the press command attached to the \"z\" key.\n    #\n    pm.hotkey( 'z', query=True, name=True )\n    # Result: u'NameComUndo' #\n    \n    #    To query the \"-\" hotkey use the string \"Dash\" instead.\n    #\n    pm.hotkey( 'Dash', query=True )\n    # Result: True #", 
    "hotkeyCheck": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window in which you can type a hotkey character\n    #    and determine via the 'hotkeyCheck' command the annotation\n    #    of the command attached.\n    #\n    window = pm.window( title='hotkeyCheck Example' )\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout43') #\n    \n    #    A few instructions in a scrollField for the user.\n    #\n    instructions = \"Enter a single character in the field below.  \\\n    Then press the 'Query' button to determine the annotation of the command attached to that hotkey.\"\n    \n    pm.scrollField( text=instructions, editable=False, height=120, wordWrap=True )\n    textFieldGrp = pm.textFieldGrp( label=\"Enter a single hotkey character\", text='a', columnWidth2=(200, 50) )\n    \n    #    Create a couple controls for specifying modifier keys and the\n    #    key press/release information.\n    #\n    checkBoxGrp = pm.checkBoxGrp( label=\"Modifiers\",\n                                                            numberOfCheckBoxes=2,\n                                                            labelArray2=('Ctrl', 'Alt'),\n                                                            columnWidth3=(100, 75, 75))\n    radioButtonGrp = pm.radioButtonGrp( label=\"Action\",\n                                                            numberOfRadioButtons=2,\n                                                            select=1,\n                                                            labelArray2=('Press', 'Release'),\n                                                            columnWidth3=(100, 75, 75))\n    \n    #    Create a scroll field for printing the results.\n    #\n    scrollField = pm.scrollField(editable=False, height=120, wordWrap=True)\n    \n    #    Create a button for querying the hotkey.\n    #\n    pm.button( label='Query', command=('ExampleHotkeyCheck(\"' + textFieldGrp + '\",\"' + checkBoxGrp + '\",\"' + radioButtonGrp + '\",\"' + scrollField + '\")'))\n    pm.showWindow( window )\n    \n    #    This procedure uses the 'hotkeyCheck' command to determine the\n    #    annotation of the command attached to a hotkey.\n    #\n    def ExampleHotkeyCheck( textFieldGrp, checkBoxGrp, radioButtonGrp, scrollField):\n            #    Get the hotkey character, modifier state and key press/release\n            #    information from the window.\n            #\n            key = pm.textFieldGrp(textFieldGrp, query=True, text=True)\n            ctrl = pm.checkBoxGrp(checkBoxGrp, query=True, value1=True)\n            alt = pm.checkBoxGrp(checkBoxGrp, query=True, value2=True)\n            press = pm.radioButtonGrp(radioButtonGrp, query=True, select=True)\n    \n            #    Get the hotkey mapping taking into consideration key up or down\n            #    and the state of the modifier keys.\n            #\n            if 1 == press:\n                    if not ctrl and not alt:\n                            mapping = pm.hotkeyCheck(keyString=key)\n                            result = key + '-Press'\n                    elif ctrl and not alt:\n                            mapping = pm.hotkeyCheck(keyString=key, ctl=True)\n                            result = 'Ctrl-' + key + '-Press'\n                    elif not ctrl and alt:\n                            mapping = pm.hotkeyCheck(keyString=key, alt=True)\n                            result = 'Alt-' + key + '-Press'\n                    elif ctrl and alt:\n                            mapping = pm.hotkeyCheck(keyString=key, ctl=True, alt=True)\n                            result = 'Ctrl-Alt-' + key + '-Press'\n            else:\n                    if not ctrl and not alt:\n                            mapping = pm.hotkeyCheck(keyString=key, keyUp=True)\n                            result = key + '-Release'\n                    elif ctrl and not alt:\n                            mapping = pm.hotkeyCheck(keyString=key, ctl=True, keyUp=True)\n                            result = 'Ctrl-' + key + '-Release'\n                    elif not ctrl and alt:\n                            mapping = pm.hotkeyCheck(keyString=key, alt=True, keyUp=True)\n                            result = 'Alt-' + key + '-Release'\n                    elif ctrl and alt:\n                            mapping = pm.hotkeyCheck(keyString=key, ctl=True, alt=True, keyUp=True)\n                            result = 'Ctrl-Alt-' + key + '-Release'\n    \n    \n            #    Print the results in the example window.\n            #\n            if mapping == \"\": mapping = 'Nothing'\n            pm.scrollField( scrollField, edit=True, text=(result + ' is mapped to:\\n\\n' + mapping ) )", 
    "hudButton": "    \n    \n    import pymel.core as pm\n    \n    # Define a \"Hello!\" counter procedure. This procedure will output\n    # \"Hello! [number]\"\n    # each time it is run. The number is incremented at the end of each call.\n    #\n    gHelloCount = 0\n    def HUDButtonHello(*args):\n      global gHelloCount\n      print 'Hello!( %i )' % gHelloCount\n      gHelloCount += 1\n    # Now create our button. Only execute on mouse release.\n    #\n    pm.hudButton('HUDHelloButton', s=7, b=5, vis=1, l='Button', bw=80, bsh='roundRectangle', rc=HUDButtonHello )\n    # Result: u'32' #", 
    "hudSlider": "    \n    \n    import pymel.core as pm\n    \n    # Define a procedure to execute on press/drag/release. This procedure\n    # will explicitly set any selected transforms to a given position along\n    # the X axis based on the value of a given HUD slider.\n    #\n    def translateXSlider( HUD ):\n            # Since undo is not turned off automatically, we must\n            # do it ourselves. The HUD will fire off many calls to this\n            # procedure during a drag so we don't want to flood the undo\n            # queue.\n            pm.undoInfo( swf=False )\n            for object in pm.ls( sl=True ):\n                    if pm.objectType( object, isType='transform' ):\n                       translateX = object + '.tx'\n                       value = pm.hudSlider( HUD, q=True, v=True )\n                       pm.setAttr( translateX, value )\n            # Re-enable the undo queue.\n            #\n            pm.undoInfo( swf=True)\n    # Now create our slider HUD\n    #\n    pm.hudSlider( 'HUDTranslateXSlider',\n                                    section=2,\n                                    block=5,\n                                    visible=1,\n                                    label=\"TranslateX:\",\n                                    value=0,\n                                    type=\"int\",\n                                    minValue=-10,\n                                    maxValue=10,\n                                    labelWidth=80,\n                                    valueWidth=50,\n                                    sliderLength=100,\n                                    sliderIncrement=1,\n                                    pressCommand='translateXSlider( \"HUDTranslateXSlider\" )',\n                                    dragCommand='translateXSlider( \"HUDTranslateXSlider\" )',\n                                    releaseCommand='translateXSlider( \"HUDTranslateXSlider\" )')", 
    "hudSliderButton": "    \n    \n    import pymel.core as pm\n    \n    # Define a procedure to execute on press/drag/release. This procedure\n    # will explicitly set any selected transforms to a given position along\n    # the X axis based on the value of a given HUD slider.\n    #\n    def translateXSliderButton( HUD ):\n            pm.undoInfo( swf=True )\n            selList = pm.ls( sl=True )\n            for object in selList:\n                    if pm.objectType( object, isType='transform' ):\n                            pm.setAttr( object+\".tx\", pm.hudSliderButton( HUD, query=True, v=True ) )\n    # Create our slider button.  Use lambda to create an \"anonymous\" function that invokes the\n    # callback with the desired button name argument.\n    #\n    pm.hudSliderButton( 'HUDTranslateXSliderButton', s=5, b=5, vis=True, sl='Slider:', value=0, type='int', min=-10, max=10, slw=50, vw=50, sln=100, si=1, bl='Button', bw=60, bsh='rectangle', brc=lambda : translateXSliderButton( 'HUDTranslateXSliderButton' ))\n    # Result: u'33' #", 
    "hwReflectionMap": "    \n    \n    import pymel.core as pm\n    \n    pm.hwReflectionMap( cm=1, en=1, ftn='D:\\\\Textures\\\\room.front.jpg', bkn='D:\\\\Textures\\\\room.back.jpg', tpn='D:\\\\Textures\\\\room.top.jpg', bmn='D:\\\\Textures\\\\room.bottom.jpg', ltn='D:\\\\Textures\\\\room.left.jpg', rtn='D:\\\\Textures\\\\room.right.jpg', smn='D:\\\\Textures\\\\room.front.jpg' )\n    # Result: [nt.HwReflectionMap(u'hwReflectionMap1')] #", 
    "hwRender": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere.\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    # Render it\n    pm.hwRender()\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/images/tmp/untitled.iff' #\n    # Render the region where left=20, right=50, bottom=30, top=60.\n    # And do not write the output to a file.\n    #\n    pm.hwRender( renderRegion=(20, 50, 30, 60), notWriteToFile=True )\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/images/tmp/untitled.iff' #\n    # Render with the specified width and height.\n    #\n    pm.hwRender( width=100, height=200 )\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/images/tmp/untitled.iff' #\n    # Returns the imageFileName for image frame 11.\n    #\n    pm.hwRender( imageFileName=True, frame=11 )\n    # Returns the imageFileName for current frame.\n    #\n    pm.hwRender( imageFileName=True )\n    # Returns a version of the image file name after its number pattern\n    # being represented in a unique way.\n    #\n    pm.hwRender( query=True, fixFileNameNumberPattern=True )\n    # Render the specified render layer.\n    pm.hwRender( layer='layer1' )", 
    "hwRenderLoad": "    \n    \n    import pymel.core as pm\n    \n    # Load the HW render engine\n    pm.hwRenderLoad()", 
    "hyperGraph": "    \n    \n    import pymel.core as pm\n    \n    # The hyperGraph command is not one which would commonly be used\n    # by the user.\n    pm.polySphere( r=1, sx=20, sy=20, ax=(0, 1, 0), tx=2, ch=1 )\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    \n    # Gets the position of the node in the graph.\n    maya.mel.eval( \"HypergraphHierarchyWindow\" )\n    position = pm.hyperGraph( 'hyperGraphPanel1HyperGraphEd', query=True, getNodePosition='pSphere1' )\n    print position", 
    "hyperPanel": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout( lv=False )\n    # Result: ui.FrameLayout('window1|frameLayout13') #\n    pm.hyperPanel()\n    # Result: ui.HyperPanel('hyperPanel1') #\n    pm.showWindow()", 
    "hyperShade": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone()\n    # Result: [nt.Transform(u'nurbsCone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    myBlinn = pm.shadingNode('blinn', asShader=True)\n    pm.select( 'nurbsSphere1' )\n    pm.hyperShade( assign=myBlinn )\n    pm.select( cl=True )\n    pm.hyperShade( objects=myBlinn )\n    blinn = pm.createNode('blinn')\n    pm.select( 'lambert1', blinn )\n    pm.hyperShade( objects='' )", 
    "iconTextButton": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout44') #\n    pm.iconTextButton( style='textOnly', image1='sphere.png', label='sphere' )\n    # Result: ui.IconTextButton('window1|columnLayout44|iconTextButton38') #\n    pm.iconTextButton( style='iconOnly', image1='spotlight.png', label='spotlight' )\n    # Result: ui.IconTextButton('window1|columnLayout44|iconTextButton39') #\n    pm.iconTextButton( style='iconAndTextHorizontal', image1='cone.png', label='cone' )\n    # Result: ui.IconTextButton('window1|columnLayout44|iconTextButton40') #\n    pm.iconTextButton( style='iconAndTextVertical', image1='cube.png', label='cube' )\n    # Result: ui.IconTextButton('window1|columnLayout44|iconTextButton41') #\n    pm.showWindow( window )", 
    "iconTextCheckBox": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout45') #\n    pm.iconTextCheckBox( style='textOnly', image1='sphere.png', label='sphere' )\n    # Result: ui.IconTextCheckBox('window1|columnLayout45|iconTextCheckBox1') #\n    pm.iconTextCheckBox( style='iconOnly', image1='spotlight.png', label='spotlight' )\n    # Result: ui.IconTextCheckBox('window1|columnLayout45|iconTextCheckBox2') #\n    pm.iconTextCheckBox( style='iconAndTextHorizontal', image1='cone.png', label='cone' )\n    # Result: ui.IconTextCheckBox('window1|columnLayout45|iconTextCheckBox3') #\n    pm.iconTextCheckBox( style='iconAndTextVertical', image1='cube.png', label='cube' )\n    # Result: ui.IconTextCheckBox('window1|columnLayout45|iconTextCheckBox4') #\n    pm.showWindow( window )", 
    "iconTextRadioButton": "    \n    \n    import pymel.core as pm\n    \n    pm.window( tlc=(100, 400) )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adj=True )\n    # Result: ui.ColumnLayout('window1|columnLayout46') #\n    pm.iconTextRadioCollection( 'itRadCollection' )\n    # Result: ui.IconTextRadioCollection('window1|columnLayout46|itRadCollection') #\n    pm.iconTextRadioButton( st='textOnly', i1='sphere.png', l='sphere' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout46|iconTextRadioButton1') #\n    pm.iconTextRadioButton( st='iconOnly', i1='spotlight.png', l='spotlight' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout46|iconTextRadioButton2') #\n    pm.iconTextRadioButton( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout46|iconTextRadioButton3') #\n    pm.iconTextRadioButton( st='iconAndTextVertical', i1='cube.png', l='cube' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout46|iconTextRadioButton4') #\n    pm.showWindow()", 
    "iconTextRadioCollection": "    \n    \n    import pymel.core as pm\n    \n    pm.window( tlc=(100, 400) )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adj=True )\n    # Result: ui.ColumnLayout('window1|columnLayout47') #\n    pm.iconTextRadioCollection( 'itRadCollection' )\n    # Result: ui.IconTextRadioCollection('window1|columnLayout47|itRadCollection') #\n    pm.iconTextRadioButton( st='textOnly', i1='sphere.png', l='sphere' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout47|iconTextRadioButton5') #\n    pm.iconTextRadioButton( st='iconOnly', i1='spotlight.png', l='spotlight' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout47|iconTextRadioButton6') #\n    pm.iconTextRadioButton( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout47|iconTextRadioButton7') #\n    pm.iconTextRadioButton( st='iconAndTextVertical', i1='cube.png', l='cube' )\n    # Result: ui.IconTextRadioButton('window1|columnLayout47|iconTextRadioButton8') #\n    pm.showWindow()", 
    "iconTextScrollList": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout6') #\n    pm.iconTextScrollList(allowMultiSelection=True, append=('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen'), selectItem='six' )\n    # Result: ui.IconTextScrollList('window1|paneLayout6|iconTextScrollList1') #\n    pm.showWindow()", 
    "iconTextStaticLabel": "    \n    \n    import pymel.core as pm\n    \n    pm.window( tlc=(100, 400) )\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout48') #\n    pm.iconTextStaticLabel( st='textOnly', i1='sphere.png', l='sphere' )\n    # Result: ui.IconTextStaticLabel('window1|columnLayout48|iconTextStaticLabel3') #\n    pm.iconTextStaticLabel( st='iconOnly', i1='spotlight.png', l='spotlight' )\n    # Result: ui.IconTextStaticLabel('window1|columnLayout48|iconTextStaticLabel4') #\n    pm.iconTextStaticLabel( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\n    # Result: ui.IconTextStaticLabel('window1|columnLayout48|iconTextStaticLabel5') #\n    pm.iconTextStaticLabel( st='iconAndTextVertical', i1='cube.png', l='cube' )\n    # Result: ui.IconTextStaticLabel('window1|columnLayout48|iconTextStaticLabel6') #\n    pm.showWindow()", 
    "ikHandle": "    \n    \n    import pymel.core as pm\n    \n    # Will create a handle from Joint-1 to an end-effector at\n    # the location of Joint-5 with a priority of 2 and a\n    # weight of 0.5\n    #\n    pm.ikHandle( sj='joint1', ee='joint5', p=2, w=.5 )\n    \n    # Create a handle called leg from the start joint\n    # named hip to the end-effector named Ankle.\n    #\n    pm.ikHandle( n='Leg', sj='Hip', ee='Ankle' )", 
    "ikHandleCtx": "    \n    \n    import pymel.core as pm\n    \n    #    Edit an existing context to create an ikHandle with snapping on.\n    #\n    if pm.ikHandleCtx( 'ikHandleCtx', q=True, ex=True ):\n      pm.ikHandleCtx('ikHandleCtx', e=True, snapHandleH=True)", 
    "ikHandleDisplayScale": "    \n    \n    import pymel.core as pm\n    \n    # Half the display size with respect to the default size.\n    pm.ikHandleDisplayScale( 0.5 )", 
    "ikSolver": "    \n    \n    import pymel.core as pm\n    \n    # creates fooSolver of type ikSCsolver with max error of 0.5\n    #\n    pm.ikSolver( st='ikSCsolver', ep=0.5, n='fooSolver' )\n    # Result: nt.IkSCsolver(u'fooSolver') #", 
    "ikSplineHandleCtx": "    \n    \n    import pymel.core as pm\n    \n    #    Edit an existing context to create an ikSplineHandle with\n    #    the curve parented to the corresponding joint.\n    #\n    if pm.ikSplineHandleCtx( 'ikSplineHandleCtx', q=True, ex=True ):\n      pm.ikSplineHandleCtx('ikSplineHandleCtx', e=True, parentCurve=True)", 
    "ikSystem": "    \n    \n    import pymel.core as pm\n    \n    # Prints out the solver execution order\n    #\n    pm.ikSystem( q=True, ls=True )\n    # Result: [u'ikSCsolver', u'ikRPsolver', u'ikSplineSolver', u'hikSolver'] #\n    \n    # Moves solver on position 2 to position 1 in\n    # the execution order list ( zero based index )\n    #\n    pm.ikSystem( e=True, ls=(1, 0) )", 
    "ikSystemInfo": "    \n    \n    import pymel.core as pm\n    \n    # Enable global handle snapping\n    #\n    pm.ikSystemInfo( gsh=True )", 
    "ikfkDisplayMethod": "    \n    \n    import pymel.core as pm\n    \n    # Just display ik.\n    #\n    pm.ikfkDisplayMethod( display='ik' )\n    # Display ik and fk when the handle is selected\n    #\n    pm.ikfkDisplayMethod( display='ikfk' )", 
    "illustratorCurves": "    \n    \n    import pymel.core as pm\n    \n    # Create curves from an input Adobe(R) Illustrator(R) file d:/sample.ai\n    # and scale factor 2.54\n    pm.illustratorCurves( ifn='d:/sample.ai', sf=2.54 )\n    # Result: [u'IllustratorCurves1', u'makeIllustratorCurves1'] #", 
    "image": "    \n    \n    import pymel.core as pm\n    \n    #    Note that for this example to work you must substitute\n    #    \"image\" below with the full path name to a valid image.\n    #\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout7') #\n    pm.image( image='image' )\n    # Result: ui.Image('window1|paneLayout7|image1') #\n    pm.showWindow( window )", 
    "imagePlane": "    \n    \n    import pymel.core as pm\n    \n            import maya.cmds as cmds\n            // create image plane with width and height example\n            myImagePlane = pm.imagePlane( width=100, height=50 )\n            // create image plane with width and maintainRatio off\n            myImagePlane = pm.imagePlane( width=100, maintainRatio=False )\n            // create free image plane with look through camera specified.\n            myImagePlane =  pm.imagePlane( lookThrough=\"persp\")\n            // create free image plane with look through camera specified let it only show when looking through this specified camera.\n            myImagePlane =  pm.imagePlane( lookThrough=\"persp\", showInAllViews=false)\n            // edit image plane example\n            pm.imagePlane( myImagePlane[1], e=True, w=100, h=200, mr=False ) ;\n            // edit free image plane with look through camera specified.\n            myImagePlane =  pm.imagePlane( myImagePlane[1], e=True, lookThrough=\"side\")\n            // query image width height example\n            pm.imagePlane( myImagePlane[1], q=True, w=True, h=True ) ;\n            // Create image plane with name\n            pm.imagePlane( name=\"Foo\") ;\n            pm.imagePlane( width=100, height=50, name=\"Foo\") ;\n            // query loaded image ratio\n            pm.imagePlane( myImagePlane[1], q=True, iz=True );\n            // Create image plane under a specified camera\n            camera = pm.camera()\n            pm.imagePlane(camera=camera[1])", 
    "imageWindowEditor": "", 
    "imfPlugins": "    \n    \n    import pymel.core as pm\n    \n    pm.imfPlugins( query=True )\n    # Result: [u'mentalrayCT', u'mentalrayMAP', u'mentalrayST', u'Alias', u'BMP (Microsoft Windows bitmap)', u'DDS', u'GIF', u'JPEG', u'Kodak Cineon', u'Maya Image', u'PNG', u'PostScript (Encapsulated)', u'Quantel', u'Silicon Graphics', u'Softimage', u'Sony Playstation', u'Targa', u'TIFF', u'Wavefront', u'XPM', u'Radiance Picture File'] #\n    # returns a list of all imf plugin names\n    pm.imfPlugins( 'pluginName', query=True, ext=True )\n    # returns image file extension of the plugin\n    pm.imfPlugins( 'pluginName', query=True, key=True )\n    # returns IMF keyword of the plugin\n    pm.imfPlugins( 'imfKeyWord', query=True, pn=True )\n    # returns plugin name corresponding to imf keyword\n    pm.imfPlugins( 'imfKeyWord', query=True, ws=True )\n    # returns true if this plugin key supports write operations\n    pm.imfPlugins( 'imfKeyWord', query=True, rs=True )\n    # returns true if this plugin key supports read operations\n    pm.imfPlugins( 'imfKeyWord', query=True, mfs=True )\n    # returns true if this plugin key supports multiframe input/output", 
    "inViewMessage": "    \n    \n    import pymel.core as pm\n    \n    # Create a user assist message in the center of the viewport with some of the text highlighted in yellow.\n    # The message will fade out after the default time.\n    pm.inViewMessage( amg='In-view message \"hl\"test\"/hl\".', pos='midCenter', fade=True )", 
    "inheritTransform": "    \n    \n    import pymel.core as pm\n    \n    # create an circle, move it off center, group it\n    # and move the group so that the circle is back in center\n    pm.circle( nr=(0, 1, 0), n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.move( 2, 0, 0 )\n    pm.group()\n    # Result: nt.Transform(u'group1') #\n    pm.move( -2, 0, 0 )\n    \n    # turn off inherits transform flag of circle1.\n    # The circle will now appear at (2, 0, 0)\n    pm.inheritTransform( 'circle1', off=True )\n    \n    # turn off inherits transform flag of circle1 but preserve the\n    # position of the circle. The circle will stay centered at (0, 0, 0)\n    pm.inheritTransform( 'circle1', on=True )\n    pm.inheritTransform( 'circle1', off=True, preserve=True )\n    \n    # query state of inherits transform flag\n    pm.inheritTransform( 'circle1', q=True )\n    # Result: False #", 
    "insertJoint": "    \n    \n    import pymel.core as pm\n    \n    # Will insert a new joint under joint2. Child joints of joint2 will be\n    # under the new inserted joint.\n    pm.insertJoint( 'joint2' )", 
    "insertJointCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.insertJointCtx()\n    # Result: u'insertJointCtx1' #", 
    "insertKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a insert key context for the graph editor\n    #\n    pm.insertKeyCtx( 'insertKeyContext' )", 
    "insertKnotCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.insertKnotCurve( 'curve1', ch=True, p=0.3, nk=2 )\n    pm.insertKnotCurve( 'curve1.u[0.3]', ch=True, nk=2 )\n    # Both commands will insert two knots into curve1 at parameter value 0.3.\n    # Because the ch flag is used, a dependency node is created.\n    \n    pm.insertKnotCurve( 'curve1', ch=True, add=False, p=0.5, nk=3 )\n    # Inserts enough knots into curve1 at parameter value 0.5 to\n    # achieve a knot multiplicity of 3.  Because the ch flag is used,\n    # a dependency node is created.\n    \n    pm.insertKnotCurve( 'curve1', ch=True, p=(0.3, 0.5, 0.8) )\n    # Inserts a default of one knot at each parameter value: 0.3, 0.5 and 0.8.\n    \n    pm.insertKnotCurve( 'curve1', ch=True, p=(0.3, 0.5, 0.8), nk=2 )\n    # Inserts two knots at each parameter value: 0.3, 0.5 and 0.8.\n    \n    pm.insertKnotCurve( 'curve1', ch=True, p=(0.1, 0.3, 0.5, 0.8), nk=(1, 2) )\n    # RuntimeError: Number of knot flags must match number of parameter flags.", 
    "insertKnotSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.insertKnotSurface( 'surface1', ch=True, p=0.3, d=0 )\n    pm.insertKnotSurface( 'surface1.v[0.3]', ch=True )\n    # Inserts one knot (which is the default) into surface1 at\n    # parameter value v = 0.3.  When an isoparm is specified, the direction\n    # and parameter value is implied and the \"p\" and \"d\" flags can be omitted.\n    \n    pm.insertKnotSurface( 'surface1', ch=True, p=0.3, nk=2, d=0 )\n    # Inserts two knots into surface1 at parameter value v = 0.3.\n    \n    pm.insertKnotSurface( 'surface1', ch=True, p=0.3, p=0.5, p=0.8, nk=2, d=0 )\n    # Inserts two knots at each parameter value v = 0.3, 0.5 and 0.8.\n    \n    pm.insertKnotSurface( 'surface1', ch=True, p=0.5, add=False, nk=3, d=1 )\n    # Inserts enough knots into surface1 at parameter value u = 0.5 to\n    # achieve a knot multiplicity of 3.", 
    "instance": "    \n    \n    import pymel.core as pm\n    \n    # Create a hierarchy\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.move( 3, 0, 0 )\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.move( -3, 0, 0 )\n    pm.group( 'sphere1', 'sphere2', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    pm.group( 'group1', n='group2' )\n    # Result: nt.Transform(u'group2') #\n    \n    # Create an instance of one of the spheres\n    pm.instance( 'sphere1' )\n    # Result: [nt.Transform(u'sphere3')] #\n    \n    # Duplicate the hierarchy except for the shapes which are\n    # instanced.instances of all leaf level shapes\n    pm.instance( 'group1', leaf=True )\n    # Result: [nt.Transform(u'group3')] #\n    \n    # Create a row of 4 instanced circles which are equally spaced\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.instance()\n    # Result: [nt.Transform(u'circle2')] #\n    pm.move( 3, 0, 0 )\n    pm.instance( smartTransform=True )\n    # Result: [nt.Transform(u'circle3')] #\n    pm.instance( smartTransform=True )\n    # Result: [nt.Transform(u'circle4')] #", 
    "instanceable": "    \n    \n    import pymel.core as pm\n    \n    # create a sphere.\n    # flag the transform and its shape as non-instanceable, then try to instance the sphere.\n    # you get an error because the shape is non-instanceable.\n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.instanceable( allow=0, shape=True )\n    pm.instance()\n    # Error: '|nurbsSphere1' has non-instanceable children thus it cannot be instanced.\n    # Flag the sphere and its shape as instanceable. Then it can be instanced.\n    pm.instanceable( allow=1, shape=True )\n    pm.instance()\n    nurbsSphere2", 
    "instancer": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere(n='myShape')\n    # Result: [nt.Transform(u'myShape'), nt.PolySphere(u'polySphere1')] #\n    pm.instancer( name='myInstancerNode', a=True, object='myShape' )", 
    "intField": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout49') #\n    pm.intField()\n    # Result: ui.IntField('window1|columnLayout49|intField4') #\n    pm.intField( editable=False )\n    # Result: ui.IntField('window1|columnLayout49|intField5') #\n    pm.intField( minValue=-10, maxValue=10, value=0 )\n    # Result: ui.IntField('window1|columnLayout49|intField6') #\n    pm.intField( minValue=-1000, maxValue=1000, step=10 )\n    # Result: ui.IntField('window1|columnLayout49|intField7') #\n    pm.showWindow()", 
    "intFieldGrp": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout50') #\n    pm.intFieldGrp( numberOfFields=3, label='Scale', extraLabel='cm', value1=3, value2=5, value3=1 )\n    # Result: ui.IntFieldGrp('window1|columnLayout50|intFieldGrp1') #\n    pm.showWindow( window )", 
    "intScrollBar": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout51') #\n    pm.intScrollBar()\n    # Result: ui.IntScrollBar('window1|columnLayout51|intScrollBar1') #\n    pm.intScrollBar( min=-100, max=100, value=0, step=1, largeStep=10 )\n    # Result: ui.IntScrollBar('window1|columnLayout51|intScrollBar2') #\n    pm.showWindow()", 
    "intSlider": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout52') #\n    pm.intSlider()\n    # Result: ui.IntSlider('window1|columnLayout52|intSlider4') #\n    pm.intSlider( min=-100, max=100, value=0, step=1 )\n    # Result: ui.IntSlider('window1|columnLayout52|intSlider5') #\n    pm.showWindow()", 
    "intSliderGrp": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a couple integer slider groups.  The first will\n    #    use default limit values, and the second will set up a group that has\n    #    a field range greater than the slider range.  Try entering values\n    #    greater than the slider limits in both groups.\n    #\n    window = pm.window( title='intSliderGrp Example' )\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout53') #\n    pm.intSliderGrp( field=True, label='Group 1' )\n    # Result: ui.IntSliderGrp('window1|columnLayout53|intSliderGrp1') #\n    pm.intSliderGrp( field=True, label='Group 2', minValue=-10, maxValue=10, fieldMinValue=-100, fieldMaxValue=100, value=0 )\n    # Result: ui.IntSliderGrp('window1|columnLayout53|intSliderGrp2') #\n    pm.showWindow( window )", 
    "interactionStyle": "", 
    "internalVar": "    \n    \n    import pymel.core as pm\n    \n    myScriptDir = pm.internalVar(userScriptDir=True)", 
    "intersect": "    \n    \n    import pymel.core as pm\n    \n    # Intersect the two active surfaces and create the resulting curve on\n    # surface as a 3D curve (note: only one 3D curve is created for each\n    # pair of intersecting surfaces):\n    pm.intersect( cos=True )\n    \n    # Intersect the nurbs sphere and nurbs plane, creating a curve-on-surface\n    # on each surface:\n    pm.intersect( 'nurbsSphere1', 'nurbsPlane1', fs=True )", 
    "iprEngine": "    \n    \n    import pymel.core as pm\n    \n    # Create a iprEngine and tell it about an already created ipr image.\n    pm.iprEngine(ipr='iprImages/persp_scene1_ipr.iff')\n    \n    # Tell the iprEngine about the region to update.\n    pm.iprEngine( 'iprEngine1', e=True, region=(10, 10, 100, 100))\n    \n    # Tell the iprEngine to watch changes and update pixels.\n    pm.iprEngine( 'iprEngine1', e=True, startTuning=True )", 
    "isConnected": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( n='jupiter' )\n    # Result: [nt.Transform(u'jupiter'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( n='io' )\n    # Result: [nt.Transform(u'io'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.connectAttr( 'jupiter.ty', 'io.ty' )\n    \n    # Are the two \"tx\" attributes on transform1 and transform2 connected?\n    pm.isConnected( 'jupiter.tx', 'io.tx' )\n    # Result: False #\n    \n    # Are the two \"ty\" attributes on transform1 and transform2 connected?\n    pm.isConnected( 'jupiter.ty', 'io.ty' )\n    # Result: True #", 
    "isDirty": "    \n    \n    import pymel.core as pm\n    \n    # Create a plusMinusAverage node and a transform. We set the 'skipSelect'\n    # flag so that they are not displayed in the Attribute Editor because\n    # that would force an evaluation and cause the plugs to become clean.\n    import maya.cmds as cmds\n    pm.createNode('plusMinusAverage', n='pma', skipSelect=True)\n    # Result: nt.PlusMinusAverage(u'pma') #\n    pm.createNode('transform', n='t', skipSelect=True)\n    # Result: nt.Transform(u't') #\n    \n    # Hide the transform so that Maya's draw won't force an evaluation which\n    # would clean its plugs.\n    pm.hide('t')\n    \n    # Connect the transform's 'tx' to one of the plusMinusAverage node's\n    # inputs.\n    pm.connectAttr('t.tx', 'pma.input1D[0]')\n    \n    # Set the value of the transform's 'tx' and check that the\n    # target of the connection has become dirty.\n    pm.setAttr('t.tx', 13)\n    pm.isDirty('pma.input1D[0]')\n    # Result: True #\n    \n    # If we retrieve the value of the destination attribute\n    # then the connection becomes clean.\n    pm.getAttr('pma.input1D[0]')\n    # Result: 13.0 #\n    pm.isDirty('pma.input1D[0]')\n    # Result: False #\n    \n    # A plusMinusAverage node's 'output1D' attribute depends\n    # upon the values in its 'input1D' array. Since we haven't\n    # retrieved its value yet, it should still be dirty. However,\n    # it seems to be clean:\n    pm.isDirty('pma.output1D')\n    # Result: False #\n    \n    # The reason for this is that the 'isDirty' command\n    # by default only checks connections and 'output1D' has\n    # no connection to be dirty. If we instead check its\n    # value in the datablock, we get the expected result:\n    pm.isDirty('pma.output1D', d=True)\n    # Result: True #\n    \n    # The output value will remain dirty until we\n    # force its evaluation by retrieving it.\n    pm.getAttr('pma.output1D')\n    # Result: 13.0 #\n    pm.isDirty('pma.output1D', d=True)\n    # Result: False #", 
    "isTrue": "    \n    \n    import pymel.core as pm\n    \n    pm.isTrue( 'SomethingSelected' )\n    # Result: 0 #", 
    "isolateSelect": "    \n    \n    import pymel.core as pm\n    \n    # create some primitives and go into component selection mode\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone( n='cone1' )\n    # Result: [nt.Transform(u'cone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.selectMode( component=True )\n    \n    # to query the current modelPanel, you can use the command\n    #\n    pm.paneLayout('viewPanes', q=True, pane1=True)\n    # Result: u'modelPanel4' #\n    \n    # turn on isolate select mode for a particular 3d view. Only\n    # the sphere and the selected CVs will be displayed.\n    pm.select( 'sphere1.cv[0:2][*]' )\n    pm.isolateSelect( 'modelPanel1', state=1 )\n    \n    # add the code to the list of objects to be viewed\n    pm.select( 'cone1' )\n    pm.isolateSelect( 'modelPanel1', addSelected=True )\n    \n    # make just the sphere the object to be viewed\n    pm.select( 'sphere1' )\n    pm.isolateSelect( 'modelPanel1', loadSelected=True )", 
    "itemFilter": "    \n    \n    import pymel.core as pm\n    \n    #    Create a filter that will pass all transforms.\n    #\n    transforms = pm.itemFilter(byType='transform')\n    \n    #    Create a filter that will pass all spot lights.\n    #\n    spotLights = pm.itemFilter(byType='spotLight')\n    \n    #    There are two ways to create a filter that passes both\n    #    spot lights and transforms.  You can create a filter\n    #    that is a union of the previous two or just specify\n    #    both object types on one filter.\n    #\n    unionFilter = pm.itemFilter(union=(transforms, spotLights))\n    spotLightsAndTransforms = pm.itemFilter(byType=('transform','spotLight'))\n    \n    #    Create a filter that lists all objects beginning with the\n    #    letter \"a\".\n    #\n    aFilter = pm.itemFilter(byName='a*')\n    \n    #    Create a filter that lists only transforms and spot lights\n    #    that begin with the letter \"a\".\n    #\n    intersectionFilter = pm.itemFilter( intersect=(spotLightsAndTransforms, aFilter) )\n    \n    #    Delete the filters when done with them.\n    #\n    pm.delete( transforms, spotLights, aFilter )\n    pm.delete( unionFilter, intersectionFilter )", 
    "itemFilterAttr": "    \n    \n    import pymel.core as pm\n    \n    #    Create a filter that will pass all the SRT (scale-rotate-translate)\n    #    attributes.\n    #\n    srtFilter = pm.itemFilterAttr('itemFilterAttr', scaleRotateTranslate=True)\n    \n    #    Create a filter that will pass all the attributes driven by an\n    #    expression.\n    #\n    exprFilter = pm.itemFilterAttr(hasExpression=True)\n    \n    #    Create a filter that will pass all the SRT attributes driven by an\n    #    expression (intersect two previous ones).\n    #\n    srtExprFilter = pm.itemFilterAttr(intersect=(srtFilter, exprFilter))\n    \n    #    Delete the filters when done with them.\n    #\n    pm.delete( srtFilter, exprFilter, srtExprFilter )", 
    "itemFilterAttrOld": "", 
    "itemFilterOld": "", 
    "itemFilterRender": "    \n    \n    import pymel.core as pm\n    \n    #    If an object is a shader or any type of texture, it will pass\n    #    this filter.\n    #\n    \n    \n    #    If an object is not a 3d Texture, it will pass this filter.\n    #\n    no3dTextures = pm.itemFilterRender(negate=True, textures3d=True)\n    \n    #    A couple more filters.  One showing only lights, the other showing\n    #    everything but lights.\n    #\n    lights = pm.itemFilterRender(lights=True)\n    noLights = pm.itemFilterRender(lights=True, negate=True)\n    \n    #    Create a window with an outliner editor, along with some buttons that\n    #    will apply a different filter to the outliner.\n    #\n    window = pm.window()\n    form = pm.formLayout()\n    editor = pm.outlinerEditor(showDagOnly=False)\n    column = pm.columnLayout(adjustableColumn=True)\n    pm.button( label='No Filter',            command='pm.outlinerEditor(\"'+editor+'\", edit=True, filter=\"\")')\n    # Result: ui.Button('window1|formLayout58|columnLayout54|button46') #\n    pm.button( label='Shaders and Textures', command='pm.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+shadersAndTextures+'\")')\n    pm.button( label='No 3D Textures',       command='pm.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+no3dTextures+'\")')\n    pm.button( label='Light',                command='pm.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+lights+'\")')\n    pm.button( label='No Light',             command='pm.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+noLights+'\")')\n    input = pm.selectionConnection(worldList=True)\n    pm.editor( editor, edit=True, mainListConnection=input )\n    \n    #    Apply the layout attachments.\n    #\n    pm.formLayout(form, edit=True,\n                    attachForm=((column, 'top',    0), (column, 'left', 0),\n                                (column, 'bottom', 0), (editor, 'top', 0),\n                                (editor, 'bottom', 0), (editor, 'right', 0)),\n                    attachNone=(column, 'right'),\n                    attachControl=(editor, 'left', 0, column))\n    \n    #    Put some objects in the scene.\n    #\n    pm.spotLight()\n    pm.pointLight()\n    pm.shadingNode( 'bulge', asTexture=True )\n    pm.shadingNode( 'checker', asTexture=True )\n    pm.shadingNode( 'granite', asTexture=True )\n    pm.shadingNode( 'wood', asTexture=True )\n    pm.shadingNode( 'lambert', asShader=True )\n    pm.shadingNode( 'blinn', asShader=True )\n    \n    pm.showWindow( window )", 
    "itemFilterRenderOld": "", 
    "itemFilterType": "    \n    \n    import pymel.core as pm\n    \n    #    Create a filter that will pass all spot lights and transforms.\n    #\n    filter = pm.itemFilter(byType=('transform', 'spotLight'))\n    \n    #    Now query the type of the filter.\n    #\n    type = pm.itemFilterType(filter, q=True, type=True)\n    print( 'Filter type: ' + type + '\\n' )\n    \n    #    Delete the filter.\n    #\n    pm.delete( filter )", 
    "itemFilterTypeOld": "", 
    "iterOnNurbs": "", 
    "joint": "    \n    \n    import pymel.core as pm\n    \n    # Create a 3-joint chain\n    #\n    pm.select( d=True )\n    pm.joint( p=(0, 0, 0) )\n    # Result: nt.Joint(u'joint1') #\n    pm.joint( p=(0, 4, 0)  )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( p=(0, 8, -1) )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( 'joint2', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint3') #\n    \n    # Create a fourth joint with z joint limits of -90 deg for\n    # the lower limit and 90 deg for the upper limit.  The\n    # joint will be positioned at (0, 0, 4) in world\n    # coordinates.\n    #\n    pm.joint( lz=('-90deg', '90deg'), p=(0, 8, 4) )\n    # Result: nt.Joint(u'joint4') #\n    \n    # Set the joint limits but leave them disabled.\n    pm.joint( edit=True, lz=('-90deg', '90deg'), lsz=False )\n    # Result: nt.Joint(u'joint4') #", 
    "jointCluster": "    \n    \n    import pymel.core as pm\n    \n    # To add a joint cluster to a rigidly bound skin.\n    # Note the skin should be at bind pose when the cluster is added.\n    #\n    pm.jointCluster( j='joint2', ab=20, bb=20 )", 
    "jointCtx": "    \n    \n    import pymel.core as pm\n    \n    #    Create a joint context that makes a ikHandle with an ikRPSolver.\n    #    The use the tool.\n    #\n    pm.jointCtx( 'myJointContext', createIKHandle=True, solverTypeH='ikRPsolver' )\n    # Result: u'myJointContext' #\n    pm.setToolTo( 'myJointContext' )", 
    "jointDisplayScale": "    \n    \n    import pymel.core as pm\n    \n    # Half the display size with respect to the default size.\n    #\n    pm.jointDisplayScale( 0.5 )\n    \n    # Display the joint with diameter of 2 linear units.\n    #\n    pm.jointDisplayScale( 2.0, a=True )", 
    "jointLattice": "    \n    \n    import pymel.core as pm\n    \n    # Select a \"dualBase\" lattice that is connected to a rigidly bound skin.\n    # To create a dualBase lattice, use the dualBase flag on the lattice command.\n    #\n    pm.jointLattice( joint='joint2', upperBindSkin='joint1Cluster1',lowerBindSkin='joint2Cluster2' )\n    pm.jointLattice( upperTransform='joint1', lowerTransform='joint2', joint='joint2', upperBindSkin='joint1Cluster1',lowerBindSkin='joint2Cluster1' )\n    pm.jointLattice( 'jointLattice1', edit=True, creasing=0.5 )", 
    "journal": "", 
    "keyTangent": "    \n    \n    import pymel.core as pm\n    \n    # Set the in-tangent to spline for all keyframes\n    # on an object between 1 and 2 seconds.\n    #\n    pm.keyTangent( 'nurbsSphere1', inTangentType='spline', time=('0sec','2sec') )\n    \n    # Set the angle and value for the out tangent of the\n    # keyframe at time 5 of nurbsSphere1's translateX.\n    #\n    pm.keyTangent( 'nurbsSphere1', edit=True, time=(5,5), attribute='translateX', absolute=True, outAngle=10, outWeight=5 )", 
    "keyframe": "    \n    \n    import pymel.core as pm\n    \n    # Two ways to find out how many keys there are on the\n    # paramCurve connected to surface1.translateX;\n    #\n    pm.keyframe( 'surface1', attribute='translateX', query=True, keyframeCount=True )\n    pm.keyframe( 'surface1.translateX', query=True, keyframeCount=True )\n    \n    # Query all keyframes of object \"surface1\" within the time range 0 to 20.\n    #\n    pm.keyframe( 'surface1', time=(0,20), query=True, valueChange=True, timeChange=True);\n    \n    # Query just the time of the first key in the\n    # \"Translate X\" parameter curve.  Note that the indices are 0-based.\n    #\n    pm.keyframe('surface1.translateX',index=(0,0),query=True);\n    \n    # Shift all the active object's keys in the range 10-20\n    # by one (current) time unit (frame, second, etc.)\n    #\n    pm.keyframe(edit=True,relative=True,timeChange=1,time=(10,20))\n    \n    # Two ways to move all keys at time 10 of\n    # the active object to time 12.  Note that \"-absolute\"\n    # is the default.\n    #\n    pm.keyframe(time=(10,10),timeChange=12)\n    pm.keyframe(time=(10,10),absolute=True,timeChange=12)\n    \n    # Set the 2nd keyframe of cube1's Translate X parameter\n    # curve to be 10.25 at time 1.5 seconds.\n    #\n    pm.keyframe('surface1.translateX',edit=True,index=(1,1),timeChange='1.5sec',valueChange=10.25)\n    \n    # Evaluate the animCurve feeding into nurbsCone1's translateX attribute at time 3\n    #\n    pm.keyframe('nurbsCone1',at='tx',t=(3,3),q=True,eval=True)\n    \n    # Query the times of the active keys on attribute translateX of nurbsCone1\n    #\n    pm.keyframe( 'nurbsCone1', at='tx', sl=True, q=True, tc=True )\n    \n    # How many keys are selected on nurbsCone1?\n    #\n    pm.keyframe( 'nurbsCone1', sl=True, q=True, kc=True )\n    \n    # Here's a script to print out all a cone's animCurves that have\n    # keys selected.  Each animCurve is followed by a list of times\n    # for the selected keys.  The result of this script is:\n    #     nurbsCone1_translateX: 5\n    #     nurbsCone1_translateY: 12\n    #     nurbsCone1_translateZ: 4 14\n    #\n    myCone = pm.cone()\n    pm.setKeyframe( myCone[0], t=[0,5,10], at='tx', v=5 )\n    pm.setKeyframe( myCone[0], t=[2,7,12], at='ty', v=10 )\n    pm.setKeyframe( myCone[0], t=[4,9,14], at='tz', v=15 )\n    pm.selectKey( t=[(5,5),(12,12),(4,4)] )\n    pm.selectKey( animation='objects', add=True, t=(14,14) )\n    \n    nodes = pm.keyframe(myCone,query=True,name=True)\n    for node in nodes:\n       keyTimes = pm.keyframe(node,sl=True,query=True,tc=True)\n       print \"Node: %s\" % node\n       print keyTimes\n    \n    # For the above sample script, the last selected key is\n    # nurbsCone1_translateZ: 14.  The following may be used to query\n    # the values for that key\n    #\n    pm.keyframe( query=True, lastSelected=True, name=True )\n    pm.keyframe( query=True, lastSelected=True, timeChange=True )\n    pm.keyframe( query=True, lastSelected=True, valueChange=True )", 
    "keyframeOutliner": "    \n    \n    import pymel.core as pm\n    \n    pm.window( 'myWindow', width=850, height=75 )\n    # Result: ui.Window('myWindow') #\n    pm.formLayout( 'myForm' )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.keyframeOutliner( 'myOutliner', animCurve='animCurve1' )\n    # Result: u'myWindow|myForm|myOutliner' #\n    pm.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.showWindow()", 
    "keyframeRegionCurrentTimeCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.keyframeRegionCurrentTimeCtx()\n    # Result: u'keyframeRegionCurrentTimeCtx1' #", 
    "keyframeRegionDirectKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a direct key context for the dope sheet editor\n    #\n    pm.keyframeRegionDirectKeyCtx( 'keyframeRegionDirectKeyContext' )", 
    "keyframeRegionDollyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a dolly view context for the dope sheet editor\n    #\n    pm.keyframeRegionDollyCtx( 'keyframeRegionDollyContext' )", 
    "keyframeRegionInsertKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create an insert key context for the dope sheet editor\n    #\n    pm.keyframeRegionInsertKeyCtx( 'keyframeRegionInsertKeyContext' )", 
    "keyframeRegionMoveKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a move key context which works in insert mode\n    # for the dope sheet editor\n    #\n    pm.keyframeRegionMoveKeyCtx( 'keyframeRegionMoveKeyContext', option='insert' )", 
    "keyframeRegionScaleKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a manipulator style scale key context\n    # for the dope sheet editor\n    #\n    pm.keyframeRegionScaleKeyCtx( 'keyframeRegionScaleKeyContext', type='rect' )", 
    "keyframeRegionSelectKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a select key context for the dope sheet editor\n    #\n    pm.keyframeRegionSelectKeyCtx( 'keyframeRegionSelectKeyContext' )", 
    "keyframeRegionSetKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a set key context for the dope sheet editor\n    #\n    pm.keyframeRegionSetKeyCtx( 'keyframeRegionSetKeyContext' )", 
    "keyframeRegionTrackCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a track view context for the dope sheet editor\n    #\n    pm.keyframeRegionTrackCtx( 'keyframeRegionTrackContext' )", 
    "keyframeStats": "    \n    \n    import pymel.core as pm\n    \n    pm.window( 'myWindow', rtf=0, width=200 )\n    # Result: ui.Window('myWindow') #\n    pm.formLayout( 'myForm' )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.keyframeStats( 'myOutliner' )\n    # Result: u'myWindow|myForm|myOutliner' #\n    pm.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\n    # Result: ui.FormLayout('myWindow|myForm') #\n    pm.showWindow()", 
    "keyingGroup": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    \n    pm.file(f=1, new=1)\n    \n    # Create a keying group with keyable attrs of the currently selected\n    # object\n    #\n    pm.polySphere(n='sphere1')\n    sphereKG = pm.keyingGroup(n='sphereKG')\n    \n    # Query the members: should return sphere1's visiblity and TRS\n    members = pm.keyingGroup(sphereKG, q=True)\n    \n    # Create a keying group which contains another keying group\n    parentKG = pm.keyingGroup(sphereKG, n='parentKG')\n    \n    # keying the parent KG should automatically key the sub KGs as well\n    pm.select(parentKG)\n    pm.setKeyframe(time=1)\n    \n    # Add 2 other spheres to the sphereKG\n    pm.polySphere(n='sphere2');\n    pm.polySphere(n='sphere3');\n    pm.keyingGroup('sphere2', 'sphere3', e=True, add=sphereKG)\n    \n    # Make another object the activator for the sphereKG. So if\n    # this object is keyed, the sphereKG will be keyed\n    # Note: the activator itself does not have to be part of the\n    # keying group. If it is not part of the keyingGroup, it\n    # will not be keyed. So only the spheres will be keyed below.\n    # If the cube is to be keyed as well, execute:\n    # pm.keyingGroup('cube1',e=True, add=sphereKG)\n    pm.polyCube(n='cube1')\n    pm.keyingGroup('cube1',e=True,activator=sphereKG)\n    pm.select('cube1')\n    pm.setKeyframe(t=10)", 
    "lassoContext": "    \n    \n    import pymel.core as pm\n    \n    # Create a new lasso context, then switch to it\n    pm.lassoContext('lassoContext1')\n    # Result: u'lassoContext1' #\n    pm.setToolTo('lassoContext1')", 
    "lattice": "    \n    \n    import pymel.core as pm\n    \n    # to create a 4x5x4 lattice centered around the sphere\n    #\n    pm.sphere();\n    pm.lattice( dv=(4, 5, 4), oc=True )\n    # Result: [nt.Ffd(u'ffd1'), nt.Transform(u'ffd1Lattice'), nt.Transform(u'ffd1Base')] #\n    \n    # to edit the lattice divisions to be 6x6x6\n    #\n    pm.lattice( 'ffd1', e=True, dv=(6, 6, 6) )\n    \n    # move a point on the lattice\n    pm.select('ffd1Lattice.pt[2][2][5]',r=True)\n    pm.move(0,0,3,r=True)\n    \n    # to reset the lattice\n    #\n    pm.lattice( 'ffd1', e=True, lr=True )", 
    "latticeDeformKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a lattice manipulator with 4 x 4 lattice.\n    #\n    pm.latticeDeformKeyCtx( 'latticeContex', latticeColumns=4, latticeRows=4 )\n    # Result: u'latticeContex' #", 
    "launch": "    \n    \n    import pymel.core as pm\n    \n    #launch a web browser to open webpage http://www.autodesk.com\n    pm.launch(web=\"http://www.autodesk.com\")\n    # Result: u'http://www.autodesk.com' #", 
    "launchImageEditor": "    \n    \n    import pymel.core as pm\n    \n    # Create a blinn shader with a psd file texture.\n    pm.shadingNode('blinn', asShader=True)\n    # Result: nt.Blinn(u'blinn1') #\n    pm.sets(renderable=True, noSurfaceShader=True, empty=True, name='blinn1SG')\n    # Result: nt.ShadingEngine(u'blinn1SG') #\n    pm.connectAttr('blinn1.outColor', 'blinn1SG.surfaceShader', f=True)\n    pm.shadingNode('psdFileTex', asTexture=True)\n    # Result: nt.PsdFileTex(u'psdFileTex1') #\n    pm.connectAttr('psdFileTex1.outColor', 'blinn1.color')\n    pm.setAttr('psdFileTex1.fileTextureName', 'C:/test.psd', type='string')\n    \n    # Create a poly plane, and assign the blinn shader to it.\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    pm.sets(e=True, forceElement='blinn1SG')\n    \n    # Now you can launch Photoshop to edit this psd texture file\n    pm.launchImageEditor(eif=pm.getAttr('psdFileTex1.fileTextureName'))", 
    "layerButton": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout55') #\n    # Create a button for the default layer, colour it red and select it\n    b = pm.layerButton(name='defaultLayer', cl=(1.0, 0.0, 0.0), s=True)\n    pm.showWindow()\n    \n    # Find out how wide the layer buttons are when created\n    width = pm.layerButton(b ,q=True, labelWidth=True )", 
    "layeredShaderPort": "    \n    \n    import pymel.core as pm\n    \n    layer = pm.shadingNode('layeredShader', asShader=True)\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout('r')\n    # Result: ui.ColumnLayout('window1|r') #\n    pm.layeredShaderPort(n=layer)\n    # Result: u'window1|r|layeredShaderPort1' #\n    pm.showWindow()", 
    "layeredTexturePort": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout('r')\n    # Result: ui.ColumnLayout('window1|r') #\n    pm.layeredTexturePort(n='layeredTexture1')\n    pm.showWindow()", 
    "layout": "    \n    \n    import pymel.core as pm\n    \n    #    Create a simple window containing a single column layout\n    #    and a few buttons.\n    #\n    window = pm.window(title='Layout Example')\n    column = pm.columnLayout()\n    pm.button()\n    # Result: ui.Button('window1|columnLayout56|button47') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout56|button48') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout56|button49') #\n    pm.showWindow( window )\n    \n    #    If you don't know that the layout is actually a 'columnLayout' then\n    #    you may use the 'layout' command to determine certain properties.\n    #\n    pm.layout( column, query=True, numberOfChildren=True )\n    # Result: 3 #\n    pm.layout( column, query=True, childArray=True )\n    # Result: [u'button47', u'button48', u'button49'] #\n    pm.layout( column, query=True, height=True )\n    # Result: 71 #", 
    "layoutDialog": "    \n    \n    import pymel.core as pm\n    \n    def checkboxPrompt():\n            # Get the dialog's formLayout.\n            #\n            form = pm.setParent(q=True)\n    \n            # layoutDialog's are not resizable, so hard code a size here,\n            # to make sure all UI elements are visible.\n            #\n            pm.formLayout(form, e=True, width=300)\n    \n            t = pm.text(l='What do you want to do?')\n    \n            b1 = pm.button(l='Abort', c='pm.layoutDialog( dismiss=\"Abort\" )' )\n            b2 = pm.button(l='Skip', c='pm.layoutDialog( dismiss=\"Skip\" )' )\n            b3 = pm.button(l='Continue', c='pm.layoutDialog( dismiss=\"Continue\" )' )\n    \n            cb1 = pm.checkBox(label='Remember my choice')\n    \n            spacer = 5\n            top = 5\n            edge = 5\n    \n            pm.formLayout(form, edit=True,\n                                            attachForm=[(t, 'top', top), (t, 'left', edge), (t, 'right', edge), (b1, 'left', edge), (b3, 'right', edge), (cb1, 'left', edge), (cb1, 'bottom', spacer)],\n                                            attachNone=[(t, 'bottom'), (b1, 'bottom'), (b2, 'bottom'), (b3, 'bottom'), (cb1, 'right')],\n                                            attachControl=[(b1, 'top', spacer, t), (b2, 'top', spacer, t), (b3, 'top', spacer, t), (cb1, 'top', spacer, b1)],\n                                            attachPosition=[(b1, 'right', spacer, 33), (b2, 'left', spacer, 33), (b2, 'right', spacer, 66), (b3, 'left', spacer, 66)])\n    \n    print pm.layoutDialog(ui=checkboxPrompt)", 
    "license": "    \n    \n    import pymel.core as pm\n    \n    pm.license( )\n    \n    method = pm.license(licenseMethod=True)", 
    "licenseCheck": "", 
    "lightList": "    \n    \n    import pymel.core as pm\n    \n    pm.lightList( add='foo' )", 
    "lightlink": "    \n    \n    import pymel.core as pm\n    \n    pm.lightlink( light=('spotLight1', 'pointLight2', 'ambientLight4'), object=('apple', 'orange', 'banana') )\n    \n    # causes a light link to be \"created between\"    each of the lights\n    # spotLight1, pointLight2, ambientLight4 and each of the objects\n    # apple, orange, banana. This creates 9 links. Note that no make,\n    # break or query flag is specified so make is assumed since both\n    # lights and objects are specified.\n    \n    pm.lightlink( make=True, light='ceilingLightSet', object='apple' )\n    # causes a light link to be \"created between\" the ceiling lights and\n    # the apple geometry. If apple is already illuminated by\n    # ceilingLightSet, then nothing changes and a warning is produced.\n    \n    pm.lightlink( object='stillLifeSet', light='spotLight1' )\n    # causes a light link to be \"created between\" spotLight1 and the still\n    # life. If stillLifeSet is already illuminated by spotLight1, then\n    # nothing changes and a warning is produced. Note: no make, break or\n    # query flag is specified so the make flag is assumed since both lights\n    # and objects are specified.\n    \n    pm.lightlink( light=('ceilingLightSet', 'floorLightSet'), object='tableAndChairsSet' )\n    # causes a light link to be \"created between\" each of the light sets\n    # ceilingLightSet, floorLightSet and the object set tableAndChairsSet.\n    \n    pm.lightlink( query=True, light='ceilingLightSet' )\n    # will return a string array of objects which are illuminated by the\n    # set ceilingLightSet. For example, the return value might be:\n    # stillLifeSet table chair floor roomWallsSet binky\n    \n    pm.lightlink( query=True, object='apple' )\n    # will return a string array of lights which illuminate the object\n    # apple. For example, the return value might be ceilingLightSet\n    # spotLight1 spotLight2 ambientLight1\n    \n    pm.lightlink( object='apple' )\n    # will return a string array of lights which illuminate the object\n    # apple. For example, the return value might be ceilingLightSet\n    # spotLight1 spotLight2 ambientLight1. Note that no make, break\n    # or query flag is specified, so query is assumed since no lights\n    # are specified.\n    \n    pm.lightlink( b=True, light='ceilingLightSet', object='apple' )\n    # causes the light set ceilingLightSet to no longer illuminate the\n    # object apple. If ceilingLightSet was already not illuminating apple,\n    # nothing changes and a warning is produced.", 
    "linearPrecision": "    \n    \n    import pymel.core as pm\n    \n    pm.linearPrecision( 3 )\n    pm.linearPrecision( 10 ) # will be rounded down to 6, the maximum", 
    "listAnimatable": "    \n    \n    import pymel.core as pm\n    \n    # List only the attrs driven by the current manip.\n    #\n    pm.listAnimatable( manip=True )\n    # Result: [] #\n    \n    # List only the attrs driven by the current manipulator handle.\n    #\n    pm.listAnimatable( manipHandle=True )\n    # Result: [] #\n    \n    # List only the types of nodes driven by the current manip.\n    #\n    pm.listAnimatable( manip=True, type=True )\n    # Result: [] #\n    \n    # List only the types of the active nodes.\n    #\n    pm.listAnimatable( type=True )\n    # Result: [] #\n    \n    # List attributes on active objects (and shapes below them),\n    # or active attrs.\n    #\n    pm.listAnimatable()\n    # Result: [] #\n    \n    # List types of active objects and types of any shapes below active\n    # objects.\n    #\n    pm.listAnimatable( type=True )\n    # Result: [] #", 
    "listAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.listAttr( r=True, s=True )\n    # Result: [u'caching', u'isHistoricallyInteresting', u'nodeState', u'isCollapsed', u'blackBox', u'isHierarchicalConnection', u'publishedNodeInfo.isHierarchicalNode', u'viewMode', u'templateVersion', u'uiTreatment', u'boundingBoxMinX', u'boundingBoxMinY', u'boundingBoxMinZ', u'boundingBoxMaxX', u'boundingBoxMaxY', u'boundingBoxMaxZ', u'boundingBoxSizeX', u'boundingBoxSizeY', u'boundingBoxSizeZ', u'boundingBoxCenterX', u'boundingBoxCenterY', u'boundingBoxCenterZ', u'visibility', u'intermediateObject', u'template', u'ghosting', u'instObjGroups.objectGroups.objectGroupId', u'instObjGroups.objectGroups.objectGrpColor', u'objectColorR', u'objectColorG', u'objectColorB', u'useObjectColor', u'objectColor', u'overrideDisplayType', u'overrideLevelOfDetail', u'overrideShading', u'overrideTexturing', u'overridePlayback', u'overrideEnabled', u'overrideVisibility', u'overrideColor', u'lodVisibility', u'selectionChildHighlighting', u'identification', u'layerRenderable', u'layerOverrideColor', u'renderLayerInfo.renderLayerId', u'renderLayerInfo.renderLayerRenderable', u'renderLayerInfo.renderLayerColor', u'ghostingControl', u'ghostPreSteps', u'ghostPostSteps', u'ghostStepSize', u'ghostColorPreA', u'ghostColorPreR', u'ghostColorPreG', u'ghostColorPreB', u'ghostColorPostA', u'ghostColorPostR', u'ghostColorPostG', u'ghostColorPostB', u'ghostRangeStart', u'ghostRangeEnd', u'bess', u'les', u'wes', u'translateX', u'translateY', u'translateZ', u'rotateX', u'rotateY', u'rotateZ', u'rotateOrder', u'scaleX', u'scaleY', u'scaleZ', u'shearXY', u'shearXZ', u'shearYZ', u'rotatePivotX', u'rotatePivotY', u'rotatePivotZ', u'rotatePivotTranslateX', u'rotatePivotTranslateY', u'rotatePivotTranslateZ', u'scalePivotX', u'scalePivotY', u'scalePivotZ', u'scalePivotTranslateX', u'scalePivotTranslateY', u'scalePivotTranslateZ', u'rotateAxisX', u'rotateAxisY', u'rotateAxisZ', u'transMinusRotatePivotX', u'transMinusRotatePivotY', u'transMinusRotatePivotZ', u'minTransXLimit', u'minTransYLimit', u'minTransZLimit', u'maxTransXLimit', u'maxTransYLimit', u'maxTransZLimit', u'minTransXLimitEnable', u'minTransYLimitEnable', u'minTransZLimitEnable', u'maxTransXLimitEnable', u'maxTransYLimitEnable', u'maxTransZLimitEnable', u'minRotXLimit', u'minRotYLimit', u'minRotZLimit', u'maxRotXLimit', u'maxRotYLimit', u'maxRotZLimit', u'minRotXLimitEnable', u'minRotYLimitEnable', u'minRotZLimitEnable', u'maxRotXLimitEnable', u'maxRotYLimitEnable', u'maxRotZLimitEnable', u'minScaleXLimit', u'minScaleYLimit', u'minScaleZLimit', u'maxScaleXLimit', u'maxScaleYLimit', u'maxScaleZLimit', u'minScaleXLimitEnable', u'minScaleYLimitEnable', u'minScaleZLimitEnable', u'maxScaleXLimitEnable', u'maxScaleYLimitEnable', u'maxScaleZLimitEnable', u'selectHandleX', u'selectHandleY', u'selectHandleZ', u'inheritsTransform', u'displayHandle', u'displayScalePivot', u'displayRotatePivot', u'displayLocalAxis', u'showManipDefault', u'rotateQuaternionX', u'rotateQuaternionY', u'rotateQuaternionZ', u'rotateQuaternionW', u'rotationInterpolation', u'miDeriveFromMaya', u'miHide', u'miVisible', u'miTrace', u'miShadow', u'miCaustic', u'miGlobillum', u'miExportGeoShader', u'miProxyRenderable'] #\n    # This will list the scalar readable attributes of the\n    # selected nodes.  If more than one node is selected attributes\n    # may be listed several times.\n    \n    pm.listAttr( s=True, r=True, w=True, c=True, st=['centerX','centerY'] )\n    # Result: [] #\n    # This will list all scalar, readable, writable, and connectable\n    # attributes whose names are \"centerX\" or \"centerY\".\n    \n    pm.listAttr( r=True, st='center*', ct='a*' )\n    # Result: [] #\n    # This will list all readable attributes whose names match\n    # \"center*\" (e.g. \"centerX\" or \"centerpede\") and who belong to\n    # a category starting with the letter \"a\".\n    \n    pm.listAttr( 'nurbsSphere1', s=True, cfo=True )\n    # Result: [] #\n    # This will list all scalar attributes of\n    # nurbsSphere1 that have been changed since the\n    # file in which nurbsSphere1 is defined has been\n    # opened.  If nurbsSphere1 comes from a referenced file,\n    # the result will be all the attributes that have changed\n    # since the referenced file was opened.", 
    "listAttrPatterns": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    pm.listAttrPatterns()\n    // Return: [\"approvalAttrs\", \"sceneAndShotAttrs\"] //\n    pm.listAttrPatterns( patternType=True )\n    // Return: \"xmlPatternFactory\" //\n    pm.listAttrPatterns( patternType=True, verbose=True )\n    // Return: [\"xmlPatternFactory\", \"xmlPatternFactory/approvalAttrs\", \"xmlPatternFactory/sceneAndShotAttrs\"] //\n    pm.listAttrPatterns( verbose=True )\n    Pattern approvalAttrs\n        PatternFactory xmlPatternFactory:\n        File: \"attrPatterns/approvalAttrs.xml\"\n        Attribute Count: 8\n        Attribute Tree:\n          fxApproval (compound)\n            fxApprover (string)\n            fxApprovalDate (int)\n            fxApprovalState (enum)\n          layoutApproval (compound)\n            layoutApprover (string)\n            layoutApprovalDate (int)\n            layoutApprovalState (enum)\n      Pattern sceneAndShotAttrs\n        PatternFactory xmlPatternFactory:\n        File: \"attrPatterns/sceneAndShotAttrs.xml\"\n        Attribute Count: 4\n        Attribute Tree:\n          sceneId (int)\n          sceneOwner (string)\n          shotId (int)\n          shotOwner (string)\n    // Return: [\"approvalAttrs\", \"sceneAndShotAttrs\"] //", 
    "listCameras": "    \n    \n    import pymel.core as pm\n    \n    # List all cameras\n    pm.listCameras()\n    # Result: [u'front', u'persp', u'side', u'top'] #\n    \n    # List all persp cameras\n    perspCameras = pm.listCameras( p=True )", 
    "listConnections": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( ch=True, n='BALL' )\n    # Result: [nt.Transform(u'BALL'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.setKeyframe()\n    # Result: 10 #\n    # List all connections to BALL\n    list = pm.listConnections('BALL')\n    # List only incoming connections from BALL.tx\n    pm.listConnections( 'BALL.tx', d=False, s=True )\n    # Result: [nt.AnimCurveTL(u'BALL_translateX')] #\n    # List connections from BALL to nodes of type 'transform'\n    pm.listConnections( t='transform' )\n    # Result: [] #\n    # List connections on BALL, ignoring unit conversion nodes\n    pm.listConnections( 'BALL', scn=True )\n    # Result: [nt.AnimCurveTU(u'BALL_visibility'), nt.AnimCurveTL(u'BALL_translateX'), nt.AnimCurveTL(u'BALL_translateY'), nt.AnimCurveTL(u'BALL_translateZ'), nt.AnimCurveTA(u'BALL_rotateX'), nt.AnimCurveTA(u'BALL_rotateY'), nt.AnimCurveTA(u'BALL_rotateZ'), nt.AnimCurveTU(u'BALL_scaleX'), nt.AnimCurveTU(u'BALL_scaleY'), nt.AnimCurveTU(u'BALL_scaleZ')] #", 
    "listDeviceAttachments": "    \n    \n    import pymel.core as pm\n    \n    pm.listDeviceAttachments()# List all attachments\n    # Result: [u'\\n', u'', u'\\tsetInputDeviceMapping -d \"virtualClock\" -ax \"hours\" -s 1 -o 0 -a ;\\n\\tsetInputDeviceMapping -d \"virtualClock\" -ax \"minutes\" -s 1 -o 0 -a ;\\n\\tsetInputDeviceMapping -d \"virtualClock\" -ax \"seconds\" -s 1 -o 0 -a ;\\n'] #\n    \n    # List attachments on the spaceball that are clutched on Button1\n    pm.listDeviceAttachments( d='spaceball', c='Button1' )\n    \n    # write out attachments for the spaceball device, since there is\n    # no file name specified, attachments will be written out to\n    # spaceball.mel\n    pm.listDeviceAttachments( d='spaceball', w=True )\n    \n    # write out attachments for all devices, since there is not file\n    # name specified, attachments will be written out to devices.mel\n    pm.listDeviceAttachments( w=True )", 
    "listHistory": "    \n    \n    import pymel.core as pm\n    \n    pm.curve( d=3, p=[(-3, 0, 0),(-1, 0, 6),(6, 0, 8),(8, 0, 2)], k=[0,0,0,1,1,1], n=\"snake\" )\n    # Result: nt.Transform(u'snake') #\n    pm.instance( n=\"rattler\" )\n    # Result: [nt.Transform(u'rattler')] #\n    pm.revolve( 'rattler', ch=True, n=\"charmer\" )\n    # Result: [nt.Transform(u'charmer'), nt.Revolve(u'revolve1')] #\n    pm.revolve( 'snake', ch=True, n=\"medusa\" )\n    # Result: [nt.Transform(u'medusa'), nt.Revolve(u'revolve2')] #\n    \n    pm.listHistory()\n    # Result: [nt.NurbsSurface(u'medusaShape'), nt.Revolve(u'revolve2'), nt.NurbsCurve(u'snake|snakeShape')] #\n    \n    pm.listHistory( 'charmer' )\n    # Result: [nt.NurbsSurface(u'charmerShape'), nt.Revolve(u'revolve1'), nt.NurbsCurve(u'rattler|snakeShape')] #\n    \n    pm.listHistory( 'medusa', lv=1 )\n    # Result: [nt.NurbsSurface(u'medusaShape'), nt.Revolve(u'revolve2')] #\n    \n    pm.listHistory( 'medusa', future=True )\n    # Result: [nt.NurbsSurface(u'medusaShape'), nt.ShadingEngine(u'initialShadingGroup')] #\n    \n    # If you just list the curve's future you get both directions\n    pm.listHistory( 'curveShape1', future=True )\n    [u'snake|curveShape1', u'revolve2', u'medusaShape', u'revolve1', u'charmerShape']\n    \n    # To follow only one history you'll need to follow the path you\n    # want first, then add the node you started at if so desired since\n    # it will not be included (here snake|curveShape1 won't list).\n    \n    # List the future of the first curve\n    hist = pm.listConnections('curveShape1.ws[0]',c=1)\n    pm.listHistory( hist[1], future=True )\n    [u'revolve2', u'medusaShape']\n    \n    # List the future of the second curve\n    hist = pm.listConnections('curveShape1.ws[1]',c=1)\n    pm.listHistory( hist[1], future=True )\n    [u'revolve1', u'charmerShape']\n    \n    pm.listHistory( leaf=0 )\n    [u'medusa']", 
    "listInputDeviceAxes": "    \n    \n    import pymel.core as pm\n    \n    # Returns a list of the axes of the spaceball.\n    pm.listInputDeviceAxes( 'spaceball' )", 
    "listInputDeviceButtons": "    \n    \n    import pymel.core as pm\n    \n    # Returns a list of the buttons of the spaceball.\n    pm.listInputDeviceButtons( 'spaceball' )", 
    "listInputDevices": "    \n    \n    import pymel.core as pm\n    \n    # Returns a list of devices.\n    pm.listInputDevices()\n    # Result: [u'melvin', u'virtualClock'] #", 
    "listNodeTypes": "    \n    \n    import pymel.core as pm\n    \n    # List all shader types in the system\n    pm.listNodeTypes( 'shader' )\n    # Result: [u'anisotropic', u'blinn', u'builtin_bsdf_architectural', u'builtin_bsdf_architectural_comp', u'builtin_bsdf_ashikhmin', u'builtin_bsdf_carpaint', u'builtin_bsdf_lambert', u'builtin_bsdf_mirror', u'builtin_bsdf_phong', u'cMuscleShader', u'dgs_material', u'dielectric_material', u'displacementShader', u'envFog', u'fluidShape', u'fluidTexture2D', u'fluidTexture3D', u'hairTubeShader', u'lambert', u'layeredShader', u'lightFog', u'materialFacade', u'mi_car_paint_phen', u'mi_car_paint_phen_x', u'mi_car_paint_phen_x_passes', u'mi_metallic_paint', u'mi_metallic_paint_x', u'mi_metallic_paint_x_passes', u'mia_material', u'mia_material_x', u'mia_material_x_passes', u'mib_glossy_reflection', u'mib_glossy_refraction', u'mib_illum_blinn', u'mib_illum_cooktorr', u'mib_illum_hair', u'mib_illum_lambert', u'mib_illum_phong', u'mib_illum_ward', u'mib_illum_ward_deriv', u'mila_5layers', u'mila_adapter', u'mila_diffuse', u'mila_emission', u'mila_fastsss', u'mila_layers', u'mila_material', u'mila_material_std', u'mila_reflection', u'mila_refraction', u'mila_translucency', u'mila_transparency', u'misss_call_shader', u'misss_fast_shader', u'misss_fast_shader2', u'misss_fast_shader2_x', u'misss_fast_shader_x', u'misss_fast_shader_x_passes', u'misss_fast_simple_maya', u'misss_fast_skin_maya', u'misss_mia_skin2_surface_phen', u'misss_physical', u'misss_set_normal', u'misss_skin_specular', u'oceanShader', u'particleCloud', u'path_material', u'phong', u'phongE', u'rampShader', u'shadingMap', u'surfaceShader', u'transmat', u'useBackground', u'volumeFog', u'volumeShader'] #\n    \n    # List all 2D textures that are also shaders\n    pm.listNodeTypes( 'texture/2D:shader' )\n    # Result: [u'fluidTexture2D'] #\n    \n    # List all volume shading nodes that are neither utility nodes nor particle nodes\n    pm.listNodeTypes( 'shader/volume', ex='shader/volume/utility:shader/volume/particle' )\n    # Result: [u'envFog', u'lightFog', u'volumeFog'] #", 
    "listRelatives": "    \n    \n    import pymel.core as pm\n    \n    # create an object and an instance for queries\n    pm.sphere( n='nexus' )\n    # Result: [nt.Transform(u'nexus'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.instance( n='ball' )\n    # Result: [nt.Transform(u'ball')] #\n    \n    # List the name of the shape below the transform node.\n    shapes = pm.listRelatives('nexus')\n    \n    # list all parents of shape\n    # (The result of the command is shown)\n    pm.listRelatives( shapes[0], allParents=True )\n    # Result: [nt.Transform(u'nexus'), nt.Transform(u'ball')] #", 
    "listSets": "    \n    \n    import pymel.core as pm\n    \n    # Get a list of all the sets which `nurbsSphere1` belongs to:\n    pm.listSets( object='nurbsSphere1' )\n    \n    # Get a list of all the deformer sets in the scene:\n    pm.listSets( type=2 )\n    \n    # Get a list of all the rendering sets which `coneShape1` belongs to:\n    pm.listSets( type=1, object='coneShape1' )", 
    "loadFluid": "    \n    \n    import pymel.core as pm\n    \n    # Load the initial state cache into the fluid\n    pm.loadFluid( ic=True )", 
    "loadModule": "    \n    \n    import pymel.core as pm\n    \n    pm.loadModule(scan=True)\n    # Result: [] #\n    pm.loadModule(load='myModuleDef')\n    # Result: [] #\n    pm.loadModule(allModules=True)\n    # Result: [] #", 
    "loadPlugin": "    \n    \n    import pymel.core as pm\n    \n    # Load the plug-in named \"newNode\" into Maya.\n    #\n    pm.loadPlugin( 'newNode.py' )\n    \n    # Load all the plug-ins found in all the directories that are\n    # included in MAYA_PLUG_IN_PATH.\n    #\n    pm.loadPlugin( allPlugins=True )", 
    "loadPrefObjects": "    \n    \n    import pymel.core as pm\n    \n    pm.loadPrefObjects()\n    # Result: True #", 
    "loadUI": "    \n    \n    import pymel.core as pm\n    \n    # Note: mydialog.ui must already exist\n    dialog1 = pm.loadUI(f='/users/username/mydialog.ui')\n    pm.showWindow(dialog1)\n    \n    # Load from a string\n    dialogString = \\\n    r\"\"\"\"?xml version=\"1.0\" encoding=\"UTF-8\"?\"\n    \"ui version=\"4.0\"\"\n     \"class\"Dialog\"/class\"\n     \"widget class=\"QDialog\" name=\"Dialog\"\"\n      \"layout class=\"QVBoxLayout\" name=\"verticalLayout\"\"\n       \"item\"\n        \"widget class=\"QLabel\" name=\"mylabel\"\"\n         \"property name=\"text\"\"\n          \"string\"Test Dialog\"/string\"\n         \"/property\"\n        \"/widget\"\n        \"/item\"\n        \"item\"\n        \"widget class=\"QPushButton\" name=\"mybutton\"\"\n         \"property name=\"text\"\"\n          \"string\"Press Me\"/string\"\n         \"/property\"\n         \"property name=\"+command\"\"\n          \"string\"\"import time;pm.text('mylabel',e=True,label='CPU Time: '+repr(time.clock()))\"\"/string\"\n         \"/property\"\n        \"/widget\"\n       \"/item\"\n      \"/layout\"\n     \"/widget\"\n    \"/ui\"\n    \"\"\"\n    dialog2 = pm.loadUI(uiString=dialogString)\n    pm.showWindow(dialog2)", 
    "lockNode": "    \n    \n    import pymel.core as pm\n    \n    # create a sphere, lock it, then try to delete it.\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.lockNode( 'sphere1' )\n    pm.delete( 'sphere1' )\n    # Error: Cannot delete locked nodes.\n    # Unlock the sphere, then it can be deleted.\n    pm.lockNode( 'sphere1', lock=False )\n    pm.delete( 'sphere1' )", 
    "loft": "    \n    \n    import pymel.core as pm\n    \n    # A loft across two curves: curve1, curve2. Curve ranges\n    # have been enabled on the curves. The curves will be reversed\n    # internally if needed to avoid a bowtie looking surface.\n    pm.curve( d=3, p=( (-11, 0, 0), (-13, 0, -4), (-17, 0, -15), (-4.7, 0, -10), (1, 0, -8 ) ) )\n    # Result: nt.Transform(u'curve1') #\n    pm.curve( d=3, p=( (-2, 0, 5), (-2, 0, 3), (-2, 0, -1), (4, 0, 0), (7, 0, 0 ) ) )\n    # Result: nt.Transform(u'curve2') #\n    pm.loft( 'curve1', 'curve2', ch=True, rn=True, ar=True )\n    # Result: [nt.Transform(u'loftedSurface1'), nt.Loft(u'loft1')] #", 
    "lookThru": "    \n    \n    import pymel.core as pm\n    \n    pm.lookThru( 'cameraShape1', 'topView' )\n    \n    pm.lookThru( 'perspView', 'cameraShape1', nc=100, fc=200 )\n    \n    pm.lookThru( 'camera1' )\n    \n    pm.lookThru( 'nurbsSphere1', nc=0.001, fc=5000.0 )\n    \n    pm.lookThru( 'perspView', q=True )\n    \n    pm.lookThru( q=True )", 
    "ls": "    \n    \n    import pymel.core as pm\n    \n    # create some objects to operate on and select them all.\n    # Note that there are two objects named circle1;\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.group()\n    # Result: nt.Transform(u'group1') #\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'|circle1'), nt.MakeNurbCircle(u'makeNurbCircle2')] #\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.group()\n    # Result: nt.Transform(u'group2') #\n    pm.instance()\n    # Result: [nt.Transform(u'group3')] #\n    pm.select( ado=True )\n    \n    # list all objects\n    pm.ls()\n    # Result: [nt.Time(u'time1'), nt.SequenceManager(u'sequenceManager1'), nt.Partition(u'renderPartition'), nt.RenderGlobalsList(u'renderGlobalsList1'), nt.DefaultLightList(u'defaultLightList1'), nt.DefaultShaderList(u'defaultShaderList1'), nt.PostProcessList(u'postProcessList1'), nt.DefaultRenderUtilityList(u'defaultRenderUtilityList1'), nt.DefaultRenderingList(u'defaultRenderingList1'), nt.LightList(u'lightList1'), nt.DefaultTextureList(u'defaultTextureList1'), nt.Lambert(u'lambert1'), nt.ParticleCloud(u'particleCloud1'), nt.ShadingEngine(u'initialShadingGroup'), nt.ShadingEngine(u'initialParticleSE'), nt.MaterialInfo(u'initialMaterialInfo'), nt.ShaderGlow(u'shaderGlow1'), nt.Dof(u'dof1'), nt.RenderGlobals(u'defaultRenderGlobals'), nt.RenderQuality(u'defaultRenderQuality'), nt.Resolution(u'defaultResolution'), nt.ObjectSet(u'defaultLightSet'), nt.ObjectSet(u'defaultObjectSet'), nt.ViewColorManager(u'defaultViewColorManager'), nt.HardwareRenderGlobals(u'hardwareRenderGlobals'), nt.HardwareRenderingGlobals(u'hardwareRenderingGlobals'), nt.Partition(u'characterPartition'), nt.HwRenderGlobals(u'defaultHardwareRenderGlobals'), nt.IkSystem(u'ikSystem'), nt.HyperGraphInfo(u'hyperGraphInfo'), nt.HyperLayout(u'hyperGraphLayout'), nt.GlobalCacheControl(u'globalCacheControl'), nt.DynController(u'dynController1'), nt.StrokeGlobals(u'strokeGlobals'), nt.Transform(u'persp'), nt.Camera(u'perspShape'), nt.Transform(u'top'), nt.Camera(u'topShape'), nt.Transform(u'front'), nt.Camera(u'frontShape'), nt.Transform(u'side'), nt.Camera(u'sideShape'), nt.LightLinker(u'lightLinker1'), nt.ObjectMultiFilter(u'CustomGPUCacheFilter'), nt.ObjectTypeFilter(u'objectTypeFilter74'), nt.ObjectMultiFilter(u'layersFilter'), nt.ObjectTypeFilter(u'objectTypeFilter75'), nt.ObjectMultiFilter(u'animLayersFilter'), nt.ObjectTypeFilter(u'objectTypeFilter76'), nt.ObjectMultiFilter(u'notAnimLayersFilter'), nt.ObjectTypeFilter(u'objectTypeFilter77'), nt.ObjectMultiFilter(u'defaultRenderLayerFilter'), nt.ObjectNameFilter(u'objectNameFilter4'), nt.ObjectMultiFilter(u'renderLayerFilter'), nt.ObjectTypeFilter(u'objectTypeFilter78'), nt.ObjectScriptFilter(u'objectScriptFilter10'), nt.ObjectMultiFilter(u'renderingSetsFilter'), nt.ObjectTypeFilter(u'objectTypeFilter79'), nt.ObjectMultiFilter(u'relationshipPanel1LeftAttrFilter'), nt.ObjectMultiFilter(u'relationshipPanel1RightAttrFilter'), nt.DisplayLayerManager(u'layerManager'), nt.DisplayLayer(u'defaultLayer'), nt.RenderLayerManager(u'renderLayerManager'), nt.RenderLayer(u'defaultRenderLayer'), nt.MakeNurbCircle(u'makeNurbCircle1'), nt.Transform(u'group1|circle1'), nt.NurbsCurve(u'group1|circle1|circle1Shape'), nt.Transform(u'group1'), nt.MakeNurbCircle(u'makeNurbCircle2'), nt.Transform(u'|circle1'), nt.NurbsCurve(u'|circle1|circle1Shape'), nt.MakeNurbSphere(u'makeNurbSphere1'), nt.Transform(u'group2|sphere1'), nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), nt.Transform(u'group2'), nt.Transform(u'group3')] #\n    \n    # List all selected objects\n    pm.ls( selection=True )\n    # Result: [nt.Transform(u'group1'), nt.Transform(u'|circle1'), nt.Transform(u'group2'), nt.Transform(u'group3')] #\n    \n    # List all hilited objects\n    pm.ls( hilite=True )\n    # Result: [] #\n    \n    # List last selected object\n    pm.ls( selection=True, tail=1 )\n    # Result: [nt.Transform(u'group3')] #\n    \n    # List all objects named \"sphere1\". Note that since sphere1 is\n    # instanced, the command below lists only the first instance.\n    pm.ls( 'sphere1' )\n    # Result: [nt.Transform(u'group2|sphere1')] #\n    \n    # To list all instances of sphere1, use the -ap/allPaths flag.\n    pm.ls( 'sphere1', ap=True )\n    # Result: [nt.Transform(u'group2|sphere1'), nt.Transform(u'group3|sphere1')] #\n    \n    # List all selected objects named \"group*\"\n    pm.ls( 'group*', sl=True )\n    # Result: [nt.Transform(u'group1'), nt.Transform(u'group2'), nt.Transform(u'group3')] #\n    \n    # List all geometry, lights and cameras in the DAG.\n    pm.ls( geometry=True, lights=True, cameras=True )\n    # Result: [nt.NurbsCurve(u'|circle1|circle1Shape'), nt.NurbsCurve(u'group1|circle1|circle1Shape'), nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), nt.Camera(u'frontShape'), nt.Camera(u'perspShape'), nt.Camera(u'sideShape'), nt.Camera(u'topShape')] #\n    \n    # List all shapes in the dag.\n    pm.ls( shapes=True )\n    # Result: [nt.NurbsCurve(u'|circle1|circle1Shape'), nt.NurbsCurve(u'group1|circle1|circle1Shape'), nt.Camera(u'frontShape'), nt.Camera(u'perspShape'), nt.Camera(u'sideShape'), nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), nt.Camera(u'topShape')] #\n    \n    # One thing to note is that it is better to always use the\n    # -l/long flag when listing nodes without any filter. This is\n    # because there may be two nodes with the same name (in this\n    # example, circle1). 'ls' will list the names of all the objects\n    # in the scene. Objects with the same name need a qualified\n    # path name which uniquely identifies the object. A command\n    # to select all objects such as \"select `ls`\" will fail because\n    # the object lookup can't resolve which \"circle1\" object is\n    # intended. To select all objects, you need the following:\n    pm.select(pm.ls(sl=True))\n    \n    # When trying to find a list of all objects of a specific\n    # type, one approach might be to list all objects and then\n    # use the nodeType command to then filter the list. As in:\n    allObjects = pm.ls(l=True)\n    for obj in allObjects:\n       if pm.nodeType(obj) == 'surfaceShape':\n         print obj\n    \n    # The problem with this is that 'nodeType' returns the\n    # most derived type of the node. In this example, \"surfaceShape\"\n    # is a base type for nurbsSurface so nothing will be printed.\n    # To do this properly, the -typ/type flag should be used\n    # to list objects of a specific type as in:\n    allObjects = pm.ls(type='surfaceShape')\n    for obj in allObjects:\n        print obj\n    \n    # List all geometry shapes and their types\n    pm.ls( type='geometryShape', showType=True )\n    # Result: [nt.NurbsCurve(u'|circle1|circle1Shape'), u'nurbsCurve', nt.NurbsCurve(u'group1|circle1|circle1Shape'), u'nurbsCurve', nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), u'nurbsSurface'] #\n    \n    # List all paths to all leaf nodes in the DAG\n    pm.ls( dag=True, lf=True, ap=True )\n    # Result: [nt.Camera(u'perspShape'), nt.Camera(u'topShape'), nt.Camera(u'frontShape'), nt.Camera(u'sideShape'), nt.NurbsCurve(u'group1|circle1|circle1Shape'), nt.NurbsCurve(u'|circle1|circle1Shape'), nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), nt.NurbsSurface(u'group3|sphere1|sphere1Shape')] #\n    \n    # List all nodes below the selected node\n    pm.ls( dag=True, ap=True, sl=True )\n    # Result: [nt.Transform(u'group1'), nt.Transform(u'group1|circle1'), nt.NurbsCurve(u'group1|circle1|circle1Shape'), nt.Transform(u'|circle1'), nt.NurbsCurve(u'|circle1|circle1Shape'), nt.Transform(u'group2'), nt.Transform(u'group2|sphere1'), nt.Transform(u'group3|sphere1'), nt.NurbsSurface(u'group2|sphere1|sphere1Shape'), nt.NurbsSurface(u'group3|sphere1|sphere1Shape'), nt.Transform(u'group3')] #\n    \n    # List all dag nodes that are read-only (i.e. referenced nodes)\n    pm.ls( dag=True, ro=True )\n    # Result: [] #\n    \n    # List all ghosting objects\n    pm.ls( ghost=True )\n    # Result: [] #\n    \n    # List reference nodes associated with specific files\n    pm.ls( references=True )\n    # Result: [] #\n    \n    # List all reference nodes, including unknown and shared reference nodes\n    pm.ls( type='reference' )\n    # Result: [] #\n    \n    \n    # Select some components and then get the list in both selected and numeric order\n    obj1 = pm.polySphere( sx=20, sy=20 )\n    pm.select( clear=True )\n    \n    pm.selectPref( trackSelectionOrder=1 )\n    \n    pm.select( obj1[0]+\".f[100]\" )\n    pm.select( (obj1[0]+\".f[50:55]\"), add=True )\n    pm.select( (obj1[0]+\".f[0]\"), add=True )\n    pm.select( (obj1[0]+\".f[56:60]\"), add=True )\n    \n    # regular -selection flag returns the components in compacted numeric order.\n    pm.ls( selection=True )\n    # Result: [MeshFace(u'pSphereShape1.f[0]'), MeshFace(u'pSphereShape1.f[50:60]'), MeshFace(u'pSphereShape1.f[100]')] #\n    \n    # -orderedSelection flag returns the components in the order that we selected them.\n    pm.ls( orderedSelection=True )\n    # Result: [MeshFace(u'pSphereShape1.f[100]'), MeshFace(u'pSphereShape1.f[50:55]'), MeshFace(u'pSphereShape1.f[0]'), MeshFace(u'pSphereShape1.f[56:60]')] #\n    \n    # turn off tracking when we are done\n    pm.selectPref( trackSelectionOrder=0 )\n    \n    # init some namespace\n    pm.namespace( add=\"A:B:C\" )\n    # Result: u'A:B:C' #\n    \n    # add object into namespace\n    pm.namespace( set=\":A:B\" )\n    # Result: u'A:B' #\n    pm.polySphere( name=\"obj1\" )\n    # Result: [nt.Transform(u'A:B:obj1'), nt.PolySphere(u'A:B:polySphere1')] #\n    pm.namespace( set=\":A:B:C\" )\n    # Result: u'A:B:C' #\n    pm.polySphere( name=\"obj1\" )\n    # Result: [nt.Transform(u'A:B:C:obj1'), nt.PolySphere(u'A:B:C:polySphere1')] #\n    pm.polySphere( name=\"obj2\" )\n    # Result: [nt.Transform(u'A:B:C:obj2'), nt.PolySphere(u'A:B:C:polySphere2')] #\n    \n    \n    # The current Namespace is \":A:B:C\" and relative mode is off\n    # List all objects and their namespace in the scene\n    # If the object is in the root namespace, then return root \":\"\n    # Note that the results shown below have been elided (...) for documentation purposes.\n    pm.ls( showNamespace=True )\n    [u'time1', u':', u'sequenceManager1', u':', u'renderPartition', u':', (...), u'A:B:obj1', u'A:B', u'A:B:C:obj1', u'A:B:C', u'A:B:C:obj2', u'A:B:C']\n    \n    pm.select( \":A:B:obj1\", r=True )\n    pm.select( \":A:B:C:obj2\", add=True)\n    \n    \n    # List namespace of all objects named \"obj1\"\n    pm.ls( \"obj1\", showNamespace=True, recursive=True )\n    [u'A:B:obj1', u'A:B', u'A:B:C:obj1', u'A:B:C']\n    \n    # List both name and namespace of each selected object\n    pm.ls( showNamespace=True, selection=True )\n    [u'A:B:obj1', u'A:B', u'A:B:C:obj2', u'A:B:C']\n    \n    # set current Namespace\n    pm.namespace( set=\":A:B\" )\n    \n    # enable relative mode\n    pm.namespae( relativeNames=True )\n    \n    # Now the current Namespace is \":A:B\" and relative mode is on\n    # Note that the name of the current namespace is \"\" in relative mode\n    # List both name and namespace of each selected objects\n    pm.ls( showNamespace=True, selection=True )\n    [u'obj1', u'', u'C:obj2', u'C']\n    \n    #make a new scene modify the transform of the camera perspective, play with the timeline and modified the camera's shape\n    pm.file(force=True, new=True)\n    pm.setAttr('persp.translateX', 10)\n    pm.currentTime(8)\n    pm.setAttr('perspShape.horizontalFilmAperture', 16)\n    \n    #list all modified objects of type camera and type time\n    allObjects=pm.ls(type=['camera','time'], modified=True)\n    print allObjects\n    # Result: [u'perspShape', u'time1']\n    \n    pm.ls(modified=True)\n    # Result: [u'persp', u'perspShape', u'time1']\n    \n    pm.ls(modified=True, excludeType='camera')\n    # Result: [u'persp', u'time1']", 
    "lsThroughFilter": "    \n    \n    import pymel.core as pm\n    \n    # Return all objects in the model that are named bob.\n    # (See the command \"itemFilter\" for how to construct these filters.)\n    pm.lsThroughFilter( 'texturesNamedBobFilter' )\n    \n    # Return same objects as above, but sorted in reverse\n    # alphabetical order:\n    pm.lsThroughFilter( 'texturesNamedBobFilter', na=True, sort='byName', reverse=True )", 
    "lsUI": "    \n    \n    import pymel.core as pm\n    \n    #    List all windows.\n    #\n    pm.lsUI( windows=True )\n    # Result: [ui.Window('MayaWindow'), ui.Window('scriptEditorPanel1Window')] #\n    \n    #    List all panels and editors.\n    #\n    pm.lsUI( panels=True, editors=True )\n    # Result: [ui.ScriptedPanel('StereoPanel'), ui.Panel('blendShapePanel1'), ui.ScriptedPanel('clipEditorPanel1'), ui.ScriptedPanel('componentEditorPanel1'), ui.ScriptedPanel('createNodePanel1'), ui.ScriptedPanel('dopeSheetPanel1'), ui.ScriptedPanel('dynPaintScriptedPanel'), ui.ScriptedPanel('dynRelEdPanel1'), ui.ScriptedPanel('graphEditor1'), ui.ScriptedPanel('hyperGraphPanel1'), ui.ScriptedPanel('hyperShadePanel1'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel1'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel2'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel3'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel4'), ui.ScriptedPanel('nodeEditorPanel1'), ui.Panel('outlinerPanel1'), ui.ScriptedPanel('polyTexturePlacementPanel1'), ui.ScriptedPanel('referenceEditorPanel1'), ui.ScriptedPanel('relationshipPanel1'), ui.ScriptedPanel('renderView'), ui.ScriptedPanel('scriptEditorPanel1'), ui.ScriptedPanel('sequenceEditorPanel1'), ui.ScriptedPanel('visorPanel1'), ui.PyUI('StereoPanelEditor'), ui.Panel('blendShapePanel1'), ui.PyUI('clipEditorPanel1ClipEditor'), ui.PyUI('dopeSheetPanel1DopeSheetEd'), ui.PyUI('dopeSheetPanel1OutlineEd'), ui.PyUI('dynPaintScriptedPanelEd'), ui.PyUI('dynRelEdPanel1dynRelOutlinerEditor'), ui.PyUI('graphEditor1GraphEd'), ui.PyUI('graphEditor1OutlineEd'), ui.PyUI('graphEditor1OutlineEdSlave'), ui.PyUI('hyperGraphPanel1HyperGraphEd'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelPanel1'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelPanel2'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelPanel3'), ui.ModelEditor('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelPanel4'), ui.PyUI('myDeviceEditor'), ui.PyUI('nodeEditorPanel1NodeEditorEd'), ui.Panel('outlinerPanel1'), ui.PyUI('outlinerPanel1Slave'), ui.ScriptedPanel('polyTexturePlacementPanel1'), ui.PyUI('referenceEditorPanel1referenceEditorPanel'), ui.PyUI('relationshipPanel1LeftOutliner'), ui.PyUI('relationshipPanel1LeftOutlinerSlave'), ui.PyUI('relationshipPanel1RightOutliner'), ui.PyUI('relationshipPanel1RightOutlinerSlave'), ui.ScriptedPanel('renderView'), ui.PyUI('sequenceEditorPanel1SequenceEditor')] #\n    \n    #    Use the -typ/type flag to list all controls and control layouts.\n    #    Alternatively, you could use the -ctl/controls and -cl/controlLayouts\n    #    flags.\n    #\n    pm.lsUI( type=['control','controlLayout'] )\n    # Result: [ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton21'), ui.SymbolButton('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEforwardButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton18'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelFaceBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|PaintEffects'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton20'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|WireframeOnShadedBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputZField'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarGotoLineButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB1'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showSeperator'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showHistoryButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22'), ui.Separator('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|separator1'), ui.Button('MayaWindow|MainToolSettingsLayout|button2'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm|maskField'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton12'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|GridBtn'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|selectTool'), ui.PyUI('MayaWindow|toolBar4'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AENothingSelectedLayout|AEnothingSelectedText'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|General'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|HighQualityBtn'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|iprRenderButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout39|IsolateSelectedBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelPivotBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderGlobalsButton'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame3'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|comboSelectText'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|PanZoomBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton24'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelHandleBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|inputFieldCollapse'), ui.Button('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton9'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayJointsBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnHierComb'), ui.TabLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout'), ui.PaneLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|scaleTool'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout6|historyIcon'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton10'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|FieldChartBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|ShadowsBtn'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout4'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEselectButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierLeafButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|CameraAEBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|SafeTitleBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|PanZoomBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|GridBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton16'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|CameraBtn'), ui.Layout('MayaWindow|dockControl6'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerField'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|LightBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5|CommonReflectionOptionsMode_CB'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Rendering'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffInterpolation'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|fileCollapse'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|FilmGateBtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame0'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|WireframeOnShadedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|GreasePencilBtn'), ui.Separator('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|selectMaskSeparator'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|TexturedBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectionSetCollapse'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterSelectionIcon'), ui.Button('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5|button4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|MBBtn'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEcontrolFormLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton23'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton8'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|lockSelectionIcon'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout48|cmdScrollFieldExecuter4'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout7|futureIcon'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton11'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Surfaces'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Animation'), ui.IconTextButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|iconTextButton2'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeSeperator'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField2'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayJointsBtn'), ui.ProgressBar('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16|mainProgressBar'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|BookmarkBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputZLabel'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEhideByTypeButton'), ui.IconTextStaticLabel('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|iconTextStaticLabel1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|FieldChartBtn'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelParmPointBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout33|IsolateSelectedBtn'), ui.Button('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1|button3'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame3|panelContentButton4'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField4'), ui.FormLayout('MayaWindow|formLayout1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|SSAOBtn'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterField'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6|CommonReflectionOptionsSeam_FT'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|FilmGateBtn'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6|CommonReflectionOptionsSeam_SF'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout46'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|WireframeBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|ImageplaneBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelCurveBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|SafeTitleBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton3'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayJointsBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|ShadedBtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton29'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4|softSelectColorRamp'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|SafeTitleBtn'), ui.FloatField('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightField'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbManipsButton'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AENotesScrollField'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm|maskMenuIcon'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Curves'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|PanZoomBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Dynamics'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton17'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|MBBtn'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm'), ui.FrameLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|moveDispLayerDown'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|makeLiveButton'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightText'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEreloadButton'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierPickMenuLayout'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|optionsSeperator'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton17'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton7'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton13'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout48'), ui.PyUI('MayaWindow|toolBar5'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showInputButton'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearSeperator'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|GreasePencilBtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton35'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|HighQualityBtn'), ui.FloatField('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|floatField1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|sourceScriptButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton15'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|iconTextStaticLabel2'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout45|cmdScrollFieldExecuter1'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|ShadedBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapCollapse'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|SSAOBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|ShadowsBtn'), ui.CommandLine('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|commandLine1'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton22'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton5'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelDynamicBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton10'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|CameraAEBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAxis_RB'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout7'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|openSceneButton'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton4'), ui.Button('MayaWindow|MainToolSettingsLayout|button1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|saveScriptToShelfButton'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton20'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout6'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton10'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputXField'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_ST'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton15'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton25'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|constructionHistoryButton'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Hair'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton9'), ui.SymbolButton('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEbackwardButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton7'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton5'), ui.IconTextButton('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|iconTextButton1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton33'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame2'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton2'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout3'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Muscle'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|LightBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|meshCenterSnapButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton14'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|FilmGateBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEcloseButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|ShadedBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|FieldChartBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton6'), ui.FormLayout('MayaWindow|MainChannelBoxLayout'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AENothingSelectedLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|ShadowsBtn'), ui.GridLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|echoAllCommandsButton'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsSeam_CB'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|lassoTool'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton12'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|SafeActionBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputYField'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|GateMaskBtn'), ui.TabLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout'), ui.Separator('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|separator2'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Deformation'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|CameraAEBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayBtn'), ui.OptionMenu('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|menuMode'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout21|IsolateSelectedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton8'), ui.TextScrollList('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49|textScrollList1'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMasksCollapse'), ui.FloatSlider('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightSlider'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAbout_RB'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelHandleBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|saveScriptButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|MSAABtn'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchField'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabanimLayerEditor'), ui.Separator('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|separator3'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton4'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectColorRampSlider'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierPickMenuLayout|hierPickMenuIcon'), ui.Layout('MayaWindow|dockControl3'), ui.Layout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputXLabel'), ui.Layout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1|softSelectEnableChkBox'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayJointsBtn'), ui.FormLayout('MayaWindow|MainLayerEditorLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|GateMaskBtn'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton8'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbSpeedButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|attributeEditorButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton3'), ui.PaneLayout('MayaWindow|formLayout1|viewPanes'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField3'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton15'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|WireframeOnShadedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton7'), ui.GridLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton27'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyCollapse'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2|softSelectFalloffRamp'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|GridBtn'), ui.PaneLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout5'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36'), ui.Layout('MayaWindow|dockControl1'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Polygons'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow|AENotesTextLabel2'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerSelectionIcon'), ui.Layout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout39'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFloatRadius'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34'), ui.MenuBarLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|paintSelectTool'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|RenderLayerTabRenderLayerEditor'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelJointBtn'), ui.OptionMenu('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|LayerEditorBlendModeOptionMenu'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton19'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|WireframeOnShadedBtn'), ui.TabLayout('MayaWindow|MainToolSettingsLayout|tabLayout1'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEnodeTypeLabel'), ui.PyUI('MayaWindow|toolBar3'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton11'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|HighQualityBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|LightBtn'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2|softSelectFalloffText'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton16'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton30'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectEnableFalseColorChkBox'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11'), ui.FrameLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|FieldChartBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|SafeActionBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayActiveComponentsBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|CameraBtn'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout47|cmdScrollFieldExecuter3'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|TexturedBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|SafeActionBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderViewButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton14'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|GridBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|PanZoomBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objPickMenuLayout'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|frameLayout3|rangeControl1'), ui.PyUI('MayaWindow|toolBar6'), ui.SymbolCheckBox('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|symbolCheckBox1'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton11'), ui.SymbolCheckBox('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbHyperbolicButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|HighQualityBtn'), ui.Layout('MayaWindow|dockControl4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fluids'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayBtn'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout|AEtabLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|BookmarkBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|GreasePencilBtn'), ui.SymbolButton('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|symbolButton19'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton21'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton28'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|MSAABtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout27'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapViewPlaneButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapGridButton'), ui.PyUI('MayaWindow|toolBar2'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField5'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|lastNonSacredTool'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|LightBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|DOFBtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|channelLayerBoxButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|CameraBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayActiveComponentsBtn'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame1|panelContentButton2'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|ImageplaneBtn'), ui.FrameLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1|frameLayout1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchDownButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|DOFBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|TexturedBtn'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|layerEditorButton'), ui.FrameLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|frameLayout2'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton14'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton26'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|MBBtn'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|BookmarkBtn'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEcopyButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30'), ui.CmdScrollFieldReporter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|cmdScrollFieldReporter1'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelMiscBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|GreasePencilBtn'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|GateMaskBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|SafeActionBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB2'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearAllButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|SSAOBtn'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|moveDispLayerUp'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|DOFBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnObject'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|SSAOBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showLineNumbersButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_FS'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|ImageplaneBtn'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|mayaWebButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|symbolButton18'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|columnLayout1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton32'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|fileSeperator'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|MSAABtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|NCloth'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelRenderBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fur'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Bullet'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapCurveButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout33'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|moveTool'), ui.Separator('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|separator4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayActiveComponentsBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchDownUp'), ui.Layout('MayaWindow|dockControl5'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|MBBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayActiveComponentsBtn'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton1'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|modelingToolkitButton'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout2'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|ImageplaneBtn'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|emptyDispLayer'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayBtn'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objPickMenuLayout|objPickMenuIcon'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectModeCollapse'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|BookmarkBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|CameraAEBtn'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49|textField1'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton6'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|CameraBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelDeformBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton17'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton5'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|ShadedBtn'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout'), ui.GridLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout|LayerEditorDisplayLayerLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|DOFBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|ShadowsBtn'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout46|cmdScrollFieldExecuter2'), ui.NameField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerNameField'), ui.NameField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterNameField'), ui.NameField('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEnodeNameField'), ui.Layout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton4'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1|frameLayout1|mainChannelBox'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputYLabel'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout27|IsolateSelectedBtn'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEfocusButton'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton36'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelSurfaceBtn'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierTemplateButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapPointButton'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton12'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton34'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffMode'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|newSceneButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeAllButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeButton'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3'), ui.PyUI('MayaWindow|toolBar1'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4|softSelectColorText'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|selectedDispLayer'), ui.PyUI('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|frameLayout2|timeControl1'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compPickMenuLayout|compPickMenuIcon'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEpresetButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|saveSceneButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|highlightSelectIcon'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedPaintSelectionChkBox'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout21'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|statusLineTextualInputField'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|statusFieldButton'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelLineBtn'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout45'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|MSAABtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton31'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|rotateTool'), ui.FormLayout('MayaWindow|MainToolSettingsLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton19'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame0|panelContentButton1'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout47'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEshowAllButton'), ui.PyUI('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16|helpLine1'), ui.Layout('MayaWindow|dockControl2'), ui.PyUI('MayaWindow|toolBar7'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectFalloffPresetsText'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|toolSettingsButton'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compPickMenuLayout'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|searchSeperator'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|SafeTitleBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Toon'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame2|panelContentButton3'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton2'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow|AENotesTextLabel'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton9'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelPointBtn'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton16'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton3'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearHistoryButton'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton1'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabMoveUpButton'), ui.PaneLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedSelectionChkBox'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelMiscBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnComponent'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelHullBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderCollapse'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarGotoField'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout0'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton18'), ui.FrameLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showBothButton'), ui.PyUI('MayaWindow|MainToolSettingsLayout|text1'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton6'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabMoveDownButton'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearInputButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierRootButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|openScriptButton'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|FilmGateBtn'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|ResolutionGateBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|GateMaskBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|TexturedBtn'), ui.FrameLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|frameLayout3'), ui.ScrollLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout')] #\n    \n    #    Or...\n    #\n    pm.lsUI( controls=True, controlLayouts=True )\n    # Result: [ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton21'), ui.SymbolButton('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEforwardButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton18'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelFaceBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|PaintEffects'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton20'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|WireframeOnShadedBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputZField'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarGotoLineButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB1'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showSeperator'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showHistoryButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22'), ui.Separator('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|separator1'), ui.Button('MayaWindow|MainToolSettingsLayout|button2'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm|maskField'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton12'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|GridBtn'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|selectTool'), ui.PyUI('MayaWindow|toolBar4'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AENothingSelectedLayout|AEnothingSelectedText'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|General'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|HighQualityBtn'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|iprRenderButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout39|IsolateSelectedBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelPivotBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderGlobalsButton'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame3'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|comboSelectText'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|PanZoomBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton24'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelHandleBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|inputFieldCollapse'), ui.Button('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton9'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayJointsBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnHierComb'), ui.TabLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout'), ui.PaneLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|scaleTool'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout6|historyIcon'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton10'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|FieldChartBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|ShadowsBtn'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout4'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEselectButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierLeafButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|CameraAEBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|SafeTitleBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|PanZoomBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|GridBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton16'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|CameraBtn'), ui.Layout('MayaWindow|dockControl6'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerField'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|LightBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5|CommonReflectionOptionsMode_CB'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Rendering'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffInterpolation'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|fileCollapse'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|FilmGateBtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame0'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|WireframeOnShadedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|GreasePencilBtn'), ui.Separator('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|selectMaskSeparator'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|TexturedBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectionSetCollapse'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterSelectionIcon'), ui.Button('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5|button4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|MBBtn'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEcontrolFormLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton23'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton8'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|lockSelectionIcon'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout48|cmdScrollFieldExecuter4'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout7|futureIcon'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton11'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Surfaces'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Animation'), ui.IconTextButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|iconTextButton2'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeSeperator'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField2'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayJointsBtn'), ui.ProgressBar('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16|mainProgressBar'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|BookmarkBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputZLabel'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEhideByTypeButton'), ui.IconTextStaticLabel('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|iconTextStaticLabel1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|FieldChartBtn'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelParmPointBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout33|IsolateSelectedBtn'), ui.Button('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1|button3'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame3|panelContentButton4'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField4'), ui.FormLayout('MayaWindow|formLayout1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|SSAOBtn'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterField'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6|CommonReflectionOptionsSeam_FT'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|FilmGateBtn'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6|CommonReflectionOptionsSeam_SF'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout46'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|WireframeBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|ImageplaneBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelCurveBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|SafeTitleBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton3'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayJointsBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|ShadedBtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton29'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4|softSelectColorRamp'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|SafeTitleBtn'), ui.FloatField('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightField'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbManipsButton'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AENotesScrollField'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm|maskMenuIcon'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Curves'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|PanZoomBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Dynamics'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton17'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|MBBtn'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm'), ui.FrameLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|moveDispLayerDown'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|makeLiveButton'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightText'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEreloadButton'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierPickMenuLayout'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|optionsSeperator'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton17'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton7'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton13'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout48'), ui.PyUI('MayaWindow|toolBar5'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showInputButton'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearSeperator'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|GreasePencilBtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton35'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|HighQualityBtn'), ui.FloatField('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|floatField1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|sourceScriptButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton15'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|iconTextStaticLabel2'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout45|cmdScrollFieldExecuter1'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|ShadedBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapCollapse'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|SSAOBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|ShadowsBtn'), ui.CommandLine('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|commandLine1'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton22'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton5'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelDynamicBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton10'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|CameraAEBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAxis_RB'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout7'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|openSceneButton'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton4'), ui.Button('MayaWindow|MainToolSettingsLayout|button1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|saveScriptToShelfButton'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton20'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout6'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton10'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputXField'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_ST'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton15'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton25'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|constructionHistoryButton'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Hair'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton9'), ui.SymbolButton('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEbackwardButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton7'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton5'), ui.IconTextButton('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|iconTextButton1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton33'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame2'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton2'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout3'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Muscle'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|LightBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|meshCenterSnapButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton14'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|FilmGateBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEcloseButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|ShadedBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|FieldChartBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton6'), ui.FormLayout('MayaWindow|MainChannelBoxLayout'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AENothingSelectedLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|ShadowsBtn'), ui.GridLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|echoAllCommandsButton'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsSeam_CB'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|lassoTool'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton12'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|SafeActionBtn'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputYField'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|GateMaskBtn'), ui.TabLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout'), ui.Separator('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15|separator2'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Deformation'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|CameraAEBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayBtn'), ui.OptionMenu('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|menuMode'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout21|IsolateSelectedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton8'), ui.TextScrollList('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49|textScrollList1'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMasksCollapse'), ui.FloatSlider('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabWeightSlider'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAbout_RB'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelHandleBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|saveScriptButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|MSAABtn'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchField'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabanimLayerEditor'), ui.Separator('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|separator3'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton4'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectColorRampSlider'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierPickMenuLayout|hierPickMenuIcon'), ui.Layout('MayaWindow|dockControl3'), ui.Layout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputXLabel'), ui.Layout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1|softSelectEnableChkBox'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayJointsBtn'), ui.FormLayout('MayaWindow|MainLayerEditorLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|GateMaskBtn'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton8'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbSpeedButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|attributeEditorButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton3'), ui.PaneLayout('MayaWindow|formLayout1|viewPanes'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField3'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton15'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|WireframeOnShadedBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|iconTextButton7'), ui.GridLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton27'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyCollapse'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2|softSelectFalloffRamp'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|GridBtn'), ui.PaneLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout5'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36'), ui.Layout('MayaWindow|dockControl1'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Polygons'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow|AENotesTextLabel2'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerSelectionIcon'), ui.Layout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout39'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFloatRadius'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34'), ui.MenuBarLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|paintSelectTool'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|RenderLayerTabRenderLayerEditor'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelJointBtn'), ui.OptionMenu('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|LayerEditorBlendModeOptionMenu'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton19'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|WireframeOnShadedBtn'), ui.TabLayout('MayaWindow|MainToolSettingsLayout|tabLayout1'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEnodeTypeLabel'), ui.PyUI('MayaWindow|toolBar3'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton11'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|HighQualityBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|LightBtn'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2|softSelectFalloffText'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton16'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton30'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectEnableFalseColorChkBox'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11'), ui.FrameLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|FieldChartBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|SafeActionBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34|XRayActiveComponentsBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|CameraBtn'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout47|cmdScrollFieldExecuter3'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|TexturedBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|SafeActionBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderViewButton'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton14'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|GridBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|PanZoomBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objPickMenuLayout'), ui.PyUI('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|frameLayout3|rangeControl1'), ui.PyUI('MayaWindow|toolBar6'), ui.SymbolCheckBox('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|symbolCheckBox1'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|iconTextButton11'), ui.SymbolCheckBox('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm|cbHyperbolicButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|HighQualityBtn'), ui.Layout('MayaWindow|dockControl4'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fluids'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayBtn'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout|AEtabLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|BookmarkBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|GreasePencilBtn'), ui.SymbolButton('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13|symbolButton19'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton21'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton28'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|MSAABtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout27'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapViewPlaneButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapGridButton'), ui.PyUI('MayaWindow|toolBar2'), ui.FloatField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|floatField5'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|lastNonSacredTool'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|LightBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|DOFBtn'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame1'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|channelLayerBoxButton'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|CameraBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28|XRayActiveComponentsBtn'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame1|panelContentButton2'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|ImageplaneBtn'), ui.FrameLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1|frameLayout1'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchDownButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|DOFBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|TexturedBtn'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|layerEditorButton'), ui.FrameLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|frameLayout2'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton14'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|iconTextButton26'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|MBBtn'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|BookmarkBtn'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout|AEcopyButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30'), ui.CmdScrollFieldReporter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|cmdScrollFieldReporter1'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelMiscBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|GreasePencilBtn'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|GateMaskBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|SafeActionBtn'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB2'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearAllButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|SSAOBtn'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|moveDispLayerUp'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38|DOFBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnObject'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|SSAOBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showLineNumbersButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_FS'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23|ImageplaneBtn'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|mayaWebButton'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25'), ui.SymbolButton('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|symbolButton18'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|columnLayout1'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton32'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|fileSeperator'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20|MSAABtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|NCloth'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelRenderBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fur'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Bullet'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapCurveButton'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout33'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|moveTool'), ui.Separator('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|separator4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayActiveComponentsBtn'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarSearchDownUp'), ui.Layout('MayaWindow|dockControl5'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31|WireframeBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32|MBBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40|XRayActiveComponentsBtn'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton1'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|modelingToolkitButton'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout2'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|ImageplaneBtn'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|emptyDispLayer'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22|XRayBtn'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objPickMenuLayout|objPickMenuIcon'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectModeCollapse'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29|BookmarkBtn'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35|CameraAEBtn'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49|textField1'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton6'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17|CameraBtn'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelDeformBtn'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton17'), ui.ShelfButton('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE|shelfButton5'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|ShadedBtn'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout'), ui.GridLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout|LayerEditorDisplayLayerLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|DOFBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37|ShadowsBtn'), ui.CmdScrollFieldExecuter('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout46|cmdScrollFieldExecuter2'), ui.NameField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12|animLayerNameField'), ui.NameField('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11|characterNameField'), ui.NameField('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEnodeNameField'), ui.Layout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton4'), ui.PyUI('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1|frameLayout1|mainChannelBox'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|numericalInputYLabel'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout27|IsolateSelectedBtn'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEfocusButton'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton36'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objSelSurfaceBtn'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierTemplateButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons|snapPointButton'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton12'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton34'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffMode'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|newSceneButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeAllButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|executeButton'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3'), ui.PyUI('MayaWindow|toolBar1'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4|softSelectColorText'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|selectedDispLayer'), ui.PyUI('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|frameLayout2|timeControl1'), ui.IconTextStaticLabel('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compPickMenuLayout|compPickMenuIcon'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEpresetButton'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24|ResolutionGateBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|saveSceneButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|highlightSelectIcon'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedPaintSelectionChkBox'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout21'), ui.PyUI('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|statusLineTextualInputField'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|statusFieldButton'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelLineBtn'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout45'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26|MSAABtn'), ui.IconTextButton('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid|iconTextButton31'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26'), ui.ToolButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|rotateTool'), ui.FormLayout('MayaWindow|MainToolSettingsLayout'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton19'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame0|panelContentButton1'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout47'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10'), ui.Button('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout|AEshowAllButton'), ui.PyUI('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16|helpLine1'), ui.Layout('MayaWindow|dockControl2'), ui.PyUI('MayaWindow|toolBar7'), ui.PyUI('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectFalloffPresetsText'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8|toolSettingsButton'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compPickMenuLayout'), ui.Separator('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|searchSeperator'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|SafeTitleBtn'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Toon'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE'), ui.IconTextStaticLabel('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame2|panelContentButton3'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton2'), ui.PyUI('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow|AENotesTextLabel'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton9'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelPointBtn'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm'), ui.SymbolButton('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1|symbolButton16'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton3'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearHistoryButton'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout|symbolButton1'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabMoveUpButton'), ui.PaneLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedSelectionChkBox'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelMiscBtn'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm|selectBtnComponent'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compSelHullBtn'), ui.IconTextButton('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|renderCollapse'), ui.PyUI('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|scriptEditorToolbarGotoField'), ui.IconTextButton('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|quickLayout0'), ui.IconTextButton('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|iconTextButton18'), ui.FrameLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|showBothButton'), ui.PyUI('MayaWindow|MainToolSettingsLayout|text1'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|symbolButton6'), ui.SymbolButton('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4|AnimLayerTabMoveDownButton'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|clearInputButton'), ui.IconTextCheckBox('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierRootButton'), ui.IconTextButton('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7|openScriptButton'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36|FilmGateBtn'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30|ResolutionGateBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18|GateMaskBtn'), ui.IconTextCheckBox('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19|TexturedBtn'), ui.FrameLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|frameLayout3'), ui.ScrollLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|presetForm'), ui.FrameLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1|frameLayout1'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Dynamics'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout11'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout21'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons|compPickMenuLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|snapIcons'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelButtonForm'), ui.Layout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame|formLayout16'), ui.PaneLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2'), ui.FrameLayout('MayaWindow|toolBar3|MainHelpLineLayout|helpLineFrame'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout32'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout46'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout24'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Bullet'), ui.FrameLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectColorRampSlider'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab'), ui.TabLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout'), ui.Layout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout|AEaddOrEditNotesFlow'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab|formLayout4'), ui.FormLayout('MayaWindow|formLayout1'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|masksForm'), ui.FormLayout('MayaWindow|MainLayerEditorLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_FS'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEaddOrEditNotesLayout'), ui.FrameLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|frameLayout3'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|AnimLayerTab'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|formLayout8'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffInterpolation'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout4'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAxis_RB'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout23'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout6'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout34'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Deformation'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3|formLayout49'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Toon'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5'), ui.FrameLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|frameLayout2'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout31'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10|formLayout12'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Muscle'), ui.PaneLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectEnableFalseColorChkBox'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout35'), ui.TabLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout3'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm|menuBarLayout1'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEcontrolFormLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm'), ui.TabLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout1|softSelectEnableChkBox'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout26'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout|formLayout10'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|hierarchyIcons|hierPickMenuLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFalloffMode'), ui.FormLayout('MayaWindow|toolBar5|MainPlaybackRangeLayout'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3'), ui.Layout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8|formLayout42|flowLayout7'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|frameLayout4|formLayout15'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsSeam_CB'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|ChannelBoxForm'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|PaintEffects'), ui.ScrollLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Animation'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons|objPickMenuLayout'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout39'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout18'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|columnLayout1'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fluids'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout38'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|TURTLE'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AENothingSelectedLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout36'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2'), ui.TabLayout('MayaWindow|MainToolSettingsLayout|tabLayout1'), ui.FormLayout('MayaWindow|MainToolSettingsLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB2'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|NCloth'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout29'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Polygons'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEnodeNameHeaderLayout'), ui.Layout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout30'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|softSelectCtrlFloatRadius'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout47'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout5|CommonReflectionOptionsMode_CB'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Surfaces'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|objectMaskIcons'), ui.MenuBarLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab'), ui.FrameLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|frameLayout8'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsAbout_RB'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout25'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame0'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel3|modelPanel3|modelEditorIconBar|flowLayout5|formLayout33'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'), ui.FormLayout('MayaWindow|toolBar7|MainToolboxLayout'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2'), ui.FormLayout('MayaWindow|MainChannelBoxLayout'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|selectMaskForm|componentMaskIcons'), ui.GridLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout3|softSelectProfilePresetsGrid'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Rendering'), ui.PaneLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout28'), ui.FormLayout('MayaWindow|toolBar3|MainHelpLineLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|SelectionStyleRB1'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Hair'), ui.FormLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedPaintSelectionChkBox'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout6|columnLayout2|CameraBasedSelectionChkBox'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout22'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout37'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|CommonReflectionOptionsTol_ST'), ui.FrameLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout48'), ui.FormLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEselectAndCloseButtonLayout'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions|rowLayout2'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout19'), ui.FormLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame3'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel2|modelPanel2|modelEditorIconBar|flowLayout4|formLayout27'), ui.GridLayout('MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|gridLayout1'), ui.RowLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|CommonReflectionOptions_Fr|CommonReflectionOptions_CL|rowLayout6'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Fur'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|General'), ui.MenuBarLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44'), ui.ColumnLayout('MayaWindow|MainToolSettingsLayout|tabLayout1|selectTool|frameLayout7|softSelectCtrlOptions'), ui.FormLayout('MayaWindow|toolBar1|MainStatusLineLayout|formLayout5|flowLayout1|historyLayout|formLayout7'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout20'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41|formLayout43|paneLayout1|formLayout44|tabLayout2|formLayout45'), ui.PaneLayout('MayaWindow|formLayout1|viewPanes'), ui.GridLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|DisplayLayerTab|formLayout3|DisplayLayerScrollLayout|LayerEditorDisplayLayerLayout'), ui.Layout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel4|modelPanel4|modelEditorIconBar|flowLayout6|formLayout40'), ui.FormLayout('MayaWindow|formLayout1|viewPanes|modelPanel1|modelPanel1|modelEditorIconBar|flowLayout3|formLayout17'), ui.ShelfLayout('MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Curves'), ui.FrameLayout('MayaWindow|toolBar7|MainToolboxLayout|frameLayout5|flowLayout2|ToolboxConfigurationForm|ToolboxContentFrame2'), ui.FormLayout('MayaWindow|MainChannelsLayersLayout|ChannelsLayersPaneLayout|LayerEditorForm|DisplayLayerUITabLayout|RenderLayerTab|RenderLayerTabRenderLayerFormLayout'), ui.FormLayout('scriptEditorPanel1Window|TearOffPane|scriptEditorPanel1|formLayout41'), ui.TabLayout('MayaWindow|MainAttributeEditorLayout|formLayout2|AEmenuBarLayout|AErootLayout|AEStackLayout|AErootLayoutPane|AEbaseFormLayout|AEheaderLayout|AEtabLayout'), ui.FormLayout('MayaWindow|toolBar4|MainCommandLineLayout|formLayout13')] #", 
    "makeIdentity": "    \n    \n    import pymel.core as pm\n    \n    # Example 1:  Create a hierarchical object, for example a\n    # car. Scale the tires, translate the doors into place, rotate the\n    # steering wheel, then select the group node above the car, and type:\n    \n    pm.makeIdentity( apply=True )\n    # The car should not move.\n    \n    pm.move( 3, 0, 0 )\n    # The car should move exactly 3 units to (3, 0, 0), since\n    # the previous makeIdentity command set its translation to (0, 0, 0).\n    \n    pm.makeIdentity()\n    # The car should return to the same position as before the move.\n    \n    # Example 2:  Create a curve and translate, rotate and scale it.\n    # Then group it and translate, rotate and scale the group.\n    \n    pm.makeIdentity( 'group1', apply=True, translate=True )\n    # The curve will not move, but both the curve transform's and group\n    # transform's translation will be set to 0, 0, 0. The rotation and\n    # scale will remain the same.\n    \n    pm.makeIdentity( 'group1', apply=True, rotate=True )\n    # The curve will not move, but both the curve transform's and group\n    # transform's rotation will be set to 0, 0, 0. The translation and\n    # scale will remain the same.\n    \n    pm.makeIdentity( 'group1', apply=True, scale=True )\n    # The curve will not move, but both the curve transform's and group\n    # transform's scale will be set to 1, 1, 1. The translation and rotation\n    # will remain the same.\n    \n    pm.makeIdentity( 'group1', apply=True, translate=True, rotate=True )\n    # The curve will not move, but both the curve transform's and group\n    # transform's translation and rotation will be set to 0, 0, 0.\n    # The scale will remain the same.\n    \n    pm.makeIdentity( 'group1', apply=False, translate=True )\n    # The curve transform and group transform will have their translation\n    # set to 0, 0, 0. The curve will probably move, since the apply\n    # flag is false.\n    \n    pm.makeIdentity( apply=True, translate=True, rotate=True, scale=True )\n    # This is the same as \"makeIdentity -apply true\".\n    \n    # Example 3:  Create a polyCube and translate, rotate and scale it.\n    # And then freeze the normals.\n    \n    pm.polyCube()\n    pm.rotate( 30, 45, 0 )\n    pm.move( 2, 0, 2, r=True )\n    pm.scale( 2, 1, 2, r=True )\n    pm.makeIdentity( apply=True, t=1, r=1, s=1, n=2 )", 
    "makeLive": "    \n    \n    import pymel.core as pm\n    \n    pm.makeLive( 'surface1' )\n    pm.makeLive( none=True )", 
    "makePaintable": "    \n    \n    import pymel.core as pm\n    \n    # Make particle.mass paintable.\n    pm.makePaintable( 'particle', 'mass', attrType='doubleArray' )\n    # Make particle.goalPP paintable, with a ui name myGoalPP.\n    # Also make the goalPP0 attribute painted simultaneously\n    pm.makePaintable( 'particle', 'goalPP', attrType='doubleArray', ui='myGoalPP', altAttribute='goalPP0' )\n    # Make weightGeometryFilter.weights paintable. Define\n    # weightGeometryFilter as a deformer node.\n    pm.makePaintable( 'weightGeometryFilter', 'weights', attrType='multiFloat', sm='deformer' )\n    # Make all the attributes paintable on the artAttrPaintTest node.\n    pm.makePaintable( 'artAttrPaintTest', 'intArray', attrType='intArray' )\n    pm.makePaintable( 'artAttrPaintTest', 'dblArray', attrType='doubleArray' )\n    pm.makePaintable( 'artAttrPaintTest', 'vecArray', attrType='vectorArray' )\n    pm.makePaintable( 'artAttrPaintTest', 'intMulti', attrType='multiInteger' )\n    pm.makePaintable( 'artAttrPaintTest', 'fltMulti', attrType='multiFloat' )\n    pm.makePaintable( 'artAttrPaintTest', 'dblMulti', attrType='multiDouble' )\n    pm.makePaintable( 'artAttrPaintTest', 'flt3Multi', attrType='multiVector' )\n    pm.makePaintable( 'artAttrPaintTest', 'dbl3Multi', attrType='multiVector' )", 
    "makeSingleSurface": "    \n    \n    import pymel.core as pm\n    \n    # To make a single poly surface from a bunch of surfaces\n    pm.makeSingleSurface( 'nurbsPlane1', 'nurbsPlane2', 'nurbsPlane3' )", 
    "makebot": "    \n    \n    import pymel.core as pm\n    \n    pm.makebot( i='in_image', o='/usr/tmp/out_bot_file' )", 
    "manipMoveContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new move context:\n    pm.manipMoveContext()\n    # Result: u'manipMoveContext1' #\n    \n    # To query the mode of an existing context:\n    pm.manipMoveContext( 'manipMoveContext1', q=True, mode=True )\n    # Result: 2 #\n    \n    # To edit an existing context to come up with the X axis handle\n    # active by default:\n    pm.manipMoveContext( 'manipMoveContext1', e=True, ah=0 )\n    # Result: u'manipMoveContext1' #\n    \n    pm.spaceLocator( p=(0, 0, 0), name='locatorA' )\n    # Result: nt.Transform(u'locatorA') #\n    \n    pm.manipMoveContext( 'manipMoveContext1', e=True, m=2 ) # WorldSpace\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snapValue=0.4 )\n    # Result: u'manipMoveContext1' #\n    # Now, dragging any of the move handles will\n    # move the object in steps of 0.4 units.\n    \n    pm.move( 0.8, 0, 0, 'locatorA', a=True )\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snapValue=2 )\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snapRelative=False )\n    # Result: u'manipMoveContext1' #\n    # Now, dragging X-axis handle will\n    # move the object in steps of 2 units, and will\n    # place the object anywhere in (0,0,0) (2,0,0) (4,0,0) ...etc\n    # NOTE: If in objectSpace Mode, the snapRelative should be ON.\n    # Absolute discrete move is not supported in objectSpace mode.\n    \n    pm.move( 0.8, 0, 0, 'locatorA', a=True )\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snapValue=2 )\n    # Result: u'manipMoveContext1' #\n    pm.manipMoveContext( 'manipMoveContext1', e=True, snapRelative=True )\n    # Result: u'manipMoveContext1' #\n    # Now, dragging X-axis handle will\n    # move the object in steps of 2 units, and will\n    # place the object anywhere in (2.8,0,0) (4.8,0,0) (6.8,0,0) ...etc", 
    "manipMoveLimitsCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.manipMoveLimitsCtx()\n    # Result: u'manipMoveLimitsCtx1' #", 
    "manipOptions": "    \n    \n    import pymel.core as pm\n    \n    # Scales all handles by a 1.5 factor\n    pm.manipOptions( r=True, hs=1.5, ls=1.5 )\n    \n    # All manips are scaled by 2\n    pm.manipOptions( s=2 )", 
    "manipRotateContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new rotate context:\n    pm.manipRotateContext()\n    # Result: u'manipRotateContext2' #\n    \n    # To query the mode of an existing context:\n    pm.manipRotateContext( 'manipRotateContext1', q=True, mode=True )\n    # Result: 0 #\n    \n    # To edit an existing context to come up with the X axis\n    # handle active by default:\n    pm.manipRotateContext( 'manipRotateContext1', e=True, ah=0 )\n    # Result: u'manipRotateContext1' #", 
    "manipRotateLimitsCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.manipRotateLimitsCtx()\n    # Result: u'manipRotateLimitsCtx1' #", 
    "manipScaleContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new scale context:\n    pm.manipScaleContext()\n    # Result: u'manipScaleContext1' #\n    \n    # To query the active handle of an existing scale context:\n    pm.manipScaleContext( 'manipScaleContext1', q=True, ah=True )\n    # Result: 3 #\n    \n    # To edit an exiting scale context so that it comes up with the X axis\n    # handle active by default:\n    pm.manipScaleContext( 'manipScaleContext1', e=True, ah=0 )\n    # Result: u'manipScaleContext1' #", 
    "manipScaleLimitsCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.manipScaleLimitsCtx()\n    # Result: u'manipScaleLimitsCtx1' #", 
    "marker": "    \n    \n    import pymel.core as pm\n    \n    # Create a simple motion path animation:\n    \n    # create a path, e,g, a curve\n    path = pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    \n    # Create an object, e.g. a sphere\n    object = pm.sphere()\n    pm.scale( 0.5, 2.0, 0.2 )\n    \n    # animate the object using a motion path with follow on\n    pm.pathAnimation( object[0], f=1, stu=0, etu=30, c=path )\n    # Result: u'motionPath1' #\n    \n    # change the current time to be frame 20\n    pm.currentTime( 20, edit=True )\n    # Result: 20.0 #\n    \n    # Create a position marker on the path, at curve parameter value\n    # 0.75 and at current time:\n    pm.marker( path, u=0.75 )\n    # Result: [u'positionMarker3'] #\n    \n    # Create an orientation marker on the path, at time 15:\n    pm.marker( path, om=True, t=15 )\n    # Result: [u'orientationMarker1'] #\n    \n    # Create a position marker and an orientation marker on the path,\n    # at curve parameter value .35 and at time 10:\n    pm.marker( path, pm=True, om=True, t=10, u=0.35 )\n    # Result: [u'orientationMarker2', u'positionMarker4'] #", 
    "mateCtx": "", 
    "melInfo": "    \n    \n    import pymel.core as pm\n    \n    # Query the names of all the global MEL procedures currently defined.\n    #\n    procs = pm.melInfo()", 
    "memory": "    \n    \n    import pymel.core as pm\n    \n    pm.memory(freeMemory=True)\n    # Result: 0 #\n    \n    pm.memory(freeMemory=True megaByte=True)\n    521\n    \n    pm.memory(freeMemory=True megaByte=True asFloat=True)\n    521.33203125", 
    "menu": "    \n    \n    import pymel.core as pm\n    \n    pm.window( menuBar=True, width=200 )\n    # Result: ui.Window('window1') #\n    pm.menu( label='File', tearOff=True )\n    # Result: ui.Menu('window1|menu43') #\n    pm.menuItem( label='New' )\n    # Result: ui.CommandMenuItem('window1|menu43|menuItem465') #\n    pm.menuItem( label='Open' )\n    # Result: ui.CommandMenuItem('window1|menu43|menuItem466') #\n    pm.menuItem( label='Save' )\n    # Result: ui.CommandMenuItem('window1|menu43|menuItem467') #\n    pm.menuItem( divider=True )\n    # Result: ui.CommandMenuItem('window1|menu43|menuItem468') #\n    pm.menuItem( label='Quit' )\n    # Result: ui.CommandMenuItem('window1|menu43|menuItem469') #\n    pm.menu( label='Help', helpMenu=True )\n    # Result: ui.Menu('window1|menu44') #\n    pm.menuItem( 'Application...\"', label='\"About' )\n    # Result: ui.CommandMenuItem('window1|menu44|Application____') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout57') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout57|button50') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout57|button51') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout57|button52') #\n    pm.showWindow()", 
    "menuBarLayout": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with two menu bar layouts.\n    #\n    window = pm.window()\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout58') #\n    \n    #    Create first menu bar layout.\n    #\n    menuBarLayout = pm.menuBarLayout()\n    pm.menu( label='File' )\n    # Result: ui.Menu('window1|columnLayout58|menuBarLayout2|menu45') #\n    pm.menuItem( label='New' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout2|menu45|menuItem470') #\n    pm.menuItem( label='Open' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout2|menu45|menuItem471') #\n    pm.menuItem( label='Close' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout2|menu45|menuItem472') #\n    \n    pm.menu( label='Help', helpMenu=True )\n    # Result: ui.Menu('window1|columnLayout58|menuBarLayout2|menu46') #\n    pm.menuItem( label='About...' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout2|menu46|menuItem473') #\n    \n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout58|menuBarLayout2|columnLayout59') #\n    pm.button( label='Add Menu', command=('pm.menu(parent=\\\"' + menuBarLayout + '\\\"); pm.menuItem()') )\n    # Result: ui.Button('window1|columnLayout58|menuBarLayout2|columnLayout59|button53') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout58|menuBarLayout2' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout58' #\n    \n    pm.separator( height=10, style='none' )\n    # Result: ui.Separator('window1|columnLayout58|separator13') #\n    \n    #    Create a second menu bar layout.\n    #\n    pm.menuBarLayout()\n    # Result: ui.MenuBarLayout('window1|columnLayout58|menuBarLayout3') #\n    pm.menu( label='Edit' )\n    # Result: ui.Menu('window1|columnLayout58|menuBarLayout3|menu47') #\n    pm.menuItem( label='Cut' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout3|menu47|menuItem474') #\n    pm.menuItem( label='Copy' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout3|menu47|menuItem475') #\n    pm.menuItem( label='Paste' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout3|menu47|menuItem476') #\n    \n    pm.menu( label='View' )\n    # Result: ui.Menu('window1|columnLayout58|menuBarLayout3|menu48') #\n    pm.menuItem( label='Fonts...' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout3|menu48|menuItem477') #\n    pm.menuItem( label='Colors...' )\n    # Result: ui.CommandMenuItem('window1|columnLayout58|menuBarLayout3|menu48|menuItem478') #\n    \n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout58|menuBarLayout3|columnLayout60') #\n    pm.text( label='Add some controls here.' )\n    # Result: ui.Text('window1|columnLayout58|menuBarLayout3|columnLayout60|text4') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout58|menuBarLayout3' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout58' #\n    \n    pm.showWindow( window )", 
    "menuEditor": "    \n    \n    import pymel.core as pm\n    \n    # No example is provided as \"b\"menuEditor\"/b\" is not intended to be called\n    # independently. It is recommended that you use the Marking Menu editor\n    # to customize marking menus.", 
    "menuItem": "    \n    \n    import pymel.core as pm\n    \n    pm.window( menuBar=True, width=200 )\n    # Result: ui.Window('window1') #\n    pm.menu( label='Stuff' )\n    # Result: ui.Menu('window1|menu49') #\n    pm.menuItem( subMenu=True, label='Colors' )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem479') #\n    pm.menuItem( label='Blue' )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem479|menuItem480') #\n    pm.menuItem( label='Green' )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem479|menuItem481') #\n    pm.menuItem( label='Yellow' )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem479|menuItem482') #\n    pm.setParent( '..', menu=True )\n    # Result: u'window1|menu49' #\n    pm.menuItem( divider=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem483') #\n    pm.radioMenuItemCollection()\n    # Result: ui.RadioMenuItemCollection('window1|menu49|radioMenuItemCollection7') #\n    pm.menuItem( label='Yes', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem484') #\n    pm.menuItem( label='Maybe', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem485') #\n    pm.menuItem( label='No', radioButton=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem486') #\n    pm.menuItem( divider=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem487') #\n    pm.menuItem( label='Top', checkBox=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem488') #\n    pm.menuItem( label='Middle', checkBox=False )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem489') #\n    pm.menuItem( label='Bottom', checkBox=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem490') #\n    pm.menuItem( divider=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem491') #\n    pm.menuItem( label='Option' )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem492') #\n    pm.menuItem( optionBox=True )\n    # Result: ui.CommandMenuItem('window1|menu49|menuItem493') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout61') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout61|button54') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout61|button55') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout61|button56') #\n    pm.showWindow()", 
    "menuSet": "    \n    \n    import pymel.core as pm\n    \n    # creating a new menu set;\n    pm.menuSet( 'newMenuSetObjName', label='newMenuSet Label' )\n    # Result: u'newMenuSetObjName' #\n    \n    # using commands on a current menu set\n    # first find the menu set if you don't know the name of it\n    animMS = maya.mel.eval('findMenuSetFromLabel(\"Animation\")')\n    \n    # menu sets can be queried like normal commands\n    animMenus = pm.menuSet(animMS, query=True, menuArray=True)\n    \n    # but editing the set requires either setting the current menu set...\n    # (notice that the menu set comamnds following specify no specific menu set)\n    pm.menuSet( currentMenuSet=animMS )\n    # Result: u'animationMenuSet' #\n    pm.menuSet( removeMenu=animMenus[0] )\n    # Result: u'animationMenuSet' #\n    # : (other commands which pertain to the animation menu set)\n    \n    # .. or temporarily setting the menu set to work on (does not affect current menu set)\n    # (notice that every command following specifies the specific set to apply operations to)\n    polyMS = maya.mel.eval('findMenuSetFromLabel(\"Polygons\")')\n    polyMenus = pm.menuSet(polyMS, query=True, menuArray=True)\n    pm.menuSet( modelMS, removeMenu=polyMenus[0], insertMenu=(polyMenus[1], 0) )\n    \n    # .. where the following commands still affect the animation menu set\n    animMenus = pm.menuSet(query=True, menuArray=True)\n    \n    # if you need to find a specific menu...\n    deformMenu = maya.mel.eval( ('findMenuFromMenuSet(\\\"' + animMS + '\\\", \"Deform\")') )\n    \n    # moving a menu from one spot to another\n    # (ie. moving the Deform Menu to the front of the list)\n    pm.menuSet( moveMenu=(deformMenu, 0) )", 
    "menuSetPref": "    \n    \n    import pymel.core as pm\n    \n    # saving the current menuSets\n    pm.menuSetPref( saveAll=True )\n    \n    # loading to the current menuSets if they exist\n    if pm.menuSetPref(exists=True) :\n            pm.menuSetPref(loadAll=True)\n    \n    # in certain cases, you may wish to remove previous preferences before saving\n    pm.menuSetPref( removeAll=True )", 
    "meshIntersectTest": "", 
    "messageLine": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    form = pm.formLayout()\n    frame = pm.frameLayout(labelVisible=False)\n    pm.messageLine()\n    pm.formLayout( form, edit=True, attachNone=(frame, 'top'), attachForm=[(frame, 'left', 0), (frame, 'bottom', 0), (frame, 'right', 0)] )\n    pm.showWindow( window )", 
    "minimizeApp": "    \n    \n    import pymel.core as pm\n    \n    pm.minimizeApp()", 
    "mirrorJoint": "    \n    \n    import pymel.core as pm\n    \n    # Create a mirrored branch of the skeleton starting from the joint \"jointName\"\n    # about the yz-plane.\n    # Joint orientations on the mirrored side will be identical to the source side.\n    #\n    pm.mirrorJoint( 'jointName' )\n    \n    # Create a mirrored branch of the skeleton starting from the joint \"jointName\"\n    # about the yz-plane.\n    # Joint orientations on the mirrored side will be mirrored from the source side.\n    #\n    pm.mirrorJoint('jointName',mirrorBehavior=True,myz=True)\n    \n    # Create a mirrored branch of the skeleton starting from the selected joint\n    # about the xy-plane.\n    # Joint orientations on the mirrored side will be mirrored from the source side.\n    # Joint names on the duplicated side will contain the string \"right_\" if\n    # the corresponding joint on the original side contained the string \"left_\".\n    #\n    pm.mirrorJoint(mirrorXY=True,mirrorBehavior=True,searchReplace=('left_', 'right_') )", 
    "modelCurrentTimeCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.modelCurrentTimeCtx()\n    # Result: u'modelCurrentTimeCtx1' #", 
    "modelEditor": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a model editor and some buttons that\n    #    change the editor's display of objects in the scene.\n    #\n    window = pm.window('window')\n    form = pm.formLayout()\n    editor = pm.modelEditor()\n    column = pm.columnLayout('true')\n    \n    #    Create some buttons that will alter the display appearance of\n    #    objects in the model editor, eg. wireframe vs. shaded mode.\n    #\n    pm.button(label='Wireframe', command= \"pm.modelEditor(editor, edit=True, displayAppearance='wireframe')\")\n    # Result: ui.Button('window|formLayout59|true|button57') #\n    pm.button(label='Points', command= \"pm.modelEditor(editor, edit=True, displayAppearance='points')\")\n    # Result: ui.Button('window|formLayout59|true|button58') #\n    pm.button(label='Bounding Box', command= \"pm.modelEditor(editor, edit=True, displayAppearance='boundingBox')\")\n    # Result: ui.Button('window|formLayout59|true|button59') #\n    pm.button(label='Smooth Shaded', command= \"pm.modelEditor(editor, edit=True, displayAppearance='smoothShaded')\")\n    # Result: ui.Button('window|formLayout59|true|button60') #\n    pm.button(label='Flat Shaded', command= \"pm.modelEditor(editor, edit=True, displayAppearance='flatShaded')\")\n    # Result: ui.Button('window|formLayout59|true|button61') #\n    \n    #    Set up the window layout attachments.\n    #\n    pm.formLayout( form, edit=True, attachForm=[(column, 'top', 0), (column, 'left', 0), (editor, 'top', 0), (editor, 'bottom', 0), (editor, 'right', 0)], attachNone=[(column, 'bottom'), (column, 'right')], attachControl=(editor, 'left', 0, column))\n    # Result: ui.FormLayout('window|formLayout59') #\n    \n    #    Create a camera for the editor.  This particular camera will\n    #    have a close up perspective view of the centre of the ground plane.\n    #\n    camera= pm.camera(centerOfInterest=2.450351,\n                            position = (1.535314, 1.135712, 1.535314),\n                            rotation = (-27.612504, 45, 0),\n                            worldUp = (-0.1290301, 0.3488592, -0.1290301))\n    \n    #    Attach the camera to the model editor.\n    #\n    pm.modelEditor( editor, edit=True, camera=camera[0] )\n    \n    #    Put an object in the scene.\n    #\n    pm.cone()\n    \n    pm.showWindow( window )\n    \n    #    The following two examples assume a custom model editor command\n    #    defined via the MPxModelEditorCommand API class, named 'myEditor'.\n    #\n    \n    #    Create a custom editor, and use it as the model editor of Maya's\n    #    default modelPanel4 (the perspective view).\n    #\n    pm.myEditor( modelPanel='modelPanel4' )\n    \n    #    Restore the default model editor.\n    #\n    pm.modelEditor( modelPanel='modelPanel4' )\n    #\n    #        The following example shows usage of the render override flags\n    #        with model panel 'modelPanel4'\n    #\n    pm.modelEditor( 'modelPanel4', q=True, rol=True ) # Query for non-UI names for any render overrides\n    pm.modelEditor( 'modelPanel4', q=True, rou=True ) # Query for UI names for any render overrides\n    pm.modelEditor( 'modelPanel4', q=True, rom=True ) # Query for any active override\n    pm.modelEditor( 'modelPanel4', e=True, rom='myOverride' ) # Set active override to 'myOverride' if it exists\n    pm.modelEditor( 'modelPanel4', e=True, rom='' ) # Clear out the active override\n    \n    pm.modelEditor( 'modelPanel4', e=True, rnm='base_OpenGL_Renderer' ) # Set the renderer used for a 3d modeling viewport\n    pm.modelEditor( 'modelPanel4', q=True, rnm=True ) # Query for the renderer used for a 3d modeling viewport\n    pm.modelEditor( 'modelPanel4', q=True, rdn=True ) # Query for device name for current renderer.", 
    "modelPanel": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    #    Create a model panel in a separate window.\n    #\n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout8') #\n    pm.modelPanel()\n    # Result: ui.ModelPanel('modelPanel5') #\n    pm.showWindow( window )\n    \n    #    Example 2.\n    #\n    #    Set the panel configuration to show all 4 model views.\n    #    Then swap the Perspective View and Front View panels.\n    #\n    \n    # Since setNamePanelLayout is a MEL procedures, we need to call through MEL\n    import maya.mel\n    maya.mel.eval('setNamedPanelLayout(\"Four View\")')\n    perspPanel = pm.getPanel( withLabel='Persp View')\n    frontPanel = pm.getPanel( withLabel='Front View')\n    pm.modelPanel( perspPanel, edit=True, replacePanel=frontPanel )", 
    "moduleInfo": "    \n    \n    import pymel.core as pm\n    \n    pm.moduleInfo(listModules=True)\n    # Result: [u'mayatomr', u'substance'] #\n    pm.moduleInfo(definition=True, moduleName='myModule')\n    pm.moduleInfo(path=True, moduleName='myModule')\n    pm.moduleInfo(version=True, moduleName='myModule')", 
    "mouldMesh": "", 
    "mouldSrf": "", 
    "mouldSubdiv": "", 
    "mouse": "    \n    \n    import pymel.core as pm\n    \n    pm.mouse( enableScrollWheel=False )\n    \n    mouseEnabled = pm.mouse(scrollWheelStatus=True)\n    \n    pm.mouse( mouseButtonTracking=1 )\n    \n    numberOfMouseButtons = pm.mouse(mouseButtonTrackingStatus=True)", 
    "movIn": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( n='sph' )\n    # Result: [nt.Transform(u'sph'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    #    Start importing the data at time 45;\n    #\n    pm.currentTime( 45 )\n    # Result: 45.0 #\n    \n    #    Read in rotation, translation, and scale information from the\n    #    test.mov file into the sphere. The order of data in the test.mov\n    #    file must be: rx, ry, rz, tx, ty, tz.\n    #\n    pm.movIn( 'sph.r', 'sph.t', f='sphereMotion.mov' )\n    \n    #    An equivalent way of importing data into the sphere.\n    #\n    pm.movIn( 'sph.rx', 'sph.ry', 'sph.rz', 'sph.tx', 'sph.ty', 'sph.tz', f='sphereMotion.mov' )", 
    "movOut": "    \n    \n    import pymel.core as pm\n    \n    #    Create a sphere and set some keyframes.\n    #\n    pm.sphere( n='sph' )\n    # Result: [nt.Transform(u'sph'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.currentTime( 0 )\n    # Result: 0.0 #\n    pm.move( 0, 0, 0, 'sph' )\n    pm.setKeyframe( 'sph.t' )\n    # Result: 3 #\n    pm.currentTime( 24 )\n    # Result: 24.0 #\n    pm.move( 8, 9, 10, 'sph' )\n    pm.setKeyframe( 'sph.t' )\n    # Result: 3 #\n    \n    #    Write the keys to a .mov file.\n    #\n    pm.movOut( 'sph.t', f='sphereMotion.mov', t=(0,24) )\n    \n    #    Another way to write the same file.\n    #\n    pm.movOut( 'sph.tx', 'sph.ty', 'sph.tz', f='sphereMotion.mov', t=(0,24) )", 
    "move": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.move( 1, 1, 1 )\n    pm.move( 5, y=True )\n    pm.move( '1in', '1in', '1in', relative=True, objectSpace=True, worldSpaceDistance=True )\n    pm.move( 0, 0, 0, 'pSphere1', absolute=True )", 
    "moveKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a move key context which works in insert mode\n    # for the graph editor\n    #\n    newCtx = pm.moveKeyCtx(option='insert')\n    \n    # Edit the context to over mode\n    #\n    pm.moveKeyCtx( newCtx, e=True, option='over' )\n    # Result: u'moveKeyCtx1' #", 
    "moveVertexAlongDirection": "    \n    \n    import pymel.core as pm\n    \n    pm.moveVertexAlongDirection( \"nurbsSurface1.cv[1][1]\", \"pPlane1.vtx[120]\", d=[(1, 1, 1), (1, 0, 0)], m=[2.0, 1.0] )\n    # Move the control vertex on the surface, mesh in the normalized\n    # directions (1,1,1), (1,0,0) by magnitude 2.0, 1.0 respectively.\n    \n    pm.moveVertexAlongDirection( \"nurbsSurface1.cv[3][1]\", \"nurbsSurface2.cv[0][0]\", \"pPlane1.vtx[10]\", n=[1, -1.9, 3] )\n    # Move the control vertex on the NURBS surfaces, mesh along their\n    # respective unit normals by a magnitudes 1.0, -1.9 and 3.0 respectively.\n    \n    pm.moveVertexAlongDirection( \"nurbsSurface1.cv[4][5]\", \"nurbsSurface2.cv[0][0]\", u=[2.0, 1.0] )\n    # Move the control vertex on the NURBS surfaces in the normalized\n    # tangent along U by a magnitude 2.0 and 1.0 respectively.\n    \n    pm.moveVertexAlongDirection( \"nurbsSurface1.cv[2][3]\", v=-1.0 )\n    # Move the control vertex on the nurbsSurface in the normalized\n    # tangent along V by -1.0\n    \n    pm.moveVertexAlongDirection( \"nurbsSurface1.cv[1][1]\", uvn=(1, 2, -1) )\n    # Move the control vertex on the nurbsSurface in the space defined\n    # by triad [u,v,n] by 1,2,-1 respectively.\n    # If the initial vertex position is o(ox,oy,oz) and u,v and n are\n    # direction vectors then the new position p(px,py,pz) would be:\n    # p = o + 1*u + 2*v + (-1)*n ;", 
    "movieCompressor": "", 
    "movieInfo": "    \n    \n    import pymel.core as pm\n    \n    pm.movieInfo(\"C:/My Documents/myMovie.avi\", frameCount=1)\n    # 24", 
    "mpBirailCtx": "", 
    "multiProfileBirailSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.multiProfileBirailSurface( 'curve1', 'curve2', 'curve3', 'surface1.vn[0.5]', 'surface1.vn[1.0]', ch=True )\n    \n    # tangent continuous surface across the first and last profile.\n    pm.multiProfileBirailSurface( 'surface1.vn[0.5]', 'curve1', 'surface1.vn[1.0]', 'curve3', 'curve4', ch=False, tp1=True, tp2=True )", 
    "mute": "    \n    \n    import pymel.core as pm\n    \n    # Mute playback of the ry channel of ty on the sphere\n    #\n    sph = pm.polySphere()\n    pm.setKeyframe( '%s.translate' % sph[0] )\n    # Result: 3 #\n    pm.mute( '%s.translateY' % sph[0] )\n    # Result: [nt.Mute(u'mute_pSphere1_translateY')] #\n    # Query whether ty is muted\n    pm.mute('%s.translateY' % sph[0], q=True )\n    # Result: True #\n    # Disable muting on any muted attributes on the sphere\n    #\n    pm.mute( sph[0], disable=True )", 
    "myTestCmd": "", 
    "nBase": "    \n    \n    import pymel.core as pm\n    \n    # Stuff the current positions and velocities into nCloth1's startPositions and\n    # startVelocities.\n    #\n    pm.nBase( 'nCloth1', e=True, stuffStart=True )\n    # Clear nCloth1's startPositions and startVelocities.\n    #\n    pm.nBase( 'nCloth1', e=True, clearStart=True )\n    # Transfer the texture map data for the thicknessMap attribute into the\n    # thicknessPerVertex attribute.\n    #\n    pm.nBase( 'nCloth1', e=True, textureToVertex='thicknessMap' )", 
    "nParticle": "    \n    \n    import pymel.core as pm\n    \n    # Creates a particle object with four particles\n    pm.nParticle( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\n    # Result: [nt.Transform(u'nParticle1'), nt.NParticle(u'nParticleShape1')] #\n    \n    # Returns the age of the particle with id 2 in object particle1\n    pm.nParticle( 'particle1', q=True, attribute='age', id=2 )\n    \n    # Returns the velocity of the 3rd particle in the currently selected\n    # particle object\n    pm.nParticle( attribute='velocity', q=True, order=3  )\n    \n    # Edits the velocity of the 7th particle in the currently selected\n    # particle object to be 0.0, 1.0, 0.0\n    pm.nParticle( e=True, attribute='velocity', order=3, vectorValue=(0.0, 1.0, 0.0) )\n    \n    # Edits the mass of the particle in \"particle1\" with id 3 to be 0.7\n    pm.nParticle( 'nParticle1', e=True, attribute='mass', id=3, fv=0.7 )", 
    "nameCommand": "    \n    \n    import pymel.core as pm\n    \n    # Create a nameCommand object.\n    #\n    pm.nameCommand( 'circleToolNameCommand', ann='The Circle Tool', c='pm.setToolTo(\"circleContext\")' )\n    # Result: u'circleToolNameCommand' #\n    \n    # Now map the nameCommand to a hotkey.\n    #\n    pm.hotkey( keyShortcut='F5', altModifier=True, name='circleToolNameCommand' )", 
    "nameField": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window containing a single name field. Associate\n    #    the name field with a sphere.\n    #\n    window = pm.window('window')\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window|columnLayout62') #\n    sphereName = pm.sphere()\n    field = pm.nameField(object=sphereName[0])\n    pm.showWindow( window )\n    \n    #    Rename the sphere and notice that the name field updates.\n    #\n    objectName = pm.nameField(field, query=True, object=True)\n    pm.rename( objectName, 'NewName' )\n    # Result: nt.Transform(u'NewName') #", 
    "namespace": "    \n    \n    import pymel.core as pm\n    \n    # Create three namespaces\n    pm.namespace( add='FOO' )\n    # Result: u'FOO' #\n    pm.namespace( add='BAR' )\n    # Result: u'BAR' #\n    pm.namespace( add='FRED' )\n    # Result: u'FRED' #\n    \n    # Create namespace with qualified name\n    pm.namespace( add=\"A:B\" )\n    # Result: u'A:B' #\n    \n    # Create namespace with qualified name\n    pm.namespace( add=\"C:D\", parent=\"A:B\" )\n    # Result: u'A:B:C:D' #\n    \n    # Create namespace with qualified name\n    pm.namespace( add=\":A:B:C:D:E\" )\n    # Result: u'A:B:C:D:E' #\n    \n    # Set the current namespace to FOO\n    pm.namespace( set='FOO' )\n    # Result: u'FOO' #\n    \n    # Create the namespace BAR Under FOO. Note there are\n    # two \"BAR\" namespaces, :BAR and :FOO:BAR.\n    pm.namespace( add='BAR' )\n    # Result: u'FOO:BAR' #\n    \n    # Check to see that the BAR namespace exists within the current\n    # namespace (FOO)\n    pm.namespace( exists='BAR' )\n    # Result: True #\n    \n    # Check to see that the FRED namespace exists under the root namespace\n    pm.namespace( exists=':FRED' )\n    # Result: True #\n    \n    # Create two objects. It gets added to the current namespace FOO;\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'FOO:sphere1'), nt.MakeNurbSphere(u'FOO:makeNurbSphere1')] #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'FOO:sphere2'), nt.MakeNurbSphere(u'FOO:makeNurbSphere2')] #\n    \n    # Move sphere1 from namespace FOO to FOO:BAR. Note that we\n    # need to qualify sphere1 with the namespace FOO because\n    # \"sphere1\" identifies a non-existent object in the root namespace.\n    pm.rename( 'FOO:sphere1', 'BAR:sphere1' )\n    # Result: nt.Transform(u'FOO:BAR:sphere1') #\n    \n    # Move sphere2 from namespace FOO to BAR.  Note the leading\n    # colon on the new name.\n    pm.rename( 'FOO:sphere2', ':BAR:sphere2' )\n    # Result: nt.Transform(u'BAR:sphere2') #\n    \n    # query the current namespace (using the namespaceInfo command)\n    pm.namespaceInfo( currentNamespace=True )\n    # Result: u'FOO' #\n    \n    # remove the namespace FRED (it must be empty)\n    pm.namespace( set=':' )\n    # Result: u'' #\n    pm.namespace( rm='FRED' )\n    \n    # Check to see that the FRED namespace has been removed\n    pm.namespace( exists=':FRED' )\n    # Result: False #\n    \n    # Rename namespace BAR to JOE\n    # Note: this is done by creating JOE, moving the contents of\n    # BAR into JOE, and then removing the (now empty) BAR.\n    pm.namespace( set=':' )\n    # Result: u'' #\n    pm.namespace( add='JOE' )\n    # Result: u'JOE' #\n    pm.namespace( mv=('BAR', 'JOE') )\n    # Result: u'BAR' #\n    pm.namespace( rm='BAR' )\n    \n    # JOE should now contain a single node: 'sphere2'.\n    # Move the contents of JOE into FRANK, when FRANK already\n    # has a 'sphere2' node. The '-force'\n    # flag is needed.\n    pm.namespace( set=':' )\n    # Result: u'' #\n    pm.namespace( add='FRANK' )\n    # Result: u'FRANK' #\n    pm.namespace( set='FRANK' )\n    # Result: u'FRANK' #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'FRANK:sphere2'), nt.MakeNurbSphere(u'FRANK:makeNurbSphere1')] #\n    pm.namespace( force=True, mv=(':JOE', ':FRANK') )\n    # Result: u'JOE' #\n    # In moving 'sphere2' from JOE to FRANK it will be renamed to\n    # 'sphere3' to ensure uniqueness.\n    # The namespace FRANK should now contain 'sphere2', 'sphere2Shape',\n    # and 'sphere3'.\n    \n    # Determine whether the given namespace is root\n    #\n    pm.namespace( query=True, isRootNamespace=\"FOO\" )\n    # Result: False #\n    \n    #Set return value to be absolute namespace name\n    #\n    print(pm.namespace(add = \"testAbsoluteName\", absoluteName = True))\n    \n    #Create a sample hierachy that contains only empty namespaces, then collapse it\n    #\n    pm.namespace( set = \":\")\n    # Result: u'' #\n    pm.namespace( add = \"emptyLevel1\")\n    # Result: u'emptyLevel1' #\n    pm.namespace( add = \"emptyLevel2\", parent = \"emptyLevel1\")\n    # Result: u'emptyLevel1:emptyLevel2' #\n    pm.namespace( add = \"leaf\", parent = \"emptyLevel1:emptyLevel2\")\n    # Result: u'emptyLevel1:emptyLevel2:leaf' #\n    pm.namespace( collapseAncestors = \"emptyLevel1:emptyLevel2:leaf\")\n    # Result: u'leaf' #\n    \n    # Create a sample for removing an existed namespace.\n    # This command can also be used together with three option parameters named\n    # deleteNamespaceContent/mergeNamespaceWithParent/mergeNamespaceWithRoot.\n    # The functionality of the three option parameters will also be displayed in the\n    # following sample.\n    # Note: The three option parameters are mutually exclusive.\n    #       Without any option parameters specified, the default way it performances that\n    #       it can only remove a namespace that is empty. If you want to remove any namespace\n    #       with contents, please add option parameter deleteNamespaceContent.\n    #\n    pm.namespace( set = \":\")\n    # Result: u'' #\n    pm.namespace( add = \":RM_TEST_ROOT:FOO:BAR:JOE\")\n    # Result: u'RM_TEST_ROOT:FOO:BAR:JOE' #\n    pm.sphere( name = \":RM_TEST_ROOT:FOO:obj1\")\n    # Result: [nt.Transform(u'RM_TEST_ROOT:FOO:obj1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( name = \":RM_TEST_ROOT:FOO:BAR:obj2\")\n    # Result: [nt.Transform(u'RM_TEST_ROOT:FOO:BAR:obj2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    \n    # Trying to remove a namespace that is not empty without option parameter,\n    # user will get an error message show that maya cannot remove a namespace that\n    # is not empty.\n    #\n    #pm.namespace( removeNamespace = \":RM_TEST_ROOT:FOO\") # Run this command you'll get an error.\n    \n    # Trying to remove an empty namespace.\n    # Namespace :RM_TEST_ROOT:FOO:BAR:JOE has been removed successfully by the command.\n    #\n    pm.namespace( removeNamespace = \":RM_TEST_ROOT:FOO:BAR:JOE\")\n    \n    pm.undo()\n    \n    # Usage of deleteNamespaceContent option parameter:\n    # Remove all the contents in the target namespace specified in the command and\n    # remove the namespace\n    #\n    pm.namespace( removeNamespace = \":RM_TEST_ROOT:FOO:BAR\", deleteNamespaceContent = True)\n    \n    pm.undo()\n    \n    # Usage of mergeNamespaceWithParent parameter:\n    # Move the content of the target namespace specified in the command to its parent\n    # namespace and remove the namespace.\n    #\n    pm.namespace( removeNamespace = \":RM_TEST_ROOT:FOO:BAR\", mergeNamespaceWithParent = True)\n    \n    pm.undo()\n    \n    # Usage of mergeNamespaceWithRoot parameter:\n    # Move the content of the target namespace specified in the command to the root\n    # namespace and remove the namespace.\n    #\n    pm.namespace( removeNamespace = \":RM_TEST_ROOT:FOO:BAR\", mergeNamespaceWithRoot = True)", 
    "namespaceInfo": "    \n    \n    import pymel.core as pm\n    \n    # List the contents of the current namespace\n    #\n    pm.namespaceInfo( listNamespace=True )\n    # Result: [u'CubeCompass', u'CustomGPUCacheFilter', u'DefaultAllLightsFilter', u'DefaultAllLightsFilter1', u'DefaultAllLightsFilter2', u'DefaultAllLightsFilter6', u'DefaultAllRenderClassificationsFilter', u'DefaultAllRenderClassificationsFilter1', u'DefaultAllRenderNodesFilter', u'DefaultAllShadingNodesFilter', u'DefaultBakeSetsFilter', u'DefaultBakeSetsFilter2', u'DefaultBasicRenderNodesFilter', u'DefaultCameraShapesFilter', u'DefaultCameraShapesFilter1', u'DefaultCameraShapesFilter4', u'DefaultCameraShapesImagePlanesFilter', u'DefaultCameraShapesImagePlanesFilter3', u'DefaultContainerFilter', u'DefaultContainerNodeFilter', u'DefaultExclLightShapesFilter', u'DefaultGeometryFilter', u'DefaultHiddenAttributesFilter', u'DefaultIkHandlesFilter', u'DefaultImagePlanesFilter', u'DefaultImagePlanesFilter1', u'DefaultImagePlanesFilter4', u'DefaultJointsFilter', u'DefaultLightLinkingLightFilter', u'DefaultLightShapesFilter', u'DefaultLightShapesPostProcsFilter', u'DefaultLightShapesPostProcsFilter1', u'DefaultLightShapesPostProcsFilter2', u'DefaultLightShapesTexturesFilter', u'DefaultLightShapesTexturesFilter1', u'DefaultLightsAndOpticalFXFilter', u'DefaultLightsAndOpticalFXFilter4', u'DefaultMaterialsAndShaderGlowFilter', u'DefaultMaterialsAndShaderGlowFilter6', u'DefaultMaterialsFilter', u'DefaultMaterialsFilter1', u'DefaultMaterialsFilter2', u'DefaultMaterialsFilter8', u'DefaultMaterialsTexturesLightShapesFilter', u'DefaultMaterialsTexturesLightShapesFilter1', u'DefaultMrContourContrastFilter', u'DefaultMrContourOutputFilter', u'DefaultMrContourShaderFilter', u'DefaultMrContourStoreFilter', u'DefaultMrDataConversionFilter', u'DefaultMrDisplacementFilter', u'DefaultMrEmitterFilter', u'DefaultMrEnvironmentFilter', u'DefaultMrGeometryFilter', u'DefaultMrLensFilter', u'DefaultMrLightFilter', u'DefaultMrLightmapFilter', u'DefaultMrMaterialFilter', u'DefaultMrMiscFilter', u'DefaultMrNodesFilter', u'DefaultMrOutputFilter', u'DefaultMrPhotonFilter', u'DefaultMrPhotonVolumeFilter', u'DefaultMrSampleCompositingFilter', u'DefaultMrShadowFilter', u'DefaultMrStateFilter', u'DefaultMrTextureFilter', u'DefaultMrVolumeFilter', u'DefaultNURBSObjectsFilter', u'DefaultNoShaderGlowFilter', u'DefaultNonExclLightShapesFilter', u'DefaultOpticalFXFilter', u'DefaultOpticalFXFilter1', u'DefaultOpticalFXFilter5', u'DefaultPolygonObjectsFilter', u'DefaultPostProcFilter', u'DefaultRenderUtilitiesFilter', u'DefaultRenderUtilitiesFilter5', u'DefaultRenderingFilter', u'DefaultSGLightShapesFilter', u'DefaultSGLightShapesTexturesFilter', u'DefaultSetsFilter', u'DefaultShaderGlowFilter', u'DefaultShaderGlowFilter1', u'DefaultShaderGlowFilter2', u'DefaultShaderGlowFilter8', u'DefaultShadingGroupsAndMaterialsFilter', u'DefaultShadingGroupsFilter', u'DefaultShadingGroupsFilter1', u'DefaultShadingGroupsFilter2', u'DefaultShadingGroupsFilter3', u'DefaultShadingGroupsFilter4', u'DefaultShadingGroupsFilter5', u'DefaultShadingGroupsFilter6', u'DefaultShadingGroupsFilter7', u'DefaultShadingGroupsFilter8', u'DefaultSubdivObjectsFilter', u'DefaultTextures2dFilter', u'DefaultTextures3dFilter', u'DefaultTexturesFilter', u'DefaultTexturesFilter1', u'DefaultTexturesFilter7', u'DefaultTexturesSGFilter', u'DefaultUsesImageFileFilter', u'Manipulator1', u'UI', u'UniversalManip', u'animCurveFilter', u'animLayersFilter', u'characterPartition', u'characterSetsFilter', u'clipsFilter', u'clusterSetsFilter', u'defaultCreaseDataSet', u'defaultHardwareRenderGlobals', u'defaultLayer', u'defaultLightList1', u'defaultLightSet', u'defaultObjectSet', u'defaultRenderGlobals', u'defaultRenderLayer', u'defaultRenderLayerFilter', u'defaultRenderQuality', u'defaultRenderUtilityList1', u'defaultRenderingList1', u'defaultResolution', u'defaultSetFilter', u'defaultShaderList1', u'defaultTextureList1', u'defaultViewColorManager', u'deformerSetsFilter', u'dof1', u'drivenKeyFilter', u'dynController1', u'dynamicFilter', u'expressionFilter', u'front', u'frontShape', u'globalCacheControl', u'groundPlane', u'groundPlane_transform', u'hardwareRenderGlobals', u'hardwareRenderingGlobals', u'hyperGraphInfo', u'hyperGraphLayout', u'ikSystem', u'initialMaterialInfo', u'initialParticleSE', u'initialShadingGroup', u'jointClusterSetsFilter', u'keyableFilter', u'lambert1', u'latticeSetsFilter', u'layerManager', u'layersFilter', u'lightLinker1', u'lightLinkingObjectFilter', u'lightList1', u'lightSetFilter', u'lightSetFilter1', u'nonLinearSetsFilter', u'notAnimLayersFilter', u'objectAttrFilter1', u'objectAttrFilter2', u'objectAttrFilter3', u'objectAttrFilter4', u'objectAttrFilter5', u'objectAttrFilter6', u'objectAttrFilter7', u'objectAttrFilter8', u'objectFilter17', u'objectFilter18', u'objectFilter19', u'objectFilter20', u'objectFilter21', u'objectNameFilter1', u'objectNameFilter2', u'objectNameFilter3', u'objectNameFilter4', u'objectScriptFilter1', u'objectScriptFilter2', u'objectScriptFilter3', u'objectScriptFilter4', u'objectScriptFilter5', u'objectScriptFilter6', u'objectScriptFilter7', u'objectScriptFilter8', u'objectScriptFilter9', u'objectScriptFilter10', u'objectTypeFilter1', u'objectTypeFilter2', u'objectTypeFilter3', u'objectTypeFilter4', u'objectTypeFilter5', u'objectTypeFilter6', u'objectTypeFilter7', u'objectTypeFilter8', u'objectTypeFilter9', u'objectTypeFilter10', u'objectTypeFilter11', u'objectTypeFilter12', u'objectTypeFilter13', u'objectTypeFilter14', u'objectTypeFilter15', u'objectTypeFilter16', u'objectTypeFilter17', u'objectTypeFilter18', u'objectTypeFilter19', u'objectTypeFilter20', u'objectTypeFilter21', u'objectTypeFilter22', u'objectTypeFilter23', u'objectTypeFilter24', u'objectTypeFilter25', u'objectTypeFilter26', u'objectTypeFilter27', u'objectTypeFilter28', u'objectTypeFilter29', u'objectTypeFilter30', u'objectTypeFilter31', u'objectTypeFilter32', u'objectTypeFilter33', u'objectTypeFilter34', u'objectTypeFilter35', u'objectTypeFilter36', u'objectTypeFilter37', u'objectTypeFilter38', u'objectTypeFilter39', u'objectTypeFilter40', u'objectTypeFilter41', u'objectTypeFilter42', u'objectTypeFilter43', u'objectTypeFilter44', u'objectTypeFilter45', u'objectTypeFilter46', u'objectTypeFilter47', u'objectTypeFilter48', u'objectTypeFilter49', u'objectTypeFilter50', u'objectTypeFilter51', u'objectTypeFilter52', u'objectTypeFilter67', u'objectTypeFilter68', u'objectTypeFilter69', u'objectTypeFilter70', u'objectTypeFilter71', u'objectTypeFilter72', u'objectTypeFilter73', u'objectTypeFilter74', u'objectTypeFilter75', u'objectTypeFilter76', u'objectTypeFilter77', u'objectTypeFilter78', u'objectTypeFilter79', u'otherDeformerSetsFilter', u'particleCloud1', u'partitionFilter', u'persp', u'perspShape', u'polyMergeEdgeToolDefaults', u'polyMergeFaceToolDefaults', u'postProcessList1', u'publishedFilter', u'relationshipPanel1LeftAttrFilter', u'relationshipPanel1RightAttrFilter', u'renderGlobalsList1', u'renderLayerFilter', u'renderLayerManager', u'renderPartition', u'renderPassSetsFilter', u'renderPassesFilter', u'renderableObjectSetFilter', u'renderableObjectSetFilter1', u'renderableObjectSetFilter2', u'renderableObjectShapeFilter', u'renderableObjectShapeFilter1', u'renderableObjectShapeFilter2', u'renderableObjectsAndSetsFilter', u'renderableObjectsAndSetsFilter1', u'renderingSetsFilter', u'rotateFilter', u'scaleFilter', u'scaleRotateTranslateFilter', u'selectionListOperator1', u'selectionListOperator2', u'selectionListOperator3', u'selectionListOperator4', u'selectionListOperator5', u'selectionListOperator6', u'selectionListOperator7', u'selectionListOperator8', u'selectionListOperator9', u'selectionListOperator10', u'selectionListOperator11', u'selectionListOperator12', u'selectionListOperator13', u'selectionListOperator14', u'selectionListOperator15', u'selectionListOperator16', u'selectionListOperator17', u'selectionListOperator18', u'selectionListOperator19', u'selectionListOperator20', u'selectionListOperator21', u'selectionListOperator22', u'selectionListOperator23', u'selectionListOperator24', u'selectionListOperator25', u'selectionListOperator26', u'selectionListOperator27', u'selectionListOperator28', u'selectionListOperator29', u'selectionListOperator30', u'selectionListOperator57', u'selectionListOperator58', u'selectionListOperator59', u'selectionListOperator60', u'selectionListOperator61', u'selectionListOperator62', u'selectionListOperator63', u'selectionListOperator64', u'selectionListOperator65', u'selectionListOperator66', u'sequenceManager1', u'shaderGlow1', u'shared', u'side', u'sideShape', u'skinClusterSetsFilter', u'strokeGlobals', u'time1', u'top', u'topShape', u'translateFilter', u'world'] #\n    \n    # List the parent of the current namespace\n    #\n    pm.namespaceInfo( parent=True )\n    # Result: u'' #\n    \n    # List the parent of the current namespace with short name\n    #\n    pm.namespaceInfo( parent=True, shortName=True )\n    # Result: u'' #\n    \n    # Determine if the current namespace is root\n    #\n    pm.namespaceInfo( rootNamespace=True )\n    \n    # List the parent of the current namespace with absolute name\n    #\n    pm.namespaceInfo( parent=True, absoluteName=True )\n    \n    # List dependency nodes including internal nodes\n    #\n    pm.namespaceInfo(listOnlyDependencyNodes = True,  internal = True);\n    \n    # samples of query info of specified namespace\n    pm.namespace( set =\":\" )\n    pm.namespace( add =\"sample\" )\n    pm.namespace( set =\":sample\" )\n    pm.namespace( add =\"sun\" )\n    \n    # List the contents of the specified namespace\n    #\n    pm.namespaceInfo( \":sample\", listNamespace=True )\n    # Result: sample:sun\n    \n    # List the parent of the specified namespace\n    #\n    pm.namespaceInfo( \":sample:sun\", parent=True )\n    # result: sample\n    \n    # List the parent of the specified namespace with baseName name\n    #\n    pm.namespaceInfo( \":sample:sun\", parent=True, baseName=True )\n    # result: sample\n    \n    # Determine if the specified namespace is root\n    #\n    pm.namespaceInfo( \":\", isRootNamespace=True )\n    # result: True\n    \n    # List the parent of the specified namespace with absolute name\n    #\n    pm.namespaceInfo( \":sample:sun\", parent=True, absoluteName=True )\n    # result: :sample\n    \n    # List dependency nodes including internal nodes\n    #\n    pm.namespaceInfo(  \":sample\", listOnlyNamespaces = True )\n    # result: sample:sun\n    \n    # Query the namespace name and have it returned in different formats\n    #\n    pm.namespaceInfo( \":sample:sun\", baseName = True )\n    # result: \"sun\"\n    \n    pm.namespaceInfo( \":sample:sun\", fullName = True )\n    # result: \"sample:sun\"\n    \n    pm.namespaceInfo( \"sample:sun\", absoluteName = True )\n    # result: \":sample:sun\"", 
    "newton": "    \n    \n    import pymel.core as pm\n    \n    pm.newton( 'particle1', m=5.0, mxd=2.0 )\n    # Creates a newton field with magnitude 5.0 and maximum distance 2.0,\n    # and adds it to the list of fields particle1 owns.\n    \n    pm.newton( pos=(-2, 0, 4) )\n    # Creates a newton field at position (0,2,4) in world coordinates,\n    # with default magnitude(1.0), attentuation (1.0),\n    # and max distance (5.0).\n    \n    pm.newton( 'newtonField1', e=1, att=0.98 )\n    # Edits the acceleration value of the field named newtonField1\n    \n    pm.newton( 'newtonField1', q=1, m=1 )\n    # Queries newtonF ield1for its magnitude.\n    \n    pm.newton( 'newtonField1', e=1, mxd=10.0 )\n    # Changes the maximum distance of the field called\n    # \"newtonField1\" to 10.0.\n    \n    pm.newton( m=2.0 )\n    # Creates a newton field with magnitude 2.0 for every active selection.\n    # If no there are active\n    # selections, creates such a field at world position (0,0,0).", 
    "nodeCast": "    \n    \n    import pymel.core as pm\n    \n    tr1 = pm.createNode( 'transform' )\n    tr2 = pm.createNode( 'transform' )\n    pm.connectAttr( tr1 + \".t\", tr2 + \".t\" )\n    pm.connectAttr( tr2 + \".r\", tr1 + \".r\" )\n    theT = tr1\n    pm.select( theT, replace=1 )\n    pm.addAttr( ln=\"unmatched\", at=\"long\" )\n    middle_man = pm.createNode( 'transform' )\n    pm.connectAttr( theT + \".unmatched\", middle_man + \".tx\" )\n    swapNode = pm.createNode( 'transform' )\n    pm.nodeCast( theT, swapNode, disconnectUnmatchedAttrs=true )", 
    "nodeEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    form = pm.formLayout()\n    p = pm.scriptedPanel(type=\"nodeEditorPanel\", label=\"Node Editor\")\n    pm.formLayout(form, e=True, af=[(p,s,0) for s in (\"top\",\"bottom\",\"left\",\"right\")])\n    # Result: ui.FormLayout('window1|formLayout66') #\n    pm.showWindow()", 
    "nodeGrapher": "", 
    "nodeIconButton": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window( )\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout63') #\n    pm.nodeIconButton( style='textOnly', command='pm.shadingNode(\"lambert\", asShader=True)', label='lambert' )\n    # Result: u'window1|columnLayout63|nodeIconButton1' #\n    pm.nodeIconButton( style='iconOnly', command='pm.sphere()', image1='sphere.png' )\n    # Result: u'window1|columnLayout63|nodeIconButton2' #\n    pm.nodeIconButton( style='iconAndTextHorizontal', command='pm.spotLight()', image1='spotlight.png', label='Spot Light' )\n    # Result: u'window1|columnLayout63|nodeIconButton3' #\n    pm.showWindow( window )", 
    "nodeOutliner": "    \n    \n    import pymel.core as pm\n    \n    mywindow = pm.window()\n    myform = pm.formLayout( numberOfDivisions=100 )\n    \n    # Create an outliner that will print the name of\n    # every object added to it to history pane of the\n    # script editor, then display all available input\n    # plugs on the node.\n    def onAddNode(name):\n        print name\n    myoutliner = pm.nodeOutliner( showInputs=True, addCommand=onAddNode )\n    \n    # Attach the nodeOutliner to the layout\n    pm.formLayout( myform, edit=True, attachForm=((myoutliner, 'top', 5), (myoutliner, 'left', 5), (myoutliner, 'bottom', 5), (myoutliner, 'right', 5)) )\n    # Result: ui.FormLayout('window1|formLayout69') #\n    \n    # Display the window with the node Outliner\n    pm.showWindow( mywindow )\n    \n    # Create a sphere\n    objectName = pm.sphere()\n    \n    # Have the outliner display the sphere\n    pm.nodeOutliner( myoutliner, e=True, a='nurbsSphere1' )\n    # Result: u'window1|formLayout69|nodeOutliner1' #", 
    "nodePreset": "    \n    \n    import pymel.core as pm\n    \n    # To determine if \"My Special Settings\" is a valid name for a preset (it\n    # is not because it contains spaces):\n    #\n    pm.nodePreset(isValidName=\"My Special Settings\" )\n    # Result: False #\n    # To save the settings of nurbsSphereShape1 as a preset called \"smithers\":\n    #\n    pm.nodePreset( save=(\"nurbsSphereShape1\",\"smithers\") )\n    # To get a list of all presets available that could be applied to\n    # nurbsSphereShape1:\n    #\n    pm.nodePreset( list='nurbsSphereShape1' )\n    [u'smithers', u'smoothSphere', u'roughSphere', u'atmoSphere']\n    # To load the preset named \"smoothSphere\" onto nurbsSphereShape1:\n    #\n    pm.nodePreset( load=('nurbsSphereShape1', 'smoothSphere') )\n    # To delete the preset named \"smithers\" which was formerly available for the\n    # node nurbsSphereShape1 (and other nodes of the same type):\n    #\n    pm.nodePreset( delete=('nurbsSphereShape1', 'smithers') )\n    # To determine if a preset named \"smithers\" exists for the node\n    # nurbsSphereShape1 (it does not because it has been deleted):\n    #\n    pm.nodePreset( exists=('nurbsSphereShape1', 'smithers') )\n    0\n    # Create a preset containing only the color and diffuse attributes:\n    #\n    pm.nodePreset( save=(\"lambert1\",\"colorAndDiffuse\"), attributes='color diffuse' )\n    # Create a preset to map a checker texture to the applied node.\n    # Because the \"custom\" callback is required to return an array of MEL commands,\n    # each line of python in the array must be wrapped by the MEL \"python\" command.\n    #\n    def customChecker():\n        doCheckerCmds = [\n                    # Get the name of the node to apply the checker to.\n                    \"python( \\\"selection = pm.ls( selection=True )\\\" );\",\n                \"python( \\\"nodeName = selection[0]\\\" );\",\n                # Create a checker texture.\n                \"python( \\\"checkerName = pm.shadingNode( 'checker', asTexture=True )\\\" );\",\n                # Connect the checker to the node the preset is applied to.\n                    \"python( \\\"pm.connectAttr( (checkerName+\\\\\\\".outColor\\\\\\\"), (nodeName+\\\\\\\".color\\\\\\\") )\\\" );\"\n                    ]\n        return doCheckerCmds\n            pm.nodePreset(custom=\"python( \\\"customChecker()\\\" )\", save=('lambert1', 'checkered') )", 
    "nodeTreeLister": "    \n    \n    import pymel.core as pm\n    \n    pm.window(width=200)\n    # Result: ui.Window('window1') #\n    pm.formLayout('theForm')\n    # Result: ui.FormLayout('window1|theForm') #\n    pm.nodeTreeLister('theTreeLister')\n    # Result: u'window1|theForm|theTreeLister' #\n    pm.formLayout('theForm', e=True,\n                    af=(('theTreeLister', 'top', 0),\n                        ('theTreeLister', 'left', 0),\n                        ('theTreeLister', 'bottom', 0),\n                        ('theTreeLister', 'right', 0)))\n    pm.showWindow()", 
    "nodeType": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( n='balloon' )\n    # Result: [nt.Transform(u'balloon'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # Find the type of node created by the sphere command\n    pm.nodeType( 'balloon' )\n    # Result: u'transform' #\n    \n    # What is the API type of the balloon node?\n    pm.nodeType( 'balloon', api=True )\n    # Result: u'kTransform' #\n    \n    # Which node types derive from camera?\n    pm.nodeType( 'camera', derived=True, isTypeName=True )\n    # Result: [u'stereoRigCamera', u'camera'] #", 
    "nonLinear": "    \n    \n    import pymel.core as pm\n    \n    # To create a bend deformer with curvature 0.5\n    #\n    pm.nonLinear( type='bend', curvature=0.5 )\n    \n    # To edit the curvature of the bend deformer\n    #\n    pm.nonLinear( 'bend1', e=True, curvature=0.2 )\n    \n    # To query the curvature of the bend deformer\n    #\n    pm.nonLinear( 'bend1', query=True, curvature=True )", 
    "nop": "", 
    "normalConstraint": "    \n    \n    import pymel.core as pm\n    \n    pm.normalConstraint( 'surf1', 'cube1' )\n    # orients the aim vector of cube1 in it's local coordinate space,\n    # to the normal vector of surf1 at the closest point to  cube1.\n    \n    pm.normalConstraint( 'surf1', 'surf2', 'cube2', w=.1 )\n    # uses the average of the normals from surf1 and surf2.\n    \n    pm.normalConstraint( 'surf1', 'cube2', e=True, w=10. )\n    # sets the weight for surf1's effect on cube2 to 10.\n    \n    pm.normalConstraint( 'surf2', 'cube2', e=True, rm=True )\n    # removes surf2 from cube2's normalConstraint.\n    \n    pm.normalConstraint( 'surf3', 'cube2' )\n    # adds surf3 to cube2's normalConstraint with the default weight.", 
    "nurbsBoolean": "    \n    \n    import pymel.core as pm\n    \n    # To do a union between two cubes.\n    pm.nurbsBoolean( 'nurbsCube1', 'nurbsCube2', nsf=1, op=0 )\n    \n    # To do a subtract between a cube and a sphere.\n    # i.e cube - sphere\n    pm.nurbsBoolean( 'nurbsCube1', 'nurbsSphere1', op=1, nsf=1 )\n    \n    # To do an intersect between two spheres.\n    pm.nurbsBoolean( 'nurbsSphere1', 'nurbsSphere2', op=2, nsf=1 )", 
    "nurbsCopyUVSet": "    \n    \n    import pymel.core as pm\n    \n    pm.nurbsCopyUVSet()", 
    "nurbsCube": "    \n    \n    import pymel.core as pm\n    \n    pm.nurbsCube()\n    # Result: [nt.Transform(u'nurbsCube1'), nt.MakeNurbCube(u'makeNurbCube1')] #\n    pm.nurbsCube( w=3, hr=5 )\n    # Result: [nt.Transform(u'nurbsCube2'), nt.MakeNurbCube(u'makeNurbCube2')] #\n    pm.nurbsCube( w=10, p=(0, 0, 1) )\n    # Result: [nt.Transform(u'nurbsCube3'), nt.MakeNurbCube(u'makeNurbCube3')] #\n    pm.nurbsCube( d=1, u=3, v=5, w=5 )\n    # Result: [nt.Transform(u'nurbsCube4'), nt.MakeNurbCube(u'makeNurbCube4')] #", 
    "nurbsCurveRebuildPref": "", 
    "nurbsCurveToBezier": "    \n    \n    import pymel.core as pm\n    \n    pm.nurbsCurveToBezier( )\n    # Result: [] #\n    # Converts call selected NURBS curves to Bezier curves.", 
    "nurbsEditUV": "    \n    \n    import pymel.core as pm\n    \n    result = pm.sphere()\n    shape = result[0]\n    pm.select(shape, r=True)\n    pm.nurbsUVSet(create=True)\n    # Result: u'defaultExplicitUVSet' #\n    pm.nurbsUVSet(useExplicit=True)\n    # Result: True #\n    pm.select(shape+\".cv[3:5][2:4]\", r=True)\n    # Rotate the UVs by 45 degrees\n    pm.nurbsEditUV(angle=45)", 
    "nurbsPlane": "    \n    \n    import pymel.core as pm\n    \n    # Create default plane\n    pm.nurbsPlane()\n    # Result: [nt.Transform(u'nurbsPlane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    \n    # Create a degree 3 plane with 4 spans in each direction\n    pm.nurbsPlane( d=3, u=4, v=4 )\n    # Result: [nt.Transform(u'nurbsPlane2'), nt.MakeNurbPlane(u'makeNurbPlane2')] #\n    \n    # Create plane that is twice as long as it is wide\n    pm.nurbsPlane( w=3, lr=2 )\n    # Result: [nt.Transform(u'nurbsPlane3'), nt.MakeNurbPlane(u'makeNurbPlane3')] #", 
    "nurbsSelect": "    \n    \n    import pymel.core as pm\n    \n    # Create a Nurbs plane.\n    pm.nurbsPlane( u=5, v=7 )\n    # Result: [nt.Transform(u'nurbsPlane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    # Select it top and bottom CVs.\n    pm.nurbsSelect( topBorder=True, bottomBorder=True )\n    # Expand the selection to 3 rows.\n    pm.nurbsSelect( growSelection=3 )\n    # Select only the outline of the rows.\n    pm.nurbsSelect( borderSelection=True )", 
    "nurbsSquare": "    \n    \n    import pymel.core as pm\n    \n    # create degree 1 square with side length 2, center (0,0,0) on the\n    # x-y plane\n    pm.nurbsSquare( nr=(0, 0, 1), d=1, c=(0, 0, 0), sl1=2, sl2=2 )\n    # Result: [nt.Transform(u'nurbsSquare1'), nt.MakeNurbsSquare(u'makeNurbsSquare1')] #\n    \n    # create degree 2 rectangle with length 2,4 at origin on the x-y plane\n    pm.nurbsSquare( d=2, nr=(0, 0, 1), c=(0, 0, 0), sl1=2, sl2=4 )\n    # Result: [nt.Transform(u'nurbsSquare2'), nt.MakeNurbsSquare(u'makeNurbsSquare2')] #\n    \n    # create square of degree 3,side lengths 3, 4 spans per side\n    pm.nurbsSquare( nr=(0, 0, 1), c=(0, 0, 0), d=3, sl1=3, sl2=3, sps=4 )\n    # Result: [nt.Transform(u'nurbsSquare3'), nt.MakeNurbsSquare(u'makeNurbsSquare3')] #", 
    "nurbsToPoly": "    \n    \n    import pymel.core as pm\n    \n    # To create a new polygonal surface from a NURBS surface:\n    pm.nurbsToPoly( 'nurbsSphere1' )\n    \n    # To create a new polygonal surface from a NURBS surface with\n    # history so that the tesselation can be edited afterwards:\n    pm.nurbsToPoly( 'nurbsSphere1', ch=True )", 
    "nurbsToPolygonsPref": "    \n    \n    import pymel.core as pm\n    \n    # To find out what the current format is:\n    pm.nurbsToPolygonsPref( q=True, f=True )\n    # Result: 1 #", 
    "nurbsToSubdiv": "    \n    \n    import pymel.core as pm\n    \n    # To create a new subd surface from a NURBS surface:\n    pm.nurbsToSubdiv( 'nurbsSphere1' )\n    \n    # To create a new subd surface from a NURBS surface with history so that\n    # the tesselation can be edited afterwards:\n    pm.nurbsToSubdiv( 'nurbsSphere1', ch=True )", 
    "nurbsToSubdivPref": "    \n    \n    import pymel.core as pm\n    \n    # To find out what the current format is:\n    pm.nurbsToSubdivPref( q=True, maxPolyCount=True )\n    # Result: 1000.0 #", 
    "nurbsUVSet": "    \n    \n    import pymel.core as pm\n    \n    result = pm.sphere()\n    shape = result[0]\n    pm.select(shape, r=True)\n    # Create and activate a UV set\n    pm.nurbsUVSet(create=True)\n    # Result: u'defaultExplicitUVSet' #\n    pm.nurbsUVSet(useExplicit=True)\n    # Result: True #\n    pm.select(shape+\".cv[3:5][2:4]\", r=True)\n    # Rotate the UVs by 45 degrees\n    pm.nurbsEditUV(angle=45)", 
    "objExists": "    \n    \n    import pymel.core as pm\n    \n    # Select an object if and only if it exists.\n    # Print a warning if it does not exist.\n    if pm.objExists('surface1'):\n      pm.select('surface1')\n    else:\n      print(\"Warning: no surface exists.\")", 
    "objectCenter": "    \n    \n    import pymel.core as pm\n    \n    # create a simple hierarchy\n    pm.polyCube( name='a' )\n    # Result: [nt.Transform(u'a'), nt.PolyCube(u'polyCube1')] #\n    pm.polyCube( name='b' )\n    # Result: [nt.Transform(u'b'), nt.PolyCube(u'polyCube2')] #\n    pm.parent( 'b', 'a' )\n    # Result: [nt.Transform(u'b')] #\n    pm.move( 3, 0, 0, 'a', localSpace=True )\n    pm.move( 2, 2, 2, 'b', localSpace=True )\n    \n    X_COORD = pm.objectCenter('b',x=True)\n    \n    # Get the center of the bounding box of b in local space\n    XYZ = pm.objectCenter('b', l=True)\n    \n    # Get the center of the bounding box of b in world space\n    XYZ = pm.objectCenter('b', gl=True)\n    \n    # Get the center of the bounding box of a in world space\n    XYZ = pm.objectCenter('a', gl=True)", 
    "objectType": "    \n    \n    import pymel.core as pm\n    \n    # create an object to query type of\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # To query the type of an object:\n    pm.objectType( 'sphere1Shape' )\n    # Result: u'nurbsSurface' #\n    \n    # To confirm that sphere1Shape really is a nurbs surface:\n    pm.objectType( 'sphere1Shape', isType='nurbsSurface' )\n    # Result: True #", 
    "objectTypeUI": "    \n    \n    import pymel.core as pm\n    \n    print(pm.objectTypeUI( 'viewPanes' ))\n    \n    # show all commands as their types\n    import sys\n    for c,e in enumerate(pm.objectTypeUI(listAll=True)):\n        c += 1\n        sys.stdout.write(e + \" \")\n        if c % 3 == 0:\n            sys.stdout.write('\\n')\n    \n    # show Qt inheritence hierachy for buttons\n    pm.window()\n    pm.rowColumnLayout()\n    b = pm.button()\n    pm.showWindow()\n    print(pm.objectTypeUI(b,sc=True))", 
    "objstats": "", 
    "offsetCurve": "    \n    \n    import pymel.core as pm\n    \n    # offset all active curves to the specified distance:\n    pm.offsetCurve( d=4.0 )\n    \n    # create offsets for the specified curve and turn loop cutting off:\n    pm.offsetCurve( 'curve1', cl=False)\n    \n    # create offsets with circular arcs at the breaks in the curve and use\n    # a cutting radius of 2.0 if there are any loops in the offsets:\n    pm.offsetCurve( 'curve1', cb=1, cl=True, cr=2.0 )", 
    "offsetCurveOnSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=10, lr=2 )\n    # Result: [nt.Transform(u'nurbsPlane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    pm.circle( ch=True, o=True, nr=(0, 1, 0), r=3 )\n    # Result: [nt.Transform(u'nurbsCircle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=0, rn=False, un=False, tol=0.01 )\n    # Result: [nt.CurveVarGroup(u'nurbsPlaneShape1->projectionCurve1')] #\n    \n    # Offset given curve to the specified distance at the specified tolerance:\n    pm.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', d=0.12, tol=0.02 )\n    \n    # Create offsets for the specified curve and turn loop cutting off:\n    pm.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', cl=False )\n    \n    # Create offsets with circular arcs at the breaks in the curves and trim\n    # away any loops in the offset curve:\n    pm.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', cb=1, cl=False )", 
    "offsetSurface": "    \n    \n    import pymel.core as pm\n    \n    # To offset the active surface to the specified distance:\n    pm.offsetSurface( d=4.0 )\n    \n    # To create an offset using the surface fit offset method:\n    pm.offsetSurface( 'surface1', m=0, d=2.0 )", 
    "ogs": "    \n    \n    import pymel.core as pm\n    \n    // Reset the database for all panels running the OGS renderer.\n    // Returns the number of panels affected.\n    pm.ogs( reset=True )\n    // Result: [modelPanel1] //", 
    "ogsRender": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere.\n    pm.polySphere()\n    # Render it\n    # It will try to save the image with format according\n    # to the file name saved in render globals.\n    pm.ogsRender(w=480,h=270)\n    pm.ogsRender(w=480,h=270)", 
    "ogsdebug": "", 
    "openGLExtension": "    \n    \n    import pymel.core as pm\n    \n    # Query for the multitexturing extension GL_ARB_multitexture\n    pm.openGLExtension( extension='GL_ARB_multitexture' )\n    # Result: u'GL_ARB_multitexture' #\n    # Query for all the extensions\n    pm.openGLExtension( extension='' )\n    # Result: u'GL_ARB_transpose_matrix GL_ARB_vertex_program GL_ARB_vertex_blend GL_ARB_window_pos GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_shading_language_100 GL_EXT_multi_draw_arrays GL_EXT_clip_volume_hint GL_EXT_rescale_normal GL_EXT_draw_range_elements GL_EXT_fog_coord GL_EXT_gpu_program_parameters GL_EXT_geometry_shader4 GL_EXT_transform_feedback GL_APPLE_client_storage GL_APPLE_specular_vector GL_APPLE_transform_hint GL_APPLE_packed_pixels GL_APPLE_fence GL_APPLE_vertex_array_object GL_APPLE_vertex_program_evaluators GL_APPLE_element_array GL_APPLE_flush_render GL_APPLE_aux_depth_stencil GL_NV_texgen_reflection GL_NV_light_max_exponent GL_IBM_rasterpos_clip GL_SGIS_generate_mipmap GL_ARB_imaging GL_ARB_point_parameters GL_ARB_texture_env_crossbar GL_ARB_texture_border_clamp GL_ARB_multitexture GL_ARB_texture_env_add GL_ARB_texture_cube_map GL_ARB_texture_env_dot3 GL_ARB_multisample GL_ARB_texture_env_combine GL_ARB_texture_compression GL_ARB_texture_mirrored_repeat GL_ARB_shadow GL_ARB_depth_texture GL_ARB_fragment_program GL_ARB_fragment_program_shadow GL_ARB_fragment_shader GL_ARB_occlusion_query GL_ARB_point_sprite GL_ARB_texture_non_power_of_two GL_ARB_vertex_buffer_object GL_ARB_pixel_buffer_object GL_ARB_draw_buffers GL_ARB_shader_texture_lod GL_ARB_half_float_vertex GL_EXT_compiled_vertex_array GL_EXT_framebuffer_object GL_EXT_texture_rectangle GL_ARB_texture_rectangle GL_EXT_texture_env_add GL_EXT_blend_color GL_EXT_blend_minmax GL_EXT_blend_subtract GL_EXT_texture_lod_bias GL_EXT_abgr GL_EXT_bgra GL_EXT_stencil_wrap GL_EXT_texture_filter_anisotropic GL_EXT_secondary_color GL_EXT_blend_func_separate GL_EXT_shadow_funcs GL_EXT_stencil_two_side GL_EXT_depth_bounds_test GL_EXT_texture_compression_s3tc GL_EXT_texture_compression_dxt1 GL_EXT_texture_sRGB GL_EXT_blend_equation_separate GL_EXT_texture_mirror_clamp GL_EXT_packed_depth_stencil GL_EXT_provoking_vertex GL_APPLE_flush_buffer_range GL_APPLE_ycbcr_422 GL_APPLE_rgb_422 GL_APPLE_vertex_array_range GL_APPLE_texture_range GL_APPLE_float_pixels GL_ATI_texture_float GL_ARB_texture_float GL_ARB_half_float_pixel GL_APPLE_pixel_buffer GL_APPLE_object_purgeable GL_NV_point_sprite GL_NV_blend_square GL_NV_fog_distance GL_NV_depth_clamp GL_NV_multisample_filter_hint GL_NV_fragment_program_option GL_NV_fragment_program2 GL_NV_vertex_program2_option GL_NV_vertex_program3 GL_ATI_texture_mirror_once GL_ATI_texture_env_combine3 GL_ATI_separate_stencil GL_SGIS_texture_edge_clamp GL_SGIS_texture_lod GL_EXT_vertex_array_bgra ' #\n    # Query for the renderer name\n    pm.openGLExtension( renderer=True )\n    # Result: u'NVIDIA GeForce 7300 GT OpenGL Engine' #\n    # Query for the vendor\n    pm.openGLExtension( vendor=True )\n    # Result: u'NVIDIA Corporation' #\n    # Query for the OpenGL version\n    pm.openGLExtension( version=True )\n    # Result: u'2.1 NVIDIA-1.6.36' #", 
    "openMayaPref": "    \n    \n    import pymel.core as pm\n    \n    # Enable RTLD_LAZY binding when loading plug-ins\n    pm.openMayaPref( lz=True )\n    \n    # Force RTLD_NOW binding when loading plug-ins\n    pm.openMayaPref( lz=False )\n    \n    # Disable the warning about old plug-ins being loaded\n    pm.openMayaPref( ow=False )\n    \n    # Turn on the Error log\n    pm.openMayaPref( errlog=True )\n    \n    # Query the Error log\n    pm.openMayaPref( q=True, errlog=True )\n    # Result: [True] #\n    \n    # Turn off the Error log\n    pm.openMayaPref( errlog=False )", 
    "optionMenu": "    \n    \n    import pymel.core as pm\n    \n    def printNewMenuItem( item ):\n            print item\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout64') #\n    pm.optionMenu( label='Colors', changeCommand=printNewMenuItem )\n    # Result: ui.OptionMenu('window1|columnLayout64|optionMenu1') #\n    pm.menuItem( label='Yellow' )\n    # Result: ui.CommandMenuItem('window1|optionMenu1|menuItem561') #\n    pm.menuItem( label='Purple' )\n    # Result: ui.CommandMenuItem('window1|optionMenu1|menuItem562') #\n    pm.menuItem( label='Orange' )\n    # Result: ui.CommandMenuItem('window1|optionMenu1|menuItem563') #\n    pm.showWindow( window )", 
    "optionMenuGrp": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with two option menu groups.\n    #\n    window = pm.window( title='Example 1' )\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout65') #\n    \n    #    Create a couple of option menu groups.\n    #\n    colors = pm.optionMenuGrp(label='Colors')\n    pm.menuItem( label='Red' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp1|OptionMenu|menuItem564') #\n    pm.menuItem( label='Green' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp1|OptionMenu|menuItem565') #\n    pm.optionMenuGrp( l='Position' )\n    # Result: ui.OptionMenuGrp('window1|columnLayout65|optionMenuGrp2') #\n    pm.menuItem( label='Left' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp2|OptionMenu|menuItem566') #\n    pm.menuItem( label='Center' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp2|OptionMenu|menuItem567') #\n    pm.menuItem( label='Right' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp2|OptionMenu|menuItem568') #\n    \n    #    Now add an additional item to the first option menu.\n    #\n    pm.menuItem(parent=(colors +'|OptionMenu'), label='Blue' )\n    # Result: ui.CommandMenuItem('window1|columnLayout65|optionMenuGrp1|OptionMenu|menuItem569') #\n    pm.showWindow( window )\n    \n    #    Create another window with an option menu group.\n    #\n    window = pm.window( title='Example 2' )\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window2|columnLayout66') #\n    pm.optionMenuGrp( label='Size', extraLabel='cm', columnWidth=(2, 80) )\n    # Result: ui.OptionMenuGrp('window2|columnLayout66|optionMenuGrp3') #\n    pm.menuItem( label='10' )\n    # Result: ui.CommandMenuItem('window2|columnLayout66|optionMenuGrp3|OptionMenu|menuItem570') #\n    pm.menuItem( label='100' )\n    # Result: ui.CommandMenuItem('window2|columnLayout66|optionMenuGrp3|OptionMenu|menuItem571') #\n    pm.menuItem( label='1000' )\n    # Result: ui.CommandMenuItem('window2|columnLayout66|optionMenuGrp3|OptionMenu|menuItem572') #\n    pm.showWindow( window )", 
    "optionVar": "    \n    \n    import pymel.core as pm\n    \n    pm.optionVar( iv=('defaultTriangles', 4), sv=('defaultFileName', 'buffalo.maya') )\n    pm.optionVar( exists='defaultTriangles' )\n    # Result: True #\n    pm.optionVar( q='defaultFileName' )\n    # Result: u'buffalo.maya' #\n    pm.optionVar( list=True )\n    # Result: [u'AEcgfxShader_toolButtons', u'AEpopupWhenCreatingShaders', u'Alembic_importAddMergeSelection', u'Alembic_importConnectOrReparent', u'Alembic_importCreateIfNotFound', u'Alembic_importDebug', u'Alembic_importFileContent', u'Alembic_importFitTimeRange', u'Alembic_importInsertUnderCurrentSelection', u'Alembic_importMode', u'Alembic_importRemoveIfNoUpdate', u'Alembic_importSetCurrentTimeToStartFrame', u'CEAutoUpdate', u'CEPrecision', u'CEShowAllCols', u'CEShowPathName', u'CESortAlpha', u'CEoperationType', u'CreateNurbsCircleCtx', u'CreateNurbsConeCtx', u'CreateNurbsCubeCtx', u'CreateNurbsCylinderCtx', u'CreateNurbsPlaneCtx', u'CreateNurbsSphereCtx', u'CreateNurbsSquareCtx', u'CreateNurbsTorusCtx', u'CreatePolyConeCtx', u'CreatePolyCubeCtx', u'CreatePolyCylinderCtx', u'CreatePolyHelixCtx', u'CreatePolyPipeCtx', u'CreatePolyPlaneCtx', u'CreatePolyPlatonicSolidCtx', u'CreatePolyPrismCtx', u'CreatePolyPyramidCtx', u'CreatePolySoccerBallCtx', u'CreatePolySphereCtx', u'CreatePolyTorusCtx', u'CustomFileDialogSidebarUrls', u'DAGOpenHyperGraphMode', u'EEexprEdTextEditor', u'EditImageDir', u'FileDialogHideExtension', u'FileDialogStyle', u'InExpertUIMode', u'LastStateChannelsLayersVisibility', u'LastStateCommandLineVisibility', u'LastStateHelpLineVisibility', u'LastStateLayersVisibility', u'LastStatePlaybackRangeVisibility', u'LastStateShelfVisibility', u'LastStateStatusLineVisibility', u'LastStateTimeSliderVisibility', u'LastStateToolboxVisibility', u'MT_activeManipColor', u'MT_autoloadTextures', u'MT_compModeCustCmd', u'MT_dynamicHUDColor', u'MT_freeRotate', u'MT_hideManipOnCtrl', u'MT_hideManipOnShift', u'MT_hideManipOnShiftCtrl', u'MT_highlightOpacity', u'MT_hiliteColorAdd', u'MT_hiliteColorSubtract', u'MT_hiliteTransparency', u'MT_hudShowCoordSpace', u'MT_hudShowMode', u'MT_hudShowSoftSel', u'MT_invertedCursors', u'MT_manipCenterCustomTranslate', u'MT_manipPickRange', u'MT_paintColorAdd', u'MT_paintColorSubtract', u'MT_paintReplaceNoMods', u'MT_planeHandleOffset', u'MT_prohibitNegativeScale', u'MT_quaDrawMmbWeld', u'MT_refreshActiveOnly', u'MT_resetManipOnSelChange', u'MT_resetManipOnToolSwitch', u'MT_selectDeadSpaceRange', u'MT_shiftCtrlSlide', u'MT_shiftSlide', u'MT_showDynamicHUD', u'MT_showNEXTabOnStartup', u'MT_skipQuaDrawWarning', u'MT_softSelInnerColor', u'MT_softSelOuterColor', u'MT_tweakDeadSpaceRange', u'MT_useCompModeCustCmd', u'MT_useNexOnSelModeChange', u'Move', u'MoveLimits', u'MoveNormal', u'PanZoomContext', u'PhotoshopDir', u'PlayblastCmdAvi', u'PlayblastCmdFormatAvi', u'PlayblastCmdFormatQuicktime', u'PlayblastCmdQuicktime', u'PolySelectEditSplitRingAbsolute', u'PolyTexShortestPath', u'PolyViewPortShortestPath', u'PreserveComponentSelections', u'PropMod', u'RecentBackupsMaxSize', u'RecentFilesMaxSize', u'RecentProjectsMaxSize', u'ResetModelViewsOnNewScene', u'Rotate', u'RotateLimits', u'Scale', u'ScaleLimits', u'ScriptEditorExecuterLabelArray', u'ScriptEditorExecuterTabIndex', u'ScriptEditorExecuterTypeArray', u'SelectLasso', u'ShowExtrudeAttributeViewportSliders', u'SoftSelectOptionsContext', u'SubstanceEnginePath', u'TextureLasso', u'TrackSelectionOrder', u'Transform', u'ViewImageCmdFormat', u'ViewImageDir', u'ViewSequenceCmdFormat', u'ViewSequenceDir', u'activeObjectPivots', u'alignToolCtx', u'allowMenusInPanels', u'animBlendingOpt', u'animLayerButtonsOnRight', u'animLayerDefaultPassthroughMode', u'animLayerDefaultRotationMode', u'animLayerDefaultScaleMode', u'animLayerFilterActive', u'animLayerFilterOptions', u'animLayerGhostOption', u'animLayerLockCurves', u'animLayerMuteLock', u'animLayerReverseLayerStack', u'animLayerSelectOnCollapse', u'animLayerSelectionKey', u'animateRoll', u'animateRollFitAll', u'animateRollGotoBookmark', u'animateRollNextLastCameraView', u'animateRollViewCompass', u'animationDetailsVisibility', u'apiPrefLazyLoading', u'apiPrefOldPluginWarning', u'arcLenDimContext', u'artSelectContext', u'assemblyDefinitionAddLocator', u'assemblyDefinitionShowUsageMsg', u'assemblyLoadRepOnCreation', u'attrEdListType', u'attrEdPaneRatio', u'autoKeyCharacterState', u'autoKeyframeState', u'autoSaveDestination', u'autoSaveEnable', u'autoSaveFolder', u'autoSaveInterval', u'autoSaveLimitBackups', u'autoSaveMaxBackups', u'autoSavePrompt', u'azimuthElevationContext', u'batchRenderMessagesVerbosity', u'bevelOutputPolygons', u'birail1OutputPoly', u'birail2OutputPoly', u'birail3OutputPoly', u'blendOutputPoly', u'boundaryPolys', u'boxZoom2dContext', u'boxZoomContext', u'boxZoomtwContext', u'cameraNamesVisibility', u'cbDockWidgetArea', u'cbInMainWindow', u'channelsFieldWidth', u'channelsLayersPaneSize', u'channelsLayersSeparate', u'channelsLayersVisible', u'channelsLongName', u'channelsPrecision', u'channelsVisible', u'circularFilletOutputPolygons', u'clDockWidgetArea', u'clInMainWindow', u'clickBoxSize', u'cmdWindowTitleBarVis', u'collapseIconBarsInPanels', u'colorMaterialBlend', u'colorMaterialChannel', u'colorShadedDisplay', u'commandExecuterAutoCloseBraces', u'commandExecuterShowLineNumbers', u'commandExecuterSpacesPerTab', u'commandExecuterTabsForIndent', u'commandLineHoldFocus', u'commandLineInputFieldWidth', u'commandLineNumHistoryLines', u'commandLineSourceType', u'commandLineVisible', u'commandReporterSourceTypeFilter', u'commandReportercmdScrollFieldReporter1SuppressErrors', u'commandReportercmdScrollFieldReporter1SuppressInfo', u'commandReportercmdScrollFieldReporter1SuppressResults', u'commandReportercmdScrollFieldReporter1SuppressStackTrace', u'commandReportercmdScrollFieldReporter1SuppressWarnings', u'commandportDefaultName', u'commandportOpenByDefault', u'componentEditorSliderMax', u'componentEditorSliderMin', u'containerAutoSelectContainer', u'containerCentricSelection', u'containerChanBoxMaxNoTemplate', u'containerChanBoxMaxWithTemplate', u'containerFlatViewCap', u'containerRootUsesCustomIcon', u'containerSelRootsInOutliner', u'create2dTextureType', u'createMaterialsWithShadingGroup', u'createNurbsPrimitiveAsTool', u'createPolyPrimitiveAsTool', u'createTexturesWithPlacement', u'currentDisplayLayerActive', u'currentFrameVisibility', u'currentMenuBarTab', u'customPathHelpUrl2014', u'customSelectPriority', u'defaultCameraFarClipValue', u'defaultCameraNearClipValue', u'defaultDiskCacheSaveAsType', u'defaultFileCreateReferenceType', u'defaultFileExportActiveType', u'defaultFileExportAllType', u'defaultFileExportEditsType', u'defaultFileExportSelectionAsReferenceType', u'defaultFileImportType', u'defaultFileName', u'defaultFileOpenType', u'defaultFileReferenceType', u'defaultFileSaveType', u'defaultFontSize', u'defaultShowManipulator', u'defaultTextureSaveAsType', u'defaultTriangles', u'directKeyContext', u'disableComponentPopups', u'displayAffected', u'displayAlphaAsGreyScale', u'displayDivisionLines', u'displayGridAxes', u'displayGridAxesAccented', u'displayGridLines', u'displayGridOrthoLabelPosition', u'displayGridOrthoLabels', u'displayGridPerspLabelPosition', u'displayGridPerspLabels', u'displayLayerCurrent', u'displayLayerMerge', u'displayNewFeatureHighlights', u'displayOrthoGridLabels', u'displayPerspGridLabels', u'displayPolyBackFaceCull', u'displayPolyBorderEdgeHilite', u'displayPolyBorderEdgeSize', u'displayPolyBorderMapHilite', u'displayPolyCreaseEdgeHilite', u'displayPolyCreaseVertexHilite', u'displayPolyEdgeDisp', u'displayPolyFacetCentreDisp', u'displayPolyFacetNormalDisp', u'displayPolyFacetTrngleDisp', u'displayPolyFacetWarpDisp', u'displayPolyHoleFacesHilite', u'displayPolyNormalSize', u'displayPolyNumEdge', u'displayPolyNumFacet', u'displayPolyNumUv', u'displayPolyNumVertex', u'displayPolyObjsAffected', u'displayPolyUV', u'displayPolyUVSize', u'displayPolyUVTopology', u'displayPolyVertexNormals', u'displayPolyVertexSize', u'displayPolyVtxBackCull', u'displayPolyVtxDisp', u'displayRegionOfEffect', u'displayViewportGradient', u'distanceDimContext', u'dolly2dContext', u'dollyContext', u'dollytwContext', u'dopeSheetAutoFit', u'dopeSheetShowTicks', u'dynParticleContext', u'dynPrefAutoCreate', u'dynPrefEchoCollision', u'dynPrefRunupFrom', u'dynPrefRunupToCurrentTime', u'dynPrefSaveRuntimeState', u'dynWireCtx1', u'echoAllLines', u'enableRealWorldSize', u'enableSwatchRendering', u'expandPopupList', u'extrudeOutputPolygons', u'falloffCurveOptionVar', u'fastInteraction', u'fbikDetailsVisibility', u'fcheckAsImageViewer', u'fileCompressionMode', u'fileIgnoreVersion', u'fileOptionsGroupNodeResolvedName', u'fontSetOpt', u'frameRateVisibility', u'freeFormFilletOutputPolygons', u'ghostFrameStep', u'ghostFramesAfter', u'ghostFramesBefore', u'globalVisibilityOfComponentBars', u'gpuCacheAllAuto', u'gpuCacheBackgroundReading', u'gpuCacheBackgroundReadingAuto', u'gpuCacheBackgroundReadingRefresh', u'gpuCacheBackgroundReadingRefreshAuto', u'gpuCacheDisableVertexArraysAuto', u'gpuCacheGlSelectionMode', u'gpuCacheGlSelectionModeAuto', u'gpuCacheIgnoreUv', u'gpuCacheLowMemMode', u'gpuCacheLowVramOperationAuto', u'gpuCacheMaxNumOfBuffers', u'gpuCacheMaxNumOfBuffersAuto', u'gpuCacheMaxVram', u'gpuCacheMaxVramAuto', u'gpuCacheMinVerticesPerShape', u'gpuCacheMinVerticesPerShapeAuto', u'gpuCacheSelectionSurfaceThreshold', u'gpuCacheSelectionSurfaceThresholdAuto', u'gpuCacheSelectionWireThreshold', u'gpuCacheSelectionWireThresholdAuto', u'gpuCacheTwoSidedLightingAuto', u'gpuCacheTwoSidedLightingMode', u'gpuCacheUseVertexArrays', u'gpuCacheUvCoordinatesAuto', u'gpuCacheVP2OverrideAPI', u'gpuCacheVP2OverrideAPIAuto', u'gpuCache_importFitTimeRange', u'gpuCache_importSetCurrentTimeToStartFrame', u'graphDollyContext', u'graphEdLmbMovesSelections', u'graphEdSnapToAdjacentValues', u'graphEditorAutoFit', u'graphEditorClipTime', u'graphEditorHasClassicToolbar', u'graphTrackContext', u'greasePencilBrushEraserRadius', u'greasePencilBrushMarkerOpacity', u'greasePencilBrushMarkerRadius', u'greasePencilBrushPencilOpacity', u'greasePencilBrushPencilRadius', u'greasePencilBrushSoftPencilOpacity', u'greasePencilBrushSoftPencilRadius', u'greasePencilBrushType', u'greasePencilContext', u'gridDivisions', u'gridSize', u'gridSpacing', u'heatMapDisplay', u'heatMapMetric', u'heatMapType', u'helpBrowserRaiseWindow', u'helpBrowserUseWindow', u'helpLanguage', u'helpLineVisible', u'helpMode', u'highPrecisionNurbs', u'hikDetailsVisibility', u'hikRotationInterpolationDefault', u'hikSegmentScaleCompensateIsOff', u'hotBoxDisplayStyle', u'hotBoxTransparencyLevel', u'hsBinsSortShadingNodesOnly', u'hsClearBeforeGraphing', u'hsMergeConnections', u'hsOpaqueContainers', u'hsShowRelationships', u'hyperShadePanelCreateBarIconsAndTextWidth', u'hyperShadePanelCreateBarShown', u'hyperShadePanelTabSectionsShown', u'hypergraphColorOverride', u'hypergraphDisplayConstraints', u'hypergraphDisplayDeformers', u'hypergraphDisplayExpressions', u'hypergraphDisplayImage', u'hypergraphDisplayInvisibleNodes', u'hypergraphDisplayShapeNodes', u'hypergraphDisplayUnderworldNodes', u'hypergraphFreeform', u'hypergraphGraphLayoutStyle', u'hypergraphMergeConnections', u'hypergraphOpaqueContainers', u'hypergraphSelectedFromConnection', u'hypergraphSelectedToConnection', u'hypergraphShowCachedConnections', u'hypergraphShowRelationships', u'hypergraphUpdateNodeAdded', u'hypergraphUpdateSelection', u'ignoreSelectionPriority', u'ikHandleContext', u'ikHandleDisplayScale', u'ikIkFkDisplayMethod', u'ikIkFkJointDisplayScale', u'ikJointDisplayScale', u'ikSplineHandleContext', u'inTangentType', u'inViewMessageAssistEnable', u'inViewMessageDisplayTime', u'inViewMessageEnable', u'inViewMessageFontSize', u'inViewMessageOpacity', u'inViewMessageStatusEnable', u'insertJointContext', u'insertKeyContext', u'interactionModeToSuite', u'iprRenderMotionBlur', u'iprRenderShading', u'iprRenderShadowMaps', u'isAttributeEditorVisible', u'isHotBoxAnimationRowVisible', u'isHotBoxClothRowVisible', u'isHotBoxCommonRowVisible', u'isHotBoxDynamicsRowVisible', u'isHotBoxLiveRowVisible', u'isHotBoxPaneSpecificRowVisible', u'isHotBoxPolygonsRowVisible', u'isHotBoxRenderingRowVisible', u'isHotBoxRmbPopupsOn', u'isHotBoxShowAll', u'isHotBoxSurfacesRowVisible', u'isMarkingMenuOn', u'isShelfLoad', u'isShelfSave', u'isShelfVisible', u'jointContext', u'journalIsOn', u'keyframeRegionDirectKeyContext', u'keyframeRegionDollyContext', u'keyframeRegionInsertKeyContext', u'keyframeRegionMoveKeyContext', u'keyframeRegionScaleKeyContext', u'keyframeRegionSelectKeyContext', u'keyframeRegionSetKeyContext', u'keyframeRegionTrackContext', u'lastLocalWS', u'latticeDeformKeyContext', u'layersVisible', u'leDockWidgetArea', u'leInMainWindow', u'lineWidth', u'loadDynamics', u'loadUrchin', u'localHelpUrl2014', u'loftPolys', u'mainMenuBarNeedsToBeTraversedWhenHotkeyEditorIsOpened', u'mainWindowDisable', u'mainWindowMenubarVis', u'mainWindowTitleBarVis', u'manipGlobalScale', u'manipHandleSize', u'manipLinePickSize', u'manipLineSize', u'manipMiddleMouseRepos', u'manipPreviousStateSize', u'manipsRememberActiveHandle', u'markingMenuEditorAnnotations', u'markingMenuEditorDisplayAsMMFlags', u'markingMenuEditorFilenames', u'markingMenuEditorIsNamedCommandFlags', u'maxImageSizeForSwatchGen', u'maxTextureResolution', u'mayaMacButtonMap', u'mayaMode', u'miCacheOptimFileTextures', u'miCollapseHistoryOnProxyUpdate', u'miFileTextureCacheConversionScope', u'miFileTextureCacheLocation', u'miFileTextureCacheStorageMode', u'miUseMayaAlphaDetection', u'minorNodeTypes', u'minorNodeTypesDisplay', u'modelPanel1', u'modelPanel2', u'modelPanel3', u'modelPanel4', u'modelWithToolAlignCurve', u'modelWithToolAlignSurface', u'modelWithToolAttachCurve', u'modelWithToolAttachSurface', u'modelWithToolBevel', u'modelWithToolBoundary', u'modelWithToolCircFillet', u'modelWithToolCloseCurve', u'modelWithToolCloseSurface', u'modelWithToolCutCurve', u'modelWithToolCvHardness', u'modelWithToolDetachCurve', u'modelWithToolDetachSurface', u'modelWithToolDuplCurve', u'modelWithToolDuplicateSurface', u'modelWithToolExtendCosCurve', u'modelWithToolExtendCurve', u'modelWithToolExtendSurface', u'modelWithToolExtrude', u'modelWithToolFilletCurve', u'modelWithToolFitBspline', u'modelWithToolFreeFillet', u'modelWithToolGlobalStitch', u'modelWithToolInsertCurve', u'modelWithToolInsertSurface', u'modelWithToolIntersect', u'modelWithToolIntersectCurve', u'modelWithToolLoft', u'modelWithToolOffsetCoS', u'modelWithToolOffsetCurve', u'modelWithToolOffsetSurface', u'modelWithToolPlanar', u'modelWithToolProject', u'modelWithToolProjectTangent', u'modelWithToolRebuildCurve', u'modelWithToolRebuildSurface', u'modelWithToolReverseCurve', u'modelWithToolReverseSurface', u'modelWithToolRevolve', u'modelWithToolSmoothCurve', u'modelWithToolSquareSrf', u'modelWithToolUntrim', u'moveKeyContext', u'nameOfHotBoxC1MarkingMenu', u'nameOfHotBoxC2MarkingMenu', u'nameOfHotBoxC3MarkingMenu', u'nameOfHotBoxE1MarkingMenu', u'nameOfHotBoxE2MarkingMenu', u'nameOfHotBoxE3MarkingMenu', u'nameOfHotBoxN1MarkingMenu', u'nameOfHotBoxN2MarkingMenu', u'nameOfHotBoxN3MarkingMenu', u'nameOfHotBoxS1MarkingMenu', u'nameOfHotBoxS2MarkingMenu', u'nameOfHotBoxS3MarkingMenu', u'nameOfHotBoxW1MarkingMenu', u'nameOfHotBoxW2MarkingMenu', u'nameOfHotBoxW3MarkingMenu', u'newCurveDisplayCV', u'newCurveDisplayEP', u'newCurveDisplayHull', u'newFeatureHighlightColor', u'newNurbsIsoparms', u'newNurbsPointsShaded', u'newNurbsPointsWire', u'newPolyBackFaceCull', u'newPolyBorderEdgeHilite', u'newPolyBorderEdgeSize', u'newPolyBorderMapHilite', u'newPolyColorChannel', u'newPolyColorShaded', u'newPolyCreaseEdgeHilite', u'newPolyCreaseVertexHilite', u'newPolyDefaultVertexNormalMethod', u'newPolyEdgeDisp', u'newPolyFacetCentreDisp', u'newPolyFacetNormalDisp', u'newPolyFacetTrngleDisp', u'newPolyFacetWarpDisp', u'newPolyHoleFacesHilite', u'newPolyMaterialBlend', u'newPolyNormalSize', u'newPolyNumEdgeDisp', u'newPolyNumFacetDisp', u'newPolyNumUvDisp', u'newPolyNumVertexDisp', u'newPolyUVSize', u'newPolyVertexNormals', u'newPolyVertexSize', u'newPolyVtxBackCull', u'newPolyVtxDisp', u'newScenePanelConfiguration', u'newSurfaceDisplayCV', u'newSurfaceDisplayEP', u'newSurfaceDisplayHull', u'newSurfaceDisplayOrigin', u'nodeEdAddNewNodes', u'nodeEdAutoSizeNodes', u'nodeEdDefaultNodeViewMode', u'nodeEdExtendToShapes', u'nodeEdGridSnapping', u'nodeEdGridVisibility', u'nodeEdIgnoreAssets', u'nodeEdNoImplicitAddTypes', u'nodeEdSaveGraphInfoWithPanel', u'nodeEdShowNamespace', u'nodeEdShowSGShapes', u'nodeEdShowShapes', u'nodeEdShowTransforms', u'nodeEdSyncedSelection', u'nodeEditorShowBookmarkIcons', u'nodeEditorShowDepthTraversalIcons', u'nodeEditorShowDisplayIcons', u'nodeEditorShowGridIcons', u'nodeEditorShowLayoutIcons', u'nodeEditorShowLodPinIcons', u'nodeEditorShowRegraphIcons', u'numShelves', u'nurbsPrimitiveAsToolExitOnComplete', u'nurbsSelect', u'objectDetailsVisibility', u'oneTimeDefaultPluginLoad2008Ext2', u'oneTimeDefaultPluginLoad2011', u'oneTimeDefaultPluginLoad2011AdvantagePack', u'oneTimeDefaultPluginLoad2012', u'oneTimeDefaultPluginLoad2013', u'oneTimeDefaultPluginLoad2013Update', u'oneTimeDefaultPluginLoad2014', u'oneTimeDefaultPluginLoad2014Update', u'oneTimeDefaultPluginLoad50', u'oneTimeDefaultPluginLoad65', u'oneTimeDefaultPluginLoad70', u'oneTimeDefaultPluginUnload2008sp1', u'oneTimeUnlimitedPluginLoad30', u'optionBoxDimensionsAlembicImport', u'optionBoxDimensionsGpuCacheImport', u'outTangentType', u'outlinerEditorStateString', u'paramDimContext', u'parentAdd', u'parentPreserve', u'particleCountVisibility', u'performanceSettingBindSkinAndFlexors', u'performanceSettingBlendShapes', u'performanceSettingClusterResolution', u'performanceSettingClusters', u'performanceSettingFlexors', u'performanceSettingGlobalClusterResolution', u'performanceSettingGlobalLatticeResolution', u'performanceSettingLatticeResolution', u'performanceSettingLattices', u'performanceSettingPaintEffects', u'performanceSettingSculpts', u'performanceSettingStitchSurfaces', u'performanceSettingTrimDisplay', u'performanceSettingWires', u'planarTrimPolys', u'playbackMax', u'playbackMaxDefault', u'playbackMaxRange', u'playbackMaxRangeDefault', u'playbackMin', u'playbackMinDefault', u'playbackMinRange', u'playbackMinRangeDefault', u'playbackRangeVisible', u'playblastFile', u'playblastShowCVs', u'playblastShowCameras', u'playblastShowClipGhosts', u'playblastShowDeformers', u'playblastShowDimensions', u'playblastShowDynamicConstraints', u'playblastShowDynamics', u'playblastShowFluids', u'playblastShowFollicles', u'playblastShowGreasePencil', u'playblastShowGrid', u'playblastShowHUD', u'playblastShowHairSystems', u'playblastShowHandles', u'playblastShowHulls', u'playblastShowIKHandles', u'playblastShowImagePlane', u'playblastShowJoints', u'playblastShowLights', u'playblastShowLocators', u'playblastShowMotionTrails', u'playblastShowNCloths', u'playblastShowNParticles', u'playblastShowNRigids', u'playblastShowNURBSCurves', u'playblastShowNURBSSurfaces', u'playblastShowPivots', u'playblastShowPlanes', u'playblastShowPluginShapes', u'playblastShowPolyMeshes', u'playblastShowSelectionHighlighting', u'playblastShowStrokes', u'playblastShowSubdivSurfaces', u'playblastShowTextures', u'polyAppendFacetContext', u'polyAutoConvertAction', u'polyAutoInstallAction', u'polyAutoShowColorPerVertex', u'polyCount', u'polyCountVisibility', u'polyCreaseContext', u'polyCreateFacetContext', u'polyCreateMeshesSingleSided', u'polyCutContext', u'polyDefaultTangentSmoothingAngle', u'polyDefaultTangentSpace', u'polyDisplayDisplayBackfaceCulling', u'polyDisplayHardEdgeBackfaceCulling', u'polyDisplayLimitedToSelectedOV', u'polyDisplayWireBackfaceCulling', u'polyFaceSensitive', u'polyKeepFacetsGrouped', u'polyMergeEdgeContext', u'polyMergeFacetContext', u'polyMergeVertexContext', u'polyPrimitiveAsToolExitOnComplete', u'polyPrimitiveCylinderAxis', u'polyPrimitiveCylinderCreateUVs', u'polyPrimitiveCylinderHeight', u'polyPrimitiveCylinderNormalize', u'polyPrimitiveCylinderPreserveAspectRatio', u'polyPrimitiveCylinderRadius', u'polyPrimitiveCylinderRoundCap', u'polyPrimitiveCylinderSX', u'polyPrimitiveCylinderSY', u'polyPrimitiveCylinderSZ', u'polyPrimitiveCylinderTexture', u'polySelectContext', u'polySelectEditContext', u'polySlideEdgeContext', u'polySplitContext', u'polySplitContext2', u'polyVertexNormalEdit', u'popUpHelpMode', u'popUpSimpleHelpMode', u'popupMenuSelection', u'positionalTolerance', u'preSelectHilite', u'preferredRenderer', u'proxyOptionsNewProxyTag', u'proxyOptionsNewReferenceTag', u'proxyOptionsProxyTag', u'proxyOptionsReferenceTag', u'proxyOptionsUseNewProxyTag', u'proxyOptionsUseNewReferenceTag', u'quickFieldMode', u'quickPanelButtonLayout', u'rebuildSurfacePolys', u'refAnimCurvesEditable', u'refLockEditable', u'refreshMode', u'regionSelectKeyContext', u'renderLayerMerge', u'renderViewAutoRenderRegion', u'renderViewAutoResize', u'renderViewDisplayToolbar', u'renderViewImageFormat', u'renderViewRenderAllLayers', u'renderViewRenderLayersMode', u'renderViewRenderSelectedObj', u'renderViewShowCameraName', u'renderViewShowFrameNumber', u'renderViewShowLayerName', u'renderViewShowRenderTargetName', u'renderViewShowRenderTime', u'renderViewTestResolution', u'renderWindowSelectContextItem', u'renderedImageName', u'retimeKeyContext', u'revolveOutputPolygons', u'rollContext', u'rotationInterpolationDefault', u'saveActionsPreferences', u'saveActionsScriptEditor', u'saveWindowPos', u'scaleKeyContext', u'sceneTimecodeVisibility', u'selectAffectsActive', u'selectClickDrag', u'selectKeyContext', u'selectKeyframeRegionContext', u'selectPrefPriorityMode', u'selectPrefUseDepth', u'selectSingleMarquee', u'selectedShelf', u'selectionChildHighlightMode', u'seqDoubleClickSetTimeRange', u'setEditContext', u'setKeyContext', u'shadeTemplates', u'shelfFile1', u'shelfFile10', u'shelfFile11', u'shelfFile12', u'shelfFile13', u'shelfFile14', u'shelfFile15', u'shelfFile16', u'shelfFile17', u'shelfFile18', u'shelfFile2', u'shelfFile3', u'shelfFile4', u'shelfFile5', u'shelfFile6', u'shelfFile7', u'shelfFile8', u'shelfFile9', u'shelfItemSize', u'shelfItemStyle', u'shelfLoad1', u'shelfLoad10', u'shelfLoad11', u'shelfLoad12', u'shelfLoad13', u'shelfLoad14', u'shelfLoad15', u'shelfLoad16', u'shelfLoad17', u'shelfLoad18', u'shelfLoad2', u'shelfLoad3', u'shelfLoad4', u'shelfLoad5', u'shelfLoad6', u'shelfLoad7', u'shelfLoad8', u'shelfLoad9', u'shelfName1', u'shelfName10', u'shelfName11', u'shelfName12', u'shelfName13', u'shelfName14', u'shelfName15', u'shelfName16', u'shelfName17', u'shelfName18', u'shelfName2', u'shelfName3', u'shelfName4', u'shelfName5', u'shelfName6', u'shelfName7', u'shelfName8', u'shelfName9', u'shelfTabsVisible', u'shelvesLastUpdated', u'showCustomMenuSetsMenusInHotBox', u'showGrid', u'showHighlightNewFeaturesWindowOnStartup', u'showLearningMoviesOnStartup', u'showLineNumbersIsOn', u'showManip3D', u'showManipTextureContext', u'showStatusFiles', u'showStatusHistory', u'showStatusInputField', u'showStatusRender', u'showStatusSelectMasks', u'showStatusSelectMode', u'showStatusSelectionSet', u'showStatusSnap', u'skinBindingContext', u'smallFontSize', u'smpContinuity', u'smpDisplaySmoothMesh', u'smpDisplaySubdComps', u'smpKeepBorder', u'smpKeepHardEdge', u'smpKeepMapBorders', u'smpPropagateEdgeHardness', u'smpSizeOfMeshForWarning', u'smpSizeWarningDisabledForAllPolys', u'smpSmoothLevel', u'smpSmoothMeshSelectionMode', u'smpSmoothUVs', u'snapMagnet', u'snapMagnetTolerance', u'snapTogetherToolCtx', u'snapTolerance', u'snapUVTolerance', u'squareSrfPolys', u'stackTraceIsOn', u'statusLineVisible', u'subdivComponentDisplayStyle', u'sweepOutputPolygons', u'symmetricModellingAxisOption', u'symmetricModellingOption', u'symmetricModellingSeamFalloffCurve', u'symmetricModellingSeamOption', u'symmetricModellingSeamTolerance', u'symmetricModellingSpaceOption', u'symmetricModellingToleranceValue', u'tangentialTolerance', u'texLatticeDeformCtx', u'texMoveContext', u'texMoveUVShellCtx', u'texRotateContext', u'texScaleContext', u'texSmoothCtx', u'texSmudgeUVCtx', u'timeSliderHeight', u'timeSliderMaxPlaySpeed', u'timeSliderPlayBy', u'timeSliderPlayLoop', u'timeSliderPlaySpeed', u'timeSliderPlayView', u'timeSliderRepeatChunk', u'timeSliderRepeatOnHold', u'timeSliderShowFrames', u'timeSliderShowKeys', u'timeSliderShowKeysCombined', u'timeSliderSnapping', u'timeSliderSoundDisplay', u'timeSliderTickSize', u'timeSliderTickSpan', u'timeSliderTimeCode', u'timeSliderVisible', u'toggleOriginAxis', u'toolMessageHorizontalOffset', u'toolMessageTime', u'toolMessageVerticalOffset', u'toolMessageVisible', u'toolSettingsVisible', u'toolboxVisible', u'totalAnimateRollTime', u'track2dContext', u'trackContext', u'tracktwContext', u'transformTexSelectContext', u'trsManipsPreserveChildPosition', u'trsManipsPreserveUvs', u'tumbleContext', u'undoIsEnabled', u'undoIsInfinite', u'undoLength', u'upAxisDirection', u'useDefaultFileExtensions', u'useNewScenePanelConfig', u'useSaveScenePanelConfig', u'useScenePanelConfig', u'useScrollWheel', u'useSnapTolerance', u'userDefinedImageViewerCmdForImage', u'userDefinedImageViewerCmdForSequence', u'viewAxisVisibility', u'viewCubeCompassAngle', u'viewCubeFitToView', u'viewCubeInactiveOpacity', u'viewCubePreserveSceneUp', u'viewCubeScreenPosition', u'viewCubeShowCompass', u'viewCubeShowCube', u'viewCubeSize', u'viewCubeSnapToClosest', u'weightedTangents', u'wireCtx', u'wireframeOnShadedActive', u'workingUnitAngular', u'workingUnitAngularDefault', u'workingUnitLinear', u'workingUnitLinearDefault', u'workingUnitTime', u'workingUnitTimeDefault', u'wrinkleCtx', u'yawPitchContext'] #\n    pm.optionVar( remove='defaultTriangles' )\n    pm.optionVar( exists='defaultTriangles' )\n    # Result: False #", 
    "orbit": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    pm.orbit( 'cameraShape1', ha=-30 )# Change the horizontal angle by -30 degrees\n    \n    pm.orbit( 'cameraShape1', va=15 )# Change the vertical angle by 15 degrees\n    \n    pm.orbit( 'cameraShape1', ra=(-30, 15) )# Change the horizontal angle by -30 degrees and the vertical angle by 15 degrees", 
    "orbitCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.orbitCtx( 'orbitContext', os=30.0, lo=False )\n    # Result: u'orbitContext' #", 
    "orientConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Orients cube1 to match cone1.\n    pm.orientConstraint( 'cone1', 'cube1' )\n    \n    # Uses the average of the orientations of cone1 and surf2.\n    pm.orientConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.orientConstraint( 'cone1', 'cube2', e=True, w=10. )\n    \n    # Removes surf2 from cube2's orientConstraint\n    pm.orientConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's orientConstraint with the default weight\n    pm.orientConstraint( 'surf3', 'cube2' )\n    \n    # Constrain the y and z rotation of sph2 to sph1\n    pm.orientConstraint( 'sph1', 'sph2', skip=\"x\" )\n    \n    # Modify the constraint so that it constrains all axes of sph2\n    pm.orientConstraint( 'sph1', 'sph2', e=True, skip=\"none\" )\n    \n    # Create a cache for the orient constraint controlling cube2\n    pm.orientConstraint( 'cube2', e=True, cc=(1, 1000) )", 
    "outlinerEditor": "    \n    \n    import pymel.core as pm\n    \n    # Create a new regular outliner in its own window\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout( labelVisible=False )\n    # Result: ui.FrameLayout('window1|frameLayout15') #\n    panel = pm.outlinerPanel()\n    outliner = pm.outlinerPanel(panel, query=True,outlinerEditor=True)\n    pm.outlinerEditor( outliner, edit=True, mainListConnection='worldList', selectionConnection='modelList', showShapes=False, showReferenceNodes=False, showReferenceMembers=False, showAttributes=False, showConnected=False, showAnimCurvesOnly=False, autoExpand=False, showDagOnly=True, ignoreDagHierarchy=False, expandConnections=False, showNamespace=True, showCompounds=True, showNumericAttrsOnly=False, highlightActive=True, autoSelectNewObjects=False, doNotSelectNewObjects=False, transmitFilters=False, showSetMembers=True, setFilter='defaultSetFilter' )\n    # Result: ui.OutlinerEditor('window1|frameLayout15|outlinerPanel2|outlinerPanel2|outlinerPanel2|outlinerPanel2') #\n    pm.showWindow()", 
    "outlinerPanel": "    \n    \n    import pymel.core as pm\n    \n    # Create a new regular outliner in its own window\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout( labelVisible=False )\n    # Result: ui.FrameLayout('window1|frameLayout16') #\n    panel = pm.outlinerPanel()\n    outliner = pm.outlinerPanel(panel, query=True,outlinerEditor=True)\n    pm.outlinerEditor( outliner, edit=True, mainListConnection='worldList', selectionConnection='modelList', showShapes=False, showReferenceNodes=False, showReferenceMembers=False, showAttributes=False, showConnected=False, showAnimCurvesOnly=False, autoExpand=False, showDagOnly=True, ignoreDagHierarchy=False, expandConnections=False, showCompounds=True, showNumericAttrsOnly=False, highlightActive=True, autoSelectNewObjects=False, doNotSelectNewObjects=False, transmitFilters=False, showSetMembers=True, setFilter='defaultSetFilter' )\n    # Result: ui.OutlinerEditor('window1|frameLayout16|outlinerPanel3|outlinerPanel3|outlinerPanel3|outlinerPanel3') #\n    pm.showWindow()", 
    "overrideModifier": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    #    Map the \"a\" key such that it behaves just like the \"Alt\" key.\n    #\n    pm.nameCommand( 'alternateAltPressCommand', annotation='\"Alternate Alt-press modifier key\"', command='\"overrideModifier -press Alt\"' )\n    # Result: u'alternateAltPressCommand' #\n    pm.nameCommand( 'alternateAltReleaseCommand', annotation='\"Alternate Alt-release modifier key\"', command='\"overrideModifier -release Alt\"' )\n    # Result: u'alternateAltReleaseCommand' #\n    pm.hotkey( keyShortcut='a', name='alternateAltPressCommand' )\n    pm.hotkey( keyShortcut='a', releaseName='alternateAltPressCommand' )\n    \n    #    Example 2.\n    #\n    #    The following should restore the \"a\" hotkey to what it was\n    #    previously.\n    #\n    pm.overrideModifier( clear=True )\n    pm.hotkey( factorySettings=True )\n    pm.hotkey( sourceUserHotkeys=True )", 
    "paint3d": "", 
    "paintEffectsDisplay": "    \n    \n    import pymel.core as pm\n    \n    pm.paintEffectsDisplay( meshDrawEnable=True )\n    meshDrawEnabled = pm.paintEffectsDisplay(query=True, me=True)", 
    "pairBlend": "    \n    \n    import pymel.core as pm\n    \n    # Create a pairBlend node and connect sphere1's tx and ty to the pairBlend's input1\n    pm.nurbsSphere(n='sphere1')\n    pm.pairBlend( nd='sphere1', at=['tx','ty'] )\n    # Query the nodes connected to input1.\n    #\n    inputs = pm.pairBlend('pairBlend1' ,query=True, input1=True)", 
    "palettePort": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout(labelVisible=0)\n    # Result: ui.FrameLayout('window1|frameLayout17') #\n    \n    # create a palette of 20 columns and 15 rows\n    pm.palettePort( 'palette', dim=(20, 15) )\n    # Result: ui.PalettePort('window1|frameLayout17|palette') #\n    \n    # select cell #30\n    pm.palettePort( 'palette', edit=True, scc=30 )\n    # Result: ui.PalettePort('window1|frameLayout17|palette') #\n    \n    # return RGB value for this cell\n    pm.palettePort( 'palette', query=True, rgb=True )\n    # Result: [1.0, 0.4264214038848877, 0.0] #\n    \n    # make cell #100 transparent and blue\n    pm.palettePort( 'palette', edit=True, transparent=100, rgb=(100, 0.0, 0.0, 1.0) )\n    # Result: ui.PalettePort('window1|frameLayout17|palette') #\n    pm.palettePort( 'palette', edit=True, redraw=True )\n    # Result: ui.PalettePort('window1|frameLayout17|palette') #\n    \n    # returns the current transparent cell (there can be only one)\n    pm.palettePort( 'palette', query=True, transparent=True )\n    # Result: 100 #\n    pm.showWindow()", 
    "panZoom": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    \n    pm.panZoom( 'cameraShape1', d=0.3 )\n    \n    pm.panZoom( 'cameraShape1', abs=True, u=0.4 )\n    \n    pm.panZoom( 'cameraShape1', z=0.5 )", 
    "panZoomCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.panZoomCtx( 'panZoomContext', zs=1.0 )\n    # Result: u'panZoomContext' #", 
    "paneLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.paneLayout( configuration='quad' )\n    # Result: ui.PaneLayout('window1|paneLayout9') #\n    pm.button()\n    # Result: ui.Button('window1|paneLayout9|button62') #\n    pm.textScrollList( append=['one', 'two', 'three'] )\n    # Result: ui.TextScrollList('window1|paneLayout9|textScrollList2') #\n    pm.scrollField()\n    # Result: ui.ScrollField('window1|paneLayout9|scrollField2') #\n    pm.scrollLayout()\n    # Result: ui.ScrollLayout('window1|paneLayout9|scrollLayout1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|paneLayout9|scrollLayout1|columnLayout67') #\n    pm.button()\n    # Result: ui.Button('window1|paneLayout9|scrollLayout1|columnLayout67|button63') #\n    pm.button()\n    # Result: ui.Button('window1|paneLayout9|scrollLayout1|columnLayout67|button64') #\n    pm.button()\n    # Result: ui.Button('window1|paneLayout9|scrollLayout1|columnLayout67|button65') #\n    pm.showWindow()", 
    "panel": "    \n    \n    import pymel.core as pm\n    \n    MyLabel = 'My Panel'\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout( lv=0 )\n    # Result: ui.FrameLayout('window1|frameLayout18') #\n    pm.modelPanel( l=MyLabel )\n    # Result: ui.ModelPanel('modelPanel6') #\n    pm.showWindow()\n    \n    panels = pm.getPanel( all=True )\n    \n    for panel in panels:\n            if MyLabel == pm.panel( panel, q=True, label=True ):\n                    myPanel = panel\n                    print( 'Found: '+MyLabel )", 
    "panelConfiguration": "    \n    \n    import pymel.core as pm\n    \n    #    Create a custom panel configuration.\n    #\n    configName = pm.panelConfiguration(\n                                    label=\"Custom Panel Layout\",\n                                    sceneConfig=False,\n                                    configString=\"paneLayout -e -cn \\\"vertical2\\\" -ps 1 39 100 -ps 2 61 100 $gMainPane;\",\n                                    addPanel=[\n                                            (False,\n                                            'Outliner',\n                                            'outlinerPanel',\n                                            (\"{global int $gUseMenusInPanels;\\\n                                            $panelName = `outlinerPanel -mbv $gUseMenusInPanels -unParent -l \\\"Outliner\\\"`;\\\n                                            outlinerEditor -e -highlightActive true $panelName;}\"),\n                                            \"outlinerPanel -edit -l \\\"Outliner\\\"  $panelName\"),\n    \n                                            (True,\n                                            \"Persp View\",\n                                            \"modelPanel\",\n                                            (\"{global int $gUseMenusInPanels;\\\n                                            modelPanel -mbv $gUseMenusInPanels\\\n                                            -unParent -l \\\"Persp View\\\" -cam persp;}\" ),\n                                            \"modelPanel -edit -l \\\"Persp View\\\"  -cam \\\"persp\\\" $panelName\")\n                                    ]\n                            )\n    \n    #    Update the main Maya window to reflect the custom panel configuration.\n    #    Note also that your custom configuration may be selected from any\n    #    panel's \"Panels-\"Saved Layouts\" menu.\n    #\n    maya.mel.eval('setNamedPanelLayout( \"Custom Panel Layout\" )')", 
    "panelHistory": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window containing a pane layout.  The window also contains\n    #    an option menu for changing the layout configuration and two buttons\n    #    for stepping through the configuration history.\n    #\n    window = pm.window( title='panelHistory Example' )\n    form = pm.formLayout()\n    \n    #    Create the option menu for panel configuration.\n    #\n    configuration = pm.optionMenuGrp( label='Configuration', columnWidth2=( 100, 150 ) )\n    \n    single = pm.menuItem( label='Single' )\n    stacked = pm.menuItem( label='2 Stacked' )\n    sideBySide = pm.menuItem( label='2 Side by Side' )\n    four = pm.menuItem( label='Four' )\n    \n    #    Create the buttons for stepping through configuration history.\n    #\n    history = pm.rowLayout( numberOfColumns=3 , columnWidth3=( 100, 75, 75 ),\n                                                      columnAttach=[( 2, 'both', 0 ),( 3, 'both', 0 )] )\n    pm.text( label='History' )\n    backBtn = pm.button( label='Back' )\n    forwardBtn = pm.button( label='Forward' )\n    pm.setParent( '..' )\n    \n    #    Create the pane layout.\n    #\n    frame = pm.frameLayout( labelVisible=False )\n    panes = pm.paneLayout()\n    pm.text( label='Pane 1' )\n    pm.text( label='Pane 2' )\n    pm.text( label='Pane 3' )\n    pm.text( label='Pane 4' )\n    \n    #    Set up the attachments.\n    #\n    pm.formLayout( form, edit=True,\n                                     attachForm=[(configuration, 'top', 5),\n                                                             (configuration, 'left', 5),\n                                                             (history, 'left', 5),\n                                                             (history, 'right', 5),\n                                                             (frame, 'left', 5),\n                                                             (frame, 'right', 5),\n                                                             (frame, 'bottom', 5)],\n                                     attachControl=[(history, 'top', 5, configuration),\n                                                                    (frame, 'top', 5, history)] )\n    \n    #    Create the panel history object.\n    #\n    panelHistory = pm.panelHistory(targetPane=panes)\n    \n    #    Attach a command to the option menu to change the panel layout\n    #    configuration accordingly.\n    #\n    pm.optionMenuGrp( configuration,\n                                            edit=True,\n                                            changeCommand=('ExampleUpdatePaneLayout( \\\"'+ configuration + '\\\", \\\"' + panes + '\\\" )') )\n    \n    #    Attach commands to the buttons for stepping through the configuration\n    #    history.  The commands should also update the value of the option menu.\n    #\n    pm.button( backBtn, edit=True,\n                             command='pm.panelHistory( panelHistory, edit=True, back=True ); ExampleUpdateConfiguration( \\\"' + configuration + '\\\", \\\"' + panes + '\\\" )' )\n    pm.button( forwardBtn, edit=True,\n                             command='pm.panelHistory( panelHistory, edit=True, forward=True ); ExampleUpdateConfiguration( \\\"' + configuration + '\\\", \\\"' + panes + '\\\" )' )\n    \n    pm.showWindow( window )\n    \n    #    Call this procedure whenever the option menu's configuration value\n    #    changes.  This procedure will update the configuration of the\n    #    pane layout to reflect the change.\n    #\n    def ExampleUpdatePaneLayout( optionMenuGrp, paneLayout ):\n            if optionMenuGrp == \"\" or paneLayout == \"\":\n                    return\n    \n            value = pm.optionMenuGrp( optionMenuGrp, query=True, value=True )\n            if value == \"Single\":\n                    pm.paneLayout( paneLayout, edit=True, configuration='single' )\n            elif value == \"2 Stacked\":\n                    pm.paneLayout( paneLayout, edit=True, configuration='horizontal2' )\n            elif value == \"2 Side by Side\":\n                    pm.paneLayout( paneLayout, edit=True, configuration='vertical2' )\n            elif value == \"Four\":\n                    pm.paneLayout( paneLayout, edit=True, configuration='quad' )\n    \n    #    Call this procedure whenever the panel configuration changes due to\n    #    stepping through the panel history (ie. pressing either the \"Forward\"\n    #    or \"Back\" buttons.  This procedure will update the value of the\n    #    option menu to reflect the new pane layout configuration.\n    #\n    def ExampleUpdateConfiguration( optionMenuGrp, paneLayout ):\n            if optionMenuGrp == \"\" or paneLayout == \"\":\n                    return\n    \n            configuration = pm.paneLayout( paneLayout, query=True, configuration=True );\n    \n            if configuration == 'single':\n                    pm.optionMenuGrp( optionMenuGrp, edit=True, value='Single' )\n            elif configuration == 'horizontal2':\n                    pm.optionMenuGrp( optionMenuGrp, edit=True, value='2 Stacked' )\n            elif configuration == 'vertical2':\n                    pm.optionMenuGrp( optionMenuGrp, edit=True, value='2 Side by Side' )\n            elif configuration == 'quad':\n                    pm.optionMenuGrp( optionMenuGrp, edit=True, value='Four' )", 
    "paramDimContext": "    \n    \n    import pymel.core as pm\n    \n    pm.paramDimContext()\n    # Result: u'paramDimContext1' #", 
    "paramDimension": "    \n    \n    import pymel.core as pm\n    \n    pm.curve(d=3, p=((-9.3, 0, 3.2), (-4.2, 0, 5.0), (6.0, 0, 8.6), (2.1, 0, -1.9)), k=(0, 0, 0, 1, 2, 2));\n    pm.paramDimension( 'curveShape1.u[0.5]' )\n    # Result: nt.ParamDimension(u'curveShape1->paramDimensionShape1') #\n    # displays where u = 0.5 is on the curve\n    pm.sphere();\n    pm.paramDimension( 'nurbsSphere1.uv[0.5][0.5]' )\n    # Result: nt.ParamDimension(u'nurbsSphereShape1->paramDimensionShape2') #\n    # displays where u = 0.5 and v = 0.5 is on the surface", 
    "paramLocator": "    \n    \n    import pymel.core as pm\n    \n    # Creates a locator on curve1 at parameter value 0.5.\n    pm.paramLocator( 'curve1.u[0.5]' )\n    \n    # Creates a locator on curve1 at its second edit point. (ep[0] is the 1st edit point).\n    pm.paramLocator( 'curve1.ep[1]' )\n    \n    # Creates a locator on curve1 at normalized parameter value 0.25.\n    pm.paramLocator( 'curve1.un[0.25]' )\n    \n    # Creates a locator on surface1 at parameter value (0.5,0.5).\n    pm.paramLocator( 'surface1.uv[0.5][0.5]' )", 
    "parent": "    \n    \n    import pymel.core as pm\n    \n    # Create some objects\n    pm.circle( name='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.move( 5, 0, 0 )\n    pm.group( n='group1' )\n    # Result: nt.Transform(u'group1') #\n    pm.move( -5, 0, 0 )\n    pm.group( em=True, n='group2' )\n    # Result: nt.Transform(u'group2') #\n    \n    # Move the circle under group2.\n    # Note that the circle remains where it is.\n    pm.parent( 'circle1', 'group2' )\n    # Result: [nt.Transform(u'circle1')] #\n    \n    # Let's try that again with the -relative flag. This time\n    # the circle will move.\n    pm.undo()\n    pm.parent( 'circle1', 'group2', relative=True )\n    \n    # Create an instance of the circle using the parent command.\n    # This makes circle1 a child of group1 and group2.\n    pm.undo()\n    pm.parent( 'circle1', 'group2', add=True )\n    \n    # Remove group1 as a parent of the circle\n    pm.parent( 'group1|circle1', removeObject=True )\n    \n    # Move the circle to the top of the hierarchy\n    pm.parent( 'group2|circle1', world=True )\n    \n    # Remove an instance of a shape from a parent\n    pm.parent('nurbsSphere3|nurbsSphereShape1',shape=True,rm=True)", 
    "parentConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Position cube1 at the location of cone1\n    # Rotate cube1 to the rotation of cone1\n    pm.parentConstraint( 'cone1', 'cube1' )\n    \n    \n    # Position cube1 at the average of the locations of cone1 and surf2\n    # Rotate cube1 to the average of the rotations of cone1 and surf2\n    pm.parentConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.parentConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n    \n    # Removes surf2 from cube2's parentConstraint\n    pm.parentConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's parentConstraint with the default weight\n    pm.parentConstraint( 'surf3', 'cube2' )\n    \n    # Constrain position only in the y-axis with rotation\n    # constraining in all axes\n    pm.parentConstraint( 'cone2', 'cube2', st=[\"x\",\"z\"] )", 
    "particle": "    \n    \n    import pymel.core as pm\n    \n    # Creates a particle object with four particles\n    pm.particle( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\n    # Result: [nt.Transform(u'particle1'), nt.Particle(u'particleShape1')] #\n    \n    # Returns the age of the particle with id 2 in object particle1\n    pm.particle( 'particle1', q=True, attribute='age', id=2 )\n    # Result: [0.0] #\n    \n    # Returns the velocity of the 3rd particle in the currently selected\n    # particle object\n    pm.particle( attribute='velocity', q=True, order=3  )\n    # Result: [0.0, 0.0, 0.0] #\n    \n    # Edits the velocity of the 7th particle in the currently selected\n    # particle object to be 0.0, 1.0, 0.0\n    pm.particle( e=True, attribute='velocity', order=3, vectorValue=(0.0, 1.0, 0.0) )\n    # Result: [nt.Transform(u'particle1'), nt.Particle(u'particleShape1')] #\n    \n    # Edits the mass of the particle in \"particle1\" with id 3 to be 0.7\n    pm.particle( 'particle1', e=True, attribute='mass', id=3, fv=0.7 )\n    # Result: [nt.Transform(u'particle1'), nt.Particle(u'particleShape1')] #", 
    "particleExists": "    \n    \n    import pymel.core as pm\n    \n    # If the object does not exist then false (0) is returned\n    pm.file( f=True, new=True )\n    pm.particleExists( 'particleShape1' )\n    0\n    \n    # Create a particle shape and then querying for\n    # it will return true (1)\n    pm.emitter()\n    emitter1\n    pm.particle()\n    particle1 particleShape1\n    pm.connectDynamic( 'particle1', em='emitter1' )\n    particleShape1\n    pm.particleExists( 'particleShape1' )\n    1\n    \n    # You may also query using the transform name\n    pm.particleExists( 'particle1' )\n    1\n    \n    # The name of a soft body object can be used to query as well\n    pm.polySphere( r=1, sx=20, sy=20, ax=(0, 1, 0), tx=2, ch=1 )\n    pSphere1 polySphere1\n    pm.soft( c=True )\n    pSphere1Particle\n    pm.particleExists( 'pSphere1Particle' )\n    1", 
    "particleFill": "    \n    \n    import pymel.core as pm\n    \n    # create a poly torus with particles filling interior\n    pm.polyTorus()\n    # Result: [nt.Transform(u'pTorus1'), nt.PolyTorus(u'polyTorus1')] #\n    pm.particleFill()", 
    "particleInstancer": "    \n    \n    import pymel.core as pm\n    \n    # create a cube and a particle emitter\n    pm.polyCube()\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    pm.emitter(pos=(0,0,0), type='omni', r=100, sro=0, nuv=0, cye='none', cyi=1, spd=1, srn=0, nsp=1, tsp=0, mxd=0, mnd=0, dx=1, dy=0, dz=0, sp=0)\n    # Result: nt.PointEmitter(u'emitter1') #\n    pm.particle()\n    # Result: [nt.Transform(u'particle1'), nt.Particle(u'particleShape1')] #\n    pm.connectDynamic('particle1',em='emitter1')\n    # Result: [u'particleShape1'] #\n    # instance the cube to each particle emitted\n    pm.particleInstancer( 'particleShape1', addObject=True, object='pCube1', cycle='None', cycleStep=1, cycleStepUnits='Frames', levelOfDetail='Geometry', rotationUnits='Degrees', rotationOrder='XYZ', position='worldPosition', age='age')\n    # Result: u'instancer1' #\n    # query the instancer associated with the particle\n    pm.particleInstancer( 'particle1', q=True, name=True )\n    # Result: [u'instancer1'] #\n    # query the particle attribute name corresponding to the position attribute for the instancer\n    pm.particleInstancer( 'particle1', name='instancer1', q=True, position=True )", 
    "particleRenderInfo": "    \n    \n    import pymel.core as pm\n    \n    #Return the list of all render attributes\n    pm.particleRenderInfo(query=True, ala=True)\n    # Result: [u'attributeName:particleId:textfield', u'betterIllumination:false:toggleBtn', u'colorAccum:false:toggleBtn', u'flatShaded:false:toggleBtn', u'incandescence:-:vector', u'incandescencePP:-:vectorArray', u'lineWidth:1:intSlider:1:20', u'multiCount:10:intSlider:1:60', u'multiRadius:0.3:floatSlider:0:10', u'normalDir:2:intSlider:1:3', u'pointSize:2:intSlider:1:60', u'radius0:1:floatSlider:0:10', u'radius1:1:floatSlider:0:10', u'radius:0.5:floatSlider:0:10', u'radiusPP:-:floatArray', u'selectedOnly:false:toggleBtn', u'spriteNum:1:intField', u'spriteNumPP:-:floatArray', u'spriteScaleX:1.0:floatField', u'spriteScaleXPP:-:floatArray', u'spriteScaleY:1.0:floatField', u'spriteScaleYPP:-:floatArray', u'spriteTwist:0.0:floatSlider:-180:180', u'spriteTwistPP:-:floatArray', u'surfaceShading:0:floatSlider:0:1', u'tailFade:0:floatSlider:-1:1', u'tailSize:1:floatSlider:-100:100', u'threshold:0:floatSlider:0:10', u'useLighting:false:toggleBtn'] #", 
    "partition": "    \n    \n    import pymel.core as pm\n    \n    # To create a partition calls p1 which contains set1 and set2 ...\n    pm.partition( 'set1', 'set2', n='p1' )\n    \n    # To create an empty render partition ...\n    pm.partition( render=True )\n    \n    # To add/remove sets from partition p1 ...\n    pm.partition( 'set3', add='p1' )\n    pm.partition( 'set1', rm='p1' )\n    \n    # To get a list of all sets in a partition ...\n    pm.partition( 'p1', q=True )\n    \n    # To check if the partition is a render partition\n    pm.partition( 'p1', q=True, re=True )", 
    "pasteKey": "    \n    \n    import pymel.core as pm\n    \n    # Paste keyframes onto nurbsSphere1's translateX attribute at time 10\n    #\n    pm.pasteKey( 'nurbsSphere1', time=(10,10), attribute='translateX' )\n    \n    # Paste to all active objects, preserving the timing from the clipboard.\n    #\n    pm.pasteKey()", 
    "pathAnimation": "    \n    \n    import pymel.core as pm\n    \n    # Create a set of simple objects for the motion path animation\n    \n    # create a path, e,g, a curve\n    path = pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    \n    # create an object, e.g. a sphere\n    object = pm.sphere()\n    pm.scale( 0.5, 2.0, 0.2 )\n    \n    # 1. To animate the sphere along the curve, with one keyframe at\n    # the current time:\n    \n    pm.pathAnimation( object[0], c=path )\n    # Result: u'motionPath1' #\n    \n    # or:\n    \n    pm.select( object[0], path )\n    pm.pathAnimation()\n    \n    # 2. To animate the sphere along the curve, from time 0 to time 30:\n    \n    pm.pathAnimation( object[0], stu=0, etu=30, c=path )\n    \n    # 3. To align the sphere to its path:\n    \n    pm.pathAnimation( object[0], stu=0, etu=30, follow=True, c=path )\n    \n    # 4. To align the Z axis of sphere to the tangent of the curve, and\n    # to align the Y axis of the sphere to the up direction of the\n    # motion curve:\n    \n    pm.pathAnimation( object[0], stu=0, etu=30, fa='z', ua='y', c=path )\n    \n    # 5. To align the Z axis of sphere to the tangent of the motion curve,\n    # to align the Y axis of sphere to the up direction of the motion\n    # curve, and to bank with the curvature of the motion curve:\n    \n    pm.pathAnimation( object[0], stu=0, etu=30, fa='z', ua='y', bank=True, c=path )\n    \n    # 6. To change the setting on the bankScale for the motionPath1\n    # to negative 2.5 (i.e. bank out and multiply the computed\n    # bank value by 2.5):\n    \n    pm.pathAnimation( 'motionPath1', edit=True, bankScale=-2.5 )\n    \n    # Notes:\n    # If the computed bank angles are not large enough, the user can\n    # specify the bankScale to amplify them. The default value is 1.\n    \n    # Positive bankScale produces inward bank angle,\n    # negative bankScale produces outward bank angle.\n    \n    # The user can also change the maximum bank angle through\n    # the bankThreshold option. Default value is 90 degrees.", 
    "pause": "    \n    \n    import pymel.core as pm\n    \n    pm.pause( sec=10 )", 
    "percent": "    \n    \n    import pymel.core as pm\n    \n    # set percents on the selected items to 0.6\n    #\n    pm.percent( 'cluster1', v=0.6 )\n    \n    # set percents on the selected items dropping off along the\n    # z-axis starting at the origin. Dropoff distance is 5, and\n    # the initial value is 1. Dropoff type is linear.\n    #\n    pm.percent( 'cluster1', dp=(0, 0, 0), dax=(0, 0, 1), dt='linear', dds=5, v=1 )\n    \n    # set percents on the selected items dropping off along\n    # curve1. Dropoff distance is 5, and\n    # the initial value is 0.3.\n    #\n    pm.percent( 'cluster2', dc='curve2', dds=3, v=0.3 )\n    \n    # add 0.1 to the percents of the selected items\n    #\n    pm.percent( 'cluster1', v=0.1, ap=True )", 
    "performanceOptions": "    \n    \n    import pymel.core as pm\n    \n    # Disable the generation of stitch surfaces\n    pm.performanceOptions( ds=1 )\n    \n    # Put sculpt deformers into pass-through mode during interaction/playback\n    pm.performanceOptions( ps='interactive' )", 
    "pfxstrokes": "    \n    \n    import pymel.core as pm\n    \n    pm.pfxstrokes( fn='/tmp/output_file' )", 
    "pickWalk": "    \n    \n    import pymel.core as pm\n    \n    # Given the transforms A and B which are parented to a transform C,\n    # and C is instanced with parents D and E.\n    \n    pm.pickWalk( 'A', direction='right' )\n    \n    pm.select('|E|C')\n    pm.pickWalk( type='instances', direction='left')\n    \n    # The pickWalk command also works on CVs and edit points\n    pm.select('nurbsPlaneShape1.cv[2][1]')\n    pm.pickWalk(direction='right' )\n    nurbsPlaneShape1.cv[3][1]\n    \n    pm.pickWalk( direction='up' )\n    nurbsPlaneShape1.cv[3][2]\n    \n    pm.select( 'curveShape2.ep[1]' )\n    pm.pickWalk( direction='left' )\n    curveShape2.ep[0]", 
    "picture": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout68') #\n    pm.picture( image='sphere.png' )\n    # Result: u'window1|columnLayout68|picture1' #\n    pm.showWindow( window )", 
    "pixelMove": "    \n    \n    import pymel.core as pm\n    \n    # move selected objects to the right (in current view) by one \"pixel\"\n    pm.pixelMove( 1, 0 )\n    \n    # move selected objects up by one \"pixel\"\n    pm.pixelMove( 0, 1 )", 
    "planarSrf": "    \n    \n    import pymel.core as pm\n    \n    # create linear planar trimmed surface given boundary curve(s)\n    pm.planarSrf( d=1 )\n    \n    # use boundary curve(s) to create a hole by\n    # keeping the outside trimmed regions\n    pm.planarSrf( ko=True)", 
    "plane": "    \n    \n    import pymel.core as pm\n    \n    # Creates a plane of size (10x10) with center at (1,1,1)\n    pm.plane( p=(1, 1, 1), s=10 )\n    # Result: nt.Transform(u'plane1') #\n    \n    # Creates a plane of size (10x10) with center at (1,1,1) using various units\n    pm.plane( p=('1ft', '1ft', '1ft'), s='10in', r=('30deg', '30deg', '45deg') )\n    # Result: nt.Transform(u'plane2') #", 
    "play": "    \n    \n    import pymel.core as pm\n    \n    # Begin playback from min to max\n    #\n    pm.play( forward=True )\n    \n    # Begin playback from max to min\n    #\n    pm.play( forward=False )\n    \n    # Stop (forward or backward) playback\n    #\n    pm.play( state=False )\n    \n    # Record mode through one playback loop\n    #\n    pm.play( record=True )\n    \n    # Are we playing back?  Returns 1 if yes, 0 if no.\n    #\n    pm.play( q=True, state=True )\n    # Result: True #", 
    "playbackOptions": "    \n    \n    import pymel.core as pm\n    \n    pm.playbackOptions( loop='continuous' )\n    # Result: u'continuous' #\n    pm.playbackOptions( minTime='0sec', maxTime='1sec' )\n    # Result: 0.0 #\n    \n    # Playback every 2nd frame\n    #\n    pm.playbackOptions( by=2 )\n    # Result: 2.0 #", 
    "playblast": "    \n    \n    import pymel.core as pm\n    \n    # Run movieplayer on the currently playblasted range\n    # (including sound) and save the movie to a file.\n    #\n    pm.playblast( s=\"ohNo\", f=\"myMovie.mv\" )\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/myMovie.mv.mov' #\n    \n    # Run movieplayer on the currently playblasted range\n    # (at 60% of the size of the current view), and\n    # save the movie to file \"myMovie.mv\" and don't\n    # launch any viewing program.\n    #\n    pm.playblast( p=60, s=\"ohNo\", f=\"myMovie.mv\", v=False )\n    \n    # Output frames 2, 3, 8 as images and launch the viewer;\n    #\n    pm.playblast( frame=[8,3,2], format=\"image\", viewer=True )\n    \n    # Output an image sequence in 'gif' format\n    #\n    playblast -format 'image' -compression 'gif'", 
    "pluginDisplayFilter": "    \n    \n    import pymel.core as pm\n    \n    #    Register a plugin display filter.\n    #\n    pm.pluginDisplayFilter('myDisplayFilter', register = 1, label = 'My Display Filter', classification = 'drawdb/geometry/myShape')\n    # Result: u'myDisplayFilter' #\n    #    Deregister a plugin display filter.\n    #\n    pm.pluginDisplayFilter('myDisplayFilter', deregister = 1)\n    # Result: u'myDisplayFilter' #\n    #    List all plugin display filters.\n    #\n    filters = pm.pluginDisplayFilter(q = 1, listFilters = 1)\n    #    Query the label of a display filter\n    #\n    label = pm.pluginDisplayFilter('myDisplayFilter', q = 1, label = 1)", 
    "pluginInfo": "    \n    \n    import pymel.core as pm\n    \n    # List the plugins that are currently loaded\n    pm.pluginInfo( query=True, listPlugins=True )\n    # Result: [u'OpenEXRLoader', u'DirectConnect', u'AbcImport', u'mayaHIK', u'Mayatomr', u'ikSpringSolver', u'tiffFloatReader', u'AbcExport', u'VectorRender', u'ArubaTessellator', u'quatNodes', u'mayaCharacterization', u'gpuCache', u'rotateHelper', u'Substance', u'MayaMuscle', u'OneClick', u'AutodeskPacketFile', u'retargeterNodes', u'fbxmaya', u'matrixNodes', u'stereoCamera', u'sceneAssembly', u'ik2Bsolver'] #\n    \n    # Find the vendor of a plugin\n    pm.pluginInfo( 'newNode.py', query=True, vendor=True )\n    \n    # Find the commands provided by a given plug-in\n    pm.pluginInfo( 'helloCmd.py', query=True, command=True )\n    \n    # Turn on autoloading for a plug-in\n    pm.pluginInfo( 'newNode.py', edit=True, autoload=True )\n    \n    # Return all custom locators registered by plug-ins.\n    pm.pluginInfo( query=True, dependNodeByType=\"kLocatorNode\" )", 
    "pointConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Position cube1 at the location of cone1.\n    pm.pointConstraint( 'cone1', 'cube1' )\n    \n    # Uses the average of the position of cone1 and surf2.\n    pm.pointConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.pointConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n    \n    # Removes surf2 from cube2's pointConstraint\n    pm.pointConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's pointConstraint with the default weight\n    pm.pointConstraint( 'surf3', 'cube2' )\n    \n    # Constrain the y \"amp; z translation of sph2 to sph1\n    pm.pointConstraint( 'sph1', 'sph2', skip=\"x\" )", 
    "pointCurveConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Apply a constraint to manipulate the  position corresponding to\n    # the 1st edit point on curve1.\n    pm.pointCurveConstraint( 'curve1.ep[1]', ch=True )\n    \n    # Apply a constraint to manipulate the end point on curve1.\n    pm.pointCurveConstraint( 'curve1.un[1.0]', ch=True, w=1.0 )\n    \n    # Apply a constraint around the midpoint in the parameter domain on curve1.\n    pm.pointCurveConstraint( 'curve1.un[0.5]', ch=True, w=-1.0 )", 
    "pointLight": "    \n    \n    import pymel.core as pm\n    \n    pm.pointLight()\n    # Result: nt.PointLight(u'pointLightShape1') #", 
    "pointOnCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.pointOnCurve( 'curve1', pr=0.5, p=True )\n    # Returns the (x,y,z) position of curve1 at parameter 0.5.\n    \n    pm.pointOnCurve( 'curve1', pr=0.5 )\n    # Returns the (x,y,z) position of curve1 at parameter 0.5, since\n    # position is the default information.\n    \n    pm.pointOnCurve( 'curve1', pr=0.5, nn=True )\n    # Returns the (x,y,z) normalized normal of curve1 at parameter 0.5.\n    \n    pm.pointOnCurve( 'curve1', pr=0.5, cr=True )\n    # Returns the curvature radius of curve1 at parameter 0.5.\n    \n    infoNode = pm.pointOnCurve('curve1', ch=True, pr=0.55)\n    pm.getAttr(infoNode + \".position\")  # returns the position\n    pm.getAttr(infoNode + \".normal\")    # returns the normal\n    \n    # Returns a string which is the name of a new pointOnCurveInfo\n    # dependency node.  With this node connected to the curve,\n    # the output values of the pointOnCurveInfo node are always current\n    # even if, for example, the parameter is being animated.", 
    "pointOnPolyConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Position cube1 at the location of cone1.\n    pm.pointOnPolyConstraint( 'cone1', 'cube1' )\n    \n    # Uses the average of the position of cone1 and surf2.\n    pm.pointOnPolyConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.pointOnPolyConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n    \n    # Removes surf2 from cube2's pointOnPolyConstraint\n    pm.pointOnPolyConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's pointOnPolyConstraint with the default weight\n    pm.pointOnPolyConstraint( 'surf3', 'cube2' )\n    \n    # Constrain the y \"amp; z translation of sph2 to sph1\n    pm.pointOnPolyConstraint( 'sph1', 'sph2', skip=\"x\" )", 
    "pointOnSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.pointOnSurface( 'surface1', u=0.5, v=1.0, position=True )\n    # Returns the (x,y,z) position of the surface at parameter (u=0.5,v=1.0).\n    \n    infoNode = pm.pointOnSurface('surface1', ch= True, u=0.55, v=0.33)\n    pm.getAttr(infoNode + \".position\" )  # returns the position\n    # The pointOnSurface command returns  a string which is the name of\n    # a new pointOnSurfaceInfo dependency node.  With this node connected\n    # to the surface, the output values of the pointOnSurfaceInfo node\n    # are always current even if, for example, the surface parameters are\n    # being animated.", 
    "pointPosition": "    \n    \n    import pymel.core as pm\n    \n    pm.pointPosition( 'curve1.cv[3]' )\n    # Returns the (x,y,z) world position of curve1's 3rd CV.\n    \n    pm.pointPosition( 'particle1.pt[1]', l=True )\n    # Returns the (x,y,z) local position of the particle point.", 
    "poleVectorConstraint": "    \n    \n    import pymel.core as pm\n    \n    # aims the pole vector of handle1 at cone1.\n    pm.poleVectorConstraint( 'cone1', 'handle1' )\n    \n    # uses the average of the position of cone1 and surf2.\n    pm.poleVectorConstraint( 'cone1', 'surf2', 'handle2', w=.1 )\n    \n    # sets the weight for cone1's effect on handle2's poleVector to 10.\n    pm.poleVectorConstraint( 'cone1', 'handle2', e=True, w=10. )\n    \n    # removes surf2 from handle2's poleVectorConstraint.\n    pm.poleVectorConstraint( 'surf2', 'handle2', e=True, rm=True )\n    \n    # adds surf3 to handle2's poleVectorConstraint with the default weight.\n    pm.poleVectorConstraint( 'surf3', 'handle2' )", 
    "polyAppend": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCreateFacet( p=[(0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0)] )\n    \n    #add a new triangular facet described by the edge #0, and a free point\n    pm.polyAppend( a=[0, (5, -5, 0)] )\n    \n    #add a new quadrangular facet with 2 triangular holes.\n    pm.polyAppend( a=[1, (20, 0, 0), (20, 10, 0), (), (12, 6, 0), (14, 5, 0), (12, 4, 0), (), (16, 5, 0), (18, 6, 0), (18, 4, 0)] )", 
    "polyAppendFacetCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create a new poly append facet context, set it to add four vertices per new edge, and then switch to it\n    pm.polyAppendFacetCtx('polyAppendFacetCtx1', s=4)\n    pm.setToolTo('polyAppendFacetCtx1')", 
    "polyAppendVertex": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( sx=3, sy=3 )\n    \n    # add a new face\n    pm.polyAppendVertex( a=[6, 10, (.167, .3, -.167), (.167, .3, .167)] )\n    \n    # add a new holed face\n    pm.polyAppendVertex( a=[9, 5, (-.167, .3, .167), (-.167, .3, -.167), (), (-.167, .2, .1), (-.167, .1, 0), (-.167, .2, -.1)] )\n    \n    # connect the two new faces\n    pm.polyAppendVertex( a=[18, 17, 16, 19] )\n    \n    # add a new unconnected quad\n    pm.polyAppendVertex( a=[(-.5, .5, -.5), (.5, .5, -.5), (.5, .5, .5), (-.5, .5, .5)] )", 
    "polyAutoProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane with default UVs.\n    pm.polySphere( n='sph' )\n    \n    # Automatic projections with 6 planes.\n    pm.polyAutoProjection( 'sphShape.f[*]' )", 
    "polyAverageNormal": "    \n    \n    import pymel.core as pm\n    \n    # To average normals when they are within 0.2 distance.\n    pm.polyAverageNormal( distance=0.2 )\n    # To average normals when they are within 0.2 distance.\n    # Normalize the normals before computing the average.\n    pm.polyAverageNormal( distance=0.2, prenormalize=True )\n    # To averge normals when they are within 0.2 distance. Do not\n    # normalize the normals before computing the average (so to get weighted\n    # average). But do normalize the resulting normal.\n    pm.polyAverageNormal( distance=0.2, postnormalize=True )\n    # To average normals when they are within 0.2 distance. Do not\n    # allow zero normal and replace zero normal with (1 0 0).\n    pm.polyAverageNormal( distance=0.2, allowZeroNormal=False, replaceNormalXYZ=(1,0,0) )", 
    "polyAverageVertex": "    \n    \n    import pymel.core as pm\n    \n    # Create a cube with a 5x5x5 subdivision.\n    pm.polyCube( sx=5, sy=5, sz=5, n='plg' )\n    \n    # Average all the vertices\n    pm.polyAverageVertex( 'plg.vtx[*]' )", 
    "polyBevel": "    \n    \n    import pymel.core as pm\n    \n    # Replace an edge by 1 face, the width of the new face is given by the offset value.\n    pm.polyCube( n='plg' )\n    pm.polyBevel( 'plg.e[7]', offset=0.2 )\n    pm.delete( 'plg' )\n    \n    # Replace an edge by 4 faces, the new faces are rounding a smooth angle.\n    pm.polyCube( n='plg' )\n    pm.polyBevel( 'plg.e[7]', segments=4, offset=0.4 )\n    pm.delete( 'plg' )\n    \n    # Replace an edge by 4 faces, the new faces are rounding an angle specified by the default value of roundness (i.e 0.5).\n    pm.polyCube( n='plg' )\n    pm.polyBevel( 'plg.e[7]', segments=4, autoFit=Flase )\n    pm.delete( 'plg' )", 
    "polyBlendColor": "    \n    \n    import pymel.core as pm\n    \n    # This example creates two poly color sets for pPlane1.\n    # Apply red and green to the vertices of pPlane1 using two separate color sets, then blend their colors to the second color set\n    # After that, delete the first color set\n    \n    # Create a poly plane pPlane1\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create colorSet1, set to use RGBA channels\n    pm.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet1')\n    # Apply red color to the vertices of pPlane1\n    pm.polyColorPerVertex(r=1, g=0, b=0, a=1, cdo=True)\n    \n    # Create colorSet2, set to use RGBA channels\n    pm.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet2')\n    # Apply green color to the vertices of pPlane1\n    pm.polyColorPerVertex(r=0, g=1, b=0, a=1, cdo=True)\n    \n    # Blend the two color sets to colorSet2, set to use ColorChannel blend style, set all the blend weights to 0.5\n    pm.polyBlendColor(bcn='colorSet1', src='colorSet2', dst='colorSet2', bfn=6, bwa=0.5, bwb=0.5, bwc=0.5, bwd=0.5)\n    # Delete colorSet1\n    pm.polyColorSet(delete=True, colorSet='colorSet1')", 
    "polyBlindData": "    \n    \n    import pymel.core as pm\n    \n    pm.polyBlindData( 'pPlane1.vtx[2]', 'pPlane1.vtx[8]', id=9001, associationType='vertex', ldn='bdFloat', dbd=234 )", 
    "polyBoolOp": "    \n    \n    import pymel.core as pm\n    \n    # Union\n    pm.polyCube( n='Cube1', w=1, h=10, d=1 )\n    pm.polyCube( n='cub1', w=3, h=3, d=3 )\n    pm.polyBoolOp( 'cub1', 'Cube1', op=1, n='result1' )\n    \n    # Difference\n    pm.polyCube( n='Cube2', w=1, h=10, d=1 )\n    pm.polyCube( n='cub2', w=3, h=3, d=3 )\n    pm.polyBoolOp( 'cub2', 'Cube2', op=2, n='result2' )\n    pm.move( 5, 0, 0, 'result2' )\n    \n    # Intersection\n    pm.polyCube( n='Cube3', w=1, h=10, d=1 )\n    pm.polyCube( n='cub3', w=3, h=3, d=3 )\n    pm.polyBoolOp( 'cub3', 'Cube3', op=3, n='result3' )\n    pm.move( 10, 0, 0, 'result3' )", 
    "polyBridgeEdge": "    \n    \n    import pymel.core as pm\n    \n    pm.file( f=True, new=True )\n    pm.polyCube( sx=3, sy=3, sz=3 )\n    pm.delete( 'pCube1.f[9:17]' )\n    pm.move( -2, 0, 0, r=True )\n    pm.rotate( 0, 0, -90, r=True, os=True )\n    pm.polyCube( sx=3, sy=3, sz=3 )\n    pm.delete( 'pCube2.f[9:17]' )\n    pm.move( 2, 0, 0, r=True )\n    pm.rotate( 0, 0, 90, r=True, os=True )\n    pm.polyUnite( 'pCube1', 'pCube2', ch=1 )\n    \n    # Now bridge the two sets of border edges\n    pm.polyBridgeEdge( 'polySurface1.e[9:14]', 'polySurface1.e[42:47]', 'polySurface1.e[105:110]', 'polySurface1.e[138:143]', sv1=12, sv2=67, divisions=10 )", 
    "polyCacheMonitor": "    \n    \n    import pymel.core as pm\n    \n    # increment cache counter on polyExtrudeFace1 node\n    pm.polyCacheMonitor( nodeName='polyExtrudeFace1' )\n    # update/edit manipulate nodes which are present downstream\n    # with respect to polyExtrudeFace1\n    # decrement cache counter on polyExtrudeFace1 node\n    # so that the cache is set free\n    pm.polyCacheMonitor( nodeName='polyExtrudeFace1', cacheValue=False )", 
    "polyCheck": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane()\n    pm.polyCheck()\n    pm.polyCheck( f=True )", 
    "polyChipOff": "    \n    \n    import pymel.core as pm\n    \n    # Duplicate\n    pm.polyPlane( n='plg', w=10, h=10 )\n    pm.polyChipOff( 'plg.f[71:72]', 'plg.f[81:82]', dup=True, ltz=1 )\n    #facets are duplicated and translated in local space\n    \n    # Extract\n    pm.polyChipOff( 'plg.f[11:12]', 'plg.f[21:22]', dup=False, ty=1 )\n    #facets are extracted and translated in world space\n    \n    # Separate\n    pm.polyChipOff( 'plg.f[15:16]', 'plg.f[23:24]', dup=False, kft=False, ls=(.5, .5, 0) )\n    #facets are extracted then scaled separately\n    \n    # Together\n    pm.polyChipOff( 'plg.f[73:74]', 'plg.f[83:84]', dup=False, kft=True, ls=(.5, .5, 0) )\n    #facets are extracted then scaled together", 
    "polyClipboard": "    \n    \n    import pymel.core as pm\n    \n    # Copy uv, color and shader attributes\n    pm.polyClipboard( copy=True, uv=True, color=True, shader=True )\n    # Paste only shader attribute\n    pm.polyClipboard( paste=True, shader=True )\n    # Copy color attribute only\n    pm.polyClipboard( copy=True, color=True )\n    # Clear all the clipboard attributes\n    pm.polyClipboard( clear=True, uv=True, color=True, shader=True )", 
    "polyCloseBorder": "    \n    \n    import pymel.core as pm\n    \n    # Creation of a plane.\n    pm.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n    \n    # Display the poly Borders\n    pm.polyOptions( db=True )\n    \n    # Delete some facets of the plane.\n    pm.delete( 'plg.f[33:36]', 'plg.f[43:46]', 'plg.f[53:56]', 'plg.f[63:66]' )\n    \n    # Close the border on one of the edges of the hole\n    # Note that only one edge for each hole needs to be given\n    pm.select( 'plg.e[89]', r=True )\n    pm.polyCloseBorder()\n    # There is now a face where the hole was\n    \n    #Reset display\n    pm.polyOptions( db=False )", 
    "polyCollapseEdge": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane.\n    pm.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n    \n    # Collapse one edge,\n    pm.polyCollapseEdge( 'plg.e[200]' )\n    \n    # Or multiple edges:\n    pm.select( 'plg.e[74]', 'plg.e[92]', 'plg.e[94:95]' )\n    # Command works on selection list if\n    # no command line arguments are given.\n    pm.polyCollapseEdge()\n    \n    # Note that the command works on one edge at a time, so the\n    # resulting vertex from a selection of multiple edges will\n    # not typically be in the center of the selection.", 
    "polyCollapseFacet": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane.\n    pm.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n    \n    # You can collapse a facet,\n    pm.polyCollapseFacet( 'plg.f[54]' )\n    \n    # Or several ones.\n    pm.polyCollapseFacet( 'plg.f[33:35]', 'plg.f[43:45]', 'plg.f[53:55]' )", 
    "polyColorBlindData": "    \n    \n    import pymel.core as pm\n    \n    # In these examples we have type 1000, with one double attribute\n    # called \"fluffy\", and type 1001 with attributes \"grimy\" and \"slimy\".\n    # Color all items of id 1000 red. Note that we must also specify\n    # None color (black) and Clash color(cyan). Note that we must also\n    # specify the names of the attributes, even if we don't care about\n    # the attribute values:\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=0, n='fluffy', cr=1, cg=0, cb=0 )\n    # Now color only those values of \"fluffy\" between 2 and 5:\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=2, dt='double', n='fluffy', umn=1, mnv=2, umx=1, mxv=5, cr=1, cg=0, cb=0 )\n    # Note for a continuous range query we must specify min, max and\n    # out of range color instead of just color (here values between 2 and 5\n    # are colored between white and gray, out of range values are yellow):\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=6, dt='double', n='fluffy', bmr=1, bmg=1, bmb=0, amr=1, amg=1, amb=0, mnr=0.250980407, mng=0.250980407, mnb=0.250980407, mxr=1, mxg=1, mxb=1, mnv=2, mxv=5 )\n    # Now, for attribute \"fluffy\", color values of 2 red and values of 2 green:\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=1, dt='double', n='fluffy', v='2', cr=1, cg=0, cb=0, id=1000, num=1, m=1, dt='double', n='fluffy', v='3', cr=0, cg=1, cb=0 )\n    # To just query and not color, filter the active selection list\n    # and return the list of components that meet the criteria (in this\n    # case having blind data of type 1000)\n    pm.polyColorBlindData( 1000, '-num', 1, '-m', 0, '-n', 'fluffy', query=True, id=True )\n    # Now if we have 2 attributes:\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1001, num=2, m=0, n='grimy', n='slimy', cr=1, cg=0, cb=0 )\n    # Note that when querying for value, values of all attrs must be specified\n    # here we set (grimy = 22, slimy = 1) to be red, and (grimy = 55, slimy = 2)\n    # to be green\n    pm.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1001, num=2, m=1, dt='double', n='grimy', v='22', cr=1, cg=0, cb=0, dt='int', n='slimy', v='1', cr=1, cg=0, cb=0, id=1001, num=2, m=1, dt='double', n='grimy', v='55', cr=0, cg=1, cb=0, dt='int', n='slimy', v='2', cr=0, cg=1, cb=0 )", 
    "polyColorDel": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=20, h=20 )\n    polyColorPerVertex -r 0 -g 0 -b 1 -a 1 -cdo;\n    \n    # Delete the color from the given faces.\n    pm.polyColorDel( 'plg.f[11:13]', 'plg.f[16:18]' )", 
    "polyColorMod": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane pPlane1\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create colorSet1 , set to use RGBA channel\n    pm.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet1')\n    # Apply red color to the vertices of pPlane1\n    pm.polyColorPerVertex(r=1, g=0, b=0, a=1, cdo=True)\n    \n    # Modified the color of colorSet1 to green\n    pm.polyColorMod('pPlane1',huev=120, bcn='colorSet1')", 
    "polyColorPerVertex": "    \n    \n    import pymel.core as pm\n    \n    # To set the rgb channels of selected vertices:\n    pm.polyColorPerVertex( rgb=(0.8, 0.0, 0.4) )\n    # To set just the \"g\" channel of selected vertices:\n    pm.polyColorPerVertex( g =0.5 )\n    # To add to the current value of just the \"g\" channel of selected vertices:\n    pm.polyColorPerVertex( rel=True, g =0.2 )\n    # To query the \"g\" and \"b\" channels of color on selected vertices:\n    pm.polyColorPerVertex( query=True, g=True, b=True )", 
    "polyColorSet": "    \n    \n    import pymel.core as pm\n    \n    # To set the current color set to be \"color2\".\n    pm.polyColorSet(currentColorSet=True, colorSet= 'color2' )\n    # To query the current color set.\n    pm.polyColorSet( query=True, currentColorSet=True )\n    # To create a per-instance color set family with one set member\n    # per selected instance.\n    pm.polyColorSet(create=True,colorSet='perInst',perInstance=True,unshared=True)\n    # To create a per-instance color set family with one set member\n    # for all selected instances.\n    pm.polyColorSet(create=True,colorSet='perInst',perInstance=True)\n    # To rename a currently existing color set from \"color3\" to \"color4\".\n    pm.polyColorSet( rename=True, colorSet= 'color3', newColorSet= 'color4' )\n    # Rename the current color set (if any) to \"color3\".\n    pm.polyColorSet( rename=True, newColorSet= 'color3')\n    # To delete a currently existing color set \"color3\".\n    pm.polyColorSet( delete= True, colorSet= 'color3')\n    # To delete the current color set (if any)\n    pm.polyColorSet( delete=True )\n    # Copy values of color set \"color1\" to \"color2\"\n    # Note if the second color set exist it will be overwriten by\n    # the copy. Leaving the destination color blank and the command\n    # will generate a new unique name based on the source name.\n    pm.polyColorSet( copy= True, colorSet='color1', newColorSet ='color2')\n    # Copy values of the current color set to \"color2\"\n    pm.polyColorSet( copy= True, newColorSet='color2')\n    # Make a copy of \"color1\" to a new color set. The\n    # name of which is automatically generated and returned.\n    pm.polyColorSet( copy= True, colorSet='color1' )\n    # Create a new empty color set\n    pm.polyColorSet( create=True, colorSet='newColor')\n    # To query all of the color sets\n    pm.polyColorSet( query=True, allColorSets=True )\n    # To query all of the color set names and their representation values\n    pm.polyColorSet( query=True, allColorSets=True, representation=True )\n    # To query the clamped value of the current color set\n    pm.polyColorSet( query=True, currentColorSet=True, clamped=True )", 
    "polyCompare": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere()\n    pm.polySphere()\n    pm.select( cl=True )\n    pm.select( 'pSphere1', 'pSphere2', r=True )\n    pm.polyCompare()", 
    "polyCone": "    \n    \n    import pymel.core as pm\n    \n    # Create a cone, with 10 subdivisions in the X direction,\n    # 15 subdivisions in the Y direction and 20 subdivisions in the Z direction,\n    # the radius of the cone is 20, the height of the cone is 10.\n    pm.polyCone( sx=10, sy=15, sz=5, r=20, h=10)\n    \n    # Create a cone, called \"myCone\", on each direction there are 5 subdivisions.\n    pm.polyCone( n='myCone', sx=5, sy=5, sz=5)\n    \n    # Query the radius of \"myCone\"\n    r = pm.polyCone( 'myCone', q=True, r=True )", 
    "polyConnectComponents": "    \n    \n    import pymel.core as pm\n    \n    # make a sphere\n    pm.polySphere( r=1, sx=20, sy=20, ax=(0,1,0), cuv=2, ch=1, name='sph' )\n    # split two faces by specifying 3 vertices\n    pm.polyConnectComponents( 'sph.vtx[254]', 'sph.vtx[256]', 'sph.vtx[275]', ch=1 )\n    # split two faces by specifying 3 edges\n    pm.polyConnectComponents( 'sph.e[278]', 'sph.e[637:638]', ch=1 )\n    # split three faces\n    pm.polyConnectComponents( 'sph.f[66]', 'sph.f[215:217]', ch=1 )\n    # a complex split involving vertices, edges and faces, in a loop\n    pm.polyConnectComponents( 'sph.f[270:271]', 'sph.vtx[273]', 'sph.e[232]', 'sph.e[252]',  'sph.e[592]', 'sph.f[210]', 'sph.vtx[229]', 'sph.e[249]', 'sph.e[269]', ch=1 )", 
    "polyCopyUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere, with default UVset.\n    pm.polySphere()\n    \n    # Create a second UV set\n    pm.select( 'pSphere1.f[0:399]', r=True )\n    pm.polyProjection( type='Planar', ra=0, isu=1, isv=1, cm=True, uvSetName='newUVs' )\n    \n    # Copy the UVs of the fisrt 200 faces from the new set to the default one\n    pm.polyCopyUV( 'pSphere1.f[0:199]', uvi='newUVs', uvs='map1' )", 
    "polyCrease": "    \n    \n    import pymel.core as pm\n    \n    # To set a crease value of 0.9 on the selected edges or vertices\n    pm.polyCrease( value=0.9 )", 
    "polyCreaseCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n    \n    # Create a new poly crease context, then switch to it\n    pm.polyCreaseCtx('polyCreaseCtx1')\n    pm.setToolTo('polyCreaseCtx1')", 
    "polyCreateFacet": "    \n    \n    import pymel.core as pm\n    \n    # Create a triangular facet\n    pm.polyCreateFacet( p=[(0.0, 0.0, 0.0), (10.0, 0.0, 0.0), (10.0, 10.0, 0.0)] )\n    \n    # Create a quadrangular facet with two triangular holes inside\n    # Note that, in Python, specifying an empty tuple in the point list marks the\n    # beginning of a hole specification\n    pm.polyCreateFacet( p=[(0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0), (), (4, 2, 0), (5, 4, 0), (6, 2, 0), (), (5, 6, 0), (4, 8, 0), (6, 8, 0)] )\n    pm.move( 0, 0, 10, r=True )", 
    "polyCreateFacetCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new poly facet create context, set it to add four vertices per new edge, then switch to it\n    pm.polyCreateFacetCtx('polyCreateFacetCtx1', s=4)\n    pm.setToolTo('polyCreateFacetCtx1')", 
    "polyCube": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( sx=10, sy=15, sz=5, h=20 )\n    #result is a 20 units height rectangular box\n    #with 10 subdivisions along X, 15 along Y and 20 along Z.\n    \n    pm.polyCube( sx=5, sy=5, sz=5 )\n    #result has 5 subdivisions along all directions, default size\n    \n    # query the width of a cube\n    w = pm.polyCube( 'polyCube1', q=True, w=True )", 
    "polyCut": "    \n    \n    import pymel.core as pm\n    \n    # Introduce new edges at the middle of a cylinder\n    #\n    pm.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylA' )\n    pm.polyCut( 'pCylA.f[0:59]', cd='Y', ch=1 )\n    \n    # Delete the bottom half of the cylinder\n    #\n    pm.select( cl=True )\n    pm.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylB' )\n    pm.move( 3, 0, 0, r=True )\n    pm.polyCut( 'pCylB.f[0:59]', cd='Y', df=1, ch=1 )\n    pm.select( cl=True )\n    \n    \n    # Split the bottom half of the cylinder\n    #\n    pm.select( cl=True )\n    pm.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylC' )\n    pm.move( 6, 0, 0, r=True )\n    pm.polyCut( 'pCylC.f[0:59]', cd='Y', ef=1, ch=1 )\n    \n    # select one of the cylinders, and select the polyCut node from the\n    # channel box, and enter the showManipulator Tool, on the Toolbar.\n    # You can interactively place the cutting plane, and the result of\n    # cut operation will adjust accordingly.", 
    "polyCutCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n    \n    # Create a new cut facets context, then switch to it\n    pm.polyCutCtx('polyCutCtx1')\n    pm.setToolTo('polyCutCtx1')", 
    "polyCylinder": "    \n    \n    import pymel.core as pm\n    \n    # Create a rectangle, with 10 subdivisions in the X direction,\n    # 15 subdivisions in the Y direction and 20 subdivisions in the Z direction,\n    # the height of the cylinder is 20.\n    pm.polyCylinder( sx=10, sy=15, sz=5, h=20)\n    \n    # Create a cylinder, called \"myCylinder\", on each direction there are 5 subdivisions.\n    pm.polyCylinder(n='myCylinder', sx=5, sy=5, sz=5)\n    \n    # Query the radius of \"myCylinder\"\n    r = pm.polyCylinder( 'myCylinder', q=True, r=True )", 
    "polyCylindricalProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere with default UVs.\n    pm.polySphere( n='sphere', r=10 )\n    \n    # Create a lambert node.\n    pm.shadingNode( 'lambert', n='myLambert', asShader=True )\n    pm.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\n    pm.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n    \n    # Create a texture checker.\n    pm.shadingNode( 'checker', asTexture=True )\n    pm.shadingNode( 'place2dTexture', asUtility=True )\n    pm.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n    \n    # Assign the texture the the lambert node.\n    pm.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n    \n    # Set the textured display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n    \n    # Assign the lambert shader to all faces of the sphere.\n    pm.sets('sphere.f[0:399]', edit=True, forceElement= 'myLambertSG' )\n    \n    # Replace default UVs on the top of the sphere :\n    # Rotates the map of 90 degrees, reduces its U aperture to 36 degrees, and its V scale to 0.1\n    pm.polyCylindricalProjection( 'sphere.f[180:359]', 'sphere.f[380:399]', ra=90.0, pc=(0, 0, 0), psu=36, isv=0.1 )\n    \n    # Set the wireframe display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polyDelEdge": "    \n    \n    import pymel.core as pm\n    \n    # Without cleanup\n    pm.polyPlane( n='plg1', w=10, h=10 )\n    pm.move( -6, 0, 0 )\n    pm.select( 'plg1.e[26]', 'plg1.e[28]', 'plg1.e[30]', 'plg1.e[32]', 'plg1.e[34]', 'plg1.e[36]', 'plg1.e[38]', 'plg1.e[47]', 'plg1.e[49]', 'plg1.e[51]', 'plg1.e[53]', 'plg1.e[55]', 'plg1.e[57]', 'plg1.e[59]' )\n    pm.polyDelEdge( cv=False )\n    \n    # With cleanup\n    pm.polyPlane( n='plg2', w=10, h=10 )\n    pm.move( 6, 0, 0 )\n    pm.select( 'plg2.e[26]', 'plg2.e[28]', 'plg2.e[30]', 'plg2.e[32]', 'plg2.e[34]', 'plg2.e[36]', 'plg2.e[38]', 'plg2.e[47]', 'plg2.e[49]', 'plg2.e[51]', 'plg2.e[53]', 'plg2.e[55]', 'plg2.e[57]', 'plg2.e[59]' )\n    pm.polyDelEdge( cv=True )\n    \n    pm.select( 'plg1', 'plg2' )\n    pm.polyOptions( ao=True, dv=True )", 
    "polyDelFacet": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere( n='plg', sx=10, sy=20, r=10 )\n    pm.polyDelFacet( 'plg.f[115]', 'plg.f[125]', 'plg.f[117]', 'plg.f[127]', 'plg.f[55:57]', 'plg.f[65]', 'plg.f[67]' )", 
    "polyDelVertex": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg' )\n    pm.select( 'plg.vtx[59:61]' )\n    # These vertices are not winged, so they can not be deleted\n    pm.polyDelVertex()\n    \n    pm.select( 'plg.e[93]', 'plg.e[95]', 'plg.e[97]', 'plg.e[114]', 'plg.e[116]', 'plg.e[118]' )\n    pm.delete()\n    pm.select( 'plg.vtx[59:61]' )\n    # Now they are winged, as they are only connected to two edges.\n    pm.polyDelVertex()\n    \n    # Corners are winged, so they can be deleted\n    pm.select( 'plg.vtx[0]', 'plg.vtx[10]', 'plg.vtx[107]', 'plg.vtx[117]' )\n    pm.polyDelVertex()\n    \n    pm.select( 'plg' )\n    pm.polyOptions( ao=True, dv=True )", 
    "polyDuplicateAndConnect": "    \n    \n    import pymel.core as pm\n    \n    pm.polyDuplicateAndConnect( 'pPlane1' )", 
    "polyDuplicateEdge": "    \n    \n    import pymel.core as pm\n    \n    pm.polyTorus()\n    pm.polyDuplicateEdge( 'pTorus1.e[121:126]', of=0.5 )", 
    "polyEditEdgeFlow": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere.\n    pm.polySphere( n='plg', r=5 )\n    \n    pm.select( 'plg.e[200:219]' )\n    # Flow selected edges by default\n    pm.polyEditEdgeFlow()\n    \n    # Flow selected edge (convex, 20)\n    pm.polyEditEdgeFlow( 'plg.e[200:219]', adjustEdgeFlow = 20 )", 
    "polyEditUV": "    \n    \n    import pymel.core as pm\n    \n    # To query the u and v values of selected uvs:\n    pm.polyEditUV( query=True )\n    # To tweak the u and v values of selected uvs:\n    pm.polyEditUV( relative=True, uValue=0.05925926, vValue=0.05555556 )\n    # To set absolute values for u and v values of selected uvs:\n    pm.polyEditUV( relative=False, uValue=0.556, vValue=0.56 )\n    # To rotate selected uv points about a pivot:\n    pm.polyEditUV( pivotU=0.5, pivotV=0.5, angle=-15 )\n    # To scale selected uv points about a pivot:\n    pm.polyEditUV( pivotU=0.5, pivotV=0.5, scaleU=-0.06, scaleV=-0.06 )", 
    "polyEditUVShell": "    \n    \n    import pymel.core as pm\n    \n    # To query the u and v values of selected uvs:\n    pm.polyEditUVShell( query=True )\n    # To tweak the u and v values of selected uvs:\n    pm.polyEditUVShell( relative=True, uValue=0.05925926, vValue=0.05555556 )\n    # To rotate selected uv points about a pivot:\n    pm.polyEditUVShell( pivotU=0.5, pivotV=0.5, angle=-15 )", 
    "polyEvaluate": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', sx=4, sy=4, w=5, h=5 )\n    pm.select( 'plg.f[2]', 'plg.f[4]' )\n    \n    # query the number of faces\n    pm.polyEvaluate( f=True )\n    # Result: 16\n    \n    # query the number of triangles\n    pm.polyEvaluate( t=True )\n    # Result: 32\n    \n    # query the number of selected faces\n    pm.polyEvaluate( faceComponent=True )\n    # Result: 2\n    \n    # query the number of vertices and faces\n    pm.polyEvaluate( v=True, f=True )\n    # Result: {'vertex': 25, 'face': 16}\n    \n    # formatted query of the number of vertices and faces\n    pm.polyEvaluate( v=True, f=True, fmt=True )\n    # Result: \"face=16 vertex=25\"\n    \n    # query all\n    pm.polyEvaluate()\n    # Result: {'vertexComponent': 0, 'shell': 1, 'triangle': 32, 'faceComponent': 2, 'vertex': 25, 'face': 16, 'triangleComponent': 0, 'edge': 40, 'uvcoord': 25, 'uvComponent': 0, 'edgeComponent': 0}\n    \n    #formatted query of all information\n    pm.polyEvaluate( fmt=True )\n    # Result: vertex=25 edge=40 face=16 uvcoord=25 triangle=32 shell=1\n    #    vertexComponent=0 edgeComponent=0 faceComponent=2 uvComponent=0\n    #    boundingBox= X[-2.50,2.50] Y[0.00,0.00] Z[-2.50,2.50]\n    #    boundingBoxComponent= X[-2.50,1.25] Y[0.00,0.00] Z[0.00,2.50]\n    #    boundingBox2d= U[0.00,1.00] V[0.00,1.00]\n    #    boundingBoxComponent2d= U[0.00,0.75] V[0.00,0.50]\n    #    area=25.00 worldArea=25.00\n    \n    # accurate bounding box evaluation\n    pm.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1 )\n    pCylinder1 polyCylinder1\n    pm.rotate( 38.340875, 0, 0, r=True, os=True )\n    pm.rotate( 0, 0, -36.177835, r=True, os=True )\n    \n    pm.polyEvaluate( b=True )\n    ((-1.3974823703620598, 1.39748217791327), (-1.7164316223605844, -1.7164316223605844), (-1.6512467204212007, 1.6512465272260637))\n    pm.polyEvaluate( b=True, ae=True )\n    ((-1.3974823951721191, 1.39748215675354), (-1.4071073532104492, -1.4071073532104492), (-1.3598332405090332, 1.3598330020904541))\n    \n    # Local and World Space Area\n    pm.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 0, 1), cuv=1, ch=1 )\n    pm.setAttr( 'pCube1.scaleY', 2 )\n    pm.polyEvaluate( a=True )\n    # Result: 6\n    pm.polyEvaluate( wa=True )\n    # Result: 10", 
    "polyExtrudeEdge": "    \n    \n    import pymel.core as pm\n    \n    # Separate\n    pm.polyPlane( n='plg', w=10, h=10 )\n    pm.polyExtrudeEdge( 'plg.e[71:72]', 'plg.e[81:82]', kft=False,, ltz=2, ls=(.5, .5, 0) )\n    # Edges are extruded then scaled separately\n    pm.delete( 'plg' )\n    \n    \n    # Together\n    pm.polyPlane( n='plg', w=10, h=10 )\n    pm.polyExtrudeEdge( 'plg.e[71:72]', 'plg.e[81:82]', kft=True, ltz=2, ls=(.5, .5, 0) )\n    # Edges are extruded then scaled together\n    pm.delete( 'plg' )", 
    "polyExtrudeFacet": "    \n    \n    import pymel.core as pm\n    \n    # Separate\n    pm.polyPlane( n='plg', w=10, h=10 )\n    pm.polyExtrudeFacet( 'plg.f[71:72]', 'plg.f[81:82]', kft=False, ltz=2, ls=(.5, .5, 0) )\n    # Facets are extruded then scaled separately\n    \n    \n    # Together\n    pm.polyExtrudeFacet( 'plg.f[17:18]', 'plg.f[27:28]', kft=True, ltz=2, ls=(.5, .5, 0) )\n    # Facets are extruded then scaled together", 
    "polyExtrudeVertex": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( h=10, w=10, d=10 )\n    pm.polyExtrudeVertex( l=2, w=3, d=4 )\n    # A cube is created and then all of its vertices are extruded into 4 divisions with length 2 and width 3", 
    "polyFlipEdge": "    \n    \n    import pymel.core as pm\n    \n    # To flip the selected edge\n    pm.polyFlipEdge()", 
    "polyFlipUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere with default UVs.\n    pm.polySphere( n='sph' )\n    \n    # Flip uvs on all faces of the sphere shape.\n    pm.polyFlipUV( 'sphShape.f[*]' )", 
    "polyForceUV": "    \n    \n    import pymel.core as pm\n    \n    pm.polyForceUV( uni=True )\n    # unitize the UV values of the selected faces separately\n    pm.polyForceUV( cp=True )\n    # create UVs on the selected faces based on the current camera\n    pm.polyForceUV( 'pCylinder1.f[11:14]', 'pCylinder1.vtx[33:34]', 'pCylinder1.vtx[13:14]', ni=1 )\n    # create the UVs for the first item (ie, 4 polygonal faces, in this case)\n    # in the selection list, by computing the plane using the rest of the\n    # items in the list", 
    "polyGeoSampler": "    \n    \n    import pymel.core as pm\n    \n    # Example 1. Sample for color values.\n    #    a. No arguments. Will perform sampling of color + transparency at\n    #     the vertex level, and store color values for affected vertices.\n    #     No shadows will be computed.\n    pm.polyGeoSampler()\n    # b. With shadows and illumination only\n    pm.polyGeoSampler( lightingOnly=True, computeShadows=True )\n    # c. Sampling only complete selected faces\n    pm.polyGeoSampler( sampleByFace=True )\n    # d. \"Flat shading\".\n    # Example 2. Sample for displacement values.\n    # a. Using displace option\n    pm.polyGeoSampler( displaceGeometry=True )\n    # Example 3. Scaling the sampled data.\n    # a. Scaling option\n    pm.polyGeoSampler( scaleFactor=0.1 )\n    # Example 4. Don't force unshared UV value usage, and force\n    # the storage of shared colors for vertices.\n    pm.polyGeoSampler( shareUV=True, averageColor=True )\n    # Example 5. Clamping colors. In this example the alpha and\n    # RGB channels of the colors are clamped between a min of 0,0,0,1\n    # and a max of 1,2,1,0.5 .\n    pm.polyGeoSampler( amn=0.0, amx=0.5, cmn=[0.0,0.0,0.0], cmx=[1.0,2.0,1.0] )\n    # Example 6. Multiply the new sample color values    with the existing\n    # colors stored on the geometry, but leave the alpha values\n    # as they were on the geometry.\n    pm.polyGeoSampler( colorBlend='multiply', alphaBlend='none' )", 
    "polyHelix": "    \n    \n    import pymel.core as pm\n    \n    # Create a helix with radius 1.0 in anti clockwise direction with no UV's for texture.\n    pm.polyHelix(r=1, d=1, cuv=0)\n    \n    # Create a helix, called \"myHelix\" with default values.\n    pm.polyHelix(n='myHelix')", 
    "polyHole": "    \n    \n    import pymel.core as pm\n    \n    # To toggle hole on/off on the selected faces\n    pm.polyHole( )", 
    "polyInfo": "    \n    \n    import pymel.core as pm\n    \n    # To find all non-manifold edges on a polygonal object called pPlane1\n    pm.polyInfo( nme=True )\n    pPlane1.e[74]\n    # To find all non-manifold vertices on a polygonal object called pPlane1\n    pm.polyInfo( nmv=True )\n    pPlane1.vtx[38] pPlane1.vtx[49]", 
    "polyInstallAction": "    \n    \n    import pymel.core as pm\n    \n    # Will set pickmask to edges, install internal constraint\n    # so that only border edges may be selected.\n    pm.polyInstallAction( 'polyCloseBorder', ic=True )\n    \n    # Same as previous, plus force the display of borders if the\n    # user didn't asked explicitely for it before.\n    pm.polyInstallAction( 'polyCloseBorder', ic=True, id=True )\n    \n    # Shortcut for polyInstallAction -ic -id polyCloseBorder;\n    pm.polyInstallAction( 'polyCloseBorder' )\n    \n    # Assuming the previous install was for closeBorder,\n    # will release internal border constraint, but go on displaying\n    # borders if the user didn't asked explicitely for it before.\n    pm.polyInstallAction( uc=True )\n    \n    # Assuming the previous install was for closeBorder,\n    # will release internal border constraint, stop displaying\n    # borders if the user didn't asked explicitely for it before.\n    pm.polyInstallAction( uc=True, ud=True )\n    \n    # Shortcut for polyInstallAction -uc -ud;\n    pm.polyInstallAction()", 
    "polyIterOnPoly": "", 
    "polyLayoutUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere.\n    pm.polySphere( n='sph' )\n    \n    # Use a plane projection on half the faces\n    pm.select( 'sph.f[0:200]' )\n    pm.polyProjection( type='Planar' )\n    \n    # Layout all UVs in the texture plane.\n    pm.polyLayoutUV( 'sph.f[*]', l=2, fr=True, se=2, sc=1 )", 
    "polyListComponentConversion": "    \n    \n    import pymel.core as pm\n    \n    # Convert the vertices to envolved poly face(s) and list results.\n    pm.polyListComponentConversion( 'plg.vtx[5:6]', 'plg.vtx[9:10]', fv=True, tf=True, internal=True )\n    plg.f[4]\n    \n    # Convert anything to related poly face(s) and list results.\n    pm.polyListComponentConversion( 'plg.vtx[0]', 'plg.vtx[3]', 'plg.vtx[8]', tf=True )\n    plg.f[0] plg.f[2] plg.f[3] plg.f[6]\n    \n    # Convert an object to faces and list results.\n    pm.polyListComponentConversion( 'plg', tf=True )\n    plg.f[*]\n    \n    # Convert vertices to faces on selectionList and list results.\n    pm.select( 'plg.vtx[0]', 'plg.vtx[3]', 'plg.vtx[8]', r=True )\n    pm.polyListComponentConversion( fv=True, tf=True )\n    plg.f[0] plg.f[2] plg.f[3] plg.f[6]\n    \n    # Use several calls of the command to list edges in the order\n    # in which they appear in a face.\n    pm.polyPlane( w=1, h=1, sx=1, sy=1 )\n    # Will return the edges in numeric order:\n    pm.polyListComponentConversion( 'pPlane1.f[0]', ff=True, te=True )\n    # Result: pPlane1.e[0:3]\n    # Now convert to vertexFace and then to edge to get the edges in the order they\n    # appear within the face:\n    vfList = pm.polyListComponentConversion( 'pPlane1.f[0]', ff=True, tvf=True )\n    vfList = pm.ls( vfList, flatten=True )\n    # Result: pPlane1.vtxFace[0][0] pPlane1.vtxFace[1][0] pPlane1.vtxFace[3][0] pPlane1.vtxFace[2][0]\n    for vf in vfList:\n            edge = pm.polyListComponentConversion( vf, fvf=True, te=True )\n            print edge\n    # Prints out the edges in the order they show up in the face.\n    pPlane1.e[0]\n    pPlane1.e[2]\n    pPlane1.e[3]\n    pPlane1.e[1]\n    \n    # Illustrate the vertexFaceAllEdges flag\n    pm.polyPlane( w=1, h=1, sx=1, sy=1 )\n    pm.select( 'pPlane1.vtxFace[0][0]', r=True )\n    # Get the edge that originates at the selected face vertex\n    print pm.polyListComponentConversion( fvf=True, te=True )\n    # Result: pPlane1.e[0]\n    # Get both edges that adjoin the selected face vertex\n    print pm.polyListComponentConversion( fvf=True, te=True, vfa=True )\n    # Result: pPlane1.e[0:1]", 
    "polyMapCut": "    \n    \n    import pymel.core as pm\n    \n    # Opening up the textureView will make this example much easier to visualize.\n    \n    # Create a plane and select it.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\n    pm.select( 'plg' )\n    \n    # Display map borders.\n    pm.polyOptions( ao=True, dmb=True )\n    \n    # Cut the map.\n    pm.polyMapCut( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]', 'plg.e[50]', 'plg.e[52]' )\n    # now that it's cut, we may move the row separately\n    \n    # Move some UVs\n    pm.polyMoveUV('plg.map[24:28]', 'plg.map[30:35]', 'plg.map[37]', tv=0.3 )", 
    "polyMapDel": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=20, h=20 )\n    \n    # Delete the mapping from the given faces.\n    pm.polyMapDel( 'plg.f[11:13]', 'plg.f[16:18]' )", 
    "polyMapSew": "    \n    \n    import pymel.core as pm\n    \n    # Opening the texture view will make this example much clearer.\n    \n    # Create a plane and select it.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\n    pm.select( 'plg' )\n    \n    # Display map borders.\n    pm.polyOptions( ao=True, dmb=True )\n    \n    # Cut the map.\n    pm.polyMapCut( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]', 'plg.e[50]', 'plg.e[52]' )\n    \n    # Move the row\n    pm.polyMoveUV( 'plg.map[24:28]', 'plg.map[30:35]', 'plg.map[37]', t=(0.0, 0.5 ))\n    \n    # Now sew some border edges\n    pm.polyMapSew( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]' )", 
    "polyMapSewMove": "    \n    \n    import pymel.core as pm\n    \n    # Build a plane\n    pm.polyPlane()\n    \n    # Map and move some faces. Scale them so that seams do not mathc any more\n    pm.select( 'pPlane1.f[0:49]', r=True )\n    pm.polyProjection( type='Planar' )\n    pm.setAttr( 'polyPlanarProj1.rotateX', -90 )\n    pm.setAttr( 'polyPlanarProj1.imageCenter', 0.630609, 0.38805)\n    pm.setAttr( 'polyPlanarProj1.rotationAngle', 10 )\n    pm.setAttr( 'polyPlanarProj1.imageScaleU', 1.2 )\n    pm.setAttr( 'polyPlanarProj1.imageScaleV', 1.2 )\n    \n    # Select the seams\n    pm.select( 'pPlane1.e[105]', 'pPlane1.e[107]', 'pPlane1.e[109]', 'pPlane1.e[111]', 'pPlane1.e[113]', 'pPlane1.e[115]', 'pPlane1.e[117]', 'pPlane1.e[119]', 'pPlane1.e[121]', 'pPlane1.e[123]' )\n    # merge them back, with the appropriate move.\n    pm.polyMapSewMove()", 
    "polyMergeEdge": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( sx=3, sy=3, n='plg1' )\n    pm.move( -2, 0, 0, 'plg1' )\n    pm.delete( 'plg1.f[3:5]' )\n    pm.polyPlane( sx=3, sy=3, n='plg2' )\n    pm.delete( 'plg2.f[3:5]' )\n    pm.polyPlane( sx=3, sy=3, n='plg3' )\n    pm.move( 2, 0, 0, 'plg3' )\n    pm.delete( 'plg3.f[3:5]' )\n    \n    # First\n    pm.polyMergeEdge( 'plg1', mm=0, fe=8, se=12 )\n    \n    # Between\n    pm.polyMergeEdge( 'plg2', mm=1, fe=8, se=12 )\n    \n    # Last\n    pm.polyMergeEdge( 'plg3', mm=2, fe=8, se=12 )", 
    "polyMergeEdgeCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create a new poly merge edge context, set to use first selected edge as the new edge, then switch to it\n    pm.polyMergeEdgeCtx('polyMergeEdgeCtx1', mm=0)\n    pm.setToolTo('polyMergeEdgeCtx1')", 
    "polyMergeFacet": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', h=10, w=10, sx=5, sy=5 )\n    pm.polyChipOff( 'plg.f[16]', 'plg.f[18]', 'plg.f[7]', dup=1, ltz=1, ls=(.5, .5, .5) )\n    \n    # First\n    pm.polyMergeFacet( 'plg', mm=0, ff=16, sf=26 )\n    # A new face with face #16 as an outer loop and face #26 as a hole\n    # is replacing faces #16 and #26, and is located on face #16\n    \n    # Between\n    pm.polyMergeFacet( 'plg', mm=1, ff=7, sf=25 )\n    # A new face with face #7 as an outer loop and face #25 as a hole\n    # is replacing faces #7 and #25, and is located in between.\n    \n    # Last\n    pm.polyMergeFacet( 'plg', mm=2, ff=18, sf=25 )\n    # A new face with face #18 as an outer loop and face #25 as a hole\n    # is replacing faces #18 and #25, and is located on face #25", 
    "polyMergeFacetCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create a new poly merge facet context, set the merge mode to merging the second face to the first face, then switch to it\n    pm.polyMergeFacetCtx('polyMergeFacetCtx1', mm=0)\n    pm.setToolTo('polyMergeFacetCtx1')", 
    "polyMergeUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly cube\n    pm.polyCube()\n    pm.select( 'pCube1.map[4]', 'pCube1.map[13]', r=True )\n    \n    # Merge two UVs\n    pm.polyMergeUV()", 
    "polyMergeVertex": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( sx=5, sy=5, n='plg1' )\n    pm.polyPlane( sx=5, sy=5, n='plg2' )\n    pm.move( 0.55, 0, -1.25, 'plg1', ws=True )\n    pm.move( -0.55, 0, -1.25, 'plg2', ws=True )\n    pm.polyPlane( sx=5, sy=5, n='plg3' )\n    pm.polyPlane( sx=5, sy=5, n='plg4' )\n    pm.polyPlane( sx=5, sy=5, n='plg5' )\n    pm.move( 0.55, 0, 1.25, 'plg4', ws=True )\n    pm.move( -0.55, 0, 1.25, 'plg5', ws=True )\n    \n    # First method:\n    pm.polyUnite( 'plg1Shape', 'plg2Shape' )\n    pm.select( 'polySurface1.vtx[6]', 'polySurface1.vtx[12]', 'polySurface1.vtx[18]', 'polySurface1.vtx[24]', 'polySurface1.vtx[47]', 'polySurface1.vtx[53]', 'polySurface1.vtx[59]', 'polySurface1.vtx[65]', r=True )\n    pm.polyMergeVertex( d=0.15 )\n    \n    # Second method:\n    pm.polyMergeVertex( 'plg3.vtx[24]', 'plg3.vtx[30:31]', 'plg3.vtx[8:10]', 'plg3.vtx[14:16]', 'plg3.vtx[20:22]', d=0.25 )\n    \n    # To create non-manifold geometry:\n    pm.polyUnite( 'plg4Shape', 'plg5Shape' )\n    pm.select( 'polySurface2.vtx[0]', 'polySurface2.vtx[6]', 'polySurface2.vtx[12]', 'polySurface2.vtx[18]', 'polySurface2.vtx[24]', 'polySurface2.vtx[30]', 'polySurface2.vtx[41]', 'polySurface2.vtx[47]', 'polySurface2.vtx[53]', 'polySurface2.vtx[59]', 'polySurface2.vtx[65]', 'polySurface2.vtx[71]', r=True )\n    pm.polyMergeVertex( d=0.25 )\n    # Note that there is only one vertex at this merged point and the\n    # resulting polygonal object is non-manifold;()", 
    "polyMirrorFace": "    \n    \n    import pymel.core as pm\n    \n    # Mirror about +X direction by merging the border vertices\n    pm.polyCube( name='poly1' )\n    pm.delete( 'poly1.f[4]' )\n    pm.polyMirrorFace( 'poly1', direction=0, mergeMode=1 )\n    \n    # Mirror about +Y direction by connecting the border edges\n    # in world reference, by explicitly specifying a pivot point (0, 2, 0)\n    pm.polyCube( name='poly2' )\n    pm.delete( 'poly2.f[4]' )\n    pm.rotate( 0, 0, 45, 'poly2', r=True, os=True )\n    pm.polyMirrorFace( 'poly2', direction=2, p=(0, 2, 0), mergeMode=2, worldSpace=1 )", 
    "polyMoveEdge": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere.\n    pm.polySphere( n='plg', r=5 )\n    \n    pm.select( 'plg.e[200:219]', 'plg.e[560:599]' )\n    # Translate selected edges along Z in local coordinates.\n    pm.polyMoveEdge( ltz=1.0 )\n    \n    # Scale selected edges by (0.5 0.5 0.5)\n    pm.polyMoveEdge( 'plg.e[100:119]', s=(0.5, 0.5, 0.5) )", 
    "polyMoveFacet": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere.\n    pm.polySphere( n='plg', r=5 )\n    \n    # Translate selected facets along Y by 1.0 in world coordinates\n    pm.polyMoveFacet( 'plg.f[300:359]', 'plg.f[380:399]', ty=1.0 )\n    \n    # Scale selected facets by (0.5, 0.5, 0.5);\n    pm.polyMoveFacet( 'plg.f[0:59]', 'plg.f[360:379]', sx=0.5, sy=0.5, sz=0.5 )", 
    "polyMoveFacetUV": "    \n    \n    import pymel.core as pm\n    \n    # Opening up the textureView will make this example easier to visualize.\n    \n    # Create a plane and select it.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\n    pm.select( 'plg' )\n    \n    # Display map borders.\n    pm.polyOptions( ao=True, dmb=True )\n    \n    # Translate selected UVs as the vector (0.0, 1.0).\n    pm.polyMoveFacetUV( 'plgShape.map[30:35]', tu=0.0, tv=1.0 )\n    \n    # Scale selected UVs as the scaling (0.5, 0.5);\n    pm.polyMoveFacetUV( 'plgShape.map[30:35]', su=0.5, sv=0.5 )", 
    "polyMoveUV": "    \n    \n    import pymel.core as pm\n    \n    # Opening up the textureView will make this example easier to visualize.\n    \n    # Create a plane and select it.\n    pm.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\n    pm.select( 'plg' )\n    \n    # Display map borders.\n    pm.polyOptions( ao=True, dmb=True )\n    \n    # Translate selected UVs as the vector (0.0, 1.0).\n    pm.polyMoveUV( 'plgShape.map[30:35]', tu=0.0, tv=1.0 )\n    \n    # Scale selected UVs as the scaling (0.5, 0.5);\n    pm.polyMoveUV( 'plgShape.map[30:35]', su=0.5, sv=0.5 )", 
    "polyMoveVertex": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere.\n    pm.polySphere( r=5, n='plg' )\n    \n    # Move vertices as the scaling vector (1.0, 1.5, 1.0).\n    pm.polyMoveVertex( 'plg.vtx[200:379]', 'plg.vtx[381]', s=(1.0, 1.5, 1.0) )\n    \n    # Translate vertices as the vector (0.0, 2.0, 0.0).\n    pm.polyMoveVertex( 'plg.vtx[200:379]', 'plg.vtx[381]', ty=2.0 )", 
    "polyMultiLayoutUV": "    \n    \n    import pymel.core as pm\n    \n    # Create 3 objects with overlapping UVs\n    sphere = pm.polySphere()\n    cylinder = pm.polyCylinder()\n    torus = pm.polyTorus()\n    pm.polyAutoProjection( sphere[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\n    pm.polyAutoProjection( cylinder[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\n    pm.polyAutoProjection( torus[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\n    pm.select( sphere[0], cylinder[0], torus[0] )\n    # Layout the UVs in a square, allow free rotations, scale uniformly\n    pm.polyMultiLayoutUV( scale=1, rotateForBestFit=2, layout=2 )", 
    "polyNormal": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', w=3, h=3 )\n    pm.polyOptions( ao=True, dn=True, db=True, bc=True )\n    \n    #\"I\"reverse and cut\"/I\"\n    pm.select( 'plg.f[40:59]' )\n    pm.polyNormal( nm=3 )\n    \n    #\"I\"reverse and propagate\"/I\"\n    pm.polyNormal( 'plg.f[11]', nm=4 )\n    # Notice that only the shell containing face 11 is reversed.\n    \n    # We can reverse all the shells by passing in the object\n    pm.polyNormal( 'plg', nm=3 )", 
    "polyNormalPerVertex": "    \n    \n    import pymel.core as pm\n    \n    # To set the xyz values of normals of selected vertices:\n    pm.polyNormalPerVertex( xyz=(0.2, 0.3, 0.4) )\n    # To set just the \"x\" value of normal of selected vertices:\n    pm.polyNormalPerVertex( x=.37 )\n    # To add to the current value of the \"y\" normal value of selected vertices:\n    pm.polyNormalPerVertex( rel=True, y=.13 )\n    # To query the normal values on selected vertices - This returns all normals\n    # regardless of whether they are shared or not:\n    pm.polyNormalPerVertex( query=True, xyz=True )\n    # To query if the normals on the selected vertices are locked or not\n    pm.polyNormalPerVertex( query=True, freezeNormal=True )\n    # To query if all the normals on the selected vertices are locked or not\n    pm.polyNormalPerVertex( query=True, allLocked=True )\n    # More examples\n    pm.file( f=True, new=True )\n    pm.polyCube()\n    pm.select( 'pCube1.vtxFace[2][1]', r=True )\n    pm.polyNormalPerVertex( query=True, freezeNormal=True )\n    0\n    # Now, lock the normal of a VertexFace on the cube\n    pm.select('pCube1.vtxFace[2][1]', r=True )\n    pm.polyNormalPerVertex( xyz=(0.7071, 0, 0.7071) )\n    # Query if the normal is locked for this vertexFace\n    pm.polyNormalPerVertex( query=True, freezeNormal=True )\n    1\n    # Query if the normal is locked for all the normals on this vertex\n    # Should return 0, because there are some other normals on\n    # this vertex that are not locked.\n    pm.select('pCube1.vtx[2]', r=True)\n    pm.polyNormalPerVertex( query=True, allLocked=True )\n    0", 
    "polyNormalizeUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly sphere with default UVs.\n    pm.polySphere( n='sph' )\n    \n    # rescale it\n    pm.polyEditUV('sph.map[*]', pu=0.5, pv=0.5, su=1.5, sv=1.5)\n    \n    # normalize the UV values of all the faces\n    pm.polyNormalizeUV( 'sph.f[*]' )", 
    "polyOptUvs": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere and select it.\n    pm.polySphere()\n    \n    # Optimise the position of some Uvs\n    pm.polyOptUvs( 'pSphere1.map[189:398]' )", 
    "polyOptions": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( n='plg', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\n    pm.delete( 'plg.f[9:17]' )\n    \n    # Vertices\n    pm.polyOptions( displayVertex=True )\n    # Toggle vertices\n    pm.polyOptions( r=True, displayVertex=True )\n    # Toggle, whatever the value given to the flag in this command.\n    # It was previously true, it is set to false : vertices are not drawn.\n    \n    # Facet centers\n    pm.polyOptions( displayCenter=True )\n    pm.polyOptions( displayCenter=False )\n    \n    # Triangulation\n    pm.polyOptions( displayTriangle=True )\n    pm.polyOptions( displayTriangle=False )\n    \n    # Reusing Triangulation\n    pm.polyOptions( reuseTriangles=True )\n    pm.polyOptions( reuseTriangles=False )\n    \n    # Borders\n    pm.polyOptions( displayBorder=True )\n    # Border size\n    pm.polyOptions( sb=3 )\n    # Increase border size\n    pm.polyOptions( r=True, sb=2 )\n    pm.polyOptions( displayBorder=False, sb=3 )\n    # Map borders\n    pm.polyOptions( displayMapBorder=True )\n    pm.polyOptions( displayMapBorder=False )\n    \n    # Normals\n    # Normal type\n    pm.polyOptions( displayNormal=True )\n    pm.polyOptions( pt=True )# on vertices\n    pm.polyOptions( pf=True )# on vertices and facets\n    pm.polyOptions( f=True )# on facets\n    # Normal size\n    pm.polyOptions( sn=2 )\n    # Increase normal size\n    pm.polyOptions( r=True, sn=1.5 )\n    pm.polyOptions( displayNormal=False )\n    \n    # Edges\n    pm.polyOptions( softEdge=True )\n    pm.polyOptions( hardEdge=True )\n    pm.polyOptions( allEdges=True )\n    \n    # Geometry\n    pm.polyOptions( displayGeometry=False )\n    pm.polyOptions( displayGeometry=True )\n    \n    # Backculling\n    pm.polyOptions( wireBackCulling=True )\n    pm.polyOptions( hardBack=True )\n    pm.polyOptions( fullBack=True )\n    pm.polyOptions( displayVertex=True, backCullVertex=True )\n    pm.polyOptions( backCullVertex=False )\n    pm.polyOptions( displayVertex=False )\n    pm.polyOptions( backCulling=True )\n    \n    # Color Shaded Display\n    pm.polyOptions( colorShadedDisplay=True )\n    pm.polyOptions( colorMaterialChannel='DIFFUSE' )", 
    "polyOutput": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane()\n    pm.polyOutput( a=True )\n    \n    # If a polygon operation is performed such as Add Divisions:\n    pm.polySubdivideFacet('pPlane1', dv=1, m=0, ch=1)\n    \n    # then the command can get information on geometry data feeding into the polySubdFace1 node.\n    pm.polyOutput( 'polySubdFace1.inputPolymesh' )\n    \n    # The command can also get information on geometry data coming out of the\n    # polySubdFace1 node.\n    pm.polyOutput( 'polySubdFace1.output' )", 
    "polyPipe": "    \n    \n    import pymel.core as pm\n    \n    # Create a pipe with height 20 radius 1.0 thickness 0.5 with\n    # 10 subdivisions along height\n    pm.polyPipe( sh=10, h=20 )\n    \n    # Create a pipe, called \"myPipe\", on thickness cap there are 5\n    # subdivisions.\n    pm.polyPipe( n='myPipe', sc=5);", 
    "polyPlanarProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane with default UVs.\n    pm.polyPlane( n='plane', h=20, w=20 )\n    \n    # Create a lambert node.\n    pm.shadingNode( 'lambert', n= 'myLambert', asShader=True )\n    pm.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\n    pm.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n    \n    # Create a texture checker.\n    pm.shadingNode( 'checker', asTexture=True )\n    pm.shadingNode( 'place2dTexture', asUtility=True )\n    pm.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n    \n    # Assign the texture the the lambert node.\n    pm.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n    \n    # Set the textured display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n    \n    # Assign the lambert shader to all facets of the plane.\n    pm.sets('planeShape.f[0:99]', edit=True, forceElement= 'myLambertSG' )\n    \n    # Replace default UVs on half of the plane :\n    # Rotates projection around X, rotate the map of 45 degrees,\n    # and reduces of half the projected map.\n    pm.polyPlanarProjection( 'plane.f[0:49]', rx=90, ra=45.0, pc= (0, 0, 0), imageScale=(0.5, 0.5))\n    \n    # Set the wireframe display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polyPlane": "    \n    \n    import pymel.core as pm\n    \n    # Create a mesh (plane), with 10 subdivisions in the X direction,\n    # 15 subdivisions in the Y direction,\n    # the width of the mesh is 15, the height of the mesh is 20.\n    pm.polyPlane( sx=10, sy=15, w=15, h=20)\n    \n    # Create a mesh, called \"myPlane\", on each direction there are 5 subdivisions.\n    pm.polyPlane(n='myPlane', sx=5, sy=5)", 
    "polyPlatonicSolid": "    \n    \n    import pymel.core as pm\n    \n    # Create a icosahedron with radius 2 side length 2\n    pm.polyPlatonicSolid( r=2, l=2, st=1)\n    \n    # Create a platonic solid, called \"myPlatonicsolid\", of type octahedron.\n    pm.polyPlatonicSolid( n='myPlatonicsolid', st=2 )", 
    "polyPoke": "    \n    \n    import pymel.core as pm\n    \n    # To poke all the faces of a polyCube...\n    #\n    pm.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1, n='pCube' )\n    pm.polyPoke( 'pCube.f[0:5]', ch=1 )\n    \n    # To poke all the faces of a polyCube, and pull the\n    # new vertices by one unit along the face normal\n    #\n    pm.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1, n='pCubePull' )\n    pm.polyPoke( 'pCubePull.f[0:5]', ltx=0, lty=0, ltz=1, ch=1 )", 
    "polyPrimitive": "    \n    \n    import pymel.core as pm\n    \n    # Create a soccerBall with radius 1 side length 0.4037\n    pm.polyPrimitive( r=1, l=0.4036, pt=0)", 
    "polyPrimitiveMisc": "", 
    "polyPrism": "    \n    \n    import pymel.core as pm\n    \n    # Create a prism, with 10 subdivisions on the caps,\n    # and 15 subdivisions along the length,\n    # the edge length of the prism is 20.\n    pm.polyPrism ( sc=10, sh=15, w=20)\n    \n    # Create a prism, called \"myprism\", on each direction there are 5 subdivisions.\n    pm.polyPrism( n='myprism', sc=5, sh=5)", 
    "polyProjectCurve": "    \n    \n    import pymel.core as pm\n    \n    # create a poly plane in the z axis\n    poly = pm.polyPlane(w=10, h=10, sx=10, sy=10, ax=(0,0,1), cuv=2, ch=1)\n    \n    # create a nurbs circle also in the z axis\n    nurbs = pm.circle(ch=1, o=1, r=2, nr=(0,0,1))\n    \n    # and project it onto the poly plane along the z axis\n    results = pm.polyProjectCurve(poly[0], nurbs[0], direction=(0,0,1))", 
    "polyProjection": "    \n    \n    import pymel.core as pm\n    \n    pm.file( f=True, new=True )\n    # To create a planar projection\n    #\n    pm.polyPlane( sx=10, sy=10 )\n    pm.move( 0, 0, r=3 )\n    pm.polyProjection( 'pPlane1.f[0:99]', type='Planar', md='y' )\n    polyPlanarProj1\n    # To create a cylindrical projection\n    #\n    pm.polyCylinder()\n    pm.polyProjection( 'pCylinder1.f[0:21]', type='Cylindrical' )\n    polyCylProj1\n    # To create a spherical projection\n    #\n    pm.polySphere()\n    pm.move( 0, 0, r=-3 )\n    pm.polyProjection( 'pSphere1.f[0:399]', type='Spherical' )\n    polySphProj1", 
    "polyPyramid": "    \n    \n    import pymel.core as pm\n    \n    # Create a pyramid, with 10 subdivisions on the caps,\n    # 15 subdivisions along the height and num ber of sides 5,\n    # the side length of the pyramid is 20, the height of the pyramid is 10.\n    pm.polyPyramid( sc=10, sh=15, ns=5, w=20)\n    \n    # Create a pyramid, called \"mypyramid\", olong height there are 5 subdivisions\n    # and with 5 sides.\n    pm.polyPyramid( n='mypyramid', sh=5, ns=5, sc=5)\n    \n    # Query the side length of \"mypyramid\"\n    w = pm.polyPyramid( 'mypyramid', q=True, w=True )", 
    "polyQuad": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( n='plg1', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\n    pm.move( -5, 0, 0 )\n    pm.polyCube( n='plg2', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\n    pm.move( 5, 0, 0 )\n    pm.delete( 'plg1.f[9:17]' )\n    pm.polyTriangulate( 'plg1.f[0:44]' )\n    pm.delete( 'plg2.f[9:17]' )\n    pm.polyTriangulate( 'plg2.f[0:44]' )\n    pm.polyMoveVertex( 'plg1.vtx[20:35]', ltz=2.5 )\n    pm.polyMoveVertex( 'plg2.vtx[20:35]', ltz=2.5 )\n    \n    #Only coplanar triangles will be merged.\n    pm.polyQuad( 'plg1.f[0:89]', a=0.0 )\n    \n    #All possible triangles will be merged.\n    pm.polyQuad( 'plg2.f[0:89]', a=180.0 )", 
    "polyQueryBlindData": "    \n    \n    import pymel.core as pm\n    \n    pm.polyQueryBlindData( 'pPlane1.vtx[2]', 'pPlane1.vtx[8]', id=9001, associationType='vertex', ldn='bdFloat', dbd=234 )\n    pm.polyQueryBlindData( id=9005, sc='pPlane1.vtx[0:100]' )\n    pm.polyQueryBlindData( 'pPlane1.f[0:10]', sc='pPlane1.vtx[0:100]' )", 
    "polyReduce": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere( ver=1, n='plg' )\n    pm.polyReduce( ver=1, p=35, 'plg.f[0:399]' )", 
    "polySelect": "    \n    \n    import pymel.core as pm\n    \n    pm.polySelect( 'pCube1', edgeRing=1 )\n    pm.polySelect( 'pCube1', toggle=True, edgeRingPath=(1, 10) )\n    pm.polySelect( 'pCube1', ns=True, edgeRingPath=(1, 10) )\n    pm.polySelect( 'pCube1', edgeRingPath=((1, 10), (11, 20)) )\n    pm.polySelect( 'pPlane1', shortestEdgePath=(10, 100) )", 
    "polySelectConstraint": "    \n    \n    import pymel.core as pm\n    \n    pm.selectMode( co=True )\n    \n    # \"b\"Propagation\"/b\"\n    \n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.delete( 'plg.f[20:29]' )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( sh=True ) # next mouse selections will propagate to all shell\n    pm.polySelectConstraint( sh=False )\n    pm.polySelectConstraint( bo=True ) # next mouse selections will propagate along border\n    pm.polySelectConstraint( bo=False )\n    pm.polySelectConstraint( cr=True ) # next mouse selections will propagate to all connected creased components\n    pm.polySelectConstraint( cr=False )\n    \n    pm.select( 'plg.f[54:55]' )\n    pm.polySelectConstraint( pp=1 )\n    pm.polySelectConstraint( pp=1 ) # to get more and more\n    pm.polySelectConstraint( pp=1 )\n    pm.polySelectConstraint( pp=2 ) # to get less\n    pm.polySelectConstraint( pp=3 ) # to get selection border\n    pm.delete( 'plg' )\n    \n    #\"b\"Properties\"/b\"\n    \n    #location\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.selectType( pv=True )\n    pm.polySelectConstraint( m=3, t=1, w=1 ) # to get border vertices\n    pm.polySelectConstraint( m=3, t=1, w=2 ) # to get inner vertices\n    pm.polySelectConstraint( w=0 ) # turn off location constraint\n    pm.delete( 'plg' )\n    \n    #edge smoothness\n    pm.polyCylinder( n='plg' )\n    pm.selectType( pe=True )\n    pm.polySelectConstraint( m=3, t=0x8000, sm=1 ) # to get hard edges\n    pm.polySelectConstraint( m=3, t=0x8000, sm=2 ) # to get soft edges\n    pm.polySelectConstraint( sm=0 ) # turn off edge smoothness constraint\n    pm.delete( 'plg' )\n    \n    #face size\n    pm.polyCylinder( n='plg', sz=1 )\n    pm.delete( 'plg.f[40:59]' )\n    pm.polyCloseBorder( 'plg.e[27]' )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, sz=1 ) # to get triangles\n    pm.polySelectConstraint( m=3, t=8, sz=2 ) # to get quads\n    pm.polySelectConstraint( m=3, t=8, sz=3 ) # to get N-sided\n    pm.polySelectConstraint( sz=0 ) # turn off face size constraint\n    pm.delete( 'plg' )\n    \n    #face planarity\n    #    polyPlane -n plg -w 5 -h 5; polyMoveVertex -ltz 1 plg.vtx[79] plg.vtx[85];\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, p=1 ) # to get non-planar faces\n    pm.polySelectConstraint( m=3, t=8, p=2 ) # to get planar faces\n    pm.polySelectConstraint( p=0 ) # turn off face planarity constraint\n    pm.delete( 'plg' )\n    \n    #face convexity\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.delete( 'plg.f[51]', 'plg.f[61]', 'plg.f[52:53]' )\n    pm.polyCloseBorder( 'plg.e[146]' )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, c=1 )# to get non-convex faces\n    pm.polySelectConstraint( m=3, t=8, c=2 )# to get convex faces\n    pm.polySelectConstraint( c=0 )#  turn off face convexity constraint\n    pm.delete( 'plg' )\n    \n    #face holes\n    pm.polyCreateFacet( n='plg', p=[(-2, 2, 0), (-2, -2, 0), (2, -2, 0), (2, 2, 0)] )\n    pm.polyAppend( a=[2, (6, -2, 0), (6, 2, 0), (), (3, 1, 0), (3, -1, 0), (5, 0, 0)] )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, h=1 )# to get holed faces\n    pm.polySelectConstraint( m=3, t=8, h=2 )# to get non-holed faces\n    pm.polySelectConstraint( h=0 )# turn off hole constraint\n    pm.delete( 'plg' )\n    \n    #face mapping\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.polyMapDel( 'plg.f[60:69]' )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, tx=1 ) # to get mapped faces\n    pm.polySelectConstraint( m=3, t=8, tx=2 ) # to get non-mapped faces\n    pm.polySelectConstraint( tx=0 ) # turn off face mapping constraint\n    pm.delete( 'plg' )\n    \n    #face topology\n    pm.polyCreateFacet( n='plg', p=((-3, 3, 0),(-3, -3, 0),(3, -3, 0),(3, 3, 0)) )\n    pm.polyAppend( a= [2, (8, -3, 0), (8, 3, 0)] )\n    pm.polyAppend( a= (4, 6, 5 ) )\n    pm.polyAppend( a =[0, (-7, 2, 0),(-7, -1, 0),(-8, 2, 0),(-5, 4, 0)] )\n    pm.selectType( pf=True)\n    pm.polySelectConstraint( m=3, t=8, tp=1 ) # to get non triangulatable faces\n    pm.polySelectConstraint( m=3, t=8, tp=2 ) # to get lamina faces\n    pm.polySelectConstraint( tp=0 ) # turn off the face topology constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Length\"/b\"\n    pm.polyCylinder( n='plg', sz=1, h=3 )\n    pm.selectType( pe=True )\n    pm.polySelectConstraint( m=3, t=0x8000, l=True, lb=(2, 4) ) # to get edges of length 2 to 4 units\n    pm.polySelectConstraint( m=3, t=0x8000, l=True, lb=(1, 2) ) # to get edges of length 1 to 2 units\n    pm.polySelectConstraint( l=False ) # turn off the length constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Angle\"/b\"\n    pm.polyCube( n='plg', w=5, h=5, d=5 )\n    pm.polyBevel( 'plg.e[7]', sg=1 )\n    pm.polyBevel( 'plg.e[9]', sg=3 )\n    pm.selectType( pe=True )\n    pm.polySelectConstraint( m=3, t=0x8000, a=True, ab=(0, 89) ) # to get edges with angle between 0-89\n    pm.polySelectConstraint( m=3, t=0x8000, a=True, ab=(45, 89) ) # to get edges with angle between 45-89\n    pm.polySelectConstraint( a=False ) # turn off angle constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"3D Area\"/b\"\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.polyMoveFacet( 'plg.f[70:79]', ls=(.5, .5, 0) )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, ga=True, gab=(0, 0.2) ) # to get faces with area between 0 and 0.2\n    pm.polySelectConstraint( m=3, t=8, ga=True, gab=(0.2, 0.3) ) # to get faces with area between 0 and 0.2\n    pm.polySelectConstraint( ga=False ) # turn off 3D area constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"2D area\"/b\"\n    pm.polyCylinder( n='plg' )\n    pm.selectType( pf=True )\n    pm.polySelectConstraint( m=3, t=8, ta=True, tab=(0, 0.5) ) # to get face with texture area between 0-0.5\n    pm.polySelectConstraint( ta=True ) # turn off the 2D area constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Distance\"/b\"\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.selectType( pv=True )\n    pm.polySelectConstraint( m=3, t=1, d=1, db=(0, 5), dp=(5, 0, 0) ) # to get vertices located\n    # between 0-5 units from a given point\n    pm.polySelectConstraint( m=3, t=1, d=1, db=(5, 5), dp=(5, 0, 0) ) # to get vertices located\n    # at exactly 5 units from a given point\n    pm.polySelectConstraint( m=3, t=1, d=2, db=(5, 6), dp=(5, 0, 0) ) # to get vertices located\n    # between 5-6 units from a given axis\n    pm.polySelectConstraint( d=0 )# turn off the distance constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Orientation\"/b\"\n    pm.polySphere( n='plg' )\n    pm.selectType( pv=True' )\n    pm.polySelectConstraint( m=3, t=1, o=1, ob=(0, 30), oa=(0, 1, 0) )# to get vertices oriented between\n    # 0-30 degree to a given axis\n    pm.polySelectConstraint( m=3, t=1, o=2, ob=(0, 30), oa=(0, 1, 0) )\n    pm.polySelectConstraint( o=0 )# turn off the orintation constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Order (Neighbor)\"/b\"\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.selectType( pv=True )\n    pm.polySelectConstraint( m=3, t=1, order=True, orb=(0, 2) ) # to get vertices with 0 to 2 neighbors\n    pm.polySelectConstraint( order=False ) # turn off the order (neighbor) constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Visibility\"/b\"\n    pm.polySphere( n='plg' )\n    pm.selectType( pv=True )\n    pm.polySelectConstraint( m=3, t=1, v=True, va=60, vp=(10, 0, 0) ) # to get vertices in the 60 degree angle from a given point\n    pm.polySelectConstraint( v=False ) # turn off the visbility constraint\n    pm.delete( 'plg' )\n    \n    #\"b\"Random\"/b\"\n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.selectType( pv=True )\n    pm.polySelectConstraint( m=3, t=1, r=True, rr=.5 )\n    pm.polySelectConstraint( r= False ) # turn off the random constraint\n    pm.delete( 'plg' )\n    \n    # NOTE: Make sure you turn off the constraint you have used. Otherwise it may\n    # affect your next selection (if \"i\"mode\"/i\" flag is ON).", 
    "polySelectConstraintMonitor": "    \n    \n    import pymel.core as pm\n    \n    # create Monitor\n    pm.polySelectConstraintMonitor( create=True )\n    \n    # set up a callback for when the constraints are changed\n    pm.polySelectConstraintMonitor( changeCommand=('polygonConstraintUpdate', 'MyPanel'));\n    \n    # delete Monitor\n    pm.polySelectConstraintMonitor( delete=True )", 
    "polySelectCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    \n    # Create a new poly select context, then switch to it\n    pm.polySelectCtx('polySelectCtx1')\n    pm.setToolTo('polySelectCtx1')", 
    "polySelectEditCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=5, sy=5, n='pPlane1')\n    \n    # Create a new poly select and edit context, then switch to it\n    pm.polySelectEditCtx('polySelectEditCtx1')\n    pm.setToolTo('polySelectEditCtx1')", 
    "polySelectEditCtxDataCmd": "", 
    "polySelectSp": "", 
    "polySeparate": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', w=5, h=5 )\n    pm.delete( 'plg.f[20:29]' )\n    \n    pm.polySeparate( 'plg' )", 
    "polySetToFaceNormal": "    \n    \n    import pymel.core as pm\n    \n    # Create user normals and set them to the face normals\n    pm.polySetToFaceNormal( setUserNormal=True )\n    # Set the normals to the default normal values (internally computed)\n    pm.polySetToFaceNormal()", 
    "polySetVertices": "", 
    "polySewEdge": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( sx=1, sy=1, n='plg1' )\n    pm.polyPlane( sx=1, sy=1, n='plg2' )\n    pm.rotate( 0, 0, 30, 'plg1' )\n    pm.rotate( 0, 0, -30, 'plg2' )\n    pm.move( -0.5, 0, 0, 'plg1', ws=True )\n    pm.move( 0.5, 0, 0, 'plg2', ws=True )\n    # For the polyUnite we assume that plg1's shape node is named\n    #  plg1Shape, plg2's shape node is plg2Shape, and the resulting\n    #  transform is named polySurface1. One or more of these may not\n    #  hold true if objects have previously been created and\n    #  manipulated in the scene.\n    pm.polyUnite( 'plg1Shape', 'plg2Shape' )\n    pm.polySewEdge( 'polySurface1.e[2]', 'polySurface1.e[5]', t=0.25 )", 
    "polyShortestPathCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new poly shortest edge path context:\n    #\n    pm.polyShortestPathCtx( 'PolyViewPortShortestPath' )", 
    "polySlideEdge": "    \n    \n    import pymel.core as pm\n    \n    # Moves the selected edge loops to the left by 50% of their neighbouring left edges\n    pm.polySlideEdge(edgeDirection=0.5, direction=1)\n    \n    # Moves the selected edge loops to the right by 200% of the length of the shortest neighbouring right edge\n    pm.polySlideEdge(edgeDirection=2, absolute=True)", 
    "polySlideEdgeCtx": "", 
    "polySmooth": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( n='plg1' )\n    pm.move( -3, 0, 2 )\n    pm.polyCube( n='plg2' )\n    pm.move( -3, 0, -2 )\n    pm.polyCube( n='plg3' )\n    pm.move( 0, 0, 2 )\n    pm.delete( 'plg3.f[1]' )\n    pm.polyCube( n='plg4' )\n    pm.move( 0, 0, -2 )\n    pm.delete( 'plg4.f[1]' )\n    pm.polyCube( n='plg5' )\n    pm.move( 3, 0, 2 )\n    pm.polyCube( n='plg6' )\n    pm.move( 3, 0, -2 )\n    \n    pm.polyOptions( ao=True, db=1 )\n    \n    # only one division:\n    pm.polySmooth( 'plg1.f[0:5]', dv=1 )\n    \n    # 2 divisions produces a round-ish object\n    pm.polySmooth( 'plg2.f[0:5]', dv=2 )\n    \n    # keep border edges\n    pm.select( 'plg3.f[0:4]' )\n    pm.polySmooth( kb=1 )\n    \n    # don't keep border edges\n    pm.select( 'plg4.f[0:4]' )\n    pm.polySmooth( kb=0 )\n    \n    # 1 division, continuity 0.2\n    pm.select( 'plg5' )\n    pm.polySmooth( c=0.2 )\n    \n    # 1 division, continuity 0.8\n    pm.polySmooth( 'plg6.f[0:5]', c=0.8 )", 
    "polySoftEdge": "    \n    \n    import pymel.core as pm\n    \n    # Turn smooth shading on\n    # Soft and hard edges are much easier to see with smooth shading on\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='smoothShaded', dl='default')\n    \n    pm.polySphere(n= 'plg', sx= 15, sy= 10 )\n    # hard bottom\n    pm.select( 'plgShape.e[0:59]', 'plgShape.e[135:194]', 'plgShape.e[255:269]', r=True )\n    pm.polySoftEdge( a=0 )\n    # smooth top\n    pm.select( 'plg.e[75:134]', 'plg.e[195:254]', 'plg.e[270:284]', r=True )\n    pm.polySoftEdge( a=180 )\n    pm.select( 'plg' )\n    pm.polyOptions( ao=True, se=True )\n    \n    # Set display mode back to wireframe (default mode)\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polySphere": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere, with 10 subdivisions in the X direction,\n    # and 15 subdivisions in the Y direction,\n    # the radius of the sphere is 20.\n    pm.polySphere(sx=10, sy=15, r=20)\n    \n    # Create a sphere, called \"mySphere\", on each direction there are 5 subdivisions.\n    pm.polySphere( n='mySphere', sx=5, sy=5)\n    \n    # Query the radius of the new sphere\n    r = pm.polySphere( 'mySphere', q=True, sx=True )", 
    "polySphericalProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere with default UVs.\n    pm.polySphere( n='sphere', r=10 )\n    \n    # Create a lambert node.\n    pm.shadingNode( 'lambert', '-n', 'myLambert', asShader=True )\n    pm.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\n    pm.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n    \n    # Create a texture checker.\n    pm.shadingNode( 'checker', asTexture=True )\n    pm.shadingNode( 'place2dTexture', asUtility=True )\n    pm.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n    \n    # Assign the texture the the lambert node.\n    pm.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n    \n    # Set the textured display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n    \n    # Assign the lambert shader to all faces of the sphere.\n    pm.sets('sphere.f[0:399]', edit=True, forceElement= 'myLambertSG' )\n    \n    # Replace default UVs on the top of the sphere :\n    # Rotates the map of 45 degrees and reduces its aperture to 20 degrees in both directions\n    pm.polySphericalProjection( 'sphere.f[180:359]', 'sphere.f[380:399]', ra=45.0, pc=(0, 0, 0), ps=(20, 20) )\n    \n    # Set the wireframe display mode.\n    currentPanel = pm.getPanel(withFocus= True)\n    if currentPanel != '':\n            pm.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polySpinEdge": "", 
    "polySplit": "    \n    \n    import pymel.core as pm\n    \n    # Note that in Python, you must use the ip/insertpoint flag which determines\n    # whether you are splitting an edge or a face based on the number of\n    # arguments to the flag (2 for an edge, and 4 for a face)\n    pm.polyCreateFacet( p=[(0, 2, 0), (0, -2, 0), (4, -2, 0), (4, 2, 0)] )\n    pm.polySplit( ip=[(2, 0.1), (3, 0.5), (0, 2, -1, 0.0), (0, 0.9)] )", 
    "polySplitCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n    \n    # Create a new poly split context, then switch to it\n    pm.polySplitCtx('polySplitCtx1')\n    pm.setToolTo('polySplitCtx1')", 
    "polySplitCtx2": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n    \n    # Create a new poly split context, then switch to it\n    pm.polySplitCtx2('polySplitCtx2')\n    pm.setToolTo('polySplitCtx2')", 
    "polySplitEdge": "    \n    \n    import pymel.core as pm\n    \n    # An example taking a non-manifold edge and splitting it to\n    # make it manifold\n    pm.polyPlane( w=1, h=1, sx=10, sy=10, ax=(0, 1, 0), cuv=1, ch=1 )\n    pm.scale( 15, 15, 15, r=True )\n    pm.move( -8, 0, 6, r=True )\n    \n    pm.select( 'polyPlane1', addFirst=True )\n    pm.setAttr( 'polyPlane1.subdivisionsWidth', 3 )\n    pm.setAttr( 'polyPlane1.subdivisionsHeight', 3 )\n    pm.select( 'pPlane1.e[12]', r=True )\n    pm.polyExtrudeEdge( 'pPlane1.e[12]', ch=1, kft=0, pvx=-5.5, pvy=0.0, pvz=6.0 )\n    polyExtrudeEdge1\n    pm.setAttr( 'polyExtrudeEdge1.localTranslate', 0, 0, 5.093611)\n    pm.select( 'pPlane1.e[12]', r=True )\n    pm.polySplitEdge(op=0)\n    polySplitEdge1\n    \n    # The edge is now split..\n    pm.select( 'pPlane1.f[9]', r=True)\n    pm.move(0, 0.5, 0, r=True)\n    \n    \n    # An example which splits loops of manifold edges\n    pm.polyPlane(w=10, h=10, sx=4, sy=4, ch=1, name='ManifoldTest')\n    pm.select('ManifoldTest.e[3]', 'ManifoldTest.e[12:15]', 'ManifoldTest.e[21]', 'ManifoldTest.e[23]', 'ManifoldTest.e[29]')\n    \n    pm.polySplitEdge(operation=1)\n    \n    pm.select('ManifoldTest.f[1:3]', 'ManifoldTest.f[5]', 'ManifoldTest.f[9]')\n    pm.move(0, 0, 5, r=True)\n    \n    pm.select('ManifoldTest.f[0]', 'ManifoldTest.f[4]', 'ManifoldTest.f[6:8]', 'ManifoldTest.f[10:15]')\n    pm.move(0, 0, -5, r=True)", 
    "polySplitRing": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube()\n    pm.select('pCube1.e[0:3]')\n    pm.polySplitRing( sma=180, wt=0.2)", 
    "polySplitVertex": "    \n    \n    import pymel.core as pm\n    \n    # Objective: split the four middle vertices of a 3x3 plane so\n    # that the middle face can be moved seperately\n    \n    # Create a 3x3 plane\n    #\n    pm.polyPlane( sx=3, sy=3, name='polyPlane' )\n    # Result: polyPlane polyPlane1\n    \n    # Count the number of vertices we start out with\n    #\n    pm.polyEvaluate( 'polyPlane', vertex=True )\n    # Result: 16\n    \n    # Split the four middle vertices\n    #\n    pm.polySplitVertex( 'polyPlane.vtx[5]', 'polyPlane.vtx[6]', 'polyPlane.vtx[9]', 'polyPlane.vtx[10]' )\n    # Result: polySplitVert1\n    \n    # Count the number of vertices we have now\n    #\n    pm.polyEvaluate( 'polyPlane', vertex=True )\n    # Result: 28\n    \n    # Note that because we split the 4 middle vertices, the 8\n    # surrounding faces have become non-manifold", 
    "polyStraightenUVBorder": "    \n    \n    import pymel.core as pm\n    \n    # Create a plane and select it.\n    pm.polyPlane()\n    pm.select( 'pPlane1.map[0:65]', r=True )\n    \n    # Straighten half the border\n    pm.polyStraightenUVBorder()", 
    "polySubdivideEdge": "    \n    \n    import pymel.core as pm\n    \n    pm.polyCube( n='plg', w=5, h=5, d=5 )\n    pm.scale( 2, 2, 2 )\n    pm.select( 'plg' )\n    pm.polyOptions( ao=True, dv='true' )\n    pm.select( cl=True )\n    \n    # Simple subdivision\n    pm.select( 'plg.e[1]' )\n    pm.polySubdivideEdge( dv=4 )\n    # The selected edges are subdivided by 4 vertices (5 subedges).\n    \n    # Local bound\n    pm.select( 'plg.e[7]' )\n    pm.polySubdivideEdge( dv=4, s=1.5 )\n    # The length of each subedge must be greater or equal to 1.5\n    # in local space. Length of original edge is 5 in local space.\n    # Min size indicates that only 3 subedges can be created.\n    \n    # World bound\n    pm.select( 'plg.e[5]' )\n    pm.polySubdivideEdge( dv=4, s=2, ws=True )\n    # The length of each subedge has to be greater or equal to 2\n    # in world space. Length of original edge is 10 in world space.\n    # All required subdivisions are done.", 
    "polySubdivideFacet": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', w=10, h=10, sx=1, sy=3 )\n    \n    # Quads\n    pm.polySubdivideFacet( 'plg.f[0]', dv=2 )  # becomes 16 quads.\n    \n    # Triangles\n    pm.polySubdivideFacet( 'plg.f[2]', dv=1, m=1 )  # becomes 4 triangles", 
    "polySuperCtx": "", 
    "polyTestPop": "", 
    "polyToCurve": "", 
    "polyToSubdiv": "    \n    \n    import pymel.core as pm\n    \n    # To create a new subdivision surface from a polygon:\n    pm.polyToSubdiv( 'polySphere1' )\n    \n    # To create a new subdivision surface from a polygon with history so that\n    # the tesselation can be edited afterwards:\n    pm.polyToSubdiv( 'polySphere1', ch=True )", 
    "polyTorus": "    \n    \n    import pymel.core as pm\n    \n    pm.polyTorus( sx=8, sy=16, r=10, sr=1 )\n    #result has 8 sections of 16 segments,\n    #the main radius is 10, the section radius is 1.\n    \n    pm.polyTorus( sx=5, sy=4, tx=False )\n    pm.move( -3, 0, 0 )\n    #result has 5 sections of 4 segments, default sizes.\n    #no texture offsets are generated.\n    \n    pm.polyTorus( sx=5, sy=4, tw=45 )\n    pm.move( 3, 0, 0 )\n    #result has 5 sections of 4 segments, default sizes.\n    #The sections are rotated.\n    \n    #Query the radius of the torus\n    r = pm.polyTorus( 'polyTorus1' ,q=True, r=True )", 
    "polyTransfer": "    \n    \n    import pymel.core as pm\n    \n    # Create two objects with same a cube.\n    pm.polyCube( sx=5, sy=5, sz=5, n='plg' )\n    pm.polyCube( sx=5, sy=5, sz=5, n='atlPlg' )\n    \n    # Tweak the geometry of the first object\n    pm.select( 'plg.vtx[0:50]', r=True )\n    pm.move( .1, .2, .3, r=True )\n    \n    # Spherical mapping on the alternate object\n    pm.polyProjection( 'atlPlg.f[0:149]', type='Spherical' )\n    \n    # Copy the UVs from the alternate to the first object.\n    pm.polyTransfer( 'plg', uv=1, ao='atlPlg' )", 
    "polyTriangulate": "    \n    \n    import pymel.core as pm\n    \n    # Non-planar faces\n    pm.polyPlane( n='plg1', sx=5, sy=5, w=5, h=5 )\n    pm.move( -6, 0, 0 )\n    pm.polyMoveVertex( 'plg1.vtx[7]', 'plg1.vtx[10]', 'plg1.vtx[25]', 'plg1.vtx[28]', ltz=1 )\n    pm.polyTriangulate( 'plg1.f[0:1]', 'plg1.f[5:6]', 'plg1.f[3:4]', 'plg1.f[8:9]', 'plg1.f[15:16]', 'plg1.f[20:21]', 'plg1.f[18:19]', 'plg1.f[23:24]' )\n    \n    # Holed faces\n    maya.pm.polyCreateFacet( p=[(2.5, 0, 2.5), (2.5, 0, -2.5), (-2.5, 0, -2.5), (-2.5, 0, 2.5), (), (1, 0, -1), (-1, 0, -1), (-1, 0, 1), (1, 0, 1)],  n='plg2' )\n    pm.polyTriangulate( 'plg2.f[0]' )\n    \n    # Both holed and non-planar facets\n    pm.polyPlane( n='plg3', sx=3, sy=3, h=5, w=5 )\n    pm.move( 6, 0, 0 )\n    pm.polyChipOff( 'plg3.f[4]', dup=1, ltz=1, ls=(.25, .25, .25) )\n    pm.polyMergeFacet( 'plg3', ch=True, ff=4, sf=9 )\n    pm.polyTriangulate( 'plg3.f[4]' )", 
    "polyUVRectangle": "    \n    \n    import pymel.core as pm\n    \n    # Opening up the textureView will make this example much easier to visualize.\n    \n    # make a cylinder\n    pm.polyCylinder( r=1, h=2, sx=20, sy=10, sz=1, ax=(0,1,0), rcp=0, cuv=3, ch=1 )\n    \n    # map a 3x2 area of faces to the 0-1 UV square\n    pm.polyUVRectangle( 'pCylinderShape1.vtx[115]', 'pCylinderShape1.vtx[57]' )\n    \n    # map a 2x20 ring of faces to the 0-1 UV square\n    pm.polyUVRectangle( 'pCylinderShape1.vtx[136]', 'pCylinderShape1.vtx[176]' )", 
    "polyUVSet": "    \n    \n    import pymel.core as pm\n    \n    # start with poly object\n    pm.polySphere(n='plg', cuv=1, r=10.0)\n    # Make a copy of \"map1\" to a new uvset. The\n    # name of which is automatically generated and returned.\n    pm.polyUVSet( copy=True, uvSet='map1' )\n    # Create a new empty uv set\n    pm.polyUVSet( create=True, uvSet='map2' )\n    # To set the current uv set to be \"map2\".\n    pm.polyUVSet( currentUVSet=True,  uvSet='map2')\n    # To set the current uv set to the last uv set added to an object.\n    pm.polyUVSet( currentLastUVSet=True )\n    # To query the current uv set.\n    pm.polyUVSet( query=True, currentUVSet=True )\n    # To rename a currently existing uv set from \"map2\" to \"map3\".\n    pm.polyUVSet(rename=True, newUVSet='map3', uvSet= 'map2')\n    # Rename the current uv set (if any) to \"map4\".\n    pm.polyUVSet(rename=True, newUVSet='map4' )\n    # To delete a currently existing uv set \"map4\".\n    pm.polyUVSet( delete=True, uvSet='map4')\n    # To delete the current uv set (if any)\n    pm.polyUVSet( delete=True )\n    # Copy values of uvset \"map1\" to \"map2\"\n    pm.polyUVSet( copy=True, nuv='map2', uvSet='map1' )\n    # Copy values of the current uvset to \"map2\"\n    pm.polyUVSet( copy=True, nuv='map2' )\n    # Create a new empty uv set with a generate new name\n    # The newly generated name is returned.\n    pm.polyUVSet( create=True )\n    # To query all of the uv sets\n    pm.polyUVSet( query=True, allUVSets=True )\n    # To query the logical indices of the uv sets in the\n    # uv set array of the node\n    node = \"plg\"\n    indices = pm.polyUVSet(node, query=True, allUVSetsIndices=True)\n    for i in indices[:]:\n            name = pm.getAttr(node+\".uvSet[\"+str(i)+\"].uvSetName\")\n            print(\"Found uv set called \" + name )\n    # To create a new per-instance uv set named \"myMap\"\n    pm.polyUVSet(create=True,perInstance=True,uvSet='myMap');", 
    "polyUnite": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere( n='plg1' )\n    pm.polyCube( w=2, h=.2, d=2, n='plg2' )\n    pm.move( 0, -1.1, 0 )\n    pm.polyCube( w=2, h=.2, d=2, n='plg3' )\n    pm.move( 0, 1.1, 0 )\n    pm.polyUnite( 'plg1', 'plg2', 'plg3', n='result' )\n    pm.rotate( 0, 0, 90, 'result' )", 
    "polyVertexNormalCtx": "", 
    "polyWarpImage": "", 
    "polyWedgeFace": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane( n='plg', w=10, h=10 )\n    \n    # Wedge about a single axis\n    pm.polyWedgeFace( 'plg.f[24:29]', 'plg.f[34]', 'plg.f[44]', 'plg.f[54]', 'plg.f[64]', 'plg.f[74:79]', ws=1, wedgeAngle=90, divisions=8, ed=(62,167), ch=1 )\n    \n    # Wedge about multiple axes (one axis for each command)\n    pm.polyCube( n='plg', w=1, h=1, d=1, sx=4, sy=4, sz=4, ax=(0, 1, 0), tx=1, ch=1 )\n    pm.polyWedgeFace( 'plg.f[64:79]', ws=1, wedgeAngle=90, divisions=9, ed=(128, 133, 138, 143), ch=1 )\n    pm.polyWedgeFace( 'plg.f[0:15]', ws=1, wedgeAngle=90, divisions=9, ed=(0, 1, 2, 3), ch=1 )\n    pm.polyWedgeFace( 'plg.f[80:95]', ws=1, wedgeAngle=90, divisions=9, ed=(100, 105, 110, 115), ch=1 )\n    pm.polyWedgeFace( 'plg.f[32:47]', ws=1, wedgeAngle=90, divisions=9, ed=(36, 37, 38, 39), ch=1 )", 
    "popupMenu": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout69') #\n    pm.button()\n    # Result: ui.Button('window1|columnLayout69|button66') #\n    pm.popupMenu()\n    # Result: ui.PopupMenu('window1|columnLayout69|button66|popupMenu90') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|button66|popupMenu90|menuItem931') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|button66|popupMenu90|menuItem932') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|button66|popupMenu90|menuItem933') #\n    pm.text()\n    # Result: ui.Text('window1|columnLayout69|text5') #\n    pm.popupMenu( button=1 )\n    # Result: ui.PopupMenu('window1|columnLayout69|text5|popupMenu91') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|text5|popupMenu91|menuItem934') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|text5|popupMenu91|menuItem935') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|text5|popupMenu91|menuItem936') #\n    pm.checkBox( 'aCheckBox' )\n    # Result: ui.CheckBox('window1|columnLayout69|aCheckBox') #\n    pm.popupMenu( parent='aCheckBox', alt=True, ctl=True )\n    # Result: ui.PopupMenu('window1|columnLayout69|aCheckBox|popupMenu92') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|aCheckBox|popupMenu92|menuItem937') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|aCheckBox|popupMenu92|menuItem938') #\n    pm.menuItem()\n    # Result: ui.CommandMenuItem('window1|columnLayout69|aCheckBox|popupMenu92|menuItem939') #\n    pm.showWindow()", 
    "pose": "    \n    \n    import pymel.core as pm\n    \n    # First, create a character to hold the pose. The character will be\n    # a 3-bone skeleton named \"arm\".\n    #\n    pm.select( d=True )\n    pm.joint( p=(0, 0, 0) )\n    # Result: nt.Joint(u'joint1') #\n    pm.joint( p=(0, 4, 0) )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( p=(0, 8, -1) )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( 'joint2', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint3') #\n    pm.joint( p=(0, 9, -2) )\n    # Result: nt.Joint(u'joint4') #\n    pm.joint( 'joint3', e=True, zso=True, oj='xyz' )\n    # Result: nt.Joint(u'joint4') #\n    pm.select( 'joint2', 'joint3', 'joint1', r=True )\n    pm.character( name='arm' )\n    # Result: nt.Character(u'arm') #\n    # Create a pose for the current joint position named \"handWave\"\n    #\n    pm.pose( 'arm', name='handWave' )\n    # Result: u'handWave' #\n    # Query the existing poses\n    #\n    pm.pose( 'arm', query=True, n=True )\n    # Result: [u'handWave'] #\n    # Restore the pose onto the character\n    #\n    pm.pose( 'arm', name='handWave', apply=True )", 
    "preloadRefEd": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout10') #\n    pm.preloadRefEd()\n    # Result: u'preloadRefEd1' #\n    pm.showWindow(window)", 
    "prepareRender": "    \n    \n    import pymel.core as pm\n    \n    # Query what the default render traversal set is.\n    pm.prepareRender(query=True, defaultTraversalSet=True)\n    # Result: u'null' #\n    # Set the render traversal set to 'MyPrepareRender'.\n    cmd.prepareRender(edit=True, defaultTraversalSet='MyPrepareRender')\n    # Set the preRender traversal to the adskPrepareRender.preRender function,\n    # for the default render traversal set.\n    cmd.prepareRender(edit=True, preRender=adskPrepareRender.preRender)\n    # Set the default render traversal set to require saving the assembly node\n    # configuration before render, and restore it once rendering completes.\n    cmd.prepareRender(edit=True, saveAssemblyConfig=True)\n    # Set the label of traversal set 'MyPrepareRender' to be 'Custom Render'.\n    cmd.prepareRender(edit=True, label='Custom Render', traversalSet='MyPrepareRender')", 
    "progressBar": "    \n    \n    import pymel.core as pm\n    \n    # Create a custom progressBar in a windows ...\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout70') #\n    \n    progressControl = pm.progressBar(maxValue=10, width=300)\n    pm.button( label='Make Progress!', command='pm.progressBar(progressControl, edit=True, step=1)' )\n    # Result: ui.Button('window1|columnLayout70|button67') #\n    \n    pm.showWindow( window )\n    \n    # Or, to use the progress bar in the main window ...\n    \n    import maya.mel\n    gMainProgressBar = maya.mel.eval('$tmp = $gMainProgressBar')\n    \n    pm.progressBar( gMainProgressBar,\n                                    edit=True,\n                                    beginProgress=True,\n                                    isInterruptable=True,\n                                    status='Example Calculation ...',\n                                    maxValue=5000 )\n    \n    for i in range(5000) :\n            if pm.progressBar(gMainProgressBar, query=True, isCancelled=True ) :\n                    break\n    \n            pm.progressBar(gMainProgressBar, edit=True, step=1)\n    \n    pm.progressBar(gMainProgressBar, edit=True, endProgress=True)", 
    "progressWindow": "    \n    \n    import pymel.core as pm\n    \n    # +-+------------------+\n    # |-|  Doing Nothing   |\n    # +--------------------+\n    # | Sleeping: 40%      |\n    # |                    |\n    # | +----------------+ |\n    # | |||||||          | |\n    # | +----------------+ |\n    # |                    |\n    # | Hit ESC to Cancel  |\n    # +--------------------+\n    \n    # Always use the progress dialog from a script, never directly\n    # from the Script Editor.\n    \n    amount = 0\n    \n    pm.progressWindow(    title='Doing Nothing',\n                                            progress=amount,\n                                            status='Sleeping: 0%',\n                                            isInterruptable=True )\n    while True :\n            # Check if the dialog has been cancelled\n            if pm.progressWindow( query=True, isCancelled=True ) :\n                    break\n    \n            # Check if end condition has been reached\n            if pm.progressWindow( query=True, progress=True ) \"= 100 :\n                    break\n    \n            amount += 5\n    \n            pm.progressWindow( edit=True, progress=amount, status=('Sleeping: ' + `amount` + '%' ) )\n    \n            pm.pause( seconds=1 )\n    \n    pm.progressWindow(endProgress=1)", 
    "projectCurve": "    \n    \n    import pymel.core as pm\n    \n    # Project the active curve onto the active surface using the surface\n    # normals:\n    pm.projectCurve( un=True )\n    \n    # Project this curve onto the nurbs sphere using the specified direction:\n    pm.projectCurve( 'curve1', 'nurbsSphere1', d=(0.0, 6.0, 0.0) )", 
    "projectTangent": "    \n    \n    import pymel.core as pm\n    \n    # Do project tangent with curvature continuity between a curve and a\n    # nurbs plane surface\n    pm.projectTangent( 'curve1', 'nurbsPlane1', c=True )\n    \n    # Do project tangent between the 3 curves and tangent align the curve\n    # with the reverse tangent of the second of the other 2 curves\n    # (i.e. with curve3)\n    pm.projectTangent( 'curve1', 'curve2', 'curve3', td=2, rt=True )", 
    "projectionContext": "", 
    "projectionManip": "    \n    \n    import pymel.core as pm\n    \n    pm.projectionManip( fb=True )\n    pm.projectionManip( pt=3 )", 
    "promptDialog": "    \n    \n    import pymel.core as pm\n    \n    # Create an OK/Cancel prompt dialog.\n    #\n    # +-+---------------------+\n    # |-|    Rename Object    |\n    # +-----------------------+\n    # | Enter Name:           |\n    # | +-------------------+ |\n    # | |                   | |\n    # | |                   | |\n    # | +-------------------+ |\n    # +-----------------------+\n    # | +-------+  +--------+ |\n    # | |  OK   |  | Cancel | |\n    # | +-------+  +--------+ |\n    # +-----------------------+\n    #\n    \n    result = pm.promptDialog(\n                    title='Rename Object',\n                    message='Enter Name:',\n                    button=['OK', 'Cancel'],\n                    defaultButton='OK',\n                    cancelButton='Cancel',\n                    dismissString='Cancel')\n    \n    if result == 'OK':\n            text = pm.promptDialog(query=True, text=True)", 
    "propModCtx": "    \n    \n    import pymel.core as pm\n    \n    # Edit type of propmod context.\n    pm.propModCtx( 'PropMod', e=True, t=1 )\n    # Result: u'PropMod' #\n    \n    # Activate propmod context.\n    pm.setToolTo( 'PropMod' )\n    \n    # Change the type and dropoff.\n    pm.propModCtx( 'PropMod', e=True, d=(0, 1, 0) )\n    # Result: u'PropMod' #", 
    "propMove": "    \n    \n    import pymel.core as pm\n    \n    pm.propMove( 3, 6, 0, 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1] )\n    # This performs a proportional translate of (3,6,0) on seven surfaces.\n    # Note that there are 7 \"-p\" flags, one for each surface.\n    \n    pm.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], pivot=(1, 1, 1), s=(3, 3, 3) )\n    # This performs a proportional scale of (3,3,3) on seven surfaces.\n    # Note that there are 7 \"-p\" flags, one for each surface. The scale\n    # happened about the specified pivot (1,1,1).\n    \n    pm.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], r=(30, 60, 90) )\n    # This performs a proportional rotate of (30,60,90) on seven surfaces.\n    # Note that there are 7 \"-p\" flags, one for each surface.\n    \n    pm.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', px=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], r=(30, 60, 90) )\n    # This performs a proportional rotate of (30,60,90) on seven surfaces.\n    # The percentages are only applied on the rotation 30 about the X axis. The\n    # percentages along Y and Z are  1.0. Note that there are 7 \"-px\" flags, one\n    # for each surface. The surfaces are rotated by 60, 90 in Y and Z.", 
    "psdChannelOutliner": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.formLayout()\n    # Result: ui.FormLayout('window1|formLayout77') #\n    pm.psdChannelOutliner('materialList', height=175, psdParent='lambert1',\n                            addChild=(('color', ''), ('diffuse', ''), ('transparency', '')) )\n    pm.showWindow()", 
    "psdConvSolidTxOptions": "", 
    "psdEditTextureFile": "    \n    \n    import pymel.core as pm\n    \n    # Create a Photoshop file with an image layer from a disk image file\n    pm.psdTextureFile(xr=512, yr=512, ifn=('C:\\\\tex.jpg', 'layerSet1', 1), psf='C:\\\\final.psd')\n    # // Saved file: C:\\final.psd #\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    pm.select('pPlane1')\n    \n    # Create a snapshot file containing the UVs of pPlane1\n    pm.uvSnapshot(n='C:\\\\uvSnapshot.iff', xr=512, yr=512, o=True)\n    # // Saved file: C:\\uvSnapshot.iff #\n    \n    # Edit the \"final.psd\" file which we have created, add a UV snapshot layer from snapshot file and an image layer from disk image file\n    pm.psdEditTextureFile(aci=('layerSet2', 'C:\\\\tex1.jpg'), ssi='C:\\\\uvSnapshot.iff', uvt=1, psf='C:\\\\final.psd')", 
    "psdExport": "    \n    \n    import pymel.core as pm\n    \n    # Write the layer set 1 of psd file as 16 bit tif file\n    pm.psdExport( ifn='/tmp/test.psd', ofn='/tmp/test.set1.tif', lsn='Set 1', format='tif', bpc=2 )\n    # Query if the layer set \"Set 2\" is empty.\n    pm.psdExport( ifn='/tmp/test.psd', lsn='Set 2', q=True, els=True )", 
    "psdTextureFile": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    pm.select('pPlane1')\n    \n    # Create a snapshot file containing the UVs of pPlane1\n    pm.uvSnapshot(n='C:\\\\uvSnapshot.iff', xr=512, yr=512, o=True)\n    # // Saved file: C:\\uvSnapshot.iff #\n    \n    # Create a Photoshop file containing a UV snapshot layer from UV snapshot file we have just created and an image layer from a disk image file\n    pm.psdTextureFile(xr=512, yr=512, ifn=('C:\\\\tex.jpg', 'layerSet1', 1), ssi='C:\\\\uvSnapshot.iff', uvt=1, psf='C:\\\\final.psd')\n    # // Saved file: C:\\final.psd #", 
    "python": "", 
    "querySubdiv": "    \n    \n    import pymel.core as pm\n    \n    # find all tweaked verticies at current level\n    pm.querySubdiv( a=1 )\n    # find all tweaked verticies one level finer than current level\n    pm.querySubdiv( a=1, l=1, r=True )\n    # find all creased verticies at current level\n    pm.querySubdiv( a=2 )\n    # find all creased edges at current level\n    pm.querySubdiv( a=3 )\n    # find all faces at current level.\n    # You should work with the subdivision surface shape.\n    #\n    pm.querySubdiv( 'subdivShape1', a=4 )\n    # find all faces at level 1.\n    #\n    pm.querySubdiv( 'subdivShape1', a=4, level=1, relative=False )\n    # find all faces at the next finest level from the current one.\n    #\n    pm.querySubdiv( 'subdivShape1', a=4, level=1, relative=True )", 
    "quit": "    \n    \n    import pymel.core as pm\n    \n    pm.quit()\n    pm.quit(force=True)", 
    "radial": "    \n    \n    import pymel.core as pm\n    \n    pm.radial( 'particle1', m=5.0, mxd=2.0 )\n    # Creates a radial field with magnitude 5.0 and maximum distance 2.0,\n    # and adds it to the list of fields particle1 owns.\n    \n    pm.radial( pos=(2, 0, 4 ))\n    # Creates a radial field at position (0,2,4) in world coordinates,\n    # with default magnitude(1.0), attentuation (1.0),\n    # and max distance (5.0).\n    \n    pm.radial( 'radialField1', e=True, att=0.98 )\n    # Edits the attenuation value of the field named radialField1\n    \n    pm.radial( 'radialField1', q=True, m=True )\n    # Queries radialField1 for its magnitude.\n    \n    pm.radial( 'radialField1', e=True, mxd=10.0 )\n    # Changes the maximum distance of the field called\n    # \"radialField1\" to 10.0.\n    \n    pm.radial( m=2.0 )\n    # Creates a radial field with magnitude 2.0 for every active selection.\n    # If no there are active\n    # selections, creates such a field at world position (0,0,0).", 
    "radioButton": "    \n    \n    import pymel.core as pm\n    \n    pm.window( width=150 )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout71') #\n    pm.radioCollection()\n    # Result: ui.RadioCollection('window1|columnLayout71|radioCollection1') #\n    pm.radioButton( label='One' )\n    # Result: ui.RadioButton('window1|columnLayout71|radioButton1') #\n    pm.radioButton( label='Two' )\n    # Result: ui.RadioButton('window1|columnLayout71|radioButton2') #\n    pm.radioButton( label='Three' )\n    # Result: ui.RadioButton('window1|columnLayout71|radioButton3') #\n    pm.radioButton( label='Four' )\n    # Result: ui.RadioButton('window1|columnLayout71|radioButton4') #\n    pm.showWindow()", 
    "radioButtonGrp": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with two separate radio button groups.\n    #\n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout72') #\n    pm.radioButtonGrp( label='Three Buttons', labelArray3=['One', 'Two', 'Three'], numberOfRadioButtons=3 )\n    # Result: ui.RadioButtonGrp('window1|columnLayout72|radioButtonGrp1') #\n    pm.radioButtonGrp( label='Four Buttons', labelArray4=['I', 'II', 'III', 'IV'], numberOfRadioButtons=4 )\n    # Result: ui.RadioButtonGrp('window1|columnLayout72|radioButtonGrp2') #\n    pm.showWindow( window )\n    \n    #    Create a window with two radio button groups that are\n    #    linked together.\n    #\n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window2|columnLayout73') #\n    group1 = pm.radioButtonGrp( numberOfRadioButtons=3, label='Colors', labelArray3=['Red', 'Blue', 'Green'] )\n    pm.radioButtonGrp( numberOfRadioButtons=3, shareCollection=group1, label='', labelArray3=['Yellow', 'Orange', 'Purple'] )\n    # Result: ui.RadioButtonGrp('window2|columnLayout73|radioButtonGrp4') #\n    pm.showWindow( window )", 
    "radioCollection": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True, rowSpacing=10 )\n    # Result: ui.ColumnLayout('window1|columnLayout74') #\n    pm.frameLayout( label='Colors' )\n    # Result: ui.FrameLayout('window1|columnLayout74|frameLayout19') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout74|frameLayout19|columnLayout75') #\n    collection1 = pm.radioCollection()\n    rb1 = pm.radioButton( label='Red' )\n    rb2 = pm.radioButton( label='Blue' )\n    rb3 = pm.radioButton( label='Green' )\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout74|frameLayout19' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout74' #\n    \n    pm.frameLayout( label='Position' )\n    # Result: ui.FrameLayout('window1|columnLayout74|frameLayout20') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout74|frameLayout20|columnLayout76') #\n    collection2 = pm.radioCollection()\n    rb4 = pm.radioButton( label='Top' )\n    rb5 = pm.radioButton( label='Middle' )\n    rb6 = pm.radioButton( label='Bottom' )\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout74|frameLayout20' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout74' #\n    \n    pm.radioCollection( collection1, edit=True, select=rb2 )\n    # Result: ui.RadioCollection('window1|columnLayout74|frameLayout19|columnLayout75|radioCollection2') #\n    pm.radioCollection( collection2, edit=True, select=rb6 )\n    # Result: ui.RadioCollection('window1|columnLayout74|frameLayout20|columnLayout76|radioCollection3') #\n    pm.showWindow()", 
    "radioMenuItemCollection": "    \n    \n    import pymel.core as pm\n    \n    pm.window( menuBar=True )\n    # Result: ui.Window('window1') #\n    pm.menu( label='Position' )\n    # Result: ui.Menu('window1|menu65') #\n    pm.radioMenuItemCollection()\n    # Result: ui.RadioMenuItemCollection('window1|menu65|radioMenuItemCollection25') #\n    pm.menuItem( label='Top', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu65|menuItem940') #\n    pm.menuItem( label='Middle', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu65|menuItem941') #\n    pm.menuItem( label='Bottom', radioButton=True )\n    # Result: ui.CommandMenuItem('window1|menu65|menuItem942') #\n    pm.menu( label='Number' )\n    # Result: ui.Menu('window1|menu66') #\n    pm.radioMenuItemCollection()\n    # Result: ui.RadioMenuItemCollection('window1|menu66|radioMenuItemCollection26') #\n    pm.menuItem( label='One', radioButton=True )\n    # Result: ui.CommandMenuItem('window1|menu66|menuItem943') #\n    pm.menuItem( label='Two', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu66|menuItem944') #\n    pm.menuItem( label='Three', radioButton=False )\n    # Result: ui.CommandMenuItem('window1|menu66|menuItem945') #\n    pm.showWindow()", 
    "rampColorPort": "    \n    \n    import pymel.core as pm\n    \n    ramp = pm.createNode('ramp')\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout77') #\n    pm.rampColorPort( node=ramp )\n    # Result: u'window1|columnLayout77|rampColorPort1' #\n    pm.showWindow()", 
    "rampWidget": "", 
    "rampWidgetAttrless": "", 
    "rangeControl": "    \n    \n    import pymel.core as pm\n    \n    # This will create a window with a scrollable playback range control. The initial\n    # range is set up to be from 0 to 30, and the maximum values the\n    # slider can access are 0 to 60.  Dragging the control's slider sets the\n    # 30-frame-long playback range within the bounded values of\n    # 0 to 60.\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.frameLayout( lv=False )\n    # Result: ui.FrameLayout('window1|frameLayout21') #\n    pm.playbackOptions( minTime=0, maxTime=30 )\n    # Result: 0.0 #\n    pm.rangeControl( 'myRangeSlider', minRange=0, maxRange=60 )\n    # Result: u'window1|frameLayout21|myRangeSlider' #\n    pm.showWindow()", 
    "readPDC": "", 
    "readTake": "    \n    \n    import pymel.core as pm\n    \n    #    Read data info the clock device and apply.\n    pm.readTake( device='clock', take='clock.mov' )\n    pm.applyTake( device='clock' )", 
    "rebuildCurve": "    \n    \n    import pymel.core as pm\n    \n    # rebuild curve to 5 uniform spans\n    pm.rebuildCurve( rt=0, s=5 )\n    \n    # rebuild curve by reducing redundant spans\n    pm.rebuildCurve( rt=1 )\n    \n    # rebuild curve by matching the parameterization of another curve\n    # curve1 is the curve to rebuild\n    # curve2 is the reference curve\n    pm.rebuildCurve( 'curve1', 'curve2', rt=2 )\n    \n    # rebuild curve by removing all multiple interior knots\n    pm.rebuildCurve( rt=3 )\n    \n    # rebuild curve using the curvature of the curve\n    # to create more spans where curvature is higher\n    pm.rebuildCurve( rt=4 )", 
    "rebuildSurface": "    \n    \n    import pymel.core as pm\n    \n    # rebuild the surface using uniform parameterization\n    # The rebuilt surface will have 5 spans in u and\n    # 10 spans in v\n    pm.rebuildSurface( rt=0, dir=2, su=5, sv=10 )\n    \n    # rebuild the surface by removing its redundant spans\n    pm.rebuildSurface( rt=1 )\n    \n    # rebuild the surface by matching the u parameterization\n    # of another surface. surface1 is the surface to rebuild\n    # surface2 is the reference surface\n    pm.rebuildSurface( 'surface1', 'surface2', rt=2, dir=0 )\n    \n    # rebuild the surface by removing all multiple interior knots\n    pm.rebuildSurface( rt=3 )\n    \n    # rebuild the surface using uniform parameterization\n    pm.rebuildSurface( rt=4 )", 
    "recordAttr": "    \n    \n    import pymel.core as pm\n    \n    # This command will setup the translateX and translateY\n    # attributes for recording.\n    pm.recordAttr( at=['translateX', 'translateZ'] )", 
    "recordDevice": "    \n    \n    import pymel.core as pm\n    \n    #    Record the clock device for 30 seconds and apply the data.\n    #\n    import time\n    pm.recordDevice( device='clock', duration=30 )\n    time.sleep( 30 )\n    pm.recordDevice( device='clock', state=False )\n    pm.applyTake( device='clock' )", 
    "redo": "    \n    \n    import pymel.core as pm\n    \n    # In this particular example, each line needs to be executed\n    # separately one after the other. Executing lines separately\n    # guaranties that commands are properly registered in the undo\n    # stack.\n    \n    pm.polyCube()\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    \n    pm.undo()\n    # Undo: pm.polyCube()\n     #\n    \n    pm.redo()\n    # Redo: pm.polyCube()\n     #\n    [u'pCube1', u'polyCube1']", 
    "reference": "", 
    "referenceEdit": "    \n    \n    import pymel.core as pm\n    \n    #\n    # EXAMPLE FOR -removeEdits\n    #\n    # Assume:\n    # main.ma contains a reference to mid.ma.\n    # mid.ma contains a reference to bot.ma.\n    # NOTE: The target reference must be unloaded for the\n    # following commands to work.\n    # Remove all the edits which apply to mid.ma.\n    # This can be done by specifying either the reference\n    # node or the reference file.\n    pm.referenceEdit( 'midRN', removeEdits=True )\n    pm.referenceEdit( 'mid.ma', removeEdits=True )\n    # Remove all \"setAttr\" edits which apply to mid.ma.\n    # This can be done by specifying either the reference\n    # node or the reference file.\n    pm.referenceEdit( 'midRN', editCommand='setAttr', removeEdits=True )\n    pm.referenceEdit( 'mid.ma', editCommand='setAttr', removeEdits=True )\n    # Remove all the \"parent\" edits which apply to mid:pSphere1.\n    pm.referenceEdit( 'mid:pSphere1', editCommand='parent', removeEdits=True )\n    # Remove all the \"connectAttr\" edits which apply to mid:pSphere1.translateX.\n    pm.referenceEdit( 'mid:pSphere1.translateX', editCommand='connectAttr', removeEdits=True )\n    # Remove all the edits which apply to bot.ma and are stored on midRN.\n    # The referenceEdit command is only capable of removing edits which\n    # are stored on a top level reference node. The only edits which\n    # are stored on a top level reference node are those which were made\n    # from the main scene. If you had previously opened mid.ma and made\n    # modifications to bot.ma, those edits can only be removed by opening\n    # mid.ma and issuing a referenceEdit command.\n    #\n    pm.referenceEdit( 'mid:botRN', removeEdits=True )\n    pm.referenceEdit( 'bot.ma', removeEdits=True )\n    #\n    # EXAMPLE FOR -changeEditTarget\n    #\n    tempDir = pm.internalVar(utd=True)\n    # Create a reference containing pSphere1.\n    #\n    pm.file( f=True, new=True )\n    pm.polySphere( ch=1, r=1, sx=20, sy=20, ax=(0, 1, 0) )\n    newFileName = '%sref.ma' % tempDir\n    pm.file( rename=newFileName )\n    pm.file( f=True, s=True, type='mayaAscii')\n    # Reference the file in and position pSphere1\n    #\n    pm.file( f=True, new=True )\n    pm.file( newFileName, r=True, ns='ref' )\n    pm.select( 'ref:pSphere1', r=True )\n    pm.move( 5, 5, 5 )\n    topFileName = '%stop.ma' % tempDir\n    pm.file( rename=topFileName )\n    pm.file( f=True, s=True, type='mayaAscii')\n    # Later on its determined that pSphere1 is actually\n    # BobMrozowski.\n    #\n    pm.file( newFileName, f=True, o=True )\n    pm.rename( 'pSphere1', 'BobMrozowski' )\n    pm.file( f=True, s=True, type='mayaAscii')\n    # Now go to open your main scene again...\n    #\n    pm.file( topFileName, f=True, o=True )\n    # ... and notice that BobMrozowski is back at\n    # the origin.\n    #\n    # So remap all edits so that anything that used to\n    # affect ref:pSphere1 now affects ref:BobMrozowski...\n    #\n    pm.referenceEdit( 'refRN', changeEditTarget=('ref:pSphere1','ref:BobMrozowski') )\n    # ... and then force all previously failing edits affecting\n    # refRN to be re-applied.\n    #\n    pm.referenceEdit( 'refRN', applyFailedEdits=True )\n    # BobMrozowski should now be back at 5 5 5.\n    #", 
    "referenceQuery": "    \n    \n    import pymel.core as pm\n    \n    # Build a sample scene:\n    # main scene contains a reference to mid.ma.\n    # mid.ma contains a reference to bot.ma.\n    # Create bot.ma with a poly sphere.\n    #\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.file( rename='bot.ma' )\n    pm.file( f=True, s=True, type='mayaAscii')\n    # Create mid.ma with a poly cone.\n    # Reference bot.ma into mid.ma and group\n    # the sphere in bot.ma\n    #\n    pm.file( f=True, new=True )\n    pm.file( 'bot.ma', r=True,ns='bot' )\n    pm.polyCone()\n    pm.group( 'bot:pSphere1' )\n    pm.file( rename='mid.ma' )\n    pm.file( f=True, s=True, type='mayaAscii')\n    # Create a poly plane.\n    # Reference mid.ma into the main scene,\n    # move the cone in mid.ma, and connect\n    # the plane to the sphere in bot.ma.\n    #\n    pm.file( f=True, new=True )\n    pm.file( 'mid.ma', r=True, ns='mid' )\n    pm.select( 'mid:pCone1', r=True )\n    pm.move( 5, 5, 5, r=True )\n    pm.polyPlane()\n    pm.connectAttr( 'pPlane1.ty', 'mid:bot:polySphere1.radius' )\n    # Now perform some queries:\n    #\n    pm.referenceQuery( 'midRN',filename=True )\n    # Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/mid.ma\n    pm.referenceQuery( 'mid:pCone1', filename=True, shortName=True )\n    # Result: mid.ma\n    pm.referenceQuery( 'mid:botRN', filename=True, parent=True )\n    # Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/mid.ma\n    pm.referenceQuery( 'mid.ma', referenceNode=True )\n    # Result: midRN\n    pm.referenceQuery( 'C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/bot.ma', referenceNode=True)\n    # Result: mid:botRN\n    pm.referenceQuery( 'bot.ma', referenceNode=True, parent=True )\n    # Result: midRN\n    pm.referenceQuery( 'bot.ma', referenceNode=True, topReference=True )\n    # Result: midRN\n    pm.referenceQuery( 'mid:botRN',nodes=True )\n    [u'mid:bot:pPlane1', u'mid:bot:pPlaneShape1', u'mid:bot:outputCloth1', u'mid:bot:nCloth1', u'mid:bot:nClothShape1', u'mid:bot:dynamicConstraint1', u'mid:bot:dynamicConstraintShape1', u'mid:bot:nurbsSphere1', u'mid:bot:nurbsSphereShape1', u'mid:bot:pSphere1', u'mid:bot:pSphereShape1', u'mid:bot:lightLinker1', u'mid:bot:layerManager', u'mid:bot:defaultLayer', u'mid:bot:renderLayerManager', u'mid:bot:defaultRenderLayer', u'mid:bot:polyPlane1', u'mid:bot:nucleus1', u'mid:bot:nComponent1', u'mid:bot:uiConfigurationScriptNode', u'mid:bot:sceneConfigurationScriptNode', u'mid:bot:nClothShape1Cache1Start', u'mid:bot:cacheBlend1', u'mid:bot:nClothShape1Cache2', u'mid:bot:nClothShape1Cache1End', u'mid:bot:makeNurbSphere1', u'mid:bot:polySphere1']\n    pm.referenceQuery( 'pPlane1', isNodeReferenced=True )\n    # Result: 0\n    pm.referenceQuery( 'mid:pCone1', isNodeReferenced=True )\n    # Result: 1\n    pm.referenceQuery( 'mid:botRN', parentNamespace=True )\n    # Result: mid\n    pm.referenceQuery( 'mid:bot:pSphere1', parentNamespace=True )\n    # Result: mid\n    pm.referenceQuery( 'C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/bot.ma', parentNamespace=True )\n    # Result: mid\n    print pm.referenceQuery( 'bot.ma', namespace=True )\n    # Result: :mid:bot\n    print pm.referenceQuery( 'mid:botRN', namespace=True )\n    # Result: :mid:bot\n    print pm.referenceQuery( 'bot.ma', namespace=True, shortName=True )\n    # Result: bot\n    print pm.referenceQuery( 'mid.ma', namespace=True )\n    # Result: :mid\n    print pm.referenceQuery( 'mid.ma', namespace=True, shortName=True )\n    # Result: mid", 
    "refineSubdivSelectionList": "    \n    \n    import pymel.core as pm\n    \n    # after selecting components of a subdivision surface\n    pm.refineSubdivSelectionList()", 
    "refresh": "    \n    \n    import pymel.core as pm\n    \n    pm.refresh()", 
    "refreshEditorTemplates": "    \n    \n    import pymel.core as pm\n    \n    # The following command will cause the currently\n    # selected AE tab and all copied AE tab windows\n    # to be refreshed.\n    #\n    pm.refreshEditorTemplates\n    # Result: <function refreshEditorTemplates at 0x149141320> #", 
    "regionSelectKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a manipulator style scale key context for the graph editor\n    #\n    pm.regionSelectKeyCtx( 'regionSelectKeyContext' )", 
    "rehash": "", 
    "relationship": "    \n    \n    import pymel.core as pm\n    \n    pm.relationship('ignore', 'lightLinker1', 'pCube1', 'pointLight1')", 
    "reloadImage": "    \n    \n    import pymel.core as pm\n    \n    pm.reloadImage( 'image.xpm', 'iconTextButtonName' )\n    pm.reloadImage( 'image', 'shelfButtonName' )\n    pm.reloadImage( '~/bitmaps/maya/image.xpm', 'toolButtonName' )", 
    "removeJoint": "    \n    \n    import pymel.core as pm\n    \n    # joint5 will be removed. Child joints of joint5 will be reparented under\n    # joint5's parent joint.\n    pm.removeJoint( 'joint5' )", 
    "removeMultiInstance": "    \n    \n    import pymel.core as pm\n    \n    pm.createNode('choice',n='choice')\n    # Result: nt.Choice(u'choice') #\n    pm.setAttr('choice.input[0]',2.0)\n    pm.setAttr('choice.input[4]',4.0)\n    pm.connectAttr('choice.input[8]','choice.input[100]')\n    \n    # This will remove the element with index 4 from the input of\n    # the choice node as long as there are no incoming or outgoing\n    # connections to the attribute.\n    #\n    pm.removeMultiInstance( 'choice.input[4]' )\n    \n    # This will remove the element with index 100 from the input of\n    # the choice node, breaking any existing connections first.\n    #\n    pm.removeMultiInstance( 'choice.input[100]', b=True )", 
    "rename": "    \n    \n    import pymel.core as pm\n    \n    # create two namespaces under the root namespace and create\n    # a sphere under the root namespace and a sphere under one\n    # of the new namespaces.\n    pm.namespace( set=':' )\n    # Result: u'' #\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.namespace( add='nsA' )\n    # Result: u'nsA' #\n    pm.namespace( add='nsB' )\n    # Result: u'nsB' #\n    pm.namespace( set='nsA' )\n    # Result: u'nsA' #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'nsA:sphere2'), nt.MakeNurbSphere(u'nsA:makeNurbSphere1')] #\n    pm.namespace( set=':' )\n    # Result: u'' #\n    # change name of sphere1\n    pm.rename('sphere1', 'spinning_ball')\n    # Result: nt.Transform(u'spinning_ball') #\n    \n    # change name of spinning_ball back to sphere1\n    pm.select( 'spinning_ball', r=True )\n    pm.rename( 'sphere1' )\n    \n    # move sphere2 to namespace nsB\n    pm.rename( 'nsA:sphere2', 'nsB:sphere2' )\n    nsB:sphere2\n    \n    # move sphere2 back to namespace nsA when not in the root namespace\n    # Note the \":\" appearing in front of the new name to indicate\n    # we want to move the object to namespace nsA under the root namespace.\n    pm.namespace( set='nsB' )\n    pm.rename( 'nsB:sphere2', ':nsA:sphere2' )\n    nsA:sphere2\n    \n    # Let's try this without the leading \":\" in the new name.\n    # Since we are namespace nsA, in affect, what we are trying to do\n    # is rename :nsB:sphere2 to :nsA:nsB:sphere3. Since there isn't a\n    # nsB namespace under the namespace nsA, the namespace specification\n    # on new name is ignored and a warning is issued.\n    pm.namespace( set=':nsA' )\n    pm.rename( 'nsA:sphere2', 'nsB:sphere3' )\n    # Warning: Removing invalid characters from name. #\n    nsA:sphere3\n    \n    # rename an object when not in the root namespace\n    # and move the object to current namespace\n    pm.namespace( set=':nsB' )\n    pm.rename( 'nsA:sphere3', 'sphere4' )\n    nsB:sphere4\n    \n    # rename an object with an absolute name to move it into a new namespace.\n    # The namespace does not exist so will be created.\n    pm.namespace( set=':nsB' )\n    pm.rename( 'nsA:sphere3', ':nsC:sphere4' )\n    nsC:sphere4", 
    "renameAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( n='sph' )\n    # Result: [nt.Transform(u'sph'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.addAttr( sn='ms', ln='mass', dv=1.0, min=0.001, max=10000 )\n    # Rename the long and short names separately\n    pm.renameAttr( 'sph.mass', 'length' )\n    # Result: u'length' #\n    pm.renameAttr( 'sph.ms', 'ln' )\n    # Result: u'ln' #", 
    "renameUI": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a single button.\n    #\n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout78') #\n    pm.button( 'exampleButton', label='Example' )\n    # Result: ui.Button('window1|columnLayout78|exampleButton') #\n    pm.showWindow( window )\n    \n    #    Edit the button label.\n    #\n    pm.button( 'exampleButton', edit=True, label='New Label' )\n    # Result: ui.Button('window1|columnLayout78|exampleButton') #\n    \n    #    Rename the button.\n    #\n    pm.renameUI( 'exampleButton', 'newButton' )\n    # Result: u'newButton' #\n    \n    #    Query the button label using the new object name.\n    #\n    pm.button( 'newButton', query=True, label=True )\n    # Result: u'New Label' #", 
    "render": "    \n    \n    import pymel.core as pm\n    \n    pm.render()\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/images/tmp/untitled.iff' #\n    \n    cam = pm.camera()\n    pm.render( cam[0], x=768, y=576 )\n    # Result: u'/Volumes/newhome/chad/Documents/maya/projects/default/images/tmp/untitled.iff' #", 
    "renderGlobalsNode": "    \n    \n    import pymel.core as pm\n    \n    pm.renderGlobalsNode('bob')\n    # Result: u'renderGlobals1' #\n    \n    # this one will use defaults for resolution and quality\n    pm.renderGlobalsNode('bob', name='bob' )\n    # Result: u'bob' #\n    \n    pm.renderGlobalsNode('bob', rq='myTestQuality1', name='abekasTestGlobals' )\n    # Result: u'abekasTestGlobals' #", 
    "renderInfo": "    \n    \n    import pymel.core as pm\n    \n    pm.renderInfo( doubleSided=False, opposite=True )", 
    "renderLayerPostProcess": "    \n    \n    import pymel.core as pm\n    \n    pm.renderLayerPostProcess()", 
    "renderManip": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    \n    pm.renderManip( 'cameraShape1' )\n    \n    pm.renderManip( 'cameraShape1', e=True, st=True )\n    \n    pm.renderManip( 'cameraShape1', q=True, st=True )\n    # Result: True #", 
    "renderPartition": "    \n    \n    import pymel.core as pm\n    \n    # Query the current render partition\n    pm.renderPartition( q=True )\n    # Result: u'renderPartition' #\n    \n    # Set the current render partition to \"foofoo\"\n    pm.renderPartition( 'foofoo' )", 
    "renderPassRegistry": "    \n    \n    import pymel.core as pm\n    \n    # Get supported channel counts supported by renderer mentalRay and the passID \"DIFF\".\n    pm.renderPassRegistry(passID='DIFF',renderer='mentalRay', supportedChannelCounts=True)\n    # Result: [4, 3] #\n    #\n    # Get supported data types supported by renderer mentalRay, the passID \"DIFF\" and the channels \"3\".\n    pm.renderPassRegistry(passID='DIFF', renderer='mentalRay', channels=3, supportedDataTypes=True)\n    # Result: [1, 2, 256, 512] #", 
    "renderQualityNode": "    \n    \n    import pymel.core as pm\n    \n    pm.renderQualityNode()\n    # Result: u'renderQuality1' #\n    pm.renderQualityNode( name='loResTestQuality' )\n    # Result: u'loResTestQuality' #", 
    "renderSettings": "    \n    \n    import pymel.core as pm\n    \n    # Get the name of the first and last image for the current layer\n    fl = pm.renderSettings(firstImageName=True, lastImageName=True)\n    print( 'First image is '+fl[0] )\n    # This is the empty string if the scene is not set for animation\n    if fl[1] == '':\n        print('Not rendering animation');\n    else:\n        print( 'Last image is '+fl[1] )", 
    "renderThumbnailUpdate": "    \n    \n    import pymel.core as pm\n    \n    # Turns on thumbnail updates.\n    pm.renderThumbnailUpdate(True)\n    \n    # Turns off thumbnail updates.\n    pm.renderThumbnailUpdate(False)", 
    "renderWindowEditor": "    \n    \n    import pymel.core as pm\n    \n    editor = pm.renderWindowEditor()\n    \n    pm.renderWindowEditor( editor, e=True, mq=(0.7, 0.3, 0.3, 0.5) )\n    \n    pm.renderWindowEditor( editor, e=True, ar='true' )\n    \n    pm.renderWindowEditor( editor, e=True, snapshot=('persp', 256, 256) )\n    \n    pm.renderWindowEditor( editor, q=True, crc=True )\n    pm.renderWindowEditor( editor, e=True, crc='persp' )\n    \n    pm.renderWindowEditor( editor, e=True, srg=(768, 576) )", 
    "renderWindowSelectContext": "", 
    "renderer": "    \n    \n    import pymel.core as pm\n    \n    # To register a renderer called \"myRenderer\":\n    #\n    pm.renderer( 'myRenderer' )\n    # To edit a renderer called \"myRenderer\" with its rendererUIName\n    # being \"My Renderer\":\n    #\n    pm.renderer( 'myRenderer', edit=True, rendererUIName='My Renderer' )\n    # To register a renderer called \"anotherRenderer\" with all\n    # its parameters specified.\n    #\n    pm.renderer( 'anotherRenderer', rendererUIName='Another Renderer', iprRenderProcedure='mayaSoftwareIprRender', -iprOptionsProcedure='', isRunningIprProcedure='mayaSoftwareIsRunningIpr', startIprRenderProcedure='mayaSoftwareStartIprRender', stopIprRenderProcedure='mayaSoftwareStopIprRender', refreshIprRenderProcedure='mayaSoftwareRefreshIprImage', pauseIprRenderProcedure='mayaSoftwarePauseIprRender', changeIprRegionProcedure='mayaSoftwareChangeIprRegion', iprOptionsMenuLabel='IPR Tuning Options', iprOptionsSubMenuProcedure='mayaSoftwareIprUpdateOptionsSubMenu', iprRenderSubMenuProcedure='mayaSoftwareIprUpdateRenderSubMenu', renderProcedure='mayaSoftwareRender', renderOptionsProcedure='RenderOptions', renderDiagnosticsProcedure='RenderDiagnostics', commandRenderProcedure='render -batch', batchRenderProcedure='BatchRender', batchRenderOptionsProcedure='BatchRenderOptions', batchRenderOptionsStringProcedure=\"mayaSoftwareBatchRenderOptionsString\", cancelBatchRenderProcedure='CancelBatchRender', showBatchRenderProcedure='ShowBatchRender', showRenderLogProcedure='', showBatchRenderLogProcedure='', renderRegionProcedure='mayaRenderRegion', textureBakingProcedure='performConvertSolidTx', polyPrelightProcedure='performPrelight', renderingEditorsSubMenuProcedure='', logoImageName='', logoCallbackProcedure='' )\n    # To add a render globals node the renderer uses:\n    #\n    pm.renderer( 'anotherRenderer', edit=True, addGlobalsNode='defaultRenderGlobals' )\n    # To add the tabs associated with the specified renderer\n    # for the unified render globals window, use the syntax\n    #\n    #      renderer -edit\n    #               -addGlobalsTab globalsTabLabel\n    #                              globalsTabCreateProcName\n    #                              globalsTabUpdateProcName\n    #               renderer;\n    #\n    # where \"globalsTabLabel\" is the label of the tab,\n    # \"globalsTabCreatedProcName\" is the name of the mel procedure\n    # which is used to create the content in the tab.\n    # and \"globalsTabCreatedProcName\" is the name of the mel procedure\n    # which is used to update the content in the tab.\n    #\n    # Note that if you want to add a number of tabs, you need to repeat\n    # this renderer command for each tab you wish to add, as shown below.\n    #\n    pm.renderer( 'anotherRenderer', edit=True, addGlobalsTab=('Maya Software', 'createMayaSoftwareGlobalsTab', 'updateMayaSoftwareGlobalsTab') )\n    # To get a list of unified render globals window tab labels associated\n    # with the specified renderer.\n    #\n    pm.renderer( 'anotherRenderer', query=True, globalsTabLabels=True )\n    # To get a list of names of mel procedures which are used to\n    # create the unified render globals window tabs associated with\n    # the specified renderer.\n    #\n    pm.renderer( 'anotherRenderer', query=True, globalsTabCreateProcNames=True )\n    # To get a list of names of mel procedures which are used to\n    # update the unified render globals window tabs associated with\n    # the specified renderer.\n    #\n    pm.renderer( 'anotherRenderer', query=True, globalsTabUpdateProcNames=True )\n    # To view a list of registered renderers.\n    #\n    pm.renderer( query=True, namesOfAvailableRenderers=True )\n    # To check if anotherRenderer exists.\n    #\n    pm.renderer( 'anotherRenderer', exists=True )\n    # To view a list of render globals nodes used by the specified\n    # renderer:\n    #\n    pm.renderer( 'anotherRenderer', query=True, globalsNodes=True )", 
    "reorder": "    \n    \n    import pymel.core as pm\n    \n    # create a hierarchy\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.sphere( n='sphere3' )\n    # Result: [nt.Transform(u'sphere3'), nt.MakeNurbSphere(u'makeNurbSphere3')] #\n    pm.sphere( n='sphere4' )\n    # Result: [nt.Transform(u'sphere4'), nt.MakeNurbSphere(u'makeNurbSphere4')] #\n    pm.group( 'sphere1', 'sphere2', 'sphere3', 'sphere4', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    \n    # The hierarchy group1 contains sphere1, sphere2, sphere3 and sphere4.\n    # The command below moves sphere2 before sphere1.\n    pm.reorder( 'sphere2', r=-1 )\n    \n    # make sphere1 the first sibling\n    pm.reorder( 'sphere1', front=True )\n    \n    # move sphere3 forward 2 siblings. Moving it forward one\n    # sibling would put it at the end. Moving it forward again\n    # puts it at the beginning.\n    pm.reorder( 'sphere3', r=2 )", 
    "reorderContainer": "    \n    \n    import pymel.core as pm\n    \n    # create a container\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.sphere( n='sphere3' )\n    # Result: [nt.Transform(u'sphere3'), nt.MakeNurbSphere(u'makeNurbSphere3')] #\n    pm.sphere( n='sphere4' )\n    # Result: [nt.Transform(u'sphere4'), nt.MakeNurbSphere(u'makeNurbSphere4')] #\n    pm.container( addNode=['sphere1', 'sphere2', 'sphere3', 'sphere4'], n='sphereCon' )\n    # Result: nt.Container(u'sphereCon') #\n    # The container sphereCon contains sphere1, sphere2, sphere3 and sphere4.\n    # The command below moves sphere2 before sphere1.\n    pm.reorderContainer( 'sphere2', r=-1 )\n    # make sphere1 the first sibling\n    pm.reorderContainer( 'sphere1', front=True )\n    # move sphere3 forward 2 siblings. Moving it forward one\n    # sibling would put it at the end. Moving it forward again\n    # puts it at the beginning.\n    pm.reorderContainer( 'sphere3', r=2 )", 
    "reorderDeformers": "    \n    \n    import pymel.core as pm\n    \n    # Create some geometry to deform\n    pm.sphere( name='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( name='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    \n    # Create a couple of deformers\n    pm.select( 'sphere1Shape', 'sphere2Shape' )\n    pm.sculpt( name='sculpt1' )\n    # Result: [nt.Sculpt(u'sculpt1'), nt.Transform(u'sculptor1'), nt.Transform(u'sculpt1StretchOrigin')] #\n    pm.select( 'sphere1Shape', 'sphere2Shape' )\n    pm.cluster( name='cluster1' )\n    # Result: [nt.Cluster(u'cluster1'), nt.Transform(u'cluster1Handle')] #\n    \n    # Change their order\n    pm.reorderDeformers( 'sculpt1', 'cluster1', 'sphere1Shape', 'sphere2Shape' )", 
    "repeatLast": "", 
    "requires": "    \n    \n    import pymel.core as pm\n    \n    pm.requires( 'maya', '7.0' )\n    pm.requires( 'simpleLoftNode.so', '1.0' )\n    pm.requires( 'gpuCache', '1.0', nodeType='gpuCache')", 
    "reroot": "    \n    \n    import pymel.core as pm\n    \n    # joint5 will be a new root joint of the skeleton.\n    pm.reroot( 'joint5' )", 
    "resampleFluid": "    \n    \n    import pymel.core as pm\n    \n    # set width resolution to 3\n    pm.resampleFluid( rw=3 )\n    # set height resolution to 12\n    pm.resampleFluid( rh=12 )\n    # set all  resolutions to 20\n    pm.resampleFluid( rw=20, rh=20, rd=20 )", 
    "resetTool": "    \n    \n    import pymel.core as pm\n    \n    pm.resetTool( 'moveSuperContext' )", 
    "resolutionNode": "    \n    \n    import pymel.core as pm\n    \n    pm.resolutionNode( 'customRes' )\n    pm.resolutionNode( 'customRes', name='customRes' )", 
    "resourceManager": "    \n    \n    import pymel.core as pm\n    \n    # List all resources starting with an \"a\"\n    pm.resourceManager(nameFilter=\"a*\")\n    # Result: [u'abortBatchRender.png', u'absolute.png', u'activeDeselectedAnimLayer.png', u'activeSelectedAnimLayer.png', u'addBookmark.png', u'addDoubleLinear.svg', u'addMatrix.svg', u'addProxy.png', u'addSkinInfluence.png', u'addTimeWarp.png', u'addWire.png', u'addWireHolder.png', u'addWrapInfluence.png', u'ai.png', u'aimConstraint.png', u'aimConstraint.svg', u'airField.svg', u'align.png', u'alignCurve.png', u'alignCurve.svg', u'alignDist.png', u'alignMax.png', u'alignMid.png', u'alignMin.png', u'alignObjects.png', u'alignOnDist.png', u'alignOnMax.png', u'alignOnMid.png', u'alignOnMin.png', u'alignOnStack.png', u'alignStack.png', u'alignSurface.png', u'alignSurface.svg', u'alignTool.png', u'alignUMax.png', u'alignUMin.png', u'alignVMax.png', u'alignVMin.png', u'ambientLight.closed.svg', u'ambientLight.open.svg', u'ambientlight.png', u'ambientLight.svg', u'angleDim.png', u'angleDimension.svg', u'animateSnapshot.png', u'animateSweep.png', u'AnimationMovie.png', u'animCurveTA.svg', u'animCurveTL.svg', u'animCurveTT.svg', u'animCurveTU.svg', u'animCurveUA.svg', u'animCurveUL.svg', u'animCurveUT.svg', u'animCurveUU.svg', u'animPrefsWndIcon.png', u'animTurntable.png', u'anisotropic.svg', u'annotation.png', u'annotationShape.svg', u'appendCache.png', u'arcLengthDim.png', u'arcLengthDimension.svg', u'areaLight.closed.svg', u'areaLight.open.svg', u'arealight.png', u'areaLight.svg', u'arrayMapper.svg', u'arrowDown.png', u'arrowLeft.png', u'arrowRight.png', u'arrowUp.png', u'art3dPaint.png', u'artAttr.png', u'artSelect.png', u'aselect.png', u'attachCurve.svg', u'attachCurves.png', u'attachSurface.svg', u'attachWithoutMoving.png', u'attributes.png', u'attrPaint.png', u'audio.svg', u'autoKeyframeOff.png', u'autoKeyframeOn.png', u'autoload.png', u'autoTangent.png', u'azimuthElevation.png'] #", 
    "retarget": "    \n    \n    import pymel.core as pm\n    \n    # retarget the motion of bob onto joe using the scaled foot placement solver\n    #\n    pm.retarget( 'bob', 'joe', startFrame=0, endFrame=30, lowerBody='scaledFootPlacement' )\n    # Retarget the motion of birdman onto splinterFace using the scaled foot placement\n    # solver (default), using the hip-to-toe measurement to compute the scale.\n    # Use the hierarchy location at frame -5 as the rest pose.\n    #\n    pm.select( 'splinterFace', 'birdman', r=True )\n    pm.retarget( startFrame=0, endFrame=30, lowerScale='hipToToe', restPoseFrame=-5 )", 
    "retimeHelper": "", 
    "retimeKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a manipulator style scale key context for the graph editor\n    #\n    pm.retimeKeyCtx( 'retimeKeyContext' )", 
    "reverseCurve": "    \n    \n    import pymel.core as pm\n    \n    pm.reverseCurve( 'curve1', constructionHistory=True )\n    # Reverses curve1 with construction history on.  The result will\n    # be a string array, where the first string is the name of the new\n    # reversed curve and the second string is the name of the new\n    # dependency node.\n    \n    pm.reverseCurve( 'curve1', ch=False, replaceOriginal=True )\n    # Reverses curve1 without construction history, replacing the original.\n    # The result will be a string array, where the first string\n    # is the name of the curve (curve1).  Because history is off,\n    # no dependency node will be created.  The reversed curve will\n    # replace the original curve.\n    \n    pm.reverseCurve( 'curve1', ch=True, rpo=True )\n    # Reverses curve1 with history, trying to replace the original.\n    # If curve1 was not a result of construction history, then this command\n    # will simply replace curve1 with the reversed curve.  No dependency\n    # node will be created.\n    \n    # If curve1 was a result of construction history, then this command\n    # will insert a reverse dependency node before the curve.  eg.\n    # Before reverseCurve cmd:   curve0 ---\" closeCurve DN ---\" curve1\n    # After cmd:  curve0 ---\" closeCurve DN ---\" reverseCurve DN ---\" curve1\n    \n    # The result will be a string array , where the first string\n    # is the name of the curve (curve1) and the second name is the\n    # new dependency node.", 
    "reverseSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.reverseSurface( 'surface1', ch=True, d=0 )\n    pm.reverseSurface( 'surface1.v[0.1]', ch=True )\n    # Reverses surface1 with construction history in the U direction.\n    # The name of the new surface and the name of the new dependency node\n    # are returned.\n    \n    pm.reverseSurface( 'surface1', ch=False, rpo=True, d=1 )\n    pm.reverseSurface( 'surface1.u[0.1]', ch=True )\n    # Reverses surface1 without history, with replace original on,\n    # in the V direction.  Because the \"-rpo\" flag is on, the name of\n    # the original surface is returned as well as the new dependency node.\n    # The reversed surface will \"em\"replace\"/em\" the original surface.\n    \n    pm.reverseSurface( 'surface1', ch=False, rpo=True, d=2 )\n    # Reverses surface1 without history, with replace original on,\n    # in both the U and V directions.\n    \n    pm.reverseSurface( 'surface1', ch=False, rpo=True, d=3 )\n    # Swaps the U and V directions of surface1 with history, with replace\n    # original on.  This has the effect of reversing the surface normal.", 
    "revolve": "    \n    \n    import pymel.core as pm\n    \n    # To revolve a curve about the X axis at the origin. The profile curve is\n    # revolved by 360 degrees by default.\n    pm.revolve( 'curve1', ax=(1, 0, 0), p=(0, 0, 0) )\n    \n    # To revolve a curve about the Y axis at 1,0,1:\n    pm.revolve( 'curve1', ax=(0, 1, 0), p=(1, 0, 1) )", 
    "rigidBody": "    \n    \n    import pymel.core as pm\n    \n    # Creates a rigid body with a initial velocity of 10 in the x\n    # direction, a bounciness of 0.5 and a static friction coefficent\n    # of 0.4.\n    #\n    pm.rigidBody( n='myRigidBody', active=True, iv=(10, 0, 0), b=0.5, sf=0.4 )", 
    "rigidSolver": "    \n    \n    import pymel.core as pm\n    \n    # Set the playback time range to [1, 100]\n    pm.playbackOptions(min=1, max=100)\n    # Result: 1.0 #\n    # Create a poly cube named \"floor\"\n    pm.polyCube(w=10, h=0.10, d=10, sx=10, sy=1, sz=10, ax=(0, 1, 0), name='floor')\n    # Result: [nt.Transform(u'floor'), nt.PolyCube(u'polyCube1')] #\n    # Create a poly sphere named \"ball\", then move it to 0 9 0\n    pm.polySphere(r=1, sx=20, sy=20, ax=(0, 1, 0), name='ball')\n    # Result: [nt.Transform(u'ball'), nt.PolySphere(u'polySphere1')] #\n    pm.move(0, 9.0, 0, r=True)\n    # Create a new rigid body solver\n    pm.rigidSolver(create=True, name='rigidSolver1')\n    # Result: nt.RigidSolver(u'rigidSolver1') #\n    # Set the floor to passive rigid body\n    pm.select('floor')\n    pm.rigidBody(passive=True, solver='rigidSolver1', name='passiveRigidBody')\n    # Result: nt.RigidBody(u'passiveRigidBody') #\n    # Set the ball to active rigid body\n    pm.select('ball')\n    pm.rigidBody(active=True, solver='rigidSolver1', name='activeRigidBody')\n    # Result: nt.RigidBody(u'activeRigidBody') #\n    # Add a gravity field, and connect it to ball\n    pm.gravity(pos=(0, 0, 0), m=9.8, dx=0, dy=-1, dz=0, name='gravityField')\n    # Result: nt.GravityField(u'gravityField') #\n    pm.connectDynamic('activeRigidBody', f='gravityField')\n    # Result: [u'activeRigidBody'] #\n    # Play\n    pm.play(w=True)\n    \n    # Set the rigid solver to allow the ball to interpenetrate the floor, then replay\n    pm.currentTime(1, e=True)\n    # Result: 1.0 #\n    pm.rigidSolver('passiveRigidBody', 'activeRigidBody', 'rigidSolver1', e=True, interpenetrate=True)\n    # Result: nt.RigidSolver(u'rigidSolver1') #\n    pm.play(w=True)\n    \n    # Set the rigid solver to disallow the ball to interpenetrate the floor, replay\n    pm.currentTime(1, e=True)\n    # Result: 1.0 #\n    pm.rigidSolver('passiveRigidBody', 'activeRigidBody', 'rigidSolver1', e=True, collide=True)\n    # Result: nt.RigidSolver(u'rigidSolver1') #\n    pm.play(w=True)\n    \n    # Set the rigid solver to turn off the bounciness, replay\n    pm.currentTime(1, e=True)\n    # Result: 1.0 #\n    pm.rigidSolver('rigidSolver1', e=True, bounciness=False)\n    # Result: nt.RigidSolver(u'rigidSolver1') #\n    pm.play(w=True)", 
    "roll": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    \n    # Align the horizontal direction with the world horizon\n    pm.roll( 'cameraShape1', abs=True, d=0 )\n    \n    # Roll the camera 15 degrees clockwise\n    pm.roll( 'cameraShape1', d=15 )\n    \n    pm.roll( d=15 )", 
    "rollCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.rollCtx( 'rollContext', rs=30.0 )", 
    "rotate": "    \n    \n    import pymel.core as pm\n    \n    # create a circle and grouped cone to rotate;\n    pm.circle( n='circle1' )\n    # Result: [nt.Transform(u'circle1'), nt.MakeNurbCircle(u'makeNurbCircle1')] #\n    pm.cone( ax=(0, 1, 0), n='cone1' )\n    # Result: [nt.Transform(u'cone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.group( 'cone1', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    \n    # rotate the active objects 45 degrees about the world space X axis\n    # centered at each object's rotate pivot point.\n    pm.select( 'cone1' )\n    pm.rotate( '45deg', 0, 0, r=True )\n    \n    # Set the rotation values for group1 to (90, 0, 0). This is\n    # equivalent to:\n    #   pm.setAttr('group1.rx',90)\n    #   pm.setAttr('group1.ry',0)\n    #   pm.setAttr('group1.rz',0)\n    pm.rotate( '90deg', 0, 0, 'group1' )\n    \n    # rotate the circle 180 degrees about its local space Y axis\n    # centered at the rotate pivot point 1 0 0.\n    pm.rotate( 0, '180deg', 0, 'circle1', pivot=(1, 0, 0) )", 
    "rotationInterpolation": "    \n    \n    import pymel.core as pm\n    \n    # Converts \"nurbsCone1_rotateX\" and its sibling curves to quaternion tangent dependent format.\n    pm.rotationInterpolation( 'nurbsCone1_rotateX', convert='quaternion' )", 
    "roundCRCtx": "", 
    "roundConstantRadius": "    \n    \n    import pymel.core as pm\n    \n    # This rounds four edges of a cube with radius 0.9.  Because a single\n    # radius is specified, it is used for all edges.  The edges must\n    # be specified in matching pairs if no \"sidea\" or \"sideb\" flags\n    # are used.\n    #\n    cube = pm.nurbsCube(w=5, lr=1, hr=1, d=3, ch=0)\n    sides = pm.listRelatives( cube[0], c=True )\n    rnd = pm.roundConstantRadius(\n        (sides[0] + \".v[0]\"), (sides[2] + \".v[1]\"),\n        (sides[0] + \".u[1]\"), (sides[4] + \".v[1]\"),\n        (sides[0] + \".v[1]\"), (sides[3] + \".u[1]\"),\n        (sides[0] + \".u[0]\"), (sides[5] + \".u[1]\"),\n        rad=0.9 )\n    \n    # This adds a pair of isoparms to an existing round operation,\n    # named $rnd[3] (from previous example)\n    #\n    pm.roundConstantRadius( (sides[3] + '.v[0]'), (sides[5] + '.v[1]'),\n                              rnd[3], append=True, rad=0.8 )\n    \n    # This rounds 6 edges of a cube with different radius values.\n    # The first four edges have radius 0.9 and the others have radius 1.1.\n    # In this case the edges are specified in matching pairs\n    # since no \"sidea\" or \"sideb\" flags are used.\n    #\n    cube = pm.nurbsCube( w=5, lr=1, hr=1, d=3, ch=0 )\n    sides = pm.listRelatives( cube[0], c=True )\n    pm.roundConstantRadius( (sides[0]+\".v[0]\"), (sides[2]+\".v[1]\"),\n                              (sides[0]+\".u[1]\"), (sides[4]+\".v[1]\"),\n                              (sides[0]+\".v[1]\"), (sides[3]+\".u[1]\"),\n                              (sides[0]+\".u[0]\"), (sides[5]+\".u[1]\"),\n                              (sides[3]+\".v[0]\"), (sides[5]+\".v[1]\"),\n                              (sides[2]+\".u[1]\"), (sides[4]+\".u[0]\"),\n                              rad=[0.9, 0.9, 0.9, 0.9, 1.1, 1.1] )\n    \n    # This rounds a 2-to-1 compound edge.  The sidea flag indicates\n    # that there two edges on side A, and one on side B.\n    # The edges must be specified in the corresponding order.\n    #\n    pln1 = pm.nurbsPlane(w=5, ch=0, ax=(0, 1, 0))\n    pln2 = pm.nurbsPlane( p=(2.5, 2.5, 1.25), ax=(1, 0, 0), w=2.5, lr=2, d=3, u=1, v=1, ch=0 )\n    pln3 = pm.nurbsPlane( p=(2.5, 2.5, -1.25), ax=(1, 0, 0), w=2.5, lr=2, d=3, u=1, v=1, ch=0 )\n    pln4 = pm.nurbsPlane( p=(0, 2.5, -2.5), ax=(0, 0, 1), w=5, lr=1, d=3, u=1, v=1, ch=0 )\n    pm.roundConstantRadius( (pln2[0]+'.v[0]'), (pln3[0]+'.v[0]'),\n                              (pln1[0]+'.u[1]'), (pln3[0]+'.u[1]'),\n                              (pln4[0]+'.u[1]'), rad=0.9,\n                              side=[('a',2), ('b', 1), ('a', 1), ('b', 1)] )", 
    "rowColumnLayout": "    \n    \n    import pymel.core as pm\n    \n    #    The following script will position the buttons in a single column.\n    #\n    #    +----+\n    #    | b1 |\n    #    +----+\n    #    +----+\n    #    | b2 |\n    #    +----+\n    #    +----+\n    #    | b3 |\n    #    +----+\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.rowColumnLayout( numberOfColumns=1 )\n    # Result: ui.RowColumnLayout('window1|rowColumnLayout1') #\n    pm.button()\n    # Result: ui.Button('window1|rowColumnLayout1|button68') #\n    pm.button()\n    # Result: ui.Button('window1|rowColumnLayout1|button69') #\n    pm.button()\n    # Result: ui.Button('window1|rowColumnLayout1|button70') #\n    pm.showWindow()\n    \n    #    The following script will position the buttons in a single row.\n    #\n    #    +----++----++----+\n    #    | b1 || b2 || b3 |\n    #    +----++----++----+\n    #\n    pm.window()\n    # Result: ui.Window('window2') #\n    pm.rowColumnLayout( numberOfRows=1 )\n    # Result: ui.RowColumnLayout('window2|rowColumnLayout2') #\n    pm.button()\n    # Result: ui.Button('window2|rowColumnLayout2|button71') #\n    pm.button()\n    # Result: ui.Button('window2|rowColumnLayout2|button72') #\n    pm.button()\n    # Result: ui.Button('window2|rowColumnLayout2|button73') #\n    pm.showWindow()\n    \n    #    The following script will position the buttons in 3 columns, each\n    #    column a different width.\n    #\n    #    +----++--------++------------+\n    #    | b1 ||   b2   ||     b3     |\n    #    +----++--------++------------+\n    #    +----++--------++------------+\n    #    | b4 ||   b5   ||     b6     |\n    #    +----++--------++------------+\n    #    +----+\n    #    | b7 |\n    #    +----+\n    #\n    pm.window()\n    # Result: ui.Window('window3') #\n    pm.rowColumnLayout( numberOfColumns=3, columnWidth=[(1, 60), (2, 80), (3, 100)] )\n    # Result: ui.RowColumnLayout('window3|rowColumnLayout3') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button74') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button75') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button76') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button77') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button78') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button79') #\n    pm.button()\n    # Result: ui.Button('window3|rowColumnLayout3|button80') #\n    pm.showWindow()\n    \n    #    The following script will position the buttons in 2 rows, each\n    #    row a different height.\n    #\n    #    +----++----++----++----+\n    #    | b1 || b3 || b5 || b7 |\n    #    +----++----++----++----+\n    #    +----++----++----+\n    #    |    ||    ||    |\n    #    | b2 || b4 || b6 |\n    #    |    ||    ||    |\n    #    +----++----++----+\n    #\n    pm.window()\n    # Result: ui.Window('window4') #\n    pm.rowColumnLayout( numberOfRows=2, rowHeight=[(1, 30), (2, 60)] )\n    # Result: ui.RowColumnLayout('window4|rowColumnLayout4') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button81') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button82') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button83') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button84') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button85') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button86') #\n    pm.button()\n    # Result: ui.Button('window4|rowColumnLayout4|button87') #\n    pm.showWindow()", 
    "rowLayout": "    \n    \n    import pymel.core as pm\n    \n    #    Layout a label, field and slider such that the label is right\n    #    justified and the field adjusts in size as the window is resized.\n    #\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.rowLayout( numberOfColumns=3, columnWidth3=(80, 75, 150), adjustableColumn=2, columnAlign=(1, 'right'), columnAttach=[(1, 'both', 0), (2, 'both', 0), (3, 'both', 0)] )\n    # Result: ui.RowLayout('window1|rowLayout8') #\n    pm.text()\n    # Result: ui.Text('window1|rowLayout8|text6') #\n    pm.intField()\n    # Result: ui.IntField('window1|rowLayout8|intField8') #\n    pm.intSlider()\n    # Result: ui.IntSlider('window1|rowLayout8|intSlider6') #\n    pm.showWindow()", 
    "runTimeCommand": "", 
    "runup": "    \n    \n    import pymel.core as pm\n    \n    pm.runup( mxf=10, cache=True )\n    \n    # Starts at the minimum start frame of all dynamic objects\n    # and plays through to frame 10.  This guarantees that the system\n    # is in the same state it would be as if you had rewound and played\n    # forward from frame 0.  The state of the dynamic object(s) will be\n    # cached after the runup.", 
    "sampleImage": "    \n    \n    import pymel.core as pm\n    \n    # From now on, render sample images at high quality.\n    #\n    pm.sampleImage( f=False )\n    \n    # Render the sample image associated with lambert1 at a resolution of\n    # 128 pixels by 128 pixels.\n    #\n    pm.sampleImage( r=(128, 'lambert1') )", 
    "saveAllShelves": "    \n    \n    import pymel.core as pm\n    \n    import maya.mel\n    gShelfTopLevel = maya.mel.eval('$tmpVar=$gShelfTopLevel')\n    pm.saveAllShelves( gShelfTopLevel )\n    # Result: u'1' #", 
    "saveFluid": "    \n    \n    import pymel.core as pm\n    \n    # save the current state to the initial conditions cache\n    pm.saveFluid()", 
    "saveImage": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window('window')\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window|paneLayout11') #\n    pm.saveImage( currentView=True )\n    # Result: u'window|paneLayout11|saveImage1' #\n    pm.showWindow( window )", 
    "saveInitialState": "    \n    \n    import pymel.core as pm\n    \n    pm.saveInitialState( 'particle1' )\n    # Saves current state as initial state for particle1.\n    \n    pm.saveInitialState( all=True )\n    # Saves current state as initial state for all dynamics objects.", 
    "saveMenu": "    \n    \n    import pymel.core as pm\n    \n    # Create a window with two frames.\n    #\n    win = pm.window(title='saveMenu Example')\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout79') #\n    frame1 = pm.frameLayout( h=90, l='Original Menu (LMB)' )\n    pm.text( l='(click here)' )\n    # Result: ui.Text('window1|columnLayout79|frameLayout22|text7') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout79' #\n    frame2 = pm.frameLayout( h=90, l='Copy of Original (LMB)' )\n    pm.text( l='(click here)' )\n    # Result: ui.Text('window1|columnLayout79|frameLayout23|text8') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout79' #\n    \n    # Create a menu.\n    #\n    menu1 = pm.popupMenu( parent=frame1, b=1, mm=True )\n    \n    pm.menuItem( rp='N', l='Up' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem946') #\n    pm.menuItem( rp='S', l='Down' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem947') #\n    pm.menuItem( rp='E', l='Right' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem948') #\n    pm.menuItem( rp='W', l='Left' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem949') #\n    pm.menuItem( label='Warm', sm=True )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem950') #\n    pm.menuItem( l='Red' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem950|menuItem951') #\n    pm.menuItem( l='Orange' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem950|menuItem952') #\n    pm.menuItem( l='Yellow' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem950|menuItem953') #\n    pm.setParent( '..', m=True )\n    # Result: u'window1|columnLayout79|frameLayout22|popupMenu93' #\n    pm.menuItem( label='Cold', sm=True )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem954') #\n    pm.menuItem( l='Green' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem954|menuItem955') #\n    pm.menuItem( l='Blue' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem954|menuItem956') #\n    pm.menuItem( l='Indigo' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem954|menuItem957') #\n    pm.menuItem( l='Violet' )\n    # Result: ui.CommandMenuItem('window1|columnLayout79|frameLayout22|popupMenu93|menuItem954|menuItem958') #\n    pm.setParent( '..', m=True )\n    # Result: u'window1|columnLayout79|frameLayout22|popupMenu93' #\n    pm.setParent( '..', m=True )\n    # Result: u'' #\n    \n    # Save the menu to a file.\n    #\n    result = pm.saveMenu(menu1, 'menu_example')\n    \n    # Use the file to rebuild another instance of the menu.\n    #\n    menu1 = pm.popupMenu( parent=frame2, b=1, mm=True )\n    maya.mel.eval( 'source \\\"' + pm.internalVar(userMarkingMenuDir=True) + 'menu_example.mel\\\"' )\n    # Result: u'' #\n    \n    # Finish up.\n    print (\"The menu was saved in [\" + pm.internalVar(userMarkingMenuDir=True) + result + \"]\\n\" )\n    pm.showWindow( win )", 
    "savePrefObjects": "    \n    \n    import pymel.core as pm\n    \n    pm.savePrefObjects()\n    # Result: u'1' #", 
    "savePrefs": "    \n    \n    import pymel.core as pm\n    \n    # only save the hotkeys\n    pm.savePrefs( hotkeys=True )\n    \n    # save everything\n    pm.savePrefs()\n    \n    # only save ui layout prefs\n    pm.savePrefs( uiLayout=True )", 
    "saveShelf": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a shelf in it.\n    #\n    window = pm.window()\n    tabs = pm.tabLayout()\n    shelf = pm.shelfLayout()\n    pm.shelfButton( '\\\"Hello\\\\n\\\"\")', image1='commandButton.png', command='(\"print' )\n    # Result: ui.ShelfButton('window1|tabLayout4|shelfLayout1|Hello_n___') #\n    pm.tabLayout( tabs, edit=True, tabLabel=(str(shelf),'Example Shelf')  )\n    # Result: ui.TabLayout('window1|tabLayout4') #\n    pm.showWindow( window )\n    \n    #    At this point the example would be made more interesting if you\n    #    put some additional items on this shelf.\n    \n    #    Now save the shelf in the temp directory.\n    #\n    tempDir = pm.internalVar( userTmpDir=True )\n    pm.saveShelf( shelf, (tempDir + 'ExampleShelf') );", 
    "saveToolSettings": "    \n    \n    import pymel.core as pm\n    \n    pm.saveToolSettings()", 
    "saveViewportSettings": "    \n    \n    import pymel.core as pm\n    \n    pm.saveViewportSettings()", 
    "scale": "    \n    \n    import pymel.core as pm\n    \n    pm.scale( 1, 1, 1 )\n    pm.scale( 3, 3, 3, 'curve1', pivot=(1, 0, 0), absolute=True )", 
    "scaleComponents": "    \n    \n    import pymel.core as pm\n    \n    pm.scaleComponents( 2, 2, 2, pivot=(0, 10, 0), rotation=(30, 40, 50) )", 
    "scaleConstraint": "    \n    \n    import pymel.core as pm\n    \n    # Scale cube1 at the scale of cone1.\n    pm.scaleConstraint( 'cone1', 'cube1' )\n    \n    # Uses the average of the scale of cone1 and surf2.\n    pm.scaleConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n    \n    # Sets the weight for cone1's effect on cube2 to 10.\n    pm.scaleConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n    \n    # Removes surf2 from cube2's scaleConstraint\n    pm.scaleConstraint( 'surf2', 'cube2', e=True, rm=True )\n    \n    # Adds surf3 to cube2's scaleConstraint with the default weight\n    pm.scaleConstraint( 'surf3', 'cube2' )\n    \n    # Constrain the x and z scale of sph2 to sph1\n    pm.scaleConstraint( 'sph1', 'sph2', skip=\"y\" )", 
    "scaleKey": "    \n    \n    import pymel.core as pm\n    \n    # Scale keyframes from frame 10 to 20 of nurbsSphere1's translateX\n    # to fill frames 10 to 30.\n    #\n    pm.scaleKey( 'nurbsSphere1', time=(10,20), newStartTime=10, newEndTime=30, attribute='tx' )\n    \n    # Scale all the animation of the active objects\n    # (range 0-30) to fill range 0 to 60.\n    #\n    pm.scaleKey( time=(0,30), timeScale=2, timePivot=0 )", 
    "scaleKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a manipulator style scale key context for the graph editor\n    #\n    pm.scaleKeyCtx( 'scaleKeyContext', type='rect' )", 
    "sceneEditor": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout12') #\n    pm.sceneEditor()\n    # Result: u'sceneEditor1' #\n    pm.showWindow(window)", 
    "sceneUIReplacement": "    \n    \n    import pymel.core as pm\n    \n    import maya.mel as mm\n    gMainPane = mm.eval( 'global string $gMainPane; $temp = $gMainPane;' )\n    pm.sceneUIReplacement( update=gMainPane )\n    # Result: u'1' #\n    \n    # Try to find the modelPanel named Top View\n    pm.sceneUIReplacement( getNextPanel=('modelPanel','Top View') )\n    # Result: u'modelPanel1' #\n    pm.modelPanel( 'modelPanel1', q=True, label=True )\n    # Result: u'Top View' #\n    \n    # Try to find Front View\n    pm.sceneUIReplacement( getNextPanel=('modelPanel', 'Front View') )\n    # Result: u'modelPanel3' #\n    pm.modelPanel( 'modelPanel3', q=True, label=True )\n    # Result: u'Front View' #\n    \n    # Is there another Front View?  (No: all we find is a model panel called Persp View)\n    pm.sceneUIReplacement( getNextPanel=('modelPanel', 'Front View') )\n    # Result: u'modelPanel4' #\n    # Result: modelPanel4\n    pm.modelPanel( 'modelPanel4', q=True, label=True )\n    # Result: u'Persp View' #\n    # Result: Persp View", 
    "scmh": "    \n    \n    import pymel.core as pm\n    \n    # Create a new move manip context, set the active handle to X axis handle, then swith to it\n    pm.manipMoveContext('manipMoveContext1', ah=0)\n    pm.setToolTo('manipMoveContext1')\n    \n    # Set the active handle value to 10.(Translate the pSphere1 by (10, 0, 0))\n    pm.scmh(10, r=True)", 
    "scriptCtx": "    \n    \n    import pymel.core as pm\n    \n    # Simple example of \"attach curve\" tool created using scriptCtx. This tool\n    # prompts the user to select two curves to attach. As soon as two curves\n    # are selected, the attach is performed. It uses the selection type\n    # flag 'curveParameterPoint' from \"selectType\" command to specify the\n    # selection mask for this tool.\n    \n    pm.scriptCtx( title='Attach Curve', totalSelectionSets=1, fcs=\"select -r $Selection1; performAttachCrv 0 \\\"\\\"\", cumulativeLists=True, expandSelectionList=True, setNoSelectionPrompt='Select two curves close to the attachment points', setSelectionPrompt='Select a second curve close to the attachment point', setDoneSelectionPrompt='Never used because setAutoComplete is set', setAutoToggleSelection=True, setSelectionCount=2, setAutoComplete=True, curveParameterPoint=True )\n    # Result: u'scriptCtx1' #\n    \n    # And a more complex example of fillet blend tool (two sets of any number\n    # of \"surface curves\").  Notice how the selection lists are passed as\n    # arguments to the callback function, performBlendGiven.\n    \n    pm.scriptCtx( i1='birail3Gen.xpm', title='\"Birail 3+ Tool', toolCursorType='edit', totalSelectionSets=2, cumulativeLists=True, expandSelectionList=True, fcs='select -r $Selection2; performBirail 0 3 \\\"birailThreePlusProfileContext\\\" ', setAutoToggleSelection=[True,True], setAutoComplete=[False, False], setSelectionCount=[0,2], nurbsCurve=[True,True], isoparm=[True,True], curveOnSurface=[True,True], surfaceEdge=[True,True], polymeshEdge=[True,True], setNoSelectionPrompt=['Select any number of profiles','Select two rails'], setSelectionPrompt=['Select additional profiles or hit ENTER', 'Select the second rail'], setDoneSelectionPrompt=['Profiles selected. Hit ENTER to start rail selection.', 'Rails selected. Hit ENTER to compute birail. '] )\n    # Result: u'scriptCtx2' #\n    \n    # Here's Birail 3+ where you select any number of curves, then 2 rails:\n    \n    pm.scriptCtx( i1='birail3Gen.xpm', title='\"Birail 3+ Tool', toolCursorType='edit', totalSelectionSets=2, cumulativeLists=True, expandSelectionList=True, fcs='select -r $Selection2; performBirail 0 3 \\\"birailThreePlusProfileContext\\\" ', setAutoToggleSelection=[True,True], setAutoComplete=[False, False], setSelectionCount=[0,2], nurbsCurve=[True,True], isoparm=[True,True], curveOnSurface=[True,True], surfaceEdge=[True,True], polymeshEdge=[True,True], setNoSelectionPrompt=['Select any number of profiles','Select two rails'], setSelectionPrompt=['Select additional profiles or hit ENTER', 'Select the second rail'], setDoneSelectionPrompt=['Profiles selected. Hit ENTER to start rail selection.', 'Rails selected. Hit ENTER to compute birail. '] )\n    # Result: u'scriptCtx3' #\n    \n    # userBirailContextCallback has \"true\" as the first argument, which suggests\n    # that $Selection2 contains all of $Selection1 items (as -cumulativeLists\n    # true is specified in the tool creation.)", 
    "scriptEditorInfo": "    \n    \n    import pymel.core as pm\n    \n    # Set the text of the input area of the Script Editor.\n    pm.scriptEditorInfo(input='// select -all; delete;')\n    # Result: u'CommandWindow' #\n    # Clear the input area of the Script Editor.\n    pm.scriptEditorInfo(input=\"\")\n    # Result: u'CommandWindow' #\n    \n    # Begin recording the Script Editor history to a file called\n    # tempHistoryLog.txt in your maya directory.\n    pm.scriptEditorInfo( historyFilename='tempHistoryLog.txt', writeHistory=True )\n    # Result: u'CommandWindow' #\n    \n    # Stop recording the Script Editor history\n    pm.scriptEditorInfo(writeHistory=False )\n    # Result: u'CommandWindow' #\n    \n    # On Windows the following line would print something like \"C:/maya/tempHistoryLog.txt\"\n    # On Linux it would be \"~/maya/tempHistoryLog.txt\"\n    pm.scriptEditorInfo(query=True, historyFilename=True)\n    # Result: u'/Volumes/newhome/chad/Library/Preferences/Autodesk/maya/tempHistoryLog.txt' #\n    \n    # Suppress all warning and info messages\n    pm.scriptEditorInfo(suppressWarnings=True)\n    # Result: u'CommandWindow' #\n    pm.scriptEditorInfo(suppressInfo=True)\n    # Result: u'CommandWindow' #", 
    "scriptJob": "    \n    \n    import pymel.core as pm\n    \n    # create a job that deletes things when they are seleted\n    jobNum = pm.scriptJob( ct= [\"SomethingSelected\",\"pm.delete()\"], protected=True)\n    \n    # Now display the job\n    jobs = pm.scriptJob( listJobs=True )\n    \n    # Now kill it (need to use -force flag since it's protected)\n    pm.scriptJob( kill=jobNum, force=True)\n    \n    # create a sphere, but print a warning the next time it\n    # is raised over 10 units high\n    def warn():\n            height = pm.getAttr( 'mySphere.ty' )\n            if height \" 10.0:\n                    print 'Sphere is too high!'\n    pm.sphere( n='mySphere' )\n    # Result: [nt.Transform(u'mySphere'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    pm.scriptJob( runOnce=True, attributeChange=['mySphere.ty', warn] )\n    \n    # create a job to detect a new attribute named \"tag\"\n    #\n    def detectNewTagAttr():\n            print \"New tag attribute was added\"\n    \n    pm.scriptJob( runOnce=True, attributeAdded=['mySphere.tag',detectNewTagAttr] )\n    pm.addAttr( 'mySphere', ln='tag', sn='tg', dt='string')\n    \n    # list all the existing conditions and print them\n    # nicely\n    conds2 = pm.scriptJob( listConditions=True )\n    for cond in sorted(conds2):\n            print cond", 
    "scriptNode": "    \n    \n    import pymel.core as pm\n    \n    #    Create a scriptNode named script that creates a sphere when a file\n    #    containing this node is loaded.\n    #\n    nodeName = pm.scriptNode( st=2, bs='pm.sphere()', n='script', stp='python')\n    \n    #    Test the before script.\n    #\n    pm.scriptNode( nodeName, executeBefore=True )\n    \n    #    Add a script to create a cone when the script node is deleted.\n    #\n    pm.scriptNode( nodeName, e=True, as='pm.cone()', stp='python' )\n    \n    #    Test the after script\n    #\n    pm.scriptNode( nodeName, executeAfter=True )", 
    "scriptTable": "    \n    \n    import pymel.core as pm\n    \n    def edit_cell(row, column, value):\n        return 1\n    \n    window = pm.window(widthHeight=(400, 300))\n    form = pm.formLayout()\n    table = pm.scriptTable(rows=4, columns=2, label=[(1,\"Column 1\"), (2,\"Column 2\")], cellChangedCmd=edit_cell)\n    \n    addButton = pm.button(label=\"Add Row\",command=\"pm.scriptTable(table, edit=True,insertRow=1)\")\n    deleteButton = pm.button(label=\"Delete Row\",command=\"pm.scriptTable(table, edit=True,deleteRow=1)\")\n    \n    pm.formLayout(form, edit=True, attachForm=[(table, 'top', 0), (table, 'left', 0), (table, 'right', 0), (addButton, 'left', 0), (addButton, 'bottom', 0), (deleteButton, 'bottom', 0), (deleteButton, 'right', 0)], attachControl=(table, 'bottom', 0, addButton), attachNone=[(addButton, 'top'),(deleteButton, 'top')],  attachPosition=[(addButton, 'right', 0, 50), (deleteButton, 'left', 0, 50)] )\n    # Result: ui.FormLayout('window1|formLayout78') #\n    \n    pm.showWindow( window )\n    \n    # Set and query cells\n    pm.scriptTable($table, cellIndex=1 1, edit=True,cellValue=\"MyValue\")\n    scriptTable -cellIndex 1 1 -query -cellValue $table;\n    \n    # Select and query rows, columns and cells\n    pm.scriptTable(table, edit=True, selectedRows=[1, 3])\n    print pm.scriptTable(table, query=True, selectedRows=True)\n    pm.scriptTable(table, edit=True, selectedColumns=[1])\n    print pm.scriptTable(table, query=True, selectedColumns=True)\n    pm.scriptTable(table, edit=True, selectedCells=[1,2,2,1,3,2,4,1])\n    print pm.scriptTable(table, query=True, selectedCells=True)\n    \n    # Set a filter for the first column\n    pm.scriptTable(table, edit=True, columnFilter=(1,\"MyValue\"))\n    # Set a filter for all columns\n    pm.scriptTable(table, edit=True, columnFilter=(0,\"MyValue\"))", 
    "scriptedPanel": "    \n    \n    import pymel.core as pm\n    \n    // NOTE: The scriptedPanelType command does not support python\n    //               callbacks; these callbacks must be MEL.\n    \n    \n    global proc sampleCreateCallback(string $panelName) {\n    //\n    //  Description:\n    //      Create any editors unparented here and do\n    //      any other initialization required.\n    //\n    //      In this example we will only declare a global array to\n    //        maintain some state information.\n    //\n        global float $gSampleState[5];\n    \n    }\n    \n    \n    global proc sampleInitCallback(string $panelName) {\n    //\n    //  Description:\n    //      Re-initialize the panel on file -new or file -open.\n    //\n    //      In this example we will only re-init the global array.\n    //\n        global float $gSampleState[];\n    \n           $gSampleState[0] = 20.2;\n           $gSampleState[1] = 50.5;\n           $gSampleState[2] = 34.7;\n           $gSampleState[3] = 2.0;\n           $gSampleState[4] = 1.0;\n    \n    }\n    \n    global proc sampleAddCallback(string $panelName) {\n    //\n    //  Description:  Create UI and parent any editors.\n    //\n        global float $gSampleState[];\n    \n        columnLayout -adj true topCol;\n        separator -style \"none\" -h 10;\n            frameLayout -l \"Sliders\" -mw 10;\n                columnLayout -adj true sampleCol;\n                    separator -style \"none\" -h 10;\n    \n                    floatSliderGrp -l \"Property A\" -f true\n                        -v $gSampleState[0]\n                        fsg1;\n                    floatSliderGrp -l \"Property B\" -f true\n                        -v $gSampleState[1]\n                        fsg2;\n                    floatSliderGrp -l \"Property C\" -f true\n                        -v $gSampleState[2]\n                        fsg3;\n                    separator -style \"none\" -h 10;\n                setParent ..;\n            setParent ..;\n    \n            separator -style \"none\" -h 10;\n            frameLayout -l \"Radio Buttons\" -mw 10;\n                columnLayout sampleCol2;\n                    separator -style \"none\" -h 10;\n                    radioButtonGrp -nrb 3\n                        -l \"Big Options\"\n                        -la3 \"Option 1\" \"Option 2\" \"Option 3\"\n                        -select $gSampleState[3]\n                        rbg;\n                    radioButtonGrp -nrb 3\n                        -l \"Little Options\"\n                        -la3 \"Option 4\" \"Option 5\" \"Option 6\"\n                        -select $gSampleState[4]\n                        rbg2;\n                    separator -style \"none\" -h 10;\n    \n    }\n    \n    global proc sampleRemoveCallback(string $panelName) {\n    //\n    //  Description:\n    //        Unparent any editors and save state if required.\n    //\n            global float $gSampleState[];\n           //  Scope the control names to this panel.\n           //\n           string $control = `scriptedPanel -q -control $panelName`;\n           setParent $control;\n    \n           $gSampleState[0] = `floatSliderGrp -q -v fsg1`;\n           $gSampleState[1] = `floatSliderGrp -q -v fsg2`;\n           $gSampleState[2] = `floatSliderGrp -q -v fsg3`;\n           $gSampleState[3] = `radioButtonGrp -q -sl rbg`;\n           $gSampleState[4] = `radioButtonGrp -q -sl rbg2`;\n    }\n    \n    global proc sampleDeleteCallback(string $panelName) {\n    //\n    //  Description:\n    //        Delete any editors and do any other cleanup required.\n    \n    }\n    \n    global proc string sampleSaveStateCallback(string $panelName) {\n    //\n    //  Description:\n    //        Return a string that will restore the current state\n    //        when it is executed.\n    \n            global float $gSampleState[];\n           $indent = \"\\n\\t\\t\\t\";\n    \n           return ($indent+\"$gSampleState[0]=\"+$gSampleState[0]+\";\" +\n                   $indent+\"$gSampleState[1]=\"+$gSampleState[1]+\";\" +\n                   $indent+\"$gSampleState[2]=\"+$gSampleState[2]+\";\" +\n                   $indent+\"$gSampleState[3]=\"+$gSampleState[3]+\";\" +\n                   $indent+\"$gSampleState[4]=\"+$gSampleState[4]+\";\" +\n                   $indent+\"setSamplePanelState $panelName;\\n\" );\n    }\n    \n    global proc setSamplePanelState( string $whichPanel ) {\n    //\n    //  Description:\n    //        This is a convenience proc to set the panel state from the\n    //        global array\n    \n            global float $gSampleState[];\n    \n           //  Scope the control names to this panel.\n           //\n           string $control = `scriptedPanel -q -control $whichPanel`;\n           if (\"\" != $control) {\n                  setParent $control;\n    \n                  floatSliderGrp -e -v $gSampleState[0] fsg1;\n                  floatSliderGrp -e -v $gSampleState[1] fsg2;\n                  floatSliderGrp -e -v $gSampleState[2] fsg3;\n                  if (0 != $gSampleState[3]) {\n                   radioButtonGrp -e -sl $gSampleState[3] rbg;\n                  };\n               if (0 != $gSampleState[4]) {\n                   radioButtonGrp -e -sl $gSampleState[4] rbg2;\n               }\n           }\n    }\n    \n    # Below is the python code to create and use scriptedPanelType and scriptedPanel using the MEL\n    # callbacks defined above.\n    \n    # Use unique flag as we don't want two panels sharing the same global data.\n    pm.scriptedPanelType( 'sampleScriptedPanelType', ccb='sampleCreateCallback', icb='sampleInitCallback', acb='sampleAddCallback', rcb='sampleRemoveCallback', dcb='sampleDeleteCallback', scb='sampleSaveStateCallback', unique=True )\n    \n    #  This script will create an unparented scripted panel, place it\n    #  in one window, remove it, and place it in another window then\n    #  return it to the first window.\n    #\n    #\n    #  Create unparented scripted panel\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', unParent=True, type='sampleScriptedPanelType', label='Sample' )\n    \n    #    Create a couple of windows and parent the scripted panel to the first.\n    #\n    pm.window( 'sampleWin' )\n    pm.frameLayout( 'frm', lv=False, bv=False )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n    pm.showWindow()\n    \n    pm.window( 'sampleWin2', w=pm.window('sampleWin', q=True, w=True), h=pm.window('sampleWin', q=True, h=True) )\n    pm.frameLayout( 'frm', lv=False, bv=False )\n    pm.showWindow()\n    \n    #    Reparent the scripted panel to the second window.\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin2|frm' )\n    \n    #    Reparent the scripted panel back to the first window.\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n    \n    #    Close both windows\n    #\n    pm.window( 'sampleWin', e=True, visible=False )\n    pm.window( 'sampleWin2', e=True, visible=False )\n    \n    #    The scripted panel should appear in the Panel menu.  Select\n    #    Panels-\"Panel-\"Sample and the panel should appear in the main window.\n    #", 
    "scriptedPanelType": "    \n    \n    import pymel.core as pm\n    \n    // NOTE: The scriptedPanelType command does not support python\n    //               callbacks; these callbacks must be MEL.\n    \n    \n    global proc sampleCreateCallback(string $panelName) {\n    //\n    //  Description:\n    //      Create any editors unparented here and do\n    //      any other initialization required.\n    //\n    //      In this example we will only declare a global array to\n    //        maintain some state information.\n    //\n        global float $gSampleState[5];\n    \n    }\n    \n    \n    global proc sampleInitCallback(string $panelName) {\n    //\n    //  Description:\n    //      Re-initialize the panel on file -new or file -open.\n    //\n    //      In this example we will only re-init the global array.\n    //\n        global float $gSampleState[];\n    \n           $gSampleState[0] = 20.2;\n           $gSampleState[1] = 50.5;\n           $gSampleState[2] = 34.7;\n           $gSampleState[3] = 2.0;\n           $gSampleState[4] = 1.0;\n    \n    }\n    \n    global proc sampleAddCallback(string $panelName) {\n    //\n    //  Description:  Create UI and parent any editors.\n    //\n        global float $gSampleState[];\n    \n        columnLayout -adj true topCol;\n        separator -style \"none\" -h 10;\n            frameLayout -l \"Sliders\" -mw 10;\n                columnLayout -adj true sampleCol;\n                    separator -style \"none\" -h 10;\n    \n                    floatSliderGrp -l \"Property A\" -f true\n                        -v $gSampleState[0]\n                        fsg1;\n                    floatSliderGrp -l \"Property B\" -f true\n                        -v $gSampleState[1]\n                        fsg2;\n                    floatSliderGrp -l \"Property C\" -f true\n                        -v $gSampleState[2]\n                        fsg3;\n                    separator -style \"none\" -h 10;\n                setParent ..;\n            setParent ..;\n    \n            separator -style \"none\" -h 10;\n            frameLayout -l \"Radio Buttons\" -mw 10;\n                columnLayout sampleCol2;\n                    separator -style \"none\" -h 10;\n                    radioButtonGrp -nrb 3\n                        -l \"Big Options\"\n                        -la3 \"Option 1\" \"Option 2\" \"Option 3\"\n                        -select $gSampleState[3]\n                        rbg;\n                    radioButtonGrp -nrb 3\n                        -l \"Little Options\"\n                        -la3 \"Option 4\" \"Option 5\" \"Option 6\"\n                        -select $gSampleState[4]\n                        rbg2;\n                    separator -style \"none\" -h 10;\n    \n    }\n    \n    global proc sampleRemoveCallback(string $panelName) {\n    //\n    //  Description:\n    //        Unparent any editors and save state if required.\n    //\n            global float $gSampleState[];\n           //  Scope the control names to this panel.\n           //\n           string $control = `scriptedPanel -q -control $panelName`;\n           setParent $control;\n    \n           $gSampleState[0] = `floatSliderGrp -q -v fsg1`;\n           $gSampleState[1] = `floatSliderGrp -q -v fsg2`;\n           $gSampleState[2] = `floatSliderGrp -q -v fsg3`;\n           $gSampleState[3] = `radioButtonGrp -q -sl rbg`;\n           $gSampleState[4] = `radioButtonGrp -q -sl rbg2`;\n    }\n    \n    global proc sampleDeleteCallback(string $panelName) {\n    //\n    //  Description:\n    //        Delete any editors and do any other cleanup required.\n    \n    }\n    \n    global proc string sampleSaveStateCallback(string $panelName) {\n    //\n    //  Description:\n    //        Return a string that will restore the current state\n    //        when it is executed.\n    \n            global float $gSampleState[];\n           $indent = \"\\n\\t\\t\\t\";\n    \n           return ($indent+\"$gSampleState[0]=\"+$gSampleState[0]+\";\" +\n                   $indent+\"$gSampleState[1]=\"+$gSampleState[1]+\";\" +\n                   $indent+\"$gSampleState[2]=\"+$gSampleState[2]+\";\" +\n                   $indent+\"$gSampleState[3]=\"+$gSampleState[3]+\";\" +\n                   $indent+\"$gSampleState[4]=\"+$gSampleState[4]+\";\" +\n                   $indent+\"setSamplePanelState $panelName;\\n\" );\n    }\n    \n    global proc setSamplePanelState( string $whichPanel ) {\n    //\n    //  Description:\n    //        This is a convenience proc to set the panel state from the\n    //        global array\n    \n            global float $gSampleState[];\n    \n           //  Scope the control names to this panel.\n           //\n           string $control = `scriptedPanel -q -control $whichPanel`;\n           if (\"\" != $control) {\n                  setParent $control;\n    \n                  floatSliderGrp -e -v $gSampleState[0] fsg1;\n                  floatSliderGrp -e -v $gSampleState[1] fsg2;\n                  floatSliderGrp -e -v $gSampleState[2] fsg3;\n                  if (0 != $gSampleState[3]) {\n                   radioButtonGrp -e -sl $gSampleState[3] rbg;\n                  };\n               if (0 != $gSampleState[4]) {\n                   radioButtonGrp -e -sl $gSampleState[4] rbg2;\n               }\n           }\n    }\n    \n    # Below is the python code to create and use scriptedPanelType and scriptedPanel using the MEL\n    # callbacks defined above.\n    \n    # Use unique flag as we don't want two panels sharing the same global data.\n    pm.scriptedPanelType( 'sampleScriptedPanelType', ccb='sampleCreateCallback', icb='sampleInitCallback', acb='sampleAddCallback', rcb='sampleRemoveCallback', dcb='sampleDeleteCallback', scb='sampleSaveStateCallback', unique=True )\n    \n    #  This script will create an unparented scripted panel, place it\n    #  in one window, remove it, and place it in another window then\n    #  return it to the first window.\n    #\n    #\n    #  Create unparented scripted panel\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', unParent=True, type='sampleScriptedPanelType', label='Sample' )\n    \n    #    Create a couple of windows and parent the scripted panel to the first.\n    #\n    pm.window( 'sampleWin' )\n    pm.frameLayout( 'frm', lv=False, bv=False )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n    pm.showWindow()\n    \n    pm.window( 'sampleWin2', w=pm.window('sampleWin', q=True, w=True), h=pm.window('sampleWin', q=True, h=True) )\n    pm.frameLayout( 'frm', lv=False, bv=False )\n    pm.showWindow()\n    \n    #    Reparent the scripted panel to the second window.\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin2|frm' )\n    \n    #    Reparent the scripted panel back to the first window.\n    #\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\n    pm.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n    \n    #    Close both windows\n    #\n    pm.window( 'sampleWin', e=True, visible=False )\n    pm.window( 'sampleWin2', e=True, visible=False )\n    \n    #    The scripted panel should appear in the Panel menu.  Select\n    #    Panels-\"Panel-\"Sample and the panel should appear in the main window.\n    #", 
    "scrollField": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.paneLayout( configuration='horizontal4' )\n    # Result: ui.PaneLayout('window1|paneLayout13') #\n    pm.scrollField( editable=False, wordWrap=True, text='Non editable with word wrap' )\n    # Result: ui.ScrollField('window1|paneLayout13|scrollField3') #\n    pm.scrollField( editable=False, wordWrap=False, text='Non editable with no word wrap' )\n    # Result: ui.ScrollField('window1|paneLayout13|scrollField4') #\n    pm.scrollField( editable=True, wordWrap=True, text='Editable with word wrap' )\n    # Result: ui.ScrollField('window1|paneLayout13|scrollField5') #\n    pm.scrollField( editable=True, wordWrap=False, text='Editable with no word wrap' )\n    # Result: ui.ScrollField('window1|paneLayout13|scrollField6') #\n    pm.showWindow()", 
    "scrollLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window( widthHeight=(350, 150) )\n    # Result: ui.Window('window1') #\n    scrollLayout = pm.scrollLayout(\n            horizontalScrollBarThickness=16,\n            verticalScrollBarThickness=16)\n    pm.rowColumnLayout( numberOfColumns=3 )\n    \n    for index in range(10):\n            pm.text()\n            pm.intField()\n            pm.intSlider()\n    \n    pm.showWindow()\n    \n    value = pm.scrollLayout(scrollLayout, query=True, scrollAreaValue=True)\n    top = value[0]\n    left = value[1]", 
    "sculpt": "    \n    \n    import pymel.core as pm\n    \n    pm.polyPlane(w=24,h=24,sx=20,sy=20)\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    # Deforms whatever is currently on the selection list\n    pm.sculpt()\n    # Result: [nt.Sculpt(u'sculpt1'), nt.Transform(u'sculptor1'), nt.Transform(u'sculpt1StretchOrigin')] #\n    \n    # Increase the effect of the deformation\n    pm.sculpt( 'sculpt1', edit=True, maxDisplacement=3.0 )\n    \n    # Try another faster deformation mode\n    pm.sculpt( 'sculpt1', edit=True, mode='flip', insideMode='ring' )", 
    "selLoadSettings": "    \n    \n    import pymel.core as pm\n    \n    # Given the scene:\n    #\n    #\n    #        a [+]\n    #       /     \\\n    #      b [-]   c [+]\n    #             /     \\\n    #            d [-]   e [+]\n    #\n    # With the IDs:\n    #    a = 0\n    #    b = 1\n    #    c = 2\n    #    d = 3\n    #    e = 4\n    # set c, d, and e to the unloaded state\n    pm.selLoadSettings( '2', '3', '4', e=True, deferReference=1 )\n    # this will also set c, d, and e to the unloaded state\n    pm.selLoadSettings( '2', e=True, deferReference=1 )\n    # set b to the loaded state\n    pm.selLoadSettings( '1', e=True, deferReference=0 )\n    # set b and d to the loaded state\n    pm.selLoadSettings( '1', '3', e=True, deferReference=0 )", 
    "select": "    \n    \n    import pymel.core as pm\n    \n    # create some objects and add them to a set\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.sets( 'sphere1', 'sphere2', n='set1' )\n    # Result: nt.ObjectSet(u'set1') #\n    \n    # select all dag objects and all dependency nodes\n    pm.select( all=True )\n    \n    # clear the active list\n    pm.select( clear=True )\n    \n    # select sphere2 only if it is visible\n    pm.select( 'sphere2', visible=True )\n    \n    # select a couple of objects regardless of visibilty\n    pm.select( 'sphere1', r=True )\n    pm.select( 'sphere2', add=True )\n    \n    # remove one of the spheres from the active list (using toggle)\n    pm.select( 'sphere1', tgl=True )\n    \n    # remove the other sphere from the active list\n    pm.select( 'sphere2', d=True )\n    \n    # the following selects all the members of set1\n    pm.select( 'set1' )\n    \n    # this selects set1 itself\n    pm.select( 'set1', ne=True )\n    \n    \n    # Some examples selecting with namespaces:\n    \n    # create a namespace and an object in the namespace\n    pm.namespace( add='foo' )\n    # Result: u'foo' #\n    pm.namespace( set='foo' )\n    # Result: u'foo' #\n    pm.sphere( n='bar' )\n    # Result: [nt.Transform(u'foo:bar'), nt.MakeNurbSphere(u'foo:makeNurbSphere1')] #\n    \n    # 'select bar' will not select \"bar\" unless bar is in the\n    # root namespace. You need to qualify the name with the\n    # namespace (shown below).\n    pm.select( 'foo:bar' )\n    \n    # select all the objects in a namespace\n    pm.select( 'foo:*' )", 
    "selectContext": "    \n    \n    import pymel.core as pm\n    \n    # Create a new select context, then switch to it\n    pm.selectContext('selectContext1')\n    # Result: u'selectContext1' #\n    pm.setToolTo('selectContext1')", 
    "selectKey": "    \n    \n    import pymel.core as pm\n    \n    # Select all translateX keyframes on nurbsSphere1 in the range 10 to 20.\n    #\n    pm.selectKey( 'nurbsSphere1', time=(10,20), attribute='translateX' )\n    \n    # select all the animation of the active objects, range 0-30\n    #\n    pm.selectKey( time=(0,30) )", 
    "selectKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a select key context for the graph editor\n    #\n    pm.selectKeyCtx( 'selectKeyContext' )", 
    "selectKeyframe": "", 
    "selectKeyframeRegionCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a select key context for the dope sheet editor\n    #\n    pm.selectKeyframeRegionCtx( 'selectKeyframeRegionContext' )", 
    "selectMode": "    \n    \n    import pymel.core as pm\n    \n    pm.selectMode( object=True )\n    pm.selectMode( q=True, component=True )\n    # Result: False #", 
    "selectPref": "    \n    \n    import pymel.core as pm\n    \n    pm.selectPref(popupMenuSelection=True,disableComponentPopups=True)", 
    "selectPriority": "    \n    \n    import pymel.core as pm\n    \n    pm.selectPriority( q=True, nurbsCurve=True )\n    # Result: 2 #\n    pm.selectPriority( nurbsCurve=10 )\n    pm.selectPriority( handle=9, ikHandle=8 )", 
    "selectType": "    \n    \n    import pymel.core as pm\n    \n    pm.selectType( allObjects=True )\n    pm.selectType( q=True, cv=True )\n    # Result: False #\n    pm.selectType( allObjects=True, allComponents=False )", 
    "selectedNodes": "", 
    "selectionConnection": "    \n    \n    import pymel.core as pm\n    \n    #    Example 1.\n    #\n    #    Create a window with two Outliner editors and a\n    #    selection connection network.  Editor 1 will display the\n    #    current scene's active list.  Editor 2 will display the items\n    #    selected in Editor 1.\n    #\n    window = pm.window('window', wh=(400, 300))\n    pm.paneLayout( configuration='vertical2' )\n    # Result: ui.PaneLayout('window|paneLayout14') #\n    editor1 = pm.outlinerEditor()\n    editor2 = pm.outlinerEditor()\n    \n    #    Create the selection connection network.\n    #\n    inputList = pm.selectionConnection( activeList=True )\n    fromEditor1 = pm.selectionConnection()\n    fromEditor2 = pm.selectionConnection()\n    pm.editor( editor1, edit=True, mainListConnection=inputList )\n    # Result: u'window|paneLayout14|outlinerEditor2' #\n    pm.editor( editor1, edit=True, selectionConnection=fromEditor1 )\n    # Result: u'window|paneLayout14|outlinerEditor2' #\n    pm.editor( editor2, edit=True, mainListConnection=fromEditor1 )\n    # Result: u'window|paneLayout14|outlinerEditor3' #\n    pm.editor( editor2, edit=True, selectionConnection=fromEditor2 )\n    # Result: u'window|paneLayout14|outlinerEditor3' #\n    \n    pm.showWindow( window )\n    \n    #    Create some objects and select them.\n    #\n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone()\n    # Result: [nt.Transform(u'nurbsCone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    pm.cylinder()\n    # Result: [nt.Transform(u'nurbsCylinder1'), nt.MakeNurbCylinder(u'makeNurbCylinder1')] #\n    pm.select( all=True )\n    \n    # Now as you select objects on the left side, they will be\n    # displayed on the right side.  You can also add a callback\n    # script to do further processing on the list when objects\n    # are added. (Use -removeScript for when objects are removed.)\n    \n    def addScriptCallback( array ):\n        print \"Contents of callback array: %s\\n\" % array\n    \n    pm.selectionConnection( fromEditor1, e=True, addScript=addScriptCallback )\n    # Result: u'selectionConnection2' #\n    \n    \n    #    Example 2.\n    #\n    #    Create a selection connection for a paritcular object.  Delete\n    #    the selection connection and the object.\n    #\n    pm.sphere( name='sphere' )\n    # Result: [nt.Transform(u'sphere'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    \n    #    Create a selection connection to wrap the sphere.\n    #\n    pm.selectionConnection( 'holder', object='sphere' )\n    # Result: u'holder' #\n    \n    #    Select the sphere using the selection connection.\n    #\n    pm.select( 'holder' )\n    \n    #    Delete the members (sphere) of the selection connection\n    #\n    pm.delete( 'holder' )\n    \n    #    Delete the selection connection (does not delete the members of\n    #    the selection connection.\n    #\n    pm.deleteUI( 'holder' )\n    # Result: u'' #", 
    "separator": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.rowColumnLayout( numberOfColumns=2, columnAlign=(1, 'right'), columnAttach=(2, 'both', 0), columnWidth=(2, 150) )\n    # Result: ui.RowColumnLayout('window1|rowColumnLayout5') #\n    \n    pm.text( label='Default' )\n    # Result: ui.Text('window1|rowColumnLayout5|text9') #\n    pm.separator()\n    # Result: ui.Separator('window1|rowColumnLayout5|separator14') #\n    pm.text( label='None' )\n    # Result: ui.Text('window1|rowColumnLayout5|text10') #\n    pm.separator( style='none' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator15') #\n    pm.text( label='Single' )\n    # Result: ui.Text('window1|rowColumnLayout5|text11') #\n    pm.separator( style='single' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator16') #\n    pm.text( label='Double' )\n    # Result: ui.Text('window1|rowColumnLayout5|text12') #\n    pm.separator( height=10, style='double' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator17') #\n    pm.text( label='Single Dash' )\n    # Result: ui.Text('window1|rowColumnLayout5|text13') #\n    pm.separator( height=10, style='singleDash' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator18') #\n    pm.text( label='Double Dash' )\n    # Result: ui.Text('window1|rowColumnLayout5|text14') #\n    pm.separator( height=40, style='doubleDash' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator19') #\n    pm.text( label='Etched In' )\n    # Result: ui.Text('window1|rowColumnLayout5|text15') #\n    pm.separator( height=40, style='in' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator20') #\n    pm.text( label='Etched Out' )\n    # Result: ui.Text('window1|rowColumnLayout5|text16') #\n    pm.separator( height=40, style='out' )\n    # Result: ui.Separator('window1|rowColumnLayout5|separator21') #\n    pm.setParent( '..' )\n    # Result: u'' #\n    pm.showWindow()", 
    "sequenceManager": "    \n    \n    import pymel.core as pm\n    \n    // Get the current Maya time, based on the Sequence time\n    pm.sequenceManager(q=True, currentTime=True);", 
    "setAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere( n=\"sphere\" )\n    # Result: [nt.Transform(u'sphere'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # Set a simple numeric value\n    pm.setAttr( 'sphere.translateX', 5 )\n    \n    # Lock an attribute to prevent further modification\n    pm.setAttr( 'sphere.translateX', lock=True )\n    \n    # Make an attribute unkeyable\n    pm.setAttr( 'sphere.translateZ', keyable=False )\n    \n    # Set an entire list of multi-attribute values in one command\n    pm.setAttr( 'sphereShape.weights[0:6]',1, 1, 2, 1, 1, 1, 2,size=7)\n    # Set an attribute with a compound numeric type\n    pm.setAttr('sphere.rotate', 0, 45, 90, type=\"double3\")\n    \n    # Clamp the value of the attribute to the min/max\n    # Useful floating point math leaves the value just\n    # a little out of range - here the min is .01\n    pm.setAttr( 'anisotropic1.roughness', 0.0099978, clamp=True )\n    \n    # Set a multi-attribute with a compound numeric type\n    pm.setAttr( 'sphereShape.controlPoints[0:2]', 0, 0, 0, 1, 1, 1, 2, 2, 2,type=\"double3\" )", 
    "setAttrMapping": "    \n    \n    import pymel.core as pm\n    \n    pm.attachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )\n    pm.setAttrMapping( d='spaceball', ax='XAxis', at='translateX', scale=0.01 )\n    \n    # The first command will assign the XAxis of the spaceball to\n    # the translateX attribute of the selected objects.\n    # The second command sets the scaling of attribute value to\n    # 0.01 of the value of the axis. This results in finer control\n    # since the motions of the spaceball are damped.", 
    "setDefaultShadingGroup": "    \n    \n    import pymel.core as pm\n    \n    # Create a new blue shader\n    blinn = pm.shadingNode( 'blinn', asShader=True )\n    pm.setAttr( blinn+\".color\", 0.15, 0.35, 1.0,  type='double3' )\n    blinnSG = pm.sets( renderable=True, noSurfaceShader=True, empty=True, name='blinnSG' );\n    pm.connectAttr( blinn+\".outColor\", blinnSG+\".surfaceShader\", force=True)\n    \n    # Make it the default\n    pm.setDefaultShadingGroup( blinnSG )", 
    "setDrivenKeyframe": "    \n    \n    import pymel.core as pm\n    \n    # Create a curve and a cone\n    #\n    pm.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n    # Result: nt.Transform(u'curve1') #\n    pm.polyCone()\n    # Result: [nt.Transform(u'pCone1'), nt.PolyCone(u'polyCone1')] #\n    \n    # To set the keyframe on the selected object's translateX based on\n    # curve1's rotateZ:\n    pm.setDrivenKeyframe( at='translateX', cd='curve1.rz' )\n    # Result: 1 #\n    \n    # To set the keyframe on pCone1.tx based on the value of curve1.rz:\n    pm.setDrivenKeyframe( 'pCone1.tx', cd='curve1.rz' )\n    # Result: 1 #\n    \n    # To query the current driver of pCone1.tx:\n    pm.setDrivenKeyframe( 'pCone1.tx', q=True, cd=True )\n    # Result: [u'curve1.rotateZ'] #\n    \n    # To query the available drivers of pCone1.tx:\n    pm.setDrivenKeyframe( 'pCone1.tx', q=True, dr=True )\n    # Result: [u'curve1.rotateZ'] #", 
    "setDynamic": "    \n    \n    import pymel.core as pm\n    \n    pm.setDynamic( 'myParticles', on=True )\n    # Sets myParticles.isDynamic true.\n    \n    pm.setDynamic( all=True, off=True )\n    # Sets isDynamic false for all particle objects in the scene.", 
    "setEditCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.setEditCtx( 'setEditContext' )", 
    "setFluidAttr": "    \n    \n    import pymel.core as pm\n    \n    # set density for entire fluid\n    pm.setFluidAttr( at='density', fv=1.0 )\n    # add 3.5 to the density at the cell x=1, y=2, z=3\n    pm.setFluidAttr( at='density', ad=True, fv-3.5, xi=1, yi=2, zi=3 )\n    # clear the density for the whole fluid\n    pm.setFluidAttr( at='density', cl=True )\n    # reset the velocity at the cell x=1, y=2, z=3\n    pm.setFluidAttr( at='velocity', re=True, xi=1, yi=2, zi=3 )\n    # set the velocity at the centers of the voxels on plane y=5\n    # to approximately (-1, 0, 0)\n    pm.setFluidAttr( at='velocity', vv=(-1, 0, 0), yi=5 )\n    # set the Z-component of the velocity at the bottom of cell [0, 0, 0]\n    # to exactly 1.3\n    pm.setFluidAttr( at='velocity', z=True, xi=0, yi=0, zi=0, fv=1.3 )\n    # set the X-component of the velocity at the right of cell [5, 3, 2]\n    # (which is also the left of cell [6, 3, 2]) to exactly 4.8\n    pm.setFluidAttr( at='velocity', x=True, xi=5, yi=3, zi=2, fv=4.8 )\n    # set the density to a random value in the range 0.1 to 0.9\n    # the fv flag specfies the base value, and then we add a a\n    # random value in the range of -fr to +fr\n    pm.setFluidAttr( at='density', fv=0.5, fr=0.4 )", 
    "setFocus": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout80') #\n    pm.textField('tf0', changeCommand='pm.setFocus(\"tf1\")' )\n    # Result: ui.TextField('window1|columnLayout80|tf0') #\n    pm.textField('tf1', changeCommand='pm.setFocus(\"tf2\")' )\n    # Result: ui.TextField('window1|columnLayout80|tf1') #\n    pm.textField('tf2', changeCommand='pm.setFocus(\"tf0\")' )\n    # Result: ui.TextField('window1|columnLayout80|tf2') #\n    pm.showWindow()", 
    "setInfinity": "    \n    \n    import pymel.core as pm\n    \n    pm.setInfinity( pri='linear', poi='constant' )", 
    "setInputDeviceMapping": "    \n    \n    import pymel.core as pm\n    \n    pm.assignInputDevice( '\"move -r XAxis YAxis ZAxis\"', d='spaceball' )\n    pm.setInputDeviceMapping( d='spaceball', ax=['XAxis', 'YAxis', 'ZAxis'], scale=0.01, r=True )\n    \n    # The first command will assign the move command to the spaceball.\n    # The second command will scale the three named axes by 0.01 and\n    # only return the changes in device position.", 
    "setKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a set key context for the graph editor\n    #\n    pm.setKeyCtx( 'setKeyContext' )", 
    "setKeyPath": "    \n    \n    import pymel.core as pm\n    \n    # Apply setKeyPath command on the currently selected object at current time:\n    pm.setKeyPath()\n    \n    # Apply setKeyPath command on an object named \"ball\" at current time:\n    pm.setKeyPath( 'ball' )", 
    "setKeyframe": "    \n    \n    import pymel.core as pm\n    \n    # Set a keyframe at the current time on all \"keyable\"\n    # attributes of the selected objects.\n    #\n    pm.setKeyframe()\n    \n    # Set a keyframe so that translateX has a value of 10\n    # at the current time, regardless of its current position\n    #\n    pm.setKeyframe( v=10, at='translateX' )\n    \n    # Set keyframes for translateX on two objects at t=0 and\n    # t=10 seconds.  (Note that if mysteryObject has no\n    # attribute named translateX, no keyframe is set for mysteryObject.)\n    #\n    pm.setKeyframe( 'nurbsSphere1', 'mysteryObject', attribute='translateX', t=['0sec','10sec'] )", 
    "setKeyframeBlendshapeTargetWts": "    \n    \n    import pymel.core as pm\n    \n    # first create a blendShape\n    #\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.duplicate()\n    # Result: [nt.Transform(u'pSphere2')] #\n    pm.duplicate()\n    # Result: [nt.Transform(u'pSphere3')] #\n    pm.select( 'pSphere2', 'pSphere1', 'pSphere3', r=True )\n    pm.blendShape()\n    # Result: [nt.BlendShape(u'blendShape1')] #\n    # Select one of the targets, and key its per-point weights.\n    # Typically this would be done after painting per-point weights\n    # for the target.\n    #\n    pm.select( 'pSphere2', r=True )\n    pm.setKeyframeBlendshapeTargetWts()", 
    "setMenuMode": "    \n    \n    import pymel.core as pm\n    \n    # Use the \"Rendering\" Menu Set, and at the same time get the one currently used.\n    prevMenuMode = pm.setMenuMode('renderingMenuSet')\n    # Print the current Menu Set: \"renderingMenuSet\".\n    print( pm.setMenuMode() )", 
    "setNodeTypeFlag": "    \n    \n    import pymel.core as pm\n    \n    # don't display unit conversion nodes\n    pm.setNodeTypeFlag( pm.objectType(tagFromType='unitConversion'), display=False )\n    # Result: True #\n    pm.setNodeTypeFlag( 'mesh', threadSafe=True )\n    # Result: True #\n    pm.setNodeTypeFlag( 'mesh', q='true', threadSafe=True )\n    // Returns 1", 
    "setParent": "    \n    \n    import pymel.core as pm\n    \n    #  Create a window with a menu bar and two menu bar layouts.\n    #\n    window = pm.window(menuBar=True, widthHeight=(300, 200) )\n    fileMenu = pm.menu( label='File')\n    pm.menuItem( label='Open' )\n    # Result: ui.CommandMenuItem('window1|menu67|menuItem985') #\n    \n    pm.paneLayout( configuration='vertical2' )\n    # Result: ui.PaneLayout('window1|paneLayout15') #\n    \n    leftMenuBarLayout = pm.menuBarLayout()\n    leftMenu = pm.menu( label='Left' )\n    pm.menuItem( label='One' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout4|menu68|menuItem986') #\n    pm.setParent( '..' )\n    # Result: u'window1|paneLayout15' #\n    \n    pm.menuBarLayout()\n    # Result: ui.MenuBarLayout('window1|paneLayout15|menuBarLayout5') #\n    pm.menu( label='Right' )\n    # Result: ui.Menu('window1|paneLayout15|menuBarLayout5|menu69') #\n    rightSubMenu = pm.menuItem(subMenu=True, label='Colors' )\n    pm.setParent( '..' )\n    # Result: u'window1|paneLayout15' #\n    pm.showWindow( window )\n    \n    #  Add item to the \"File\" menu.\n    #\n    pm.setParent( fileMenu, menu=True )\n    # Result: u'window1|menu67' #\n    pm.menuItem( label='Save' )\n    # Result: ui.CommandMenuItem('window1|menu67|menuItem988') #\n    \n    #  Add item to the \"Left\" menu, explicitly ignore default parent\n    #    by setting -p/parent flag.\n    #\n    pm.menuItem( parent=leftMenu, label='Two' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout4|menu68|menuItem989') #\n    \n    #  Add more items to the \"File\" menu because it is still the\n    #    default parent.\n    #\n    pm.menuItem( divider=True )\n    # Result: ui.CommandMenuItem('window1|menu67|menuItem990') #\n    pm.menuItem( label='Close' )\n    # Result: ui.CommandMenuItem('window1|menu67|menuItem991') #\n    \n    #  Add another menu to the left menu bar layout.\n    #\n    pm.setParent( leftMenuBarLayout )\n    # Result: u'window1|paneLayout15|menuBarLayout4' #\n    pm.menu( label='Middle' )\n    # Result: ui.Menu('window1|paneLayout15|menuBarLayout4|menu70') #\n    pm.menuItem( label='Three' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout4|menu70|menuItem992') #\n    \n    #  Add items to right sub menu.\n    #\n    pm.setParent( rightSubMenu, menu=True )\n    # Result: u'window1|paneLayout15|menuBarLayout5|menu69|menuItem987' #\n    pm.menuItem( label='Red' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout5|menu69|menuItem987|menuItem993') #\n    pm.menuItem( label='Blue' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout5|menu69|menuItem987|menuItem994') #\n    pm.menuItem( label='Green' )\n    # Result: ui.CommandMenuItem('window1|paneLayout15|menuBarLayout5|menu69|menuItem987|menuItem995') #", 
    "setParticleAttr": "    \n    \n    import pymel.core as pm\n    \n    pm.setParticleAttr( 'particle1', at='velocity', vv=(1, 2, 3) )\n    # This will set the velocity of all of the particles in particle1\n    # to \"\" 1, 2, 3 \"\".\n    \n    pm.select( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]' )\n    pm.setParticleAttr( vv=(1, 2, 3), at='velocity' )\n    pm.setParticleAttr( 'particleShape1', at='velocity' )\n    \n    # This will set the velocity of particles 0-7 and 11 of\n    # particleShape1 to \"\" 1, 2, 3 \"\".  The rest of the particles are\n    # not changed.", 
    "setRenderPassType": "    \n    \n    import pymel.core as pm\n    \n    # create a render pass for diffuse reflection\n    #\n    pm.createNode( 'renderPass', name='myDiffusePass' );\n    pm.setRenderPassType( 'myDiffusePass', type='diffuse' );\n    true", 
    "setStartupMessage": "    \n    \n    import pymel.core as pm\n    \n    pm.setStartupMessage( 'Initializing Main View' )", 
    "setToolTo": "    \n    \n    import pymel.core as pm\n    \n    pm.setToolTo( 'moveSuperContext' )", 
    "setUITemplate": "    \n    \n    import pymel.core as pm\n    \n    #    Create a new template.\n    #\n    if pm.uiTemplate( 'ExampleTemplate', exists=True ):\n            pm.deleteUI( 'ExampleTemplate', uiTemplate=True )\n    \n    pm.uiTemplate( 'ExampleTemplate' )\n    # Result: UITemplate(u'ExampleTemplate') #\n    \n    pm.button( defineTemplate='ExampleTemplate', width=100, height=40, align='left' )\n    pm.frameLayout( defineTemplate='ExampleTemplate', borderVisible=True, labelVisible=False )\n    \n    #    Create a window and apply the template.\n    #\n    window = pm.window()\n    pm.setUITemplate( 'ExampleTemplate', pushTemplate=True )\n    # Result: u'ExampleTemplate' #\n    pm.columnLayout( rowSpacing=5 )\n    # Result: ui.ColumnLayout('window1|columnLayout81') #\n    \n    pm.frameLayout()\n    # Result: ui.FrameLayout('window1|columnLayout81|frameLayout24') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout81|frameLayout24|columnLayout82') #\n    pm.button( label='One' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout24|columnLayout82|button90') #\n    pm.button( label='Two' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout24|columnLayout82|button91') #\n    pm.button( label='Three' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout24|columnLayout82|button92') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout81|frameLayout24' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout81' #\n    \n    pm.frameLayout()\n    # Result: ui.FrameLayout('window1|columnLayout81|frameLayout25') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout81|frameLayout25|columnLayout83') #\n    pm.button( label='Red' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout25|columnLayout83|button93') #\n    pm.button( label='Green' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout25|columnLayout83|button94') #\n    pm.button( label='Blue' )\n    # Result: ui.Button('window1|columnLayout81|frameLayout25|columnLayout83|button95') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout81|frameLayout25' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout81' #\n    \n    pm.setUITemplate( popTemplate=True )\n    # Result: u'NONE' #\n    \n    pm.showWindow( window )", 
    "setXformManip": "    \n    \n    import pymel.core as pm\n    \n    # makes manip disappear\n    pm.setXformManip( suppress=True )\n    \n    # set manip to object space\n    pm.setXformManip( worldSpace=False )\n    \n    # returns false\n    pm.setXformManip( q=True, ws=True )\n    # Result: False #", 
    "sets": "    \n    \n    import pymel.core as pm\n    \n    # create some objects\n    pm.sphere( n=\"sphere1\" )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.cone( n=\"cone1\" )\n    # Result: [nt.Transform(u'cone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    \n    # create a set with whatever is currently active\n    pm.select( 'sphere1' )\n    newSet1 = pm.sets()\n    pm.select( 'cone1' )\n    newSet2 = pm.sets()\n    \n    # Query the members of a set\n    pm.sets( newSet1, q=True )\n    # Result: [nt.Transform(u'sphere1')] #\n    \n    # create a set which contains two sets\n    pm.sets( newSet1, newSet2, n=\"setOfSets\" )\n    # Result: nt.ObjectSet(u'setOfSets') #\n    \n    # To select a set, the -noExpand flag must be used. Otherwise\n    # the members of a set are selected instead.\n    pm.select( newSet1, noExpand=True )\n    pm.ls( selection=True )\n    # Result: [nt.ObjectSet(u'set1')] #\n    \n    # Select the members of a set\n    pm.select( newSet1 )\n    pm.ls( selection=True )\n    # Result: [nt.Transform(u'sphere1')] #\n    \n    # Create a vertex set named ballVertices. This will contain\n    # all the vertices of the sphere.\n    pm.sets( 'sphere1', n=\"ballVertices\", v=1 )\n    # Result: nt.ObjectSet(u'ballVertices') #\n    pm.select( 'ballVertices' )\n    \n    # Return the union of two sets\n    pm.sets( newSet2, un=newSet1 )\n    # Result: [nt.Transform(u'cone1'), nt.Transform(u'sphere1')] #\n    \n    # Test whether a list of sets have common members\n    pm.sets( 'ballVertices',ii=newSet1)\n    # Result: False #\n    \n    # Test whether the sphere is a member of the set\n    pm.sets('sphere1',im=newSet1)\n    \n    # Remove the sphere from a set\n    pm.sets( 'sphere1', rm=newSet1 )\n    \n    # Test again whether the sphere is a member of the set\n    pm.sets( 'sphere1', im=newSet1 )", 
    "shadingConnection": "    \n    \n    import pymel.core as pm\n    \n    pm.shadingConnection( 'lambert1.color', e=True, cs=0 )\n    pm.shadingConnection( 'spotLightShape1.intensity', q=True, cs=True )\n    # Result: True #", 
    "shadingGeometryRelCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.shadingGeometryRelCtx()\n    # Result: u'shadingGeometryRelCtx1' #", 
    "shadingLightRelCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.shadingLightRelCtx()\n    # Result: u'shadingLightRelCtx1' #", 
    "shadingNetworkCompare": "    \n    \n    import pymel.core as pm\n    \n    pm.shadingNetworkCompare( 'blinn1SG', 'blinn2SG' )\n    # Result: shadingNetworkComparison1\n    pm.shadingNetworkCompare( 'shadingNetworkComparison1', query=True, equivalent=True )\n    # Result: 1\n    pm.shadingNetworkCompare( 'shadingNetworkComparison1', query=True, network1=True )\n    # Result: blinn1SG blinn1\n    pm.shadingNetworkCompare( 'shadingNetworkComparison1', delete=True )", 
    "shadingNode": "    \n    \n    import pymel.core as pm\n    \n    myShader = pm.shadingNode('anisotropic', asShader=True)", 
    "shapeCompare": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere2'), nt.PolySphere(u'polySphere2')] #\n    pm.select( cl=True )\n    pm.select( 'pSphere1', 'pSphere2', r=True )\n    pm.shapeCompare()\n    # Result: 0 #", 
    "shelfButton": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a shelf in it.  You can add more items to\n    #    this shelf by creating more 'shelfButton' objects or by dragging\n    #    other shelf items to the window.  Similary, you can delete the\n    #    shelf items with the 'deleteUI' command or by dragging the items\n    #    to the trash can located on the main Maya window shelf.\n    #\n    window = pm.window( title = 'shelfButton Example')\n    tabs = pm.tabLayout()\n    shelf = pm.shelfLayout()\n    \n    #    Create some shelf buttons...\n    #\n    #    1.  A button that prints a message to the Command Line.\n    #\n    pm.shelfButton( annotation='Print \"Hello\".', image1='commandButton.png', command='print \"Hello\\\\n\"' )\n    # Result: ui.ShelfButton('window1|tabLayout5|shelfLayout2|shelfButton22') #\n    \n    #    2.  A button that will create a sphere.\n    #\n    pm.shelfButton( annotation='Create a sphere.', image1='sphere.png', command='pm.sphere()' )\n    # Result: ui.ShelfButton('window1|tabLayout5|shelfLayout2|shelfButton23') #\n    \n    #    3.  A button that will open the Attribute Editor window.\n    #\n    pm.shelfButton(annotation='Show the Attribute Editor.', image1='menuIconWindow.png', command='import maya.mel; maya.mel.eval(\"openAEWindow\")' )\n    # Result: ui.ShelfButton('window1|tabLayout5|shelfLayout2|shelfButton24') #\n    \n    #    4.  A button with a label that will create a cone\n    #\n    pm.shelfButton(annotation='Create a cone.', image1='cone.png', command='pm.cone()', imageOverlayLabel='4th')\n    # Result: ui.ShelfButton('window1|tabLayout5|shelfLayout2|shelfButton25') #\n    \n    #    5.  A button with a label and color that will call undo\n    #\n    pm.shelfButton(annotation=\"Undo last operation.\",\n        image1=\"undo.png\", command=\"undo\", imageOverlayLabel=\"undo\",\n        overlayLabelColor=(1, .25, .25))\n    \n    #    6.  A button with a label, color and background that will call redo\n    #\n    pm.shelfButton(annotation=\"Redo last operation.\",\n        image1=\"redo.png\", command=\"redo\", imageOverlayLabel=\"redo\",\n        overlayLabelColor=(1, 1, .25), overlayLabelBackColor=(.15, .9, .1, .4))\n    \n    pm.tabLayout( tabs, edit=True, tabLabel=(shelf, 'Example Shelf') )\n    \n    pm.showWindow( window )", 
    "shelfLayout": "    \n    \n    import pymel.core as pm\n    \n    # Create 4 shelves with 3 icons\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.tabLayout()\n    # Result: ui.TabLayout('window1|tabLayout6') #\n    \n    sh1 = pm.shelfLayout(\"First\", style=\"iconOnly\",\n                                               backgroundColor=(.9, .2, .2))\n    sh1b1 = pm.shelfButton(image1=\"textureEditor.png\",\n                                                     label=\"textureEditor\", annotation=\"textureEditor\",\n                                                     command=\"TextureViewWindow\",\n                                                     imageOverlayLabel=\"1\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(1, .25, .25, .5))\n    sh1b2 = pm.shelfButton(image1=\"undo.png\",\n                                                     label=\"undo\", annotation=\"undo\",\n                                                     command=\"undo\",\n                                                     imageOverlayLabel=\"1\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(1, .25, .25, .5))\n    sh1b3 = pm.shelfButton(image1=\"redo.png\",\n                                                     label=\"redo\", annotation=\"redo\",\n                                                     command=\"redo\",\n                                                     imageOverlayLabel=\"1\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(1, .25, .25, .5))\n    pm.setParent('..')\n    \n    sh2 = pm.shelfLayout(\"Second\", style=\"textOnly\",\n                                               backgroundColor=(.2, .9, .2))\n    sh2b1 = pm.shelfButton(image1=\"textureEditor.png\",\n                                                     label=\"textureEditor\", annotation=\"textureEditor\",\n                                                     command=\"TextureViewWindow\",\n                                                     imageOverlayLabel=\"2\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, .25, .5))\n    sh2b2 = pm.shelfButton(image1=\"undo.png\",\n                                                     label=\"undo\", annotation=\"undo\",\n                                                     command=\"undo\",\n                                                     imageOverlayLabel=\"2\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, .25, .5))\n    sh2b3 = pm.shelfButton(image1=\"redo.png\",\n                                                     label=\"redo\", annotation=\"redo\",\n                                                     command=\"redo\",\n                                                     imageOverlayLabel=\"2\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, .25, .5))\n    pm.setParent('..')\n    \n    sh3 = pm.shelfLayout(\"Third\", style=\"iconAndTextHorizontal\",\n                                               backgroundColor=(.2, .2, .9))\n    sh3b1 = pm.shelfButton(image1=\"textureEditor.png\",\n                                                     label=\"textureEditor\", annotation=\"textureEditor\",\n                                                     command=\"TextureViewWindow\",\n                                                     imageOverlayLabel=\"3\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, .25, 1, .5))\n    sh3b2 = pm.shelfButton(image1=\"undo.png\",\n                                                     label=\"undo\", annotation=\"undo\",\n                                                     command=\"undo\",\n                                                     imageOverlayLabel=\"3\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, .25, 1, .5))\n    sh3b3 = pm.shelfButton(image1=\"redo.png\",\n                                                     label=\"redo\", annotation=\"redo\",\n                                                     command=\"redo\",\n                                                     imageOverlayLabel=\"3\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, .25, 1, .5))\n    pm.setParent('..')\n    \n    \n    sh4 = pm.shelfLayout(\"Fourth\", style=\"iconAndTextVertical\")\n    sh4b1 = pm.shelfButton(image1=\"textureEditor.png\",\n                                                     label=\"textureEditor\", annotation=\"textureEditor\",\n                                                     command=\"TextureViewWindow\",\n                                                     imageOverlayLabel=\"4\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, 1, .5))\n    sh4b2 = pm.shelfButton(image1=\"undo.png\",\n                                                     label=\"undo\", annotation=\"undo\",\n                                                     command=\"undo\",\n                                                     imageOverlayLabel=\"4\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, 1, .5))\n    sh4b3 = pm.shelfButton(image1=\"redo.png\",\n                                                     label=\"redo\", annotation=\"redo\",\n                                                     command=\"redo\",\n                                                     imageOverlayLabel=\"4\",\n                                                     overlayLabelColor=(.1, .1, .1),\n                                                     overlayLabelBackColor=(.25, 1, 1, .5))\n    pm.setParent('..')\n    \n    pm.setParent('..')\n    pm.showWindow()\n    \n    # Move some icons around\n    \n    # Move undo to the first position in shelf 1\n    pm.shelfLayout(sh1, edit=True, position=(sh1b2, 1))\n    \n    # This does nothing\n    pm.shelfLayout(sh2, edit=True, position=(sh2b2, 2))\n    \n    # Move undo to the last position in shelf 3\n    pm.shelfLayout(sh3, edit=True, position=(sh3b2, 3))\n    \n    # Swap textureEditor and redo in shelf 4\n    pm.shelfLayout(sh4, edit=True, position=[(sh4b1, 3), (sh4b3, 1)])", 
    "shelfTabLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.shelfTabLayout( 'mainShelfTab', image='smallTrash.png', imageVisible=True )\n    # Result: ui.ShelfTabLayout('window1|mainShelfTab') #\n    pm.shelfLayout( 'Dynamics' )\n    # Result: ui.ShelfLayout('window1|mainShelfTab|Dynamics') #\n    pm.setParent( '..' )\n    # Result: u'window1|mainShelfTab' #\n    pm.shelfLayout( 'Rendering' )\n    # Result: ui.ShelfLayout('window1|mainShelfTab|Rendering') #\n    pm.setParent( '..' )\n    # Result: u'window1|mainShelfTab' #\n    pm.shelfLayout( 'Animation' )\n    # Result: ui.ShelfLayout('window1|mainShelfTab|Animation') #\n    pm.setParent( '..' )\n    # Result: u'window1|mainShelfTab' #\n    pm.showWindow()", 
    "shot": "    \n    \n    import pymel.core as pm\n    \n    myShot = pm.shot('myShot', st=10, et=19);\n    pm.shot(myShot, e=True, sst=100, set=119);\n    pm.shot(myShot, q=True, st=True);\n    pm.shot(myShot, q=True, sst=True);\n    pm.shot(myShot, e=True, pst=10);\n    pm.shot(myShot, q=True, set=True);\n    pm.shot(myShot, e=True, prt=5);\n    pm.shot(myShot, q=True, set=True);\n    pm.shot(myShot, q=True, sd=True);", 
    "shotRipple": "    \n    \n    import pymel.core as pm\n    \n    // A shot initially starting at sequence time 0 was edited to start 10 frames later.\n    // adjust the rest of the shots accordingly\n    pm.shotRipple(shotName, startTime=0, startDelta=10)\n    // A shot initially ending at frame 10 was edited to start 5 frames earlier.\n    // adjust the rest of the shots accordingly\n    pm.shotRipple(shotName, endTime=10, endDelta=-5)\n    // A shot starting at frame 10 and ending at frame 20 was just deleted\n    // adjust the rest of the shots accordingly (if necessary)\n    pm.shotRipple(shotName, delete=1,startTime=10,endTime=20)", 
    "shotTrack": "    \n    \n    import pymel.core as pm\n    \n    #  Move the shot named \"shot2\" to track 3\n    #\n    pm.shotTrack( 'shot2', track=3 )\n    # Lock the track containing the shot named \"shot1\"\n    #\n    pm.shotTrack( 'shot1', lock=True )\n    # Remove any empty tracks\n    #\n    pm.shotTrack(removeEmptyTracks=True)\n    # shotTrack -q -track shot1;\n    #\n    pm.shotTrack( 'shot1', q=True, track=True )", 
    "showHelp": "    \n    \n    import pymel.core as pm\n    \n    # View the documentation for the launchBrowser command\n    #\n    pm.showHelp( 'Commands/showHelp.html', docs=True )\n    # Result: u'http://download.autodesk.com/global/docs/maya2014/en_us/Commands/showHelp.html' #\n    # View the Autodesk home page\n    #\n    pm.showHelp( 'http://www.autodesk.com/', absolute=True )\n    # Result: u'http://www.autodesk.com/' #\n    # Query for the full path to the help page on the Align Tool\n    #\n    pm.showHelp( 'AlignTool', q=True )\n    # Result: u'http://download.autodesk.com/global/docs/maya2014/en_us/files/Modify__Align_Tool.htm' #\n    # Set the help lookup-table to $MAYA_APP_DIR/customHelpTable\n    #\n    pm.showHelp( 'customHelpTable', helpTable=True )\n    # View the help topic \"Particle\" found in customHelpTable.dat\n    #\n    pm.showHelp( 'Particle' )", 
    "showHidden": "    \n    \n    import pymel.core as pm\n    \n    # create a sphere and group it, then hide the sphere and the group.\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.group( n='group1' )\n    # Result: nt.Transform(u'group1') #\n    pm.hide( 'group1', 'sphere1' )\n    \n    # make the sphere visible. Note that you still can't see it\n    # because the group is invisible.\n    pm.showHidden( 'sphere1' )\n    \n    # make the sphere and the group visible.\n    pm.showHidden( 'sphere1', above=True )\n    \n    # make everything visible. This will make the cameras (which are\n    # normally invisible) visible as well.\n    pm.showHidden( all=True )", 
    "showManipCtx": "    \n    \n    import pymel.core as pm\n    \n    # Creates a new show manip context.\n    pm.showManipCtx()\n    # Result: u'showManipCtx1' #", 
    "showSelectionInTitle": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window(widthHeight=(400, 100))\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout16') #\n    pm.scrollField(wordWrap=True, text='The title of this window will reflect the current object selection.')\n    # Result: ui.ScrollField('window1|paneLayout16|scrollField7') #\n    pm.showWindow(window)\n    \n    pm.showSelectionInTitle(window)\n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #", 
    "showShadingGroupAttrEditor": "    \n    \n    import pymel.core as pm\n    \n    pm.showShadingGroupAttrEditor()", 
    "showWindow": "    \n    \n    import pymel.core as pm\n    \n    pm.showWindow( 'myWindow1' )", 
    "simplify": "    \n    \n    import pymel.core as pm\n    \n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    pm.setKeyframe( '.tx' )\n    # Result: 1 #\n    pm.simplify( time=(1,10) )\n    # Result: 0 #", 
    "singleProfileBirailSurface": "    \n    \n    import pymel.core as pm\n    \n    #Create a surface by sweeping profile \"curve1\" along the two rails\n    #given by isoparms surface1.u[0] and surface2.u[0.5].\n    pm.singleProfileBirailSurface( 'curve1', 'surface1.u[0]', 'surface2.u[0.5]', ch=True )\n    \n    # create a tangent continuous surface across the profile.\n    pm.singleProfileBirailSurface( 'surface1.u[0]', 'curve1', 'curve2', ch=True, tp1=True )", 
    "skinBindCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.skinBindCtx( 'skinBindContext' )\n    # Result: u'skinBindContext' #", 
    "skinCluster": "    \n    \n    import pymel.core as pm\n    \n    # Create a joint chain and a polygonal plane.\n    pm.select(d=True)\n    pm.joint(p=(-3.0, 0.0,-12.0))\n    # Result: nt.Joint(u'joint1') #\n    pm.joint(p=(-3.0, 0.0, -5.0))\n    # Result: nt.Joint(u'joint2') #\n    pm.joint(p=(1.0, 0.0, 5.5))\n    # Result: nt.Joint(u'joint3') #\n    pm.joint(p=(6.0, 0.0, 10.0))\n    # Result: nt.Joint(u'joint4') #\n    pm.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    # Bind the joint chain that contains joint1 to pPlane1\n    # and assign a dropoff of 4.5 to all the joints\n    #\n    pm.skinCluster( 'joint1', 'pPlane1', dr=4.5)\n    # Result: nt.SkinCluster(u'skinCluster1') #\n    \n    # Undo the previous command and bind only joint1 and joint3 to pPlane1\n    #\n    pm.undo();\n    pm.skinCluster('joint1', 'joint3', 'pPlane1',tsb=True)\n    \n    # Set the maximum number of transforms influencing each\n    # point to 3\n    pm.skinCluster('skinCluster1',e=True,mi=3)\n    \n    # Add transform joint2 to the list of transforms\n    # that influence the bound skin\n    #\n    pm.select('pPlane1')\n    pm.skinCluster(edit=True,ai='joint2')\n    \n    # Query the influences for the skinCluster\n    #\n    pm.skinCluster('skinCluster1',query=True,inf=True)\n    \n    # Add a curve influence object\n    #\n    pm.curve(d=3,p=[(2.0, 0.0, -7.0),(5.0, 0.0, -4.0),(6.0, 0.0, 1.0),(6.0, 0.0, 4.0),(5.0, 0.0, 6.0)],k=[0,0,0,1,2,2,2])\n    \n    # Get the number of nurbsSamples taken along curve1\n    #\n    pm.skinCluster('skinCluster1',edit=True,ai='curve1')\n    pm.skinCluster('skinCluster1',inf='curve1',query=True,ns=True)\n    \n    # Set the dropoff for joint3 to 5.0\n    #\n    pm.skinCluster('skinCluster1',e=True,inf='joint3',dr=5.0)\n    \n    # Query for the dropoff for joint3\n    #\n    pm.skinCluster('skinCluster1',inf='joint3',q=True,dr=True)", 
    "skinPercent": "    \n    \n    import pymel.core as pm\n    \n    # Create a joint chain and a polygonal plane and bind them as skin\n    pm.select(d=True)\n    pm.joint(p=(-3.0, 0.0,-12.0))\n    # Result: nt.Joint(u'joint1') #\n    pm.joint(p=(-3.0, 0.0, -5.0))\n    # Result: nt.Joint(u'joint2') #\n    pm.joint(p=(1.0, 0.0, 5.5))\n    # Result: nt.Joint(u'joint3') #\n    pm.joint(p=(6.0, 0.0, 10.0))\n    # Result: nt.Joint(u'joint4') #\n    pm.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    pm.skinCluster( 'joint1', 'pPlane1' )\n    # Result: nt.SkinCluster(u'skinCluster1') #\n    \n    # For vtx[100], set the weight wrt joint1 to 0.2, the weight\n    # wrt joint3 to 0.8 and adjust the remaining weights to keep\n    # the overall weight normalized (i.e. set all other joints to zero,\n    # since the weights we are setting sum to 1.0)\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', transformValue=[('joint1', 0.2), ('joint3', 0.8)])\n    \n    # Get the weight values corresponding to all of the influences\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', query=True, value=True )\n    # Result: [0.2, 0.0, 0.8, 0.0] #\n    \n    # Get the weight values that are above 0.5\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', ignoreBelow=0.5, query=True, value=True )\n    # Result: [0.8] #\n    \n    # Get the weight of vtx[100] corresponding to joint1\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', transform='joint1', query=True )\n    # Result: 0.2 #\n    \n    # Normalize the existing weights for vtx[100]\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', normalize=True )\n    \n    # Reset the weights for vtx[100] to their default values\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', resetToDefault=True )\n    \n    # Zero all the weights that are below 0.1\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1', pruneWeights=0.1 )\n    \n    # Zero all the weights\n    #\n    pm.skinPercent( 'skinCluster1', 'pPlane1', pruneWeights=100, normalize=False )\n    \n    # Assign weights to a large number of vertices,\n    # several at a time to reduce the number of calls\n    # to the skinPercent command.\n    #\n    for i in range(0,675,10):\n       pm.select('pPlane1.vtx[%i]' % i,'pPlane1.vtx[%i]' % (i+1), 'pPlane1.vtx[%i]' % (i+2), 'pPlane1.vtx[%i]' % (i+3), 'pPlane1.vtx[%i]' % (i+4), 'pPlane1.vtx[%i]' % (i+5), 'pPlane1.vtx[%i]' % (i+6), 'pPlane1.vtx[%i]' % (i+7), 'pPlane1.vtx[%i]' % (i+8), 'pPlane1.vtx[%i]' % (i+9))\n       pm.skinPercent( 'skinCluster1',transformValue=[('joint1', 0.5),('joint2', 0.5)] )", 
    "smoothCurve": "    \n    \n    import pymel.core as pm\n    \n    #Create a curve, then smooth it\n    pm.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)], n='curve1')\n    # Result: nt.Transform(u'curve1') #\n    pm.smoothCurve('curve1.cv[*]', s=10)\n    # Result: [nt.Transform(u'curve1')] #", 
    "smoothTangentSurface": "    \n    \n    import pymel.core as pm\n    \n    pm.smoothTangentSurface( 'surface1', ch=True, p=0.3, d=0 )\n    pm.smoothTangentSurface( 'surface1.v[0.3]', ch=True )\n    # Smoothes surface1 along parameter value v = 0.3. When the\n    # isoparm is specified, the direction and parameter value is\n    # implied and the \"p\" and \"d\" flags can be omitted.\n    \n    pm.smoothTangentSurface( 'surface1', ch= True, p= (0.3, 0.5, 0.8), nk=2, d=0 )\n    # Smoothes along parameter values v = 0.3, 0.5 and 0.8.", 
    "snapKey": "    \n    \n    import pymel.core as pm\n    \n    # Two ways to snap all keys on nurbsSphere1 to integer values.\n    #\n    pm.snapKey( 'nurbsSphere1', tm=1.0 )\n    pm.snapKey( 'nurbsSphere1' )\n    \n    # Snap active objects' keys between times 10 and 20 so that\n    # they have times that are multiples of 0.5.\n    #\n    pm.snapKey( t=(10,20), tm=0.5 )\n    \n    # Snap active objects' keys between times 10 and 20 so that\n    # they have times that are multiples of 0.5 and values that\n    # are multiples of 1.0.\n    #\n    pm.snapKey( t=(10,20), tm=0.5, vm=1.0 )", 
    "snapMode": "    \n    \n    import pymel.core as pm\n    \n    # Turn curve snapping on\n    pm.snapMode( curve=True )\n    \n    # Returns true if point snapping is on\n    pm.snapMode( q=True, point=True )\n    # Result: False #", 
    "snapTogetherCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create two nurbs spheres, then move them apart\n    pm.sphere(r=3, n='nurbsSphere1')\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.move(5, 0, 0)\n    pm.sphere(r=3, n='nurbsSphere2')\n    # Result: [nt.Transform(u'nurbsSphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.move(-5, 0, 0)\n    \n    # Create a new snap together tool context, set it to move objects only, then switch to it\n    # You can use this tool to snap two spheres together\n    pm.snapTogetherCtx('snapTogetherCtx1', so=False)\n    # Result: u'snapTogetherCtx1' #\n    pm.setToolTo('snapTogetherCtx1')", 
    "snapshot": "    \n    \n    import pymel.core as pm\n    \n    # animate a sphere\n    pm.sphere(n='sphere1')\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.currentTime('0')\n    # Result: 0.0 #\n    pm.setKeyframe('.t')\n    # Result: 3 #\n    pm.currentTime('30')\n    # Result: 30.0 #\n    pm.move(10,0,1)\n    pm.setKeyframe('.t')\n    # Result: 3 #\n    \n    # Evaluate and display \"sphere1\" as it appears\n    # at times 0, 10, 20, and 30.  Modifications to sphere1\n    # will update the copies.\n    #\n    pm.snapshot( 'sphere1', constructionHistory=True, startTime=0, endTime=30, increment=10 )\n    # Result: [nt.GeometryVarGroup(u'snapshot1Group'), nt.MotionTrail(u'snapshot1')] #\n    \n    # Evaluate and display \"sphere1\" as it appears\n    # at times 0, 10, 20, and 30.  Further modifications to sphere1\n    # should have no affect on the copies since constructionHistory is off.\n    #\n    pm.snapshot( 'sphere1', constructionHistory=False, startTime=0, endTime=30, increment=10 )\n    # Result: [nt.GeometryVarGroup(u'snapshotGroup')] #", 
    "snapshotBeadContext": "", 
    "snapshotBeadCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a snapshot bead context that will show in tangents\n    ctx = pm.snapshotBeadCtx(inTangent = True)\n    pm.setToolTo(ctx)", 
    "snapshotModifyKeyCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create an insert key context\n    ctx = pm.snapshotModifyKeyCtx()\n    pm.setToolTo(ctx)", 
    "soft": "    \n    \n    import pymel.core as pm\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.soft( 'nurbsSphere1', c=True )\n    # Result: [u'nurbsSphere1Particle'] #\n    \n    # Creates a sphere named nurbsSphere1 and converts nurbSphere1 into\n    # a soft object.  The particle portion of the soft object will\n    # be parented (with its own transform) under nurbsSphere1.\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.soft( 'nurbsSphere1', d=True )\n    \n    # Same as the previous example, except that the soft command will make\n    # a duplicate of nurbsSphereShape1.  The resulting soft body will be\n    # completely independent of nurbSphere1 and its children.  Input connections\n    # to nurbsSphereShape1 will be duplicated, but not any upstream history\n    # (in other words, just plain \"duplicate\").\n    \n    pm.sphere()\n    pm.soft( 'nurbsSphere1', dh=True )\n    \n    # Same as the previous example, except that upstream history on\n    # nurbsSphereShape1 will be duplicated as well (equivalent to\n    # \"duplicate history\").\n    \n    pm.sphere()\n    pm.soft( 'nurbSphere1', g=0.3 )\n    \n    # This will make a duplicate of the shape under nurbSphere1 (as for -d),\n    # and  use it as the shape for the newly created soft object.\n    # The original nurbsSphereShape1 will be made a goal for the particles of\n    # softy, with a goal weight of 0.3.  This will make those particles try to\n    # follow nurbSphere1 loosely as it moves around.\n    \n    pm.soft( 'foobar', q=True )\n    # Returns true if foobar is a soft object.\n    \n    pm.soft( 'foobar', 'foobarParticles', q=True )\n    \n    # Returns true if foobar and foobarParticles are parts of the same\n    # soft object.  This is useful because when you select a soft body,\n    # both the overall transform and the particle transform get put into\n    # the selection list.", 
    "softMod": "    \n    \n    import pymel.core as pm\n    \n    # Create a softMod which uses the transformation of elbow1\n    #\n    pm.joint(p=(2,0,0),name=\"elbow1\")\n    # Result: nt.Joint(u'elbow1') #\n    pm.joint(p=(4,0,0),name=\"wrist1\")\n    # Result: nt.Joint(u'wrist1') #\n    \n    pm.sphere()\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.softMod( wn=('elbow1', 'elbow1') )\n    # Result: [nt.SoftMod(u'softMod1'), nt.Joint(u'elbow1')] #\n    \n    # Edit softMod1 to use the transformation of wrist1.\n    #\n    pm.softMod( 'softMod1', e=True, wn=('wrist1', 'wrist1') )\n    \n    # Create a relative softMod with its own softMod handle. The\n    # softMod handle is drawn as the letter \"S\".\n    #\n    pm.polyCube();\n    pm.softMod( rel=True )\n    # Result: [nt.SoftMod(u'softMod2'), nt.Transform(u'softMod2Handle')] #\n    \n    # Modify the membership of an existing softMod. First, find\n    # the name of the softMod's associated set, then use the sets\n    # command to edit the set membership (add a cube and remove a plane).\n    #\n    pm.listConnections( 'softMod1', type='objectSet' )\n    # Result: [nt.ObjectSet(u'softMod1Set')] #\n    pm.sets( 'pCube2', add='softMod1Set' )\n    pm.sets( 'pCube1', rm='softMod1Set' )", 
    "softModContext": "", 
    "softModCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.softModCtx()\n    # Result: u'softModCtx1' #", 
    "softSelect": "    \n    \n    import pymel.core as pm\n    \n    # Enable soft selection\n    pm.softSelect(sse=1)\n    \n    # Setup global soft select with radius and curve\n    pm.softSelect(sse=1,ssd=2.0,ssc='0,1,2,1,0,2',ssf=2)", 
    "softSelectOptionsCtx": "", 
    "sound": "    \n    \n    import pymel.core as pm\n    \n    # Create an audio node for a sound file, and have it\n    # start at time 10.  This command will return the name\n    # of the created node, something like \"audio1\".\n    #\n    pm.sound( offset=10, file='ohNo.aiff' )\n    \n    # In order to have this sound displayed in a\n    # timeControl widget (like the timeSlider) use a\n    # command like this one, where the global MEL variable\n    # $gPlayBackSlider is the name of the widget to display\n    # the sound in.\n    #\n    import maya.mel\n    gPlayBackSlider = maya.mel.eval( '$tmpVar=$gPlayBackSlider' )\n    pm.timeControl( gPlayBackSlider, edit=True, sound='audio1' )", 
    "soundControl": "    \n    \n    import pymel.core as pm\n    \n    # To display sound in a soundControl, there must first be a sound\n    # node in the scene. We'll create one and give it the name \"ohNo\".\n    # Note that the argument to the -file flag must be a path to a valid\n    # soundfile.\n    #\n    pm.sound( file='ohNo.aiff', name='ohNo' )\n    \n    # Create a sound control (named \"soundScrubber\")\n    # and have it display the sound associated with audio node \"ohNo\".\n    #\n    pm.window()\n    pm.frameLayout( lv=False )\n    pm.soundControl( 'soundScrubber', width=600, height=45, sound='ohNo', displaySound=True, waveform='both' )\n    pm.showWindow()\n    \n    # Now setup \"soundScrubber\" to actually scrub with\n    # mouse drags.\n    #\n    pressCmd = \"soundControl -e -beginScrub soundScrubber\"\n    releaseCmd = \"soundControl -e -endScrub soundScrubber\"\n    pm.soundControl( 'soundScrubber', e=True, pc=pm.soundControl('soundScrubber',e=True,beginScrub=True, rc=pm.sound('soundScrubber',e=True,endScrub=True)))", 
    "spBirailCtx": "", 
    "spaceLocator": "    \n    \n    import pymel.core as pm\n    \n    # Creates a space locator at (1, 1, 1).\n    pm.spaceLocator( p=(1, 1, 1) )\n    # Result: nt.Transform(u'locator1') #\n    # Creates a space locator at (1, 1, 1) in inches.\n    pm.spaceLocator( p=('1in', '1in', '1in') )\n    # Result: nt.Transform(u'locator2') #\n    # Creates a space locator at the default position (0, 0, 0).\n    pm.spaceLocator()\n    # Result: nt.Transform(u'locator3') #", 
    "sphere": "    \n    \n    import pymel.core as pm\n    \n    # Create sphere with radius 10\n    pm.sphere( r=10 )\n    # Result: [nt.Transform(u'nurbsSphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # Query the radius of the new sphere\n    r = pm.sphere( 'nurbsSphere1', q=True, r=True )\n    \n    # Create half sphere\n    pm.sphere( ssw=0, esw=180 )\n    # Result: [nt.Transform(u'nurbsSphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    \n    # Use tolerance to determine how many spans the new sphere has\n    pm.sphere( ut=True, tol=0.01 )\n    # Result: [nt.Transform(u'nurbsSphere3'), nt.MakeNurbSphere(u'makeNurbSphere3')] #\n    \n    # Use sections to determine how many spans the new sphere has\n    pm.sphere( ut=False, s=8 )\n    # Result: [nt.Transform(u'nurbsSphere4'), nt.MakeNurbSphere(u'makeNurbSphere4')] #", 
    "spotLight": "    \n    \n    import pymel.core as pm\n    \n    # Create a spot light\n    light = pm.spotLight(coneAngle=45)\n    \n    # Change the cone angle value\n    pm.spotLight( light, e=True, coneAngle=33 )\n    \n    # Query it\n    pm.spotLight( light, q=True, coneAngle=True )\n    # Result: 33.0 #\n    # Result:33#", 
    "spotLightPreviewPort": "    \n    \n    import pymel.core as pm\n    \n    light = pm.spotLight()\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout('r')\n    # Result: ui.ColumnLayout('window1|r') #\n    pm.spotLightPreviewPort('slPP', widthHeight=(256, 256), spotLight=light)\n    # Result: u'window1|r|slPP' #\n    pm.showWindow()", 
    "spreadSheetEditor": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window( widthHeight=(400, 300) )\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout17') #\n    activeList = pm.selectionConnection( activeList=True )\n    pm.spreadSheetEditor( mainListConnection=activeList )\n    # Result: u'spreadSheetEditor1' #\n    pm.showWindow( window )", 
    "spring": "    \n    \n    import pymel.core as pm\n    \n    pm.spring( 'particle1', s=1.5, d=.3, mnd=0, mxd=5, n='spring1' )\n    # Creates a spring object named spring1 with a strength of 1.5 and a\n    # damping factor of 0.3 containing a spring between every pair of points in\n    # particle1 that are within 0.0 and 5.0 units apart (except those already\n    # connected by a spring).\n    \n    pm.spring( 'particle1', 'spring1', add=True, mnd=0, mxd=5 )\n    # Creates between every pair of points in particle1 that are within 0.0\n    # and 5.0 units apart (except those already connected by a spring), and adds\n    # them to the existing spring object spring1.\n    \n    pm.spring( 'particle1', 'spring1', add=True, mnd=0, mxd=5, ce='false' )\n    # Same as the previous example, but will not check for existing springs\n    # in order to avoid duplication, and will create a new spring even between\n    # pairs of particles which already have one.\n    \n    pm.spring( 'particle1', 'particle2', exclusive=1, all=1 )\n    # Creates a spring between every pair of particles such that one\n    # particle is in particle1 and the other is in particle2.  Does not create\n    # any springs between pairs in the same object.  Does not create springs\n    # between particles already connected by a spring.", 
    "squareSurface": "    \n    \n    import pymel.core as pm\n    \n    # Creating square surfaces with three curves and fixed continuity type:\n    \n    crv1 = pm.curve( d=3, p=( (8, 0, 3), (5, 0, 3), (2, 0, 2), (0, 0, 0)) )\n    crv2 = pm.curve( d=3, p=( (8, 0, -4), (5, 0, -3), (2, 0, -2), (0, 0, 0)) )\n    crv3 = pm.curve( d=3, p=( (8, 0, 3), (9, 3, 2), (11, 3, 1), (8, 0, -4)) )\n    \n    # These curves form a rough triangle shape pointing at the origin.\n    \n    pm.squareSurface( crv3, crv1, crv2, ct1=1, ct2=1, ct3=1 )\n    # Result: [u'squareSurface1', u'squareSrf1'] #\n    \n    # Creating square surfaces with four curves, tangent continuity\n    # type and to use 6 points per span in checking the continuity:\n    \n    crv1 = pm.curve( d=3, p=( (-2, 0, 4), (-2, 0, 5), (1, 0, 3), (3, 0, 4), (6, 0, 5) ) )\n    crv2 = pm.curve( d=3, p=( (6, 0, 5), (8, 0, 2), (8, 0, -3), (7, 0, -4 ) ) )\n    crv3 = pm.curve( d=3, p=( (7, 0, -4), (2, 0, -3), (-1, 0, -5), (-2, 0, -4) ) )\n    crv4 = pm.curve( d=3, p=( (-2, 0, 4), (-4, 0, 1), (-4, 0, -3), (-2, 0, -4) ) )\n    \n    # These curves form a rough square shape around the origin.\n    \n    pm.squareSurface( crv1, crv2, crv3, crv4, cfc=6, ct1=2, ct2=2, ct3=2, ct4=2 )\n    # Result: [u'squareSurface2', u'squareSrf2'] #", 
    "srtContext": "    \n    \n    import pymel.core as pm\n    \n    # To see if an srtContext named \"Transform\" exists:\n    pm.srtContext( 'Transform', q=True, exists=True )\n    # Result: True #", 
    "stackTrace": "", 
    "stitchSurface": "    \n    \n    import pymel.core as pm\n    \n    # Stitch the two surfaces along the two specified surface isoparam with C0 continuity.\n    # Since wt0 = 0.0, both the surfaces are stitched to surface2.vn[0] really.\n    pm.stitchSurface( 'surface1.vn[1.0]', 'surface2.vn[0.0]', kg0=False, kg1=True, cascade=False, ns=100, wt0=0.0, wt1=1.0 )", 
    "stitchSurfaceCtx": "", 
    "stitchSurfacePoints": "    \n    \n    import pymel.core as pm\n    \n    # stitch together four corner control vertices to the average of the four corners.\n    pm.stitchSurfacePoints( 'nurbsPlane2.cv[0][0]', 'nurbsPlane1.cv[3][0]', 'nurbsPlane4.cv[0][3]', 'nurbsPlane3.cv[3][3]', ewt=True )\n    \n    # stitch together two edit points to the edit point nurbsPlane2.ep[0][0].\n    pm.stitchSurfacePoints( 'nurbsPlane2.ep[0][0]', 'nurbsPlane1.ep[1][0]', ewt=False )", 
    "stringArrayIntersector": "    \n    \n    import pymel.core as pm\n    \n    # Create an intersector\n    #\n    myIntersector = pm.stringArrayIntersector('stringArrayIntersector')\n    \n    # Intersect some string arrays using the intersector\n    #\n    initialArray = ['Excellent', 'Smithers', 'doh']\n    pm.stringArrayIntersector( myIntersector, edit=True, intersect=initialArray )\n    # Result: u'stringArrayIntersector' #\n    pm.stringArrayIntersector( myIntersector, edit=True, intersect=['Smithers', 'Homer'] )\n    # Result: u'stringArrayIntersector' #\n    \n    # Query the intersector to see what the intersection is so far\n    #\n    pm.stringArrayIntersector( myIntersector, query=True )\n    # Result: [u'Smithers'] #\n    \n    # Reset the intersector so that you can use it again with new string\n    # arrays\n    #\n    pm.stringArrayIntersector( myIntersector, edit=True, reset=True )\n    # Result: u'stringArrayIntersector' #\n    \n    # Delete the intersector as we are now done with it\n    #\n    pm.deleteUI( myIntersector )\n    # Result: u'' #", 
    "stroke": "    \n    \n    import pymel.core as pm\n    \n    pm.stroke( s=10, n='armScar' )\n    # Result: nt.Transform(u'armScar') #", 
    "subdAutoProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a subd sphere with default UVs.\n    mel.eval( \"createSubdSphereProc\" )\n    \n    # Automatic projections with 6 planes.\n    pm.subdAutoProjection( 'subdivSphere1.smf[*][*]' )", 
    "subdCleanTopology": "    \n    \n    import pymel.core as pm\n    \n    # To clean topology of two subdiv surfaces.\n    pm.subdCleanTopology( 'surface', 'surface2' )", 
    "subdCollapse": "    \n    \n    import pymel.core as pm\n    \n    # To create a new subd surface whose level 0 (base mesh) matches\n    # the level 3 vertices of the given surface.\n    pm.subdCollapse( 'subdivShape1', level=3 )", 
    "subdDisplayMode": "", 
    "subdDuplicateAndConnect": "    \n    \n    import pymel.core as pm\n    \n    pm.subdDuplicateAndConnect( 'pSubd1' )", 
    "subdEditUV": "    \n    \n    import pymel.core as pm\n    \n    # To tweak the u and v values of selected uvs:\n    pm.subdEditUV( relative=True, uValue=0.05925926, vValue=0.05555556 )\n    # To set absolute values for u and v values of selected uvs:\n    pm.subdEditUV( relative=False, uValue=0.556, vValue=0.56 )\n    # To rotate selected uv points about a pivot:\n    pm.subdEditUV( pivotU=0.5, pivotV=0.5, angle=-15 )\n    # To scale selected uv points about a pivot:\n    pm.subdEditUV( pivotU=0.5, pivotV=0.5, scaleU=-0.06, scaleV=-0.06 )", 
    "subdLayoutUV": "    \n    \n    import pymel.core as pm\n    \n    # Create a cube\n    mel.eval( \"createSubdCubeProc\" )\n    \n    # Layout all UVs in the texture plane.\n    pm.subdLayoutUV( 'subdivCube1.smf[*][*]', l=2, fr=True, se=2, sc=1 )", 
    "subdListComponentConversion": "    \n    \n    import pymel.core as pm\n    \n    pm.subdListComponentConversion( 'subdShape.smp[5][6]', 'subdShape.smp[9][10]', fv=True, tf=True )\n    # Returns a list of faces that are connected to the given vertices.\n    \n    pm.subdListComponentConversion( 'subdShape.sme[0][0]', 'subdShape.smp[3][0]', 'subdShape.smp[8][0]', tf=True )\n    # Returns a list of faces that are connected to the given components.\n    \n    pm.subdListComponentConversion( 'subdShape.smp[5][9]', fv=True, tf=True, in=True )\n    # Returns a list of only those faces that are completely contained\n    # by the given vertices.\n    \n    pm.select( 'subdShape.smp[0][0]', 'subdShape.smp[3][0]', 'subdShape.smp[8][0]', r=True )\n    pm.subdListComponentConversion( fv=True, tf=True )\n    # Returns the conversion of selected vertices to faces.\n    \n    pm.subdListComponentConversion( 'subdShape.smm[3]', fuv=True, tuv=True, uvs=True )\n    # Returns a list of all uv map components in the\n    # same UV shell (contiguous region in texture space).\n    # (You can view these regions in the UV Texture Editor.)\n    \n    pm.subdListComponentConversion( 'subdShape.smm[3]', fuv=True, tuv=True, uvb=True )\n    # Returns a list of the uv map components on the border of the\n    # same UV shell (contiguous region in texture space).  (You can\n    # view these regions in the UV Texture Editor.)", 
    "subdMapCut": "    \n    \n    import pymel.core as pm\n    \n    # Opening up the textureView will make this example much easier to visualize.\n    \n    # Create a cube\n    mel.eval( \"createSubdCube\" )\n    \n    # Cut the map.\n    pm.subdMapCut( 'subdivCube1.sme[2560][2]', 'subdivCube1.sme[2816][2]' )\n    # Result: [nt.SubdMapCut(u'subdMapCut1')] #\n    # now that it's cut, we may move the row separately\n    \n    # Move some UVs\n    pm.subdEditUV( 'subdivCube1.smm[21:22]', 'subdivCube1.smm[25]', u=0, v=0.05 )", 
    "subdMapSewMove": "    \n    \n    import pymel.core as pm\n    \n    # Create a subd sphere with default UVs.\n    import maya.mel as mel\n    mel.eval( \"createSubdSphere\" )\n    \n    # Automatic projections with 6 planes.\n    pm.subdAutoProjection( 'subdivSphere1.smf[*][*]' )\n    # Result: [u'subdAutoProj1'] #\n    \n    # Select the seams\n    pm.select( 'subdivSphere1.sme[0:1][67108864]', 'subdivSphere1.sme[256][67108867]', 'subdivSphere1.sme[513][67108864]' )\n    \n    # merge them, with the appropriate move.\n    pm.subdMapSewMove()\n    # Result: [nt.SubdMapSewMove(u'subdMapSewMove1')] #", 
    "subdMatchTopology": "    \n    \n    import pymel.core as pm\n    \n    # To match topology across two subdiv surfaces.\n    pm.subdMatchTopology( 'surface', 'surface2' )", 
    "subdMirror": "    \n    \n    import pymel.core as pm\n    \n    # To create a new subd surface mirrored in the X direction.\n    pm.subdMirror( 'subdivShape1', xMirror=True )", 
    "subdPlanarProjection": "    \n    \n    import pymel.core as pm\n    \n    # Create a cube\n    mel.eval( \"createSubdCubeProc\" )\n    \n    # Layout all UVs in the texture plane.\n    pm.subdPlanarProjection( 'subdivCube1.smf[*][*]',  rx=90, ra=45.0, pc= (0, 0, 0), imageScale=(0.5, 0.5))\n    # Result: [u'subdPlanarProj1'] #", 
    "subdToBlind": "    \n    \n    import pymel.core as pm\n    \n    pm.subdToBlind( 'subdShape1', 'polyShape4' )", 
    "subdToNurbs": "", 
    "subdToPoly": "    \n    \n    import pymel.core as pm\n    \n    # To create a new polygon from a subdivision surface:\n    pm.subdToPoly( 'subd1' )", 
    "subdTransferUVsToCache": "    \n    \n    import pymel.core as pm\n    \n    pm.subdTransferUVsToCache( 'subdShape1', 'polyShape4' )", 
    "subdiv": "    \n    \n    import pymel.core as pm\n    \n    # To find the deepest subdivided level of polyToSubdShape1\n    #\n    pm.subdiv( 'polyToSubdShape1', query=True, deepestLevel=True )\n    # To find the level of the  selected subdiv CV\n    #\n    pm.select( 'polyToSubdShape1.smp[2][67108865]', r=True)\n    pm.subdiv( currentLevel=True )\n    1", 
    "subdivCrease": "    \n    \n    import pymel.core as pm\n    \n    # after selecting components of a subdivision surface\n    pm.subdivCrease()", 
    "subdivDisplaySmoothness": "    \n    \n    import pymel.core as pm\n    \n    pm.subdivDisplaySmoothness( s=0 )# Set smoothness to hull for selected subdivs\n    pm.subdivDisplaySmoothness( s=1 )# Set smoothness to rough for selected subdivs\n    pm.subdivDisplaySmoothness( s=2 )# Set smoothness to medium for selected subdivs\n    pm.subdivDisplaySmoothness( s=3 )# Set smoothness to fine for selected subdivs\n    pm.subdivDisplaySmoothness( s=1, all=True )# Set smoothness to rough for all subdivs\n    pm.subdivDisplaySmoothness( query=True )# Query display smoothness for selected subdivs", 
    "subgraph": "", 
    "substituteGeometry": "    \n    \n    import pymel.core as pm\n    \n    # substitute the smooth skinned outPutGeom with newInputShape.\n    #\n    pm.substituteGeometry( 'outPutGeom', 'newInputShape' )", 
    "suitePrefs": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    \n    # Check if Maya is part of a Suites install\n    isSuiteInstall = pm.suitePrefs(q=True, installedAsSuite=True)\n    if isSuiteInstall:\n    #   Check whether Maya mouse and keyboard interaction\n    #   has been applied to the Suite.\n        applyMayaToSuite = pm.suitePrefs(q=True, applyToSuite=True)\n        if applyMayaToSuite:\n    #       Apply Maya mouse and keyboard interaction to\n    #       the Suite.\n            pm.suitePrefs(applyToSuite=True)", 
    "superCtx": "", 
    "surface": "    \n    \n    import pymel.core as pm\n    \n    # This following command produces a flat, rectangular surface that is degree 3\n    # in both directions.  This means that there must be at least 4 x 4\n    # points to define the surface, since 4 is the (degree + 1).  There\n    # must be 6 knots in each direction, because the knot vector must\n    # be (number of points + degree - 1), ie. (4 points + degree 3 - 1).\n    # The CVs are specified in rows of U and columns of V, as you\n    # would read a book from left to right, up to down. ie. in this order:\n    # surface.cv[0][0] surface.cv[0][1] surface.cv[0][2] surface.cv[0][3]\n    # surface.cv[1][0] surface.cv[1][1] surface.cv[1][2] surface.cv[1][3]\n    # surface.cv[2][0] surface.cv[2][1] surface.cv[2][2] surface.cv[2][3]\n    # surface.cv[3][0] surface.cv[3][1] surface.cv[3][2] surface.cv[3][3]\n    \n    pm.surface( du=3, dv=3, ku=(0, 0, 0, 1, 1, 1), kv=(0, 0, 0, 1, 1, 1), p=((-0.5, 0, 0.5), (-0.5, 0, 0.16), (-0.5, 0, -0.16), (-0.5, 0, -0.5), (-0.16, 0, 0.5), (-0.16, 0, 0.16), (-0.16, 0, -0.16), (-0.16, 0, -0.5), (0.16, 0, 0.5), (0.16, 0, 0.16), (0.16, 0, -0.16), (0.16, 0, -0.5), (0.5, 0, 0.5), (0.5, 0, 0.16), (0.5, 0, -0.16), (0.1, 0, -0.1)) )\n    # Result: nt.NurbsSurface(u'surfaceShape1') #\n    \n    # This following command produces a surface that is degree 3 and periodic in\n    # the U direction, and degree 1 in the V direction.  Notice that\n    # the first 3 pairs of points match the last 3 pairs of\n    # points, which is required for a degree 3 periodic surface.\n    \n    pm.surface( du=3, dv=1, fu='periodic', fv='open', ku=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), kv=(0, 1), pw=((4, -4, 0, 1), (4, -4, -2.5, 1), (5.5, 0, 0, 1), (5.5, 0, -2.5, 1), (4, 4, 0, 1), (4, 4, -2.5, 1), (0, 5.5, 0, 1), (0, 5.5, -2.5, 1), (-4, 4, 0, 1), (-4, 4, -2.5, 1), (-5.5, 0, 0, 1), (-5.5, 0, -2.5, 1), (-4, -4, 0, 1), (-4, -4, -2.5, 1), (0, -5.5, 0, 1), (0, -5.5, -2.5, 1), (4, -4, 0, 1), (4, -4, -2.5, 1), (5.5, 0, 0, 1), (5.5, 0, -2.5, 1), (4, 4, 0, 1), (4, 4, -2.5, 1)) )\n    # Result: nt.NurbsSurface(u'surfaceShape2') #\n    \n    # This following command produces a surface that is degree 5 in both directions.\n    \n    pm.surface( du=5, dv=5, fu='open', fv='open', p=((-7, 0, 1), (-6, 0, 4), (-3, 0, 6), (0, 0, 7), (4, 0, 5), (6, 0, 3), (-7, 2, 1), (-6, 2, 4), (-3, 2, 7), (0, 2, 8), (4, 2, 5), (6, 2, 3), (-7, 3, 1), (-6, 3, 4), (-3, 3, 8), (0, 3, 9), (4, 3, 5), (6, 3, 3), (-7, 4, 1), (-6, 4, 4), (-3, 4, 9), (0, 4, 8), (4, 4, 5), (6, 4, 3), (-7, 5, 1), (-6, 5, 4), (-3, 5, 8), (0, 5, 7.5), (4, 5, 5), (6, 5, 3), (-7, 6, 1), (-6, 6, 4), (-3, 6, 6), (0, 6, 7), (4, 6, 5), (6, 6, 3)), ku=(0, 0, 0, 0, 0, 1, 1, 1, 1, 1), kv=(0, 0, 0, 0, 0, 1, 1, 1, 1, 1) )\n    # Result: nt.NurbsSurface(u'surfaceShape3') #\n    \n    \n    # How to query surface properties:\n    \n    pm.getAttr( 'surface1.degreeU' )\n    # Result: 3 #\n    # Returns an integer that is the surface degree in U\n    \n    pm.getAttr( 'surface1.degreeV' )\n    # Result: 3 #\n    # Returns an integer that is the surface degree in V\n    \n    pm.getAttr( 'surface1.spansU' )\n    # Result: 1 #\n    # Returns an integer that is the # spans in U\n    \n    pm.getAttr( 'surface1.spansV' )\n    # Result: 1 #\n    # Returns an integer that is the # spans in V\n    \n    pm.getAttr( 'surface1.formU' )\n    # Result: 0 #\n    # Return 0 = open, 1 = closed, 2 = periodic\n    \n    pm.getAttr( 'surface1.formV' )\n    # Result: 0 #\n    # Returns 0 = open, 1 = closed, 2 = periodic\n    \n    pm.getAttr( 'surface1.minValueU' )\n    # Result: 0.0 #\n    pm.getAttr( 'surface1.maxValueU' )\n    # Result: 1.0 #\n    pm.getAttr( 'surface1.minValueV' )\n    # Result: 0.0 #\n    pm.getAttr( 'surface1.maxValueV' )\n    # Result: 1.0 #\n    # These return the minimum and maximum parameter ranges in each direction.\n    \n    pm.getAttr( 'surface1.cv[0][0]' )\n    # Result: dt.Vector([-0.5, 0.0, 0.5]) #\n    # Returns the position of a CV of surface1 in local space.  If the\n    # surface is a result of construction history, use a surface info\n    # node instead to get the CV position.\n    \n    pm.getAttr( 'surface1.cv[*][0]' )\n    # Result: (-0.5, 0.0, 0.5) #\n    # Returns the positions of a row of CVs of surface1 in local space.\n    # If the surface is a result of construction history, use a surface info\n    # node instead to get the CV positions.\n    \n    pm.createNode( 'surfaceInfo' )\n    # Result: nt.SurfaceInfo(u'surfaceInfo1') #\n    pm.connectAttr( 'surfaceShape1.worldSpace', 'surfaceInfo1.inputSurface', f=True )\n    pm.getAttr( 'surfaceInfo1.controlPoints[*]' )\n    # Result: (-0.5, 0.0, 0.5) #\n    # Returns the surface CVs in world space.   A surface info node can\n    # also be used to query the surface knot vectors.", 
    "surfaceSampler": "    \n    \n    import pymel.core as pm\n    \n    # Generate an object space normal map of a cube onto a sphere called test.dds\n    pm.surfaceSampler( mapOutput='normal', filename='C:/test', fileFormat='dds', source='pCube1', target='pSphere1', uv='map1' )", 
    "surfaceShaderList": "    \n    \n    import pymel.core as pm\n    \n    # Create a NURBS plane.\n    pm.nurbsPlane( d=3, p=(0, 0, 0), lr=1, axis=(0, 0, 0), n='plane1' )\n    # Result: [nt.Transform(u'plane1'), nt.MakeNurbPlane(u'makeNurbPlane1')] #\n    \n    # Make it red.\n    pm.sets( name='redMaterialGroup', renderable=True, empty=True )\n    # Result: nt.ShadingEngine(u'redMaterialGroup') #\n    pm.shadingNode( 'phong', name='redShader', asShader=True )\n    # Result: nt.Phong(u'redShader') #\n    pm.setAttr( 'redShader.color', 1, 0, 0, type='double3' )\n    pm.surfaceShaderList( 'redShader', add='redMaterialGroup' )\n    # Result: u'' #\n    pm.sets( 'plane1', e=True, forceElement='redMaterialGroup' )", 
    "swatchDisplayPort": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout('r')\n    # Result: ui.ColumnLayout('window1|r') #\n    myShader = pm.shadingNode('anisotropic', asShader=True)\n    pm.swatchDisplayPort('slPP', wh=(256, 256), sn=myShader)\n    # Result: u'window1|r|slPP' #\n    pm.showWindow()", 
    "swatchRefresh": "    \n    \n    import pymel.core as pm\n    \n    # Refresh the swatch for the layer1 node\n    pm.swatchRefresh('layer1')", 
    "switchTable": "    \n    \n    import pymel.core as pm\n    \n    pm.window(width=200)\n    # Result: ui.Window('window1') #\n    pm.formLayout('theForm')\n    # Result: ui.FormLayout('window1|theForm') #\n    pm.switchTable('theSwitch')\n    # Result: u'window1|theForm|theSwitch' #\n    pm.formLayout('theForm', e=True,\n                    af=(('theSwitch', 'top', 0),\n                        ('theSwitch', 'left', 0),\n                        ('theSwitch', 'bottom', 0),\n                        ('theSwitch', 'right', 0)))\n    pm.showWindow()", 
    "symbolButton": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout84') #\n    pm.symbolButton( image='circle.png' )\n    # Result: ui.SymbolButton('window1|columnLayout84|symbolButton20') #\n    pm.symbolButton( image='sphere.png' )\n    # Result: ui.SymbolButton('window1|columnLayout84|symbolButton21') #\n    pm.symbolButton( image='cube.png' )\n    # Result: ui.SymbolButton('window1|columnLayout84|symbolButton22') #\n    pm.showWindow()", 
    "symbolCheckBox": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout85') #\n    pm.symbolCheckBox( image='circle.png' )\n    # Result: ui.SymbolCheckBox('window1|columnLayout85|symbolCheckBox2') #\n    pm.symbolCheckBox( image='sphere.png' )\n    # Result: ui.SymbolCheckBox('window1|columnLayout85|symbolCheckBox3') #\n    pm.symbolCheckBox( image='cube.png' )\n    # Result: ui.SymbolCheckBox('window1|columnLayout85|symbolCheckBox4') #\n    pm.showWindow()", 
    "symmetricModelling": "    \n    \n    import pymel.core as pm\n    \n    # What is the current reflection setting\n    pm.symmetricModelling(query=True, symmetry=True)\n    # Result: 0 #\n    \n    # What is the current reflection axis\n    pm.symmetricModelling(query=True, axis=True)\n    # Result: u'x' #\n    \n    # Change the space to apply reflection to (object or world)\n    pm.symmetricModelling(about='world')\n    \n    # Change the current tolerance to 0.34\n    pm.symmetricModelling(tolerance=0.34)", 
    "sysFile": "    \n    \n    import pymel.core as pm\n    \n    # Create a new directory path\n    pm.sysFile( 'C:/temp/mayaStuff', makeDir=True )# Windows\n    # Result: False #\n    pm.sysFile( '/tmp/mayaStuff', makeDir=True )# Unix\n    # Result: True #\n    \n    # Move a scene to the new directory (we can rename it at the same time).\n    pm.sysFile( 'C:/maya/projects/default/scenes/myScene.mb', rename='C:/temp/mayaStuff/myScene.mb.trash' )# Windows\n    # Result: False #\n    pm.sysFile( '/maya/projects/default/scenes/myScene.mb', rename='/tmp/mayaStuff/myScene.mb.trash' )# Unix\n    # Result: False #\n    \n    \n    # Rename the scene to \"myScene.will.be.deleted\"\n    pm.sysFile( 'C:/temp/mayaStuff/myScene.mb.trash', rename='C:/temp/mayaStuff/myScene.will.be.deleted' )# Windows\n    # Result: False #\n    pm.sysFile( '/tmp/mayaStuff/myScene.mb.trash', rename='/tmp/mayaStuff/myScene.will.be.deleted' )# Unix\n    # Result: False #\n    \n    # Copy a scene to the new directory\n    destWindows = \"C:/temp/mayaStuff/myScene.mb.trash\"\n    srcWindows = \"C:/maya/projects/default/scenes/myScene.mb\"\n    pm.sysFile( srcWindows, copy=destWindows )# Windows\n    # Result: False #\n    \n    destUnix = \"/tmp/mayaStuff/myScene.mb.trash\"\n    srcUnix = \"maya/projects/default/scenes/myScene.mb\"\n    pm.sysFile( srcUnix, copy=destUnix )# Unix\n    # Result: False #\n    \n    # Delete the scene\n    pm.sysFile( 'C:/temp/mayaStuff/myScene.will.be.deleted', delete=True )# Windows\n    # Result: False #\n    pm.sysFile( '/tmp/mayaStuff/myScene.will.be.deleted', delete=True )# Unix\n    # Result: False #", 
    "tabLayout": "    \n    \n    import pymel.core as pm\n    \n    pm.window( widthHeight=(200, 150) )\n    # Result: ui.Window('window1') #\n    form = pm.formLayout()\n    tabs = pm.tabLayout(innerMarginWidth=5, innerMarginHeight=5)\n    pm.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)) )\n    # Result: ui.FormLayout('window1|formLayout79') #\n    \n    child1 = pm.rowColumnLayout(numberOfColumns=2)\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout6|button96') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout6|button97') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout6|button98') #\n    pm.setParent( '..' )\n    # Result: u'window1|formLayout79|tabLayout7' #\n    \n    child2 = pm.rowColumnLayout(numberOfColumns=2)\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout7|button99') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout7|button100') #\n    pm.button()\n    # Result: ui.Button('window1|formLayout79|tabLayout7|rowColumnLayout7|button101') #\n    pm.setParent( '..' )\n    # Result: u'window1|formLayout79|tabLayout7' #\n    \n    pm.tabLayout( tabs, edit=True, tabLabel=((child1, 'One'), (child2, 'Two')) )\n    # Result: ui.TabLayout('window1|formLayout79|tabLayout7') #\n    \n    pm.showWindow()", 
    "tangentConstraint": "    \n    \n    import pymel.core as pm\n    \n    # orients the aim vector of cube1 in it's local coordinate space,\n    # to the tangent vector of curve1 at the closest point to  cube1.\n    pm.tangentConstraint( 'curve1', 'cube1' )\n    \n    # uses the average of the tangents from curve1 and curve2.\n    pm.tangentConstraint( 'curve1', 'curve2', 'cube2', w=.1 )\n    \n    # sets the weight for curve1's effect on cube2 to 10.\n    pm.tangentConstraint( 'curve1', 'cube2', e=True, w=10. )\n    \n    # removes curve2 from cube2's tangentConstraint\n    pm.tangentConstraint( 'curve2', 'cube2', e=True, rm=True )\n    \n    # adds curve3 to cube2's tangent constraint with the default weight\n    pm.tangentConstraint( 'curve3', 'cube2' )", 
    "targetWeldCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new target weld context:\n    pm.targetWeldCtx()\n    # Result: u'targetWeldCtx1' #\n    \n    # To query if it is set to merge to the center:\n    pm.targetWeldCtx('targetWeldCtx1', q=True, mergeToCenter=True )\n    # Result: 0 #\n    \n    # To set it to merge at the target:\n    pm.targetWeldCtx('targetWeldCtx1', e=True, mergeToCenter=False )\n    # Result: u'targetWeldCtx1' #", 
    "testPa": "", 
    "testPassContribution": "", 
    "texLatticeDeformContext": "    \n    \n    import pymel.core as pm\n    \n    # Create a lattice manipulator with 4 x 4 lattice.\n    #\n    pm.texLatticeDeformContext( 'latticeContext', latticeColumns=4, latticeRows=4 )\n    # Result: u'latticeContext' #", 
    "texManipContext": "    \n    \n    import pymel.core as pm\n    \n    pm.texManipContext()\n    # Result: u'texManipContext1' #", 
    "texMoveContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new move context:\n    pm.texMoveContext()\n    # Result: u'texMoveContext1' #\n    \n    # To query the position of the manipulator\n    pm.texMoveContext( 'texMoveContext', q=True, position=True )\n    # Result: [] #", 
    "texMoveUVShellContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new move context:\n    pm.texMoveUVShellContext()\n    # Result: u'texMoveUVShellContext1' #\n    \n    # To query the position of the manipulator\n    pm.texMoveUVShellContext( 'texMoveUVShellContext', q=True, position=True )", 
    "texRotateContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new rotate context:\n    pm.texRotateContext()\n    # Result: u'texRotateContext1' #\n    \n    # To query the position of the manipulator\n    pm.texRotateContext( 'texRotateContext', q=True, position=True )\n    # Result: [] #", 
    "texScaleContext": "    \n    \n    import pymel.core as pm\n    \n    # To create a new scale context:\n    pm.texScaleContext()\n    # Result: u'texScaleContext1' #\n    \n    # To query the position of the manipulator\n    pm.texScaleContext( 'texScaleContext', q=True, position=True )\n    # Result: [] #", 
    "texSelectContext": "    \n    \n    import pymel.core as pm\n    \n    pm.texSelectContext()\n    # Result: u'texSelectContext1' #", 
    "texSelectShortestPathCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new poly shortest edge path context:\n    #\n    pm.texSelectShortestPathCtx( 'PolyTexShortestPath' )", 
    "texSmoothContext": "", 
    "texSmudgeUVContext": "    \n    \n    import pymel.core as pm\n    \n    # Create a poly plane\n    pm.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n    # Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')] #\n    \n    # Select all UVs\n    pm.select('pPlane1.map[0:120]', r=True)\n    \n    # Create a new smudge UV tool context, set the effect type to smudge mode, set the radius to 0.1 and pressure to 0.2, then switch to it\n    # In order to use this tool to smudge the UVs of pPlane1, you must open the texture UV editor\n    pm.texSmudgeUVContext('texSmudgeUVContext1', effectType='smudge', r=0.1, prs=0.2)\n    # Result: u'texSmudgeUVContext1' #\n    pm.setToolTo('texSmudgeUVContext1')", 
    "texWinToolCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new texture window tool context, set this tool to dolly in the texture window, then switch to it\n    pm.texWinToolCtx('texWinToolCtx1', do=True)\n    # Result: u'texWinToolCtx1' #\n    pm.setToolTo('texWinToolCtx1')", 
    "text": "    \n    \n    import pymel.core as pm\n    \n    pm.window( width=150 )\n    # Result: ui.Window('window1') #\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout86') #\n    pm.text( label='Default' )\n    # Result: ui.Text('window1|columnLayout86|text17') #\n    pm.text( label='Left', align='left' )\n    # Result: ui.Text('window1|columnLayout86|text18') #\n    pm.text( label='Centre', align='center' )\n    # Result: ui.Text('window1|columnLayout86|text19') #\n    pm.text( label='Right', align='right' )\n    # Result: ui.Text('window1|columnLayout86|text20') #\n    pm.showWindow()", 
    "textCurves": "    \n    \n    import pymel.core as pm\n    \n    # Create curves for text string \"Maya\" in the \"Times-Roman\" font:\n    pm.textCurves( f='Times-Roman', t='Maya' )\n    # Result: [u'Text_Maya_1', u'makeTextCurves1'] #\n    \n    # Create curves for text \"hello world\" in the \"Courier\" font.\n    # The \"-n\" flag specifies the name of the resulting transform\n    # and shape.\n    pm.textCurves( n= 'first', f='Courier', t='hello world' )\n    # Result: [u'firstShape', u'makeTextCurves2'] #", 
    "textField": "    \n    \n    import pymel.core as pm\n    \n    #    Create a window with a some fields for entering text.\n    #\n    window = pm.window()\n    pm.rowColumnLayout( numberOfColumns=2, columnAttach=(1, 'right', 0), columnWidth=[(1, 100), (2, 250)] )\n    # Result: ui.RowColumnLayout('window1|rowColumnLayout8') #\n    pm.text( label='Name' )\n    # Result: ui.Text('window1|rowColumnLayout8|text21') #\n    name = pm.textField()\n    pm.text( label='Address' )\n    # Result: ui.Text('window1|rowColumnLayout8|text22') #\n    address = pm.textField()\n    pm.text( label='Phone Number' )\n    # Result: ui.Text('window1|rowColumnLayout8|text23') #\n    phoneNumber = pm.textField()\n    pm.text( label='Email' )\n    # Result: ui.Text('window1|rowColumnLayout8|text24') #\n    email = pm.textField()\n    \n    #    Attach commands to pass focus to the next field if the Enter\n    #    key is pressed. Hitting just the Return key will keep focus\n    #    in the current field.\n    #\n    pm.textField( name, edit=True, enterCommand=('pm.setFocus(\\\"' + address + '\\\")') )\n    # Result: ui.TextField('window1|rowColumnLayout8|textField4') #\n    pm.textField( address, edit=True, enterCommand=('pm.setFocus(\\\"' + phoneNumber + '\\\")') )\n    # Result: ui.TextField('window1|rowColumnLayout8|textField5') #\n    pm.textField( phoneNumber, edit=True, enterCommand=('pm.setFocus(\\\"' + email + '\\\")') )\n    # Result: ui.TextField('window1|rowColumnLayout8|textField6') #\n    pm.textField( email, edit=True, enterCommand=('pm.setFocus(\\\"' + name + '\\\")') )\n    # Result: ui.TextField('window1|rowColumnLayout8|textField7') #\n    \n    pm.showWindow( window )", 
    "textFieldButtonGrp": "    \n    \n    import pymel.core as pm\n    \n    window = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout87') #\n    pm.textFieldButtonGrp( label='Label', text='Text', buttonLabel='Button' )\n    # Result: ui.TextFieldButtonGrp('window1|columnLayout87|textFieldButtonGrp1') #\n    pm.showWindow( window )", 
    "textFieldGrp": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout88') #\n    pm.textFieldGrp( label='Group 1', text='Editable' )\n    # Result: ui.TextFieldGrp('window1|columnLayout88|textFieldGrp1') #\n    pm.textFieldGrp( label='Group 2', text='Non-editable', editable=False )\n    # Result: ui.TextFieldGrp('window1|columnLayout88|textFieldGrp2') #\n    pm.showWindow()", 
    "textManip": "    \n    \n    import pymel.core as pm\n    \n    # Hide the text manip, then call headsUpMessage to draw a message in the 3d view. You can't see the message now because it's invisible\n    pm.textManip(v=False)\n    pm.headsUpMessage('Ouch!', time=5.0)\n    \n    # Show the text manip\n    pm.textManip(v=True)", 
    "textScrollList": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.paneLayout()\n    # Result: ui.PaneLayout('window1|paneLayout18') #\n    pm.textScrollList( numberOfRows=8, allowMultiSelection=True,\n                            append=['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',\n                                            'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen'],\n                            selectItem='six', showIndexedItem=4 )\n    pm.showWindow()", 
    "textureLassoContext": "", 
    "texturePlacementContext": "    \n    \n    import pymel.core as pm\n    \n    pm.texturePlacementContext()\n    # Result: u'texturePlacementContext1' #", 
    "textureWindow": "    \n    \n    import pymel.core as pm\n    \n    # As a UV Texture Editor typically exists on start-up, you normally\n    # will not need to create one.. Hence all the examples that follow\n    # explain how to query and edit the editor settings.\n    \n    # Get the panel that the editor belongs to.\n    texWinName = pm.getPanel(sty='polyTexturePlacementPanel')\n    \n    # Get the space between main grid lines\n    pm.textureWindow(texWinName[0], q=True, sp=True)\n    # Result: 3.0 #\n    \n    # Change the space between main grid lines\n    pm.textureWindow( texWinName[0], e=True, sp=0.1 )\n    # Result: u'polyTexturePlacementPanel1' #\n    \n    # Get the size of the grid\n    pm.textureWindow( texWinName[0], q=True, s=True )\n    # Result: 12.0 #\n    \n    # Change the size of the grid\n    pm.textureWindow( texWinName[0], e=True, s=0.8 )\n    # Result: u'polyTexturePlacementPanel1' #\n    \n    # Zoom on the whole scene\n    pm.textureWindow( texWinName[0], e=True, fa=True )\n    # Result: u'polyTexturePlacementPanel1' #\n    \n    # Set display mode to related (connected) faces\n    pm.textureWindow(texWinName[0], e=True, rf=True )\n    # Result: u'polyTexturePlacementPanel1' #", 
    "threadCount": "    \n    \n    import pymel.core as pm\n    \n    # sets Maya to use 4 threads for multithreaded evaluation\n    pm.threadCount( n=4 )\n    \n    # sets Maya to use one thread per logical CPU\n    pm.threadCount( n=0 )\n    \n    # query number of threads currently set\n    pm.threadCount( q=True, n=True )\n    # Result: 8 #", 
    "threePointArcCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new context that will create curves of degree 1:\n    pm.threePointArcCtx( \"arcContext\", degree=1 )\n    # Result: u'arcContext' #\n    pm.setToolTo(\"arcContext\")\n    \n    # To query the degree of an existing context:\n    pm.threePointArcCtx( \"arcContext\", q=True, degree=True )\n    # Result: 1 #\n    \n    # To edit the degree of an existing context:\n    pm.threePointArcCtx( \"arcContext\", e=True, degree=3 )\n    # Result: u'arcContext' #", 
    "timeCode": "    \n    \n    import pymel.core as pm\n    \n    # set the production start time to 1 hour, 33 min, 52 seconds, and 23 frames\n    pm.timeCode(productionStartHour=1,productionStartMinute=33,productionStartSecond=52,productionStartFrame=23)\n    # query the production start time\n    #\n    pm.timeCode(query=1,productionStartHour=True)\n    # Result: 1 #\n    // result: 1\n    pm.timeCode(query=1,productionStartMinute=True)\n    // result: 33", 
    "timeControl": "    \n    \n    import pymel.core as pm\n    \n    # To display sound in the time slider, there must first be a sound\n    # node in the scene. We'll create one and give it the name \"ohNo\".\n    # Note that the argument to the -file flag must be a path to a valid\n    # soundfile.\n    #\n    pm.sound( file='C:/My Documents/maya/projects/default/sound/ohNo.aiff', name='ohNo' )\n    \n    \n    # To display sound in the time slider, you must specify\n    # the sound node to display and turn display of sound \"on.\"\n    # First we need to get the name of the playback slider from\n    # the global mel variable called gPlayBackSlider\n    #\n    import maya.mel\n    aPlayBackSliderPython = maya.mel.eval('$tmpVar=$gPlayBackSlider')\n    pm.timeControl( aPlayBackSliderPython, e=True, sound='ohNo', displaySound=True )\n    \n    # To hear sound while scrubbing in the time slider, set the press and\n    # release commands to begin and end sound scrubbing.\n    #\n    pm.timeControl( aPlayBackSliderPython,edit=True,pressCommand='pm.timeControl(aPlayBackSliderPython,edit=True,beginScrub=True)')\n    pm.timeControl( aPlayBackSliderPython,edit=True,releaseCommand='pm.timeControl(aPlayBackSliderPython,edit=True,endScrub=True)')", 
    "timePort": "    \n    \n    import pymel.core as pm\n    \n    # Create a window that has a timePort in it\n    #\n    pm.window( w=500, h=35 )\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout89') #\n    pm.timePort( 'myTimePort' )\n    # Result: u'window1|columnLayout89|myTimePort' #\n    pm.showWindow()\n    \n    # Turn snapping off on the above timePort\n    #\n    pm.timePort( 'myTimePort', e=True, snap=False )\n    # Result: u'myTimePort' #", 
    "timeWarp": "    \n    \n    import pymel.core as pm\n    \n    # Create a time warp on the animation curves driving a cylinder and a sphere,\n    # and specify the warping is to occur at frames 1 and 20.\n    # Note: Time warps are only applied to animated objects.\n    #\n    warp = pm.timeWarp( 'pCylinder1', 'pSphere1',f=[1,20])\n    # Move the first warp to frame 5\n    #\n    pm.timeWarp(warp,e=1,mf=(0,5))\n    # Move the 2nd warp to frame 10\n    #\n    pm.timeWarp(warp,e=1,mf=(1,10))\n    # Modify the interpolation between the 1st and 2nd warp to easeIn\n    #\n    pm.timeWarp(warp,e=1,it=(0,'easeIn'))\n    # query the original frames\n    #\n    pm.timeWarp(warp,q=1,f=1)\n    [1.0, 20.0, 30.0]\n    # query the modified frames\n    #\n    pm.timeWarp(warp,q=1,mf=1)\n    [5.0, 10.0, 30.0]\n    # query the interpolation\n    #\n    pm.timeWarp(warp,q=1,it=1)\n    [u'easeIn', u'linear']", 
    "timer": "    \n    \n    import pymel.core as pm\n    \n    pm.timer( s=True )\n    # Result: u\"Timer 'defaultTimer' started.\" #\n    # code being timed\n    print \"START: time this\"\n    for i in range (0, 50):\n            print (\"time this \"+str(i))\n    print \"END: time this\"\n    pm.timer( e=True )\n    # Result: 0.084618 #\n    # Named timers can be used for nesting\n    pm.timer( s=True, name=\"outerLoop\" )\n    # Result: u\"Timer 'outerLoop' started.\" #\n    print \"START: macro loop timing\"\n    for i in range(0,50):\n            pm.timer( s=True )\n            for j in range(5,50):\n                    newObjs = pm.sphere( spans=j )\n                    pm.delete( newObjs )\n            innerTime = pm.timer( e=True )\n            lapTime = pm.timer( lap=True, name=\"outerLoop\" )\n            print \"\\tInner loop %d = %g\" % (i, innerTime)\n            print \"\\t       SUB = %g\" % lapTime\n    fullTime = pm.timer( e=True, name=\"outerLoop\" )\n    print \"END: Full timing was %g\" % fullTime", 
    "timerX": "    \n    \n    import pymel.core as pm\n    \n    # Example 1: Simple timing\n    #\n    start = pm.timerX()\n    # code that is being timed\n    totalTime = pm.timerX(startTime=start)\n    print \"Total time: \", totalTime\n    \n    # Example 2: Iterative timing\n    #\n    startTime = pm.timerX()\n    for i in range(0,5):\n      elapsedTime = pm.timerX()\n      print \"Elapsed Time: \", elapsedTime\n    \n    # Example 3: Stacked timing calls\n    #\n    startTime1 = pm.timerX()\n    startTime2 = pm.timerX()\n    for i in range(0,5):\n      elapsedTime = pm.timerX()\n      print \"Elapsed Time: \", elapsedTime\n    \n    totalTime = pm.timerX(startTime=startTime1)\n    print \"Total Time: \", totalTime", 
    "toggle": "    \n    \n    import pymel.core as pm\n    \n    surface1 = pm.sphere()\n    pm.toggle( surface1, cv=True )\n    pm.toggle( g=True, cv=True )\n    pm.toggle( q=True, cv=True )\n    # Result: False #\n    # Returns 0 if the queried state is false.\n    # Returns 1 if the queried state is true.", 
    "toggleAxis": "    \n    \n    import pymel.core as pm\n    \n    # Turns origin axis on\n    pm.toggleAxis( o=True )\n    \n    # Turns origin axis off.\n    pm.toggleAxis( o=False )\n    \n    # Returns true if the axis at the origin is on.\n    pm.toggleAxis( q=True, o=True )\n    # Result: False #\n    \n    # Toggles the display of the axis\n    pm.toggleAxis()", 
    "toggleWindowVisibility": "    \n    \n    import pymel.core as pm\n    \n    window1 = pm.window( retain=True )\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout90') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|columnLayout90|checkBox8') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|columnLayout90|checkBox9') #\n    pm.checkBox()\n    # Result: ui.CheckBox('window1|columnLayout90|checkBox10') #\n    pm.button( label='Close', command='pm.window( window1, edit=True, visible=False )' )\n    # Result: ui.Button('window1|columnLayout90|button102') #\n    \n    #    Create another window with a button that will toggle the visibility\n    #    of the first window.\n    #\n    window2 = pm.window()\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window2|columnLayout91') #\n    pm.button( label='Toggle Window Visibility', command=('pm.toggleWindowVisibility(\\\"' + window1 +'\\\")' ) )\n    # Result: ui.Button('window2|columnLayout91|button103') #\n    \n    pm.showWindow( window1 )\n    pm.showWindow( window2 )", 
    "tolerance": "    \n    \n    import pymel.core as pm\n    \n    pm.tolerance( linear=0.02 )# sets the tolerance to 0.02, in the current unit\n    pm.tolerance( linear='0.02cm' )# sets the tolerance to 0.02 cm\n    pm.tolerance( angular='0.02rad' )# sets the angle tolerance to 0.02 radians\n    pm.tolerance( q=True, linear=True )# returns the current tolerance in the current unit\n    # Result: 0.02 #\n    pm.tolerance( q=True, angular=True )# returns the current tolerance in the current unit\n    # Result: 1.1459155902616465 #", 
    "toolBar": "    \n    \n    import pymel.core as pm\n    \n    myWindow = pm.window()\n    buttonForm = pm.formLayout( parent = myWindow )\n    pm.button( parent = buttonForm )\n    # Result: ui.Button('window1|formLayout80|button104') #\n    allowedAreas = ['top', 'bottom']\n    pm.toolBar( area='top', content=myWindow, allowedArea=allowedAreas )\n    # Result: u'MayaWindow|toolBar8' #", 
    "toolButton": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout92') #\n    pm.toolCollection()\n    # Result: ui.ToolCollection('window1|columnLayout92|toolCollection1') #\n    pm.toolButton( tool='selectSuperContext', toolImage1=('selectSuperContext', 'aselect.xpm') )\n    # Result: ui.ToolButton('window1|columnLayout92|toolButton1') #\n    pm.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.xpm') )\n    # Result: ui.ToolButton('window1|columnLayout92|toolButton2') #\n    pm.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\n    # Result: ui.ToolButton('window1|columnLayout92|toolButton3') #\n    pm.showWindow()\n    \n    # example showing how to create tool buttons for artisan tools\n    #\n    # create the contexts\n    selectCtx = pm.artSelectCtx()\n    puttyCtx = pm.artPuttyCtx()\n    setPaintCtx = pm.artSetPaintCtx()\n    \n    pm.window()\n    # Result: ui.Window('window2') #\n    pm.gridLayout()\n    # Result: ui.GridLayout('window2|gridLayout3') #\n    pm.toolCollection()\n    # Result: ui.ToolCollection('window2|gridLayout3|toolCollection2') #\n    # create the tool buttons using the contexts returned\n    pm.toolButton(\n                    amt=True, piv=True,\n                    doubleClickCommand='pm.toolPropertyWindow()',\n                    tool=(selectCtx, puttyCtx, setPaintCtx),\n                    toolImage1=(selectCtx, 'artSelect.xpm'),\n                    toolImage2=(puttyCtx, 'putty.png'),\n                    toolImage3=(setPaintCtx, 'paintSetMembership.png') )\n    pm.showWindow()", 
    "toolCollection": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout93') #\n    pm.toolCollection()\n    # Result: ui.ToolCollection('window1|columnLayout93|toolCollection3') #\n    pm.toolButton( tool='selectSuperContext', toolImage1=('selectSuperContext', 'aselect.xpm') )\n    # Result: ui.ToolButton('window1|columnLayout93|toolButton4') #\n    pm.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.png') )\n    # Result: ui.ToolButton('window1|columnLayout93|toolButton5') #\n    pm.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\n    # Result: ui.ToolButton('window1|columnLayout93|toolButton6') #\n    pm.showWindow()", 
    "toolDropped": "    \n    \n    import pymel.core as pm\n    \n    # Create move tool button and scale tool button in a new window\n    pm.window()\n    # Result: ui.Window('window1') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout94') #\n    pm.toolCollection()\n    # Result: ui.ToolCollection('window1|columnLayout94|toolCollection4') #\n    pm.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.png') )\n    # Result: ui.ToolButton('window1|columnLayout94|toolButton7') #\n    pm.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\n    # Result: ui.ToolButton('window1|columnLayout94|toolButton8') #\n    pm.showWindow()\n    \n    # Drop select tool to the created window\n    pm.toolDropped('selectTool')", 
    "toolHasOptions": "    \n    \n    import pymel.core as pm\n    \n    if pm.toolHasOptions('moveSuperContext'):\n            print 'moveSuperContext tool has options'", 
    "toolPropertyWindow": "    \n    \n    import pymel.core as pm\n    \n    pm.toolPropertyWindow()\n    pictureObject = pm.toolPropertyWindow(q=True, icon=True)", 
    "torus": "    \n    \n    import pymel.core as pm\n    \n    pm.torus()\n    # Result: [nt.Transform(u'nurbsTorus1'), nt.MakeNurbTorus(u'makeNurbTorus1')] #\n    pm.torus( ch=True, radius=10, hr=3 )\n    # Result: [nt.Transform(u'nurbsTorus2'), nt.MakeNurbTorus(u'makeNurbTorus2')] #\n    pm.torus( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg', msw='45deg' )\n    # Result: [nt.Transform(u'nurbsTorus3'), nt.MakeNurbTorus(u'makeNurbTorus3')] #\n    pm.torus( ut=True, tol=0.01 )\n    # Result: [nt.Transform(u'nurbsTorus4'), nt.MakeNurbTorus(u'makeNurbTorus4')] #\n    # query the torus radius\n    r = pm.torus( 'nurbsTorus1', r=True, q=True )", 
    "track": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    \n    pm.track( 'cameraShape1', d=10 )# To track the camera down\n    \n    pm.track( 'cameraShape1', u=-10 )\n    \n    pm.track( u=-10 )", 
    "trackCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.trackCtx( 'trackContext', ac=False, tg=False, ts=1.0 )", 
    "transferAttributes": "    \n    \n    import pymel.core as pm\n    \n    # Transfer all UV and color sets from pCube1 onto pSphere1\n    pm.transferAttributes( 'pCube1', 'pSphere1', transferUVs=2, transferColors=2 )", 
    "transferShadingSets": "    \n    \n    import pymel.core as pm\n    \n    # make a low res sphere with shaders\n    low = pm.polySphere( sx=6, sy=6 )[0]\n    lowShape = pm.listRelatives( low, fullPath=True, shapes=True )[0]\n    redSG = pm.sets( r=True, em=True )\n    redMat = pm.shadingNode( \"lambert\", asShader=True )\n    pm.setAttr( redMat + \".color\", 1, 0, 0, type='double3' )\n    pm.connectAttr( redMat + \".outColor\", redSG + \".surfaceShader\", f=True )\n    greenSG = pm.sets( r=True, em=True )\n    greenMat = pm.shadingNode( \"lambert\", asShader=True )\n    pm.setAttr( greenMat + \".color\", 0, 1, 0, type='double3' )\n    pm.connectAttr( greenMat + \".outColor\", greenSG + \".surfaceShader\", f=True )\n    pm.sets( lowShape + '.f[0:17]', e=True, fe=redSG )\n    pm.sets( lowShape + '.f[18:36]', e=True, fe=greenSG )\n    # make a high res sphere\n    high = pm.polySphere( sx=20, sy=20 )[0]\n    highShape = pm.listRelatives( high, fullPath=True, shapes=True )[0]\n    pm.xform( high, ws=True, t=(2, 0, 0) )\n    # transfer the shading sets\n    pm.select( low, r=True )\n    pm.select( high, tgl=True )\n    pm.transferShadingSets( sampleSpace=1 )", 
    "transformCompare": "    \n    \n    import pymel.core as pm\n    \n    # Create some joints\n    #\n    pm.select( d=True )\n    pm.joint( p=(-3.226531, 0, -4.866136) )\n    # Result: nt.Joint(u'joint1') #\n    pm.joint( p=(2.817897, 0, -4.016915) )\n    # Result: nt.Joint(u'joint2') #\n    pm.joint( 'joint1', e=True, zso=True, oj='xyz', sao='yup' )\n    # Result: nt.Joint(u'joint2') #\n    \n    # Compare 2 different joints, a 1 will be returned\n    #\n    pm.select( 'joint1', 'joint2', r=True )\n    pm.transformCompare()\n    # Result: 1 #\n    \n    # Duplicate joint1 and compare the duplicate\n    #\n    pm.select( 'joint1', r=True )\n    pm.duplicate()\n    # Result: [nt.Joint(u'joint3')] #\n    pm.select( cl=True )\n    pm.select( 'joint1', 'joint3', r=True )\n    pm.transformCompare()\n    # Result: 0 #", 
    "transformLimits": "    \n    \n    import pymel.core as pm\n    \n    # Create an object, e.g.\n    pm.cone()\n    # Result: [nt.Transform(u'nurbsCone1'), nt.MakeNurbCone(u'makeNurbCone1')] #\n    \n    # 1. To set the limits for the translation of the cone to within\n    # a unit volume centered at the origin\n    pm.transformLimits( tx=(-1, 1), ty=(-1, 1), tz=(-1, 1) )\n    \n    # 2. To disable the lower limits\n    pm.transformLimits( etx=(False, True), ety=(False, True), etz=(False, True ) )", 
    "translator": "    \n    \n    import pymel.core as pm\n    \n    # Returns true if dxf files can be read.\n    pm.translator( 'dxf', q=True, rs=True )", 
    "treeLister": "    \n    \n    import pymel.core as pm\n    \n    w = pm.window(width=200)\n    fl = pm.formLayout()\n    tl = pm.treeLister()\n    pm.formLayout(fl, e=True,\n                    af=((tl, 'top', 0),\n                        (tl, 'left', 0),\n                        (tl, 'bottom', 0),\n                        (tl, 'right', 0)))\n    pm.showWindow(w)\n    items=['root/branchone/leafone',\n           'root/branchone/leaftwo',\n           'root/branchtwo/leafthree']\n    pm.treeLister(tl, e=True, add=[(i, 'sphere.png', pm.sphere) for i in items])", 
    "treeView": "    \n    \n    import pymel.core as pm\n    \n    def selectTreeCallBack(*args):\n      print 'selection'\n    \n    def pressTreeCallBack(*args):\n      print 'press'\n    \n    from maya import cmds\n    window = pm.window()\n    layout = pm.formLayout()\n    \n    control = pm.treeView( parent = layout, numberOfButtons = 3, abr = False )\n    \n    pm.formLayout(layout,e=True, attachForm=(control,'top', 2))\n    # Result: ui.FormLayout('window1|formLayout82') #\n    pm.formLayout(layout,e=True, attachForm=(control,'left', 2))\n    # Result: ui.FormLayout('window1|formLayout82') #\n    pm.formLayout(layout,e=True, attachForm=(control,'bottom', 2))\n    # Result: ui.FormLayout('window1|formLayout82') #\n    pm.formLayout(layout,e=True, attachForm=(control,'right', 2))\n    # Result: ui.FormLayout('window1|formLayout82') #\n    \n    pm.showWindow( window )\n    \n    pm.treeView( control, e=True, addItem = (\"layer 1\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 2\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 3\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 4\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 5\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 6\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 7\", \"layer 2\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 8\", \"layer 2\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 9\", \"layer 2\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 10\", \"layer 8\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 11\", \"layer 2\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 12\", \"\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView( control, e=True, addItem = (\"layer 13\", \"layer 10\"))\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView(control,edit=True,pressCommand=[(1,pressTreeCallBack),(2,pressTreeCallBack),(3,pressTreeCallBack)])\n    # Result: u'window1|formLayout82|treeView1' #\n    pm.treeView(control,edit=True,selectCommand=selectTreeCallBack)\n    # Result: u'window1|formLayout82|treeView1' #\n    \n    \n    pm.treeView( control, edit=True, removeAll = True )\n    # Result: u'window1|formLayout82|treeView1' #", 
    "trim": "    \n    \n    import pymel.core as pm\n    \n    # Keep all selected regions\n    pm.trim( sl=0 )\n    \n    # Discard all selected regions\n    pm.trim( sl=1 )\n    \n    # shrink the underlying surface to just outside the\n    # outermost boundary curve\n    pm.trim( sh=1 )", 
    "trimCtx": "", 
    "truncateFluidCache": "    \n    \n    import pymel.core as pm\n    \n    # Truncate a fluid cache that has a start time of 1\n    # and an end time of 25 so that only the first 10\n    # frames are preserved and the end time of the\n    # cache is set to 10.\n    #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.truncateFluidCache()", 
    "truncateHairCache": "    \n    \n    import pymel.core as pm\n    \n    # Truncate a hair cache that has a start time of 1\n    # and an end time of 25 so that only the first 10\n    # frames are preserved and the end time of the\n    # cache is set to 10.\n    #\n    pm.currentTime( 10 )\n    # Result: 10.0 #\n    pm.truncateHairCache()", 
    "tumble": "    \n    \n    import pymel.core as pm\n    \n    pm.camera()\n    # Result: [nt.Transform(u'camera1'), nt.Camera(u'cameraShape1')] #\n    pm.tumble( 'cameraShape1', aa=-30 )# To change the azimuth angle\n    \n    pm.tumble( 'cameraShape1', ea=15 )# To change the elevation angle\n    \n    pm.tumble( ra=(-30, 15) )# To change the azimuth angle and the elevation angle", 
    "tumbleCtx": "    \n    \n    import pymel.core as pm\n    \n    pm.tumbleCtx( 'tumbleContext', ts=1.0, lt=False, ac=False, ol=True )", 
    "turbulence": "    \n    \n    import pymel.core as pm\n    \n    # Creates a new field\n    pm.turbulence( n='turbulenceF', m=5.0, pos=(0.25, 0, 0) )\n    # Result: nt.TurbulenceField(u'turbulenceF') #\n    \n    # Edits the frequency value of the field named turbulenceF\n    pm.turbulence( 'turbulenceF', e=True, f=0.5 )\n    # Result: nt.TurbulenceField(u'turbulenceF') #\n    \n    # Queries turbulenceF for its frequency value\n    pm.turbulence( 'turbulenceF', q=True, f=1 )\n    # Result: 0.5 #", 
    "twoPointArcCtx": "    \n    \n    import pymel.core as pm\n    \n    # To create a new context that will create curves of degree 1:\n    pm.twoPointArcCtx( degree=1 )\n    # Result: u'twoPointArcCtx1' #\n    \n    # To query the degree of an existing context:\n    pm.twoPointArcCtx( 'arcContext1', q=True, degree=True )", 
    "ubercam": "    \n    \n    import pymel.core as pm\n    \n    camera = pm.shot('myUbercam');", 
    "uiTemplate": "    \n    \n    import pymel.core as pm\n    \n    #    Create a new template.\n    #\n    if pm.uiTemplate( 'ExampleTemplate', exists=True ):\n            pm.deleteUI( 'ExampleTemplate', uiTemplate=True )\n    \n    pm.uiTemplate( 'ExampleTemplate' )\n    # Result: UITemplate(u'ExampleTemplate') #\n    \n    pm.button( defineTemplate='ExampleTemplate', width=100, height=40, align='left' )\n    pm.frameLayout( defineTemplate='ExampleTemplate', borderVisible=True, labelVisible=False )\n    \n    #    Create a window and apply the template.\n    #\n    window = pm.window()\n    pm.setUITemplate( 'ExampleTemplate', pushTemplate=True )\n    # Result: u'ExampleTemplate' #\n    pm.columnLayout( rowSpacing=5 )\n    # Result: ui.ColumnLayout('window1|columnLayout95') #\n    \n    pm.frameLayout()\n    # Result: ui.FrameLayout('window1|columnLayout95|frameLayout26') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout95|frameLayout26|columnLayout96') #\n    pm.button( label='One' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout26|columnLayout96|button105') #\n    pm.button( label='Two' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout26|columnLayout96|button106') #\n    pm.button( label='Three' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout26|columnLayout96|button107') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout95|frameLayout26' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout95' #\n    \n    pm.frameLayout()\n    # Result: ui.FrameLayout('window1|columnLayout95|frameLayout27') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('window1|columnLayout95|frameLayout27|columnLayout97') #\n    pm.button( label='Red' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout27|columnLayout97|button108') #\n    pm.button( label='Green' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout27|columnLayout97|button109') #\n    pm.button( label='Blue' )\n    # Result: ui.Button('window1|columnLayout95|frameLayout27|columnLayout97|button110') #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout95|frameLayout27' #\n    pm.setParent( '..' )\n    # Result: u'window1|columnLayout95' #\n    \n    pm.setUITemplate( popTemplate=True )\n    # Result: u'NONE' #\n    \n    pm.showWindow( window )", 
    "unassignInputDevice": "    \n    \n    import pymel.core as pm\n    \n    # This deletes all command strings associated with the spaceball.\n    pm.unassignInputDevice( d='spaceball' )", 
    "undo": "    \n    \n    import pymel.core as pm\n    \n    # In this particular example, each line needs to be executed\n    # separately one after the other. Executing lines separately\n    # guaranties that commands are properly registered in the undo\n    # stack.\n    \n    pm.polyCube()\n    # Result: [nt.Transform(u'pCube1'), nt.PolyCube(u'polyCube1')] #\n    \n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    \n    pm.undo()\n    # Undo: pm.polySphere()\n     #\n    \n    pm.undo()\n    # Undo: pm.polyCube()\n     #", 
    "undoInfo": "    \n    \n    import pymel.core as pm\n    \n    # Turn undo on, with an infinite queue length\n    pm.undoInfo( state=True, infinity=True )\n    # Turn undo on, with a queue length of 200\n    pm.undoInfo( state=True, infinity=False, length=200 )\n    # Turn undo off\n    pm.undoInfo( state=False )\n    # Query the queue length\n    pm.undoInfo( q=True, length=True )\n    # Result: 200 #", 
    "unfold": "    \n    \n    import pymel.core as pm\n    \n    # Create a sphere and select it.\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    # Optimise the position of some Uvs\n    pm.unfold( 'pSphere1.map[189:398]' )", 
    "ungroup": "    \n    \n    import pymel.core as pm\n    \n    # Create a simple hierarchy\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    pm.move( 2, 0, 0 )\n    pm.sphere( n='sphere2' )\n    # Result: [nt.Transform(u'sphere2'), nt.MakeNurbSphere(u'makeNurbSphere2')] #\n    pm.move( -2, 0, 0 )\n    pm.group( 'sphere1', 'sphere2', n='group1' )\n    # Result: nt.Transform(u'group1') #\n    pm.move( 0, 2, 0 )\n    pm.sphere( n='sphere3' )\n    # Result: [nt.Transform(u'sphere3'), nt.MakeNurbSphere(u'makeNurbSphere3')] #\n    pm.move( 0, 0, 2 )\n    pm.group( 'group1', 'sphere3', n='group2' )\n    # Result: nt.Transform(u'group2') #\n    pm.group( em=True, n='group3' )\n    # Result: nt.Transform(u'group3') #\n    \n    # Remove group1 from the hierarchy. What should remain\n    # is group2 with sphere3, sphere1, and sphere2 as children.\n    # Note that the objects don't move since the absolute flag\n    # is implied.\n    #\n    pm.ungroup( 'group1' )\n    \n    # Try the same ungroup with the -relative flag.\n    # Now sphere1 and sphere2 will move down 2 units in Y.\n    #\n    pm.undo()\n    pm.ungroup( 'group1', relative=True )\n    \n    # Now try the same ungroup operation with the -parent flag.\n    # This will move the children of group1 under group3.\n    pm.undo()\n    pm.ungroup( 'group1', parent='group3' )", 
    "uniform": "    \n    \n    import pymel.core as pm\n    \n    pm.uniform( dx=0, dy=1.0, dz=0.5 )\n    # Result: nt.UniformField(u'uniformField1') #\n    # Creates a uniform field pushing in direction (0,1,0.5) for every\n    # active selection. If there is no active selection, it creates this\n    # field at world position (0,0,0).\n    \n    pm.uniform( 'uniformF', e=True, att=0.98 )\n    # edits the acceleration value of the field uniformF\n    pm.uniform( 'uniformF', q=True, att=1 )\n    # queries uniformF for its acceleration value", 
    "unloadPlugin": "    \n    \n    import pymel.core as pm\n    \n    # Unload the plugin that has the internal name \"newNode\"\n    #\n    pm.unloadPlugin( 'newNode.py' )", 
    "untangleUV": "    \n    \n    import pymel.core as pm\n    \n    pm.untangleUV( mb='shape_square' )\n    # Result: 0 #\n    # map the border associated with the selected UV trying to retain the\n    # shape of the object and use a square mapping to iron out crossings\n    pm.untangleUV( r='one_over_length', pb=True, ps=False, pu=False, rt=0.1 )\n    # Result: 0 #\n    # relax the shell associated with the selected UV using edge weights\n    # that are inversely proportional to length of world space lengths\n    # pin the UV on borders and use a tolerance of 0.1", 
    "untrim": "    \n    \n    import pymel.core as pm\n    \n    # Untrim surface with history.\n    pm.untrim( 'surface', ch=True )\n    \n    # Untrims surface without history.\n    pm.untrim( 'surface', ch=False )", 
    "upAxis": "    \n    \n    import pymel.core as pm\n    \n    # 1. to make the Y-axis of the world to be the up axis:\n    pm.upAxis( ax='y' )\n    \n    # 2. to make the Z-axis of the world to be the up axis,\n    # and rotate the view:\n    pm.upAxis( ax='z', rv=True )\n    \n    # 3. to query which axis is the current up axis\n    # (returns a string: a \"y\" or a \"z\"):\n    pm.upAxis( q=True, axis=True )\n    # Result: u'z' #", 
    "userCtx": "", 
    "uvLink": "    \n    \n    import pymel.core as pm\n    \n    pm.uvLink( uvSet='pSphereShape1.uvSet[2].uvSetName', texture='checker1' )\n    # causes a UV link to be created between uvSet[2] on pSphereShape1\n    # and the checker1 texture.\n    # Note that no make, break or query flag is specified so make is\n    # assumed since both uvSet and texture are specified.\n    \n    pm.uvLink( make=True, uvSet='pCubeShape2.uvSet[0].uvSetName', texture='file8' )\n    # causes a UV link to be created between uvSet[0] of pCubeShape2 and\n    # the file8 file texture.\n    \n    pm.uvLink( uvSet='pCubeShape2.uvSet[0].uvSetName', texture='file8' )\n    # causes a UV link to be created between uvSet[0] of pCubeShape2 and\n    # the file8 file texture. Note: no make, break or query flag is\n    # specified so the make flag is assumed since both uvSet\n    # and texture are specified.\n    \n    pm.uvLink( query=True, uvSet='pCubeShape2.uvSet[0].uvSetName' )\n    # will return a string array of textures which use the UV set\n    # pCubeShape2.uvSet[0].setName. For example, the return value might\n    # be:\n    # file8 file9 checker4 slimeMap\n    \n    pm.uvLink( query=True, texture='checker4' )\n    # will return a string array of the UV sets that are used by the\n    # texture. For example, the return value might be\n    # pCubeShape2.uvSet[0].setName pCylinderShape1.uvSet[4].setName\n    # pCylinderShape2.uvSet[3].setName\n    \n    pm.uvLink( texture='checker4' )\n    # will return a string array of the UV sets that are used by the\n    # texture. For example, the return value might be\n    # pCubeShape2.uvSet[0].setName pCylinderShape1.uvSet[4].setName\n    # pCylinderShape2.uvSet[3].setName\n    # Note that no make, break or query flag is specified, so query is\n    # assumed since no uvSet was specified.\n    \n    pm.uvLink( b=True, uvSet='pCylinderShape2.uvSet[3].uvSetName', texture='checker4' )\n    # causes the checker4 texture to no longer use the UV set\n    # pCylinderShape2.uvSet[3].setName.\n    # The texture will use the default UV set on pCylinderShape2 instead.\n    # If checker4 wasn't using pCylinderShape2.uvSet[3].setName,\n    # nothing changes and a warning is produced.\n    \n    pm.uvLink( isValid=True, texture='myTexture' )\n    # Returns true if myTexture is a texture to which a UV set can be\n    # linked, or false otherwise.\n    \n    myPlug = getSomePlugFromSomewhere()\n    pm.uvLink( isValid=True, uvSet=myPlug )\n    # Returns true if $myPlug is a UV set, or false otherwise.", 
    "uvSnapshot": "    \n    \n    import pymel.core as pm\n    \n    # Create a polygonal sphere\n    pm.polySphere()\n    # Result: [nt.Transform(u'pSphere1'), nt.PolySphere(u'polySphere1')] #\n    # Save the UVs in a image\n    pm.uvSnapshot( o=True, n='/tmp/uvImage2.iff', xr=256, yr=256 )", 
    "view2dToolCtx": "    \n    \n    import pymel.core as pm\n    \n    # Create a new view2dTool context, set it to do dolly in the Hypergraph window, then switch to this tool\n    pm.view2dToolCtx('view2dToolCtx1', dolly=True)\n    # Result: u'view2dToolCtx1' #\n    pm.setToolTo('view2dToolCtx1')", 
    "viewCamera": "    \n    \n    import pymel.core as pm\n    \n    pm.viewCamera( 'cameraShape2', m='cameraShape1' )\n    \n    # Move current view camera to top of camera1\n    pm.viewCamera( 'camera1' )", 
    "viewClipPlane": "    \n    \n    import pymel.core as pm\n    \n    pm.viewClipPlane( 'perspShape', acp=True )\n    \n    pm.viewClipPlane( acp=True )\n    \n    pm.viewClipPlane( acp=True, ncp=3.0 )\n    \n    pm.viewClipPlane( ncp='3.0cm' )\n    \n    pm.viewClipPlane( 'perspShape', q=True, ncp=True )\n    # Result: 3.0 #", 
    "viewFit": "    \n    \n    import pymel.core as pm\n    \n    # Position the active camera to view the active objects\n    pm.viewFit()\n    \n    # Position cameraShape-1 to view all objects\n    pm.viewFit( 'cameraShape1', all=True )\n    \n    # Fill 50 percent of the active view with active objects\n    pm.viewFit( f=0.5 )\n    \n    pm.viewFit( all=True )", 
    "viewHeadOn": "    \n    \n    import pymel.core as pm\n    \n    # Create a new camera\n    cam = pm.camera()\n    camera = cam[0]\n    \n    # Create a polygonal cone, rotate it, make it live\n    object = pm.polyCone( ax=(0, 1, 0) )\n    pm.rotate( 15, 30, 45 )\n    pm.makeLive( object[0] )\n    \n    pm.viewHeadOn( camera )\n    \n    pm.makeLive( none=True )", 
    "viewLookAt": "    \n    \n    import pymel.core as pm\n    \n    # Create a new camera\n    cam = pm.camera()\n    camera = cam[0]\n    \n    pm.viewLookAt( camera, pos=(0.0, 1.0, 0.0) )", 
    "viewManip": "    \n    \n    import pymel.core as pm\n    \n    #Position the view cube in the top left of the screen and set it to fully opaque\n    pm.viewManip(topLeft=True, minOpacity=1)", 
    "viewPlace": "    \n    \n    import pymel.core as pm\n    \n    # Create a new camera\n    cam = pm.camera();\n    camShape = cam[1];\n    \n    pm.viewPlace( camShape, p=True, fov=20 )\n    \n    pm.viewPlace( camShape, eye=(0, 0, 20) )\n    \n    pm.viewPlace( camShape, la=(0, 0, 0) )", 
    "viewSet": "    \n    \n    import pymel.core as pm\n    \n    # Create a new camera\n    cam = pm.camera();\n    camShape = cam[1];\n    \n    # Set cameraShape1 to the persp position\n    pm.viewSet( camShape, p=True )\n    \n    # Set the camera in the active view to the top position\n    pm.viewSet( t=True )", 
    "visor": "    \n    \n    import pymel.core as pm\n    \n    # The visor command is not one which would commonly be used by the user.\n    # For examples of its use, refer to visorPanel.mel and addVisorFolders.mel.", 
    "volumeAxis": "    \n    \n    import pymel.core as pm\n    \n    pm.volumeAxis( pos=(0, 0, 0), afc=1.0, afx=2.0, arx=3.0, alx=4.0, drs=6.0 )\n    # Result: nt.VolumeAxisField(u'volumeAxisField1') #\n    \n    # Creates a volume axis field with the following attribute values:\n    # awayFromCenter = 1.0, awayFromAxis = 2.0, aroundAxis = 3.0, alongAxis = 4.0,\n    # directionalSpeed = 6.0.", 
    "volumeBind": "    \n    \n    import pymel.core as pm\n    \n    pm.volumeBind();", 
    "vortex": "    \n    \n    import pymel.core as pm\n    \n    pm.vortex( ax=0, ay=1.0, az=0.5 )\n    # Result: nt.VortexField(u'vortexField1') #\n    # Creates a vortex field with axis (0,1,0.5) for every active\n    # selection. If there is no active\n    # selection, it creates this field at world position (0,0,0).", 
    "waitCursor": "    \n    \n    import pymel.core as pm\n    \n    pm.waitCursor( state=True )\n    pm.waitCursor( state=False )", 
    "warning": "    \n    \n    import pymel.core as pm\n    \n    import maya.cmds as cmds\n    def lightWarning():\n        l = pm.ls( lights=True )\n        if len(l) == 0:\n            pm.warning( \"No Lights\" )\n    lightWarning()\n    #\n    # The above will produce the following output:\n    #\n    #   # Warning: No Lights #\n    #\n    # When the option to show line numbers in errors is enabled the output will\n    # be the following:\n    #\n    #   # Warning: line 4 of 'lightWarning' in '\"maya console'\": No Lights #\n    #", 
    "webBrowser": "    \n    \n    import pymel.core as pm\n    \n    pm.window()\n    pm.columnLayout()\n    browser = pm.webBrowser(width=800, height=600, url='www.alias.com')\n    pm.showWindow()", 
    "webBrowserPrefs": "", 
    "webView": "    \n    \n    import pymel.core as pm\n    \n    pm.webView(\"www.autodesk.com\")", 
    "webViewCmd": "", 
    "whatsNewHighlight": "    \n    \n    import pymel.core as pm\n    \n    #    Turn on What's New highlighting if not already on.\n    #\n    if not pm.whatsNewHighlight(query=True, highlightOn=True):\n        pm.whatsNewHighlight(highlightOn=True)\n    \n    #    Turn off What's New highlighting startup dialog if it is set to appear.\n    #\n    if pm.whatsNewHighlight(query=True, showStartupDialog=True):\n        pm.whatsNewHighlight(showStartupDialog=False)", 
    "window": "    \n    \n    import pymel.core as pm\n    \n    # Make a new window\n    #\n    window = pm.window( title=\"Long Name\", iconName='Short Name', widthHeight=(200, 55) )\n    pm.columnLayout( adjustableColumn=True )\n    # Result: ui.ColumnLayout('window1|columnLayout98') #\n    pm.button( label='Do Nothing' )\n    # Result: ui.Button('window1|columnLayout98|button111') #\n    pm.button( label='Close', command=('pm.deleteUI(\\\"' + window + '\\\", window=True)') )\n    # Result: ui.Button('window1|columnLayout98|button112') #\n    pm.setParent( '..' )\n    # Result: u'' #\n    pm.showWindow( window )\n    \n    # Resize the main window\n    #\n    \n    # This is a workaround to get MEL global variable value in Python\n    gMainWindow = maya.mel.eval('$tmpVar=$gMainWindow')\n    pm.window( gMainWindow, edit=True, widthHeight=(900, 777) )\n    # Result: ui.Window('MayaWindow') #", 
    "windowPref": "    \n    \n    import pymel.core as pm\n    \n    #    Check if the window exists.\n    #\n    if pm.window('ExampleWindow', exists=True):\n            pm.deleteUI('ExampleWindow', window=True)\n    \n    #    Create a window.\n    #\n    pm.window( 'ExampleWindow' )\n    # Result: ui.Window('ExampleWindow') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('ExampleWindow|columnLayout99') #\n    pm.text( label='Size and position the window before closing it.' )\n    # Result: ui.Text('ExampleWindow|columnLayout99|text25') #\n    pm.button( label='Close', command='pm.deleteUI(\"ExampleWindow\", window=True)' )\n    # Result: ui.Button('ExampleWindow|columnLayout99|button113') #\n    pm.showWindow( 'ExampleWindow' )\n    \n    #    When the window is closed a window preference object is\n    #    created for the window. It has the same name as the window\n    #    object.\n    #\n    pm.windowPref( 'ExampleWindow', exists=True )\n    # Result: True #\n    \n    #    Query the window preference size and position.\n    #\n    pm.windowPref( 'ExampleWindow', query=True, topLeftCorner=True )\n    # Result: [414, 674] #\n    pm.windowPref( 'ExampleWindow', query=True, widthHeight=True )\n    # Result: [300, 300] #\n    \n    #    Create a window with the same name. When it is shown\n    #    it will be sized and positioned according to the\n    #    window preference.\n    #\n    if pm.window('ExampleWindow', exists=True):\n            pm.deleteUI('ExampleWindow', window=True)\n    \n    pm.window( 'ExampleWindow' )\n    # Result: ui.Window('ExampleWindow') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('ExampleWindow|columnLayout100') #\n    pm.text( label='Size and position the window before closing it.' )\n    # Result: ui.Text('ExampleWindow|columnLayout100|text26') #\n    pm.button( label='Close', command='pm.deleteUI(\"ExampleWindow\", window=True)' )\n    # Result: ui.Button('ExampleWindow|columnLayout100|button114') #\n    pm.showWindow( 'ExampleWindow' )\n    \n    #    Delete the window preference and the window will have a\n    #    default size and position.\n    #\n    pm.windowPref( 'ExampleWindow', remove=True )\n    \n    #    Create the window one last time.\n    #\n    if pm.window('ExampleWindow', exists=True):\n            pm.deleteUI('ExampleWindow', window=True)\n    \n    pm.window( 'ExampleWindow' )\n    # Result: ui.Window('ExampleWindow') #\n    pm.columnLayout()\n    # Result: ui.ColumnLayout('ExampleWindow|columnLayout101') #\n    pm.text( label='Size and position the window before closing it.' )\n    # Result: ui.Text('ExampleWindow|columnLayout101|text27') #\n    pm.button( label='Close', command='pm.deleteUI(\"ExampleWindow\", window=True)' )\n    # Result: ui.Button('ExampleWindow|columnLayout101|button115') #\n    pm.showWindow( 'ExampleWindow' )", 
    "wire": "    \n    \n    import pymel.core as pm\n    \n    # select a surface and a curve that you want to be a wire, then enter\n    pm.wire()\n    # Result: [nt.Wire(u'wire1')] #\n    \n    # create a wire deformer on surface1 using curve1 and curve2\n    pm.wire( 'surface1', 'curve1', 'curve2' )\n    \n    # modify the dropoff distance and envelope on wire1\n    pm.wire( 'wire1', edit=True, en=0.8, dds=[(0, 6),(1, 3.2)] )", 
    "wireContext": "    \n    \n    import pymel.core as pm\n    \n    pm.wireContext( 'wireCtx' )", 
    "workspace": "    \n    \n    import pymel.core as pm\n    \n    # Set the current workspace to \"alphabet\".\n    pm.workspace( 'alphabet', openWorkspace=True )\n    \n    # Save the current workspace settings (for \"alphabet\").\n    pm.workspace( saveWorkspace=True )\n    \n    # Create a new workspace named \"newWorkspace\".\n    pm.workspace( 'newWorkspace', newWorkspace=True )\n    \n    # The settings of \"newWorkspace\" are based on \"default\" workspace\n    pm.workspace( baseWorkspace='default' )\n    \n    # Return the list of existing workspaces\n    pm.workspace( listWorkspaces=True )\n    # Result: default   newWorkspace\n    \n    # Add a scriptJob to run on workspaceChanged events\n    def workspaceChangedCallback():\n        print 'My workspaceChangedCallback was called'\n    \n    workspaceChangedID = pm.scriptJob( event = [\"workspaceChanged\", workspaceChangedCallback] )\n    \n    # add a file rule to the current workspace\n    pm.workspace(fileRule = ['newFileRuleName', 'newFileRuleValue'])\n    My workspaceChangedCallback was called            #workspaceChangedCallback was called\n    \n    # look up the value of the file rule entry\n    pm.workspace(q = True, fileRuleEntry = 'newFileRuleName')\n    # Result: newFileRuleValue\n    \n    # remove specified file rule entry\n    pm.workspace(removeFileRuleEntry = 'newFileRuleName')\n    My workspaceChangedCallback was called            #workspaceChangedCallback is called\n    \n    # kill the scriptJob with the number\n    pm.scriptJob(kill = workspaceChangedID)\n    \n    # The following example shows how to expand environment and workspace variables\n    \n    # expand a path value to be a full path relative to the project directory\n    # relative path example\n    pm.workspace( expandName = 'relativePathName')\n    # Result: /h/userName/maya/projects/newWorkspace/relativePathName/\n    # full path example\n    pm.workspace( expandName = '/h/userName/maya/projects/default/')\n    # Result: /h/userName/maya/projects/default/\n    \n    # The following examples show various formats for expanding workspace and\n    # environment variables.\n    \n    # add a variable to the current workspace\n    pm.workspace(variable = ['newVariableName', 'newVariableValue'])\n    pm.workspace( expandName = '%newVariableName%')\n    # Result: /h/userName/maya/projects/newWorkspace/newVariableValue/\n    \n    # add an environment variable with the same as the workspace variable\n    maya.mel.eval('putenv \"newEnvVariableName\" \"newEnvVariableValue\"')\n    pm.workspace( expandName = '%newEnvVariableName%')\n    # Result: /h/userName/maya/projects/newWorkspace/newEnvVariableValue/\n    \n    # The following example shows how conflicting names in both workspace\n    # and environment variables are resolved.\n    # add a environment variable with the same name as a workspace variable\n    maya.mel.eval('putenv \"newVariableName\" \"newEnvVariableValue\"')\n    # maya considers workspace variables first before matching environment variables\n    pm.workspace( expandName = '%newVariableName%')\n    # Result: /h/userName/maya/projects/newWorkspace/newVariableValue/\n    \n    # When a tilde is used, maya will only consider the environment variable\n    # not the workspace variable.\n    pm.workspace( expandName = '~%newVariableName%')\n    # Result: /h/userName/maya/projects/newWorkspace/~newEnvVariableValue/\n    \n    # The following example shows how to set multiple paths into a fileRule value\n    pm.workspace(fileRule = ['newMultiPathFileRuleName', '/h/userName/maya/projects/default;newFileRuleValue'])\n    multipath = pm.workspace(q = True, fileRuleEntry = 'newMultiPathFileRuleName')\n    # Result : /h/userName/maya/projects/default;newFileRuleValue\n    \n    # The following will only return the first expanded path.\n    pm.workspace( expandName = multipath)\n    # Result : /h/userName/maya/projects/default\n    \n    # Note that white space at the beginning or end of each path is significant.\n    # Add a file rule that uses multiple paths with the white space at the beginning and end of each path\n    pm.workspace(fileRule = ['newMultiPathFileRuleName', ' /h/userName/maya/projects/default ; newFileRuleValue '])\n    # Querying and expanding the path value shows that the white space is still included.\n    multipath = pm.workspace(q = True, fileRuleEntry = 'newMultiPathFileRuleName')\n    # Result :  /h/userName/maya/projects/default ; newFileRuleValue\n    \n    # Find the current workspace area.\n    pm.workspace( q=True, directory=True )\n    # Result : /h/userName/maya/projects/default\n    \n    # Note that the \"current working directory\" as defined by the\n    # 'pwd' and 'chdir' commands is unrelated to the directories\n    # used by the workspace command\n    #\n    pm.pwd()\n    # Result : /usr/tmp\n    \n    pm.chdir( '/tmp' )\n    getcwd()\n    # Result : /tmp\n    pm.workspace( q=True, directory=True )\n    # Result : /h/userName/maya/projects/default\n    \n    pm.workspace( directory='/h/userName/maya/projects/commercial' )\n    getcwd()\n    # Result : /tmp", 
    "wrinkle": "    \n    \n    import pymel.core as pm\n    \n    # Apply radial wrinkles to a sphere:\n    \n    mySph = pm.sphere()\n    pm.wrinkle( mySph, st='radial', wc=3, brc=2, bd=0, th=1, rnd=0.2, wi=0.5, uv=(2.0, 4.0, 0.0, 2.0, 4.0) )\n    # Result: [u'cluster1', u'cluster1Handle', u'wire1', u'wrinkle1', u'wrinkle2', u'wrinkle3'] #\n    \n    # Apply a 5-line tangential wrinkle to a plane:\n    \n    myPlane = pm.nurbsPlane( w=50, u=20, v=20 )\n    pm.wrinkle( myPlane, st='lines', wc=5, th=1.0, rnd=0.2, wi=0.5, uv=(1.0, 1.0, 0.0, 0.5, 0.5) )\n    # Result: [u'cluster2', u'cluster2Handle', u'wire2', u'wrinkle4', u'wrinkle5', u'wrinkle6', u'wrinkle7', u'wrinkle8'] #", 
    "wrinkleContext": "    \n    \n    import pymel.core as pm\n    \n    pm.wrinkleContext( 'wrinkleCtx' )", 
    "writeTake": "    \n    \n    import pymel.core as pm\n    \n    #    Record data from the clock device and write out the virtual\n    #    device definition and take file.\n    pm.recordDevice( device='clock' )\n    pm.recordDevice( device='clock', stop=True )\n    pm.writeTake( device='clock', take='clock.mov', virtualDevice='virtualClock.mel' )\n    \n    #    Read the virtualClock and virtualClock take data.\n    maya.mel.eval(\"virtualClock\")\n    pm.readTake( device='virtualClock', take='clock.mov' )", 
    "xform": "    \n    \n    import pymel.core as pm\n    \n    # create object to manipulate\n    pm.sphere( n='sphere1' )\n    # Result: [nt.Transform(u'sphere1'), nt.MakeNurbSphere(u'makeNurbSphere1')] #\n    \n    # set rotation of sphere\n    pm.xform( r=True, ro=(0, 90, 0) )\n    \n    # change the rotate order but preserve the overall transformation\n    pm.xform( p=True, roo='yzx' )"
}