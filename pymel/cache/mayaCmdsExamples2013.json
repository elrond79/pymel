{
    "TanimLayer": "", 
    "aaf2fcp": "\n\nimport maya.cmds as cmds\n\nhandle = cmds.aaf2fcp(srcFile='c:/tmp/test.aaf', dstPath='c:/tmp')\ndestinationFile = cmds.aff2fcp(getFileName=handle)\ncmds.aaf2fcp(waitCompletion=handle)\ncmds.aaf2fcp(terminate=handle,deleteFile=False)", 
    "about": "\n\nimport maya.cmds as cmds\n\ncmds.about( )\n\nversion = cmds.about(v=True)", 
    "addAttr": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( name='earth' )\n# Add an attribute named ms/mass with a default value of 1 and a\n# minimum value of 0.001 and a maximum of 10000.\n#\ncmds.addAttr( shortName='ms', longName='mass', defaultValue=1.0, minValue=0.001, maxValue=10000 )\n# Add a multi attribute named ff/forcefield of type double3.\n#\ncmds.addAttr( shortName='ff', longName='forcefield', dataType='double3', multi=True )\n# Add a compound attribute named sampson with children homeboy, midge,\n# damien, elizabeth, and sweetpea of varying types\n#\ncmds.addAttr( longName='sampson', numberOfChildren=5, attributeType='compound' )\ncmds.addAttr( longName='homeboy', attributeType='matrix', parent='sampson' )\ncmds.addAttr( longName='midge', attributeType='message', parent='sampson' )\ncmds.addAttr( longName='damien', attributeType='double', parent='sampson' )\ncmds.addAttr( longName='elizabeth', attributeType='double', parent='sampson' )\ncmds.addAttr( longName='sweetpea', attributeType='double', parent='sampson' )\n# To add an attribute that is to be interpreted as a color the\n# following attribute group must be used.\n#\n# Note that the word \"float\" must be in quotations since it is a\n# MEL keyword.\n#\ncmds.addAttr( longName='rainbow', usedAsColor=True, attributeType='float3' )\ncmds.addAttr( longName='redBow', attributeType='float', parent='rainbow' )\ncmds.addAttr( longName='greenBow', attributeType='float', parent='rainbow' )\ncmds.addAttr( longName='blueBow', attributeType='float', parent='rainbow' )\n# Other legal attribute types that can be interpreted as colors need\n# not specify the \"-usedAsColor\" flag as it will be assumed.  These\n# include \"-attributeType spectrum\", \"-attributeType reflectance\",\n# \"-dataType spectrumRGB\", and \"-dataType reflectanceRGB\".\n#\ncmds.addAttr( longName='implColor', dataType='spectrumRGB' )\ncmds.addAttr( '.implColor', query=True, usedAsColor=True )\n# Result: 1 #\n# Add a double3 attribute named sanders with children bess, les and wes\n#\ncmds.addAttr( longName='sanders', attributeType='double3' )\ncmds.addAttr( longName='bess', attributeType='double', parent='sanders' )\ncmds.addAttr( longName='les', attributeType='double', parent='sanders' )\ncmds.addAttr( longName='wes', attributeType='double', parent='sanders' )", 
    "addDynamic": "\n\nimport maya.cmds as cmds\n\n# Create an emitter\ncmds.emitter( pos=(0, 0, 0), type='omni', r=100, sro=0, nuv=0, cye='none', cyi=1, spd=1, srn=0, nsp=1, tsp=0, mxd=0, mnd=0, dx=1, dy=0, dz=0, sp=0 )\n# Result: emitter1 #\n\n# Get the emitter to emit particles\ncmds.particle()\n# Result: particle2\ncmds.connectDynamic( 'particle1', em='emitter1' )\n\n# Create a particle to use as the source of the emitter\ncmds.particle( p=((6.0, 0, 7.0), (6.0, 0, 2.0)), c=1 )\n# Result: particle2\n\n# Use particle2 as a source of the emitter\ncmds.addDynamic( 'emitter1', 'particle2' )", 
    "addExtension": "\n\nimport maya.cmds as cmds\n\n# Add an attribute named ms/mass with a default value of 1 and a\n# minimum value of 0.001 and a maximum of 10000 to all mesh shapes.\n#\ncmds.addExtension( nodeType='mesh', shortName='ms', longName='mass', defaultValue=1.0, minValue=0.001, maxValue=10000 )\n# Add a multi attribute named ff/forcefield of type double3 to all mesh shapes.\n#\ncmds.addExtension( nodeType='mesh', shortName='ff', longName='forcefield', dataType='double3', multi=True )\n# Add a compound attribute named sampson with children homeboy, midge,\n# damien, elizabeth, and sweetpea of varying types to all choice nodes.\n#\ncmds.addExtension( nodeType='choice', longName='sampson', numberOfChildren=5, attributeType='compound' )\ncmds.addExtension( nodeType='choice', longName='homeboy', attributeType='matrix', parent='sampson' )\ncmds.addExtension( nodeType='choice', longName='midge', attributeType='message', parent='sampson' )\ncmds.addExtension( nodeType='choice', longName='damien', attributeType='double', parent='sampson' )\ncmds.addExtension( nodeType='choice', longName='elizabeth', attributeType='double', parent='sampson' )\ncmds.addExtension( nodeType='choice', longName='sweetpea', attributeType='double', parent='sampson' )\n# To add an attribute that is to be interpreted as a color the\n# following attribute group must be used.\n#\n# Note that the word \"float\" must be in quotations since it is a\n# MEL keyword.\n#\ncmds.addExtension( nodeType='phong', longName='rainbow', usedAsColor=True, attributeType='float3' )\ncmds.addExtension( nodeType='phong', longName='redBow', attributeType='float', parent='rainbow' )\ncmds.addExtension( nodeType='phong', longName='greenBow', attributeType='float', parent='rainbow' )\ncmds.addExtension( nodeType='phong', longName='blueBow', attributeType='float', parent='rainbow' )\n# Other legal attribute types that can be interpreted as colors need\n# not specify the \"-usedAsColor\" flag as it will be assumed.  These\n# include \"-attributeType spectrum\", \"-attributeType reflectance\",\n# \"-dataType spectrumRGB\", and \"-dataType reflectanceRGB\".\n#\ncmds.addExtension( nodeType='phong', longName='implColor', dataType='spectrumRGB' )\n# Add a double3 attribute named sanders with children bess, les and wes\n# to all dag nodes, including shapes, transforms, and joints.\n#\ncmds.addExtension( nodeType='dagNode', longName='sanders', attributeType='double3' )\ncmds.addExtension( nodeType='dagNode', longName='bess', attributeType='double', parent='sanders' )\ncmds.addExtension( nodeType='dagNode', longName='les', attributeType='double', parent='sanders' )\ncmds.addExtension( nodeType='dagNode', longName='wes', attributeType='double', parent='sanders' )", 
    "addPP": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\n\ncmds.emitter( n='myEmitter1' )\ncmds.particle( n='myParticle1' )\ncmds.connectDynamic( 'myParticle1', em='myEmitter1' )\ncmds.select( 'myParticle1' )\ncmds.emitter( n='myEmitter2' )\ncmds.particle( n='myParticle2' )\ncmds.connectDynamic( 'myParticle2', em='myEmitter2' )\n\ncmds.addPP( 'myEmitter2', atr='rate' )\n\n# Suppose that myEmitter2 is owned by a particle shape, \"myParticle1.\"\n# addPP will add an attribute \"myEmitter2RatePP\" to myParticle1, will connect\n# myParticle1.myEmitter2RatePP to myEmitter2.ratePP, and will set myEmitter2.useRatePP\n# to true.", 
    "adskAsset": "", 
    "adskAssetLibrary": "", 
    "adskAssetList": "", 
    "adskAssetListUI": "", 
    "affectedNet": "\n\nimport maya.cmds as cmds\n\n# Create a network of this transform node's attributes that affect\n# each other\ncmds.affectedNet( 'transform1' )\n\n# Create a network all of the transform shared attributes that affect\n# each other\ncmds.affectedNet( t='transform' )\n\n# Create a network of the revolve and shape node type attributes that\n# affect each other\ncmds.affectedNet( t='revolve', t='shape' )", 
    "affects": "\n\nimport maya.cmds as cmds\n\n# List the attributes on node \"sphere\" that affect the \"tx\" attribute\ncmds.sphere( n='sphere' )\ncmds.affects( 'tx', 'sphere' )\n# List the attributes on nodes of type \"transform\" that are affected by\n# the \"ty\" attribute\ncmds.affects( 'ty', by=True, t='transform' )\n# List the attributes on nodes of type \"revolve\" that affect the\n# \"outputSurface\" attribute\ncmds.affects( 'outputSurface', t='revolve' )", 
    "agFormatIn": "", 
    "agFormatOut": "", 
    "aimConstraint": "\n\nimport maya.cmds as cmds\n\n# Orients the aim vector of cube1 in it's local coordinate space, to point at cone1.\ncmds.aimConstraint( 'cone1', 'cube1' )\n\n# Aims cube2 at the average of the position of cone1 and surf2\ncmds.aimConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.aimConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n\n# Removes surf2 from cube2's aimConstraint.\ncmds.aimConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's aimConstraint with the default weight.\ncmds.aimConstraint( 'surf3', 'cube2' )\n\n# Aim constrain the z-axis only of sph2 to sph1\ncmds.aimConstraint( 'sph1', 'sph2', skip=[\"x\",\"y\"] )", 
    "air": "\n\nimport maya.cmds as cmds\n\ncmds.air( name='particle1', m=5.0, mxd=2.0 )\n# Creates an air field with magnitude 5.0 and maximum distance 2.0,\n# and adds it to the list\n# of fields particle1 owns.\n\ncmds.air( wakeSetup=True )\n# Creates an air field with no no velocity in and of itself (magnitude = 0).\n# All of the air's\n# velocity is derived from the motion of the objects that own the field.", 
    "aliasAttr": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'blendShape', n='blender' )\n#\n# Define intuitive names for the weights of a blendShape.\n# The blendShape command does this automatically to allow you\n# to refer to the weight corresponding to a target shape by the name\n# of that shape.\n#\ncmds.aliasAttr( 'smile', 'blender.w[0]', 'frown', 'blender.w[1]' )\n# Result: 2 #\n#\n# List all the attribute aliases for the node blendShape1\n#\ncmds.aliasAttr( 'blender', query=True )\n# Result: smile weight[0] frown weight[1] #\n#\n# Allow the X rotation on a joint to be called its \"roll\"\n#\ncmds.createNode( 'joint', n='elbow' )\ncmds.aliasAttr( 'roll', 'elbow.rx' )\n# Result: 1 #\ncmds.aliasAttr( 'tuck', 'elbow.ry' )\n# Result: 1 #\n#\n# Remove the roll alias defined above.\n#\ncmds.aliasAttr( 'elbow.roll', rm=True )\n#\n# Remove the tuck alias defined above.\n#\ncmds.aliasAttr( 'elbow.ry', rm=True )", 
    "align": "\n\nimport maya.cmds as cmds\n\n# align the selected objects to their average mid-point in x\ncmds.align(x='mid')\n# align the selected objects to the mid-point in x of the first select object\ncmds.align(x='mid', alignToLead=True)", 
    "alignCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere and a poly cube, then move them apart\ncmds.polySphere(r=3, n='pSphere1')\ncmds.move(5, 0, 0)\ncmds.polyCube(w=3, h=3, d=3, n='pCube1')\ncmds.move(-5, 3, 0)\ncmds.select('pSphere1', 'pCube1', r=True)\n\n# Create a new align context which is used to align objects, then switch to it\n# Now you can use this tool to align objects\ncmds.alignCtx('alignCtx1',a=True)\ncmds.setToolTo('alignCtx1')", 
    "alignCurve": "\n\nimport maya.cmds as cmds\n\n# Do modify positional continuity on both curves with no history:\ncmds.alignCurve( ch=False, pc=True, pct=6 )\n\n# Do positional and tangent continuity, with the second curve\n# tangent modified (by default move position continuity is done\n# on the first curve):\ncmds.alignCurve( tc=True, tct=2 )", 
    "alignSurface": "\n\nimport maya.cmds as cmds\n\n# Do modify positional continuity on both active surfaces with no history:\ncmds.alignSurface( ch=False, pc=True, pct=6 )\n\n# Do positional and tangent continuity, with the second surface\n# tangent modified (by default move position continuity is done\n# on the first surface):\ncmds.alignSurface( tc=True, tct=2 )", 
    "allNodeTypes": "\n\nimport maya.cmds as cmds\n\ncmds.allNodeTypes()\n# Result: [u'list', u'of', u'node', u'types']  #\ncmds.allNodeTypes(includeAbstract=True)\n# Result: [u'very (abstract)', u'long (abstract)', u'list', u'of', u'all (abstract)', u'node', u'types']  #\n# Trickier example using Python capabilities to get node types starting with 'l'\n[item for item in cmds.allNodeTypes(includeAbstract=True) if item[0].lower() == 'l']\n# Result: [u'long (abstract)', u'list']  #", 
    "ambientLight": "\n\nimport maya.cmds as cmds\n\n# Create an ambientLight light\nlight = cmds.ambientLight(intensity=0.8)\n\n# Change the light intensity\ncmds.ambientLight( light, e=True, intensity=0.5 )\n\n# Query it\ncmds.ambientLight( light, q=True, intensity=True )\n# Result:0.5 #", 
    "angleBetween": "\n\nimport maya.cmds as cmds\n\n# To find the euler angle between these two vectors. The result is three\n# angles in the current angular unit. In this example, the first vector\n# must be rotated -63.434949 degrees about the X axis, 16.60155 degrees\n# about the Y axis and -26.565051 degrees about the Z axis to achieve\n# the second vector.\n\ncmds.angleBetween( euler=True, v1=(0.0, 1.0, 2.0), v2=(1.0, 2.0, 0.0) )\n# Result: -63.434949 16.60155 -26.565051 #\n\n# To find the angle between these two vectors.  The result is an axis and\n# an angle (in the current angular unit).  In this example, the first\n# vector must be rotated 66.421822 degrees about the axis\n# (-0.8728716, 0.4364358, -0.2182179) to achieve the second vector.\n\ncmds.angleBetween( v1=(0.0, 1.0, 2.0), v2=(1.0, 2.0, 0.0) )\n# Result: -0.8728716 0.4364358 -0.2182179 66.421822 #\n\n# How to create a dependency node that calculates the angle between two\n# vectors. This example shows how the (x,z) position of a sphere\n# can be used to control the rotate factors (about y) of a cone shape.\n\nangleBtwnNode = cmds.angleBetween(v1=(1, 0, 0), v2=(1, 0, 0), ch=True)\nsphere = cmds.sphere()\ncmds.move( 5, 0, 5, sphere[0] )\ncmds.connectAttr( sphere[0]+'.translateX', angleBtwnNode+'.vector2X' )\ncmds.connectAttr( sphere[0]+'.translateZ', angleBtwnNode+'.vector2Z' )\n\ncone = cmds.cone( ch=False )\nconvert = cmds.createNode( 'unitConversion' )\ncmds.connectAttr( angleBtwnNode+'.eulerY', convert+'.input' )\ncmds.connectAttr( convert+'.output', cone[0]+'.rotateY' )", 
    "animCurveEditor": "\n\nimport maya.cmds as cmds\n\n# Check to see if the \"default\" graph editor has been created\n#\ncmds.animCurveEditor( 'graphEditor1GraphEd', exists=True )\n# Show result curves\n#\ncmds.animCurveEditor( 'graphEditor1GraphEd', edit=True, showResults='on' )\n# Decrease the sampling rate for the result curves\n#\ncmds.animCurveEditor( 'graphEditor1GraphEd', edit=True, resultSamples=5 )\n\n# Constrain all Graph Editor animation curve traversals to the X-axis\n#\ncmds.animCurveEditor( 'graphEditor1GraphEd', edit=True, constrainDrag=1 )", 
    "animDisplay": "\n\nimport maya.cmds as cmds\n\n# If the current time unit were ntsc (30 frames per\n# second) frame 50 would be displayed as \"00:00:01:20\".\n#\ncmds.animDisplay( timeCode=True )\n\n\n# Set the display option so that interactive operations\n# in the graph editor or dope sheet will cause the\n# model views to be updated simultaneously\n#\ncmds.animDisplay( modelUpdate=\"interactive\" )", 
    "animLayer": "\n\nimport maya.cmds as cmds\n\ncmds.animLayer(\"layer1\", mute=True, solo=True, override=True, passthrough=False, lock=True)\ncmds.animLayer(\"layer1\", query=True, mute=True)\n# Result: 1 #\ncmds.animLayer(\"layer1\", query=True, solo=True)\n# Result: 1 #\ncmds.animLayer(\"layer1\", query=True, override=True)\n# Result: 1 #\ncmds.animLayer(\"layer1\", query=True, passthrough=True)\n# Result: 0 #\ncmds.animLayer(\"layer1\", query=True, lock=True)\n# Result: 1 #\ncmds.animLayer(\"layer1\", query=True, parent=True)\n# Result: BaseAnimation #", 
    "animView": "\n\nimport maya.cmds as cmds\n\n# Look at the area between 0 and 5 seconds, and the range 0 - 100\ncmds.animView( 'graphView', startTime='0sec', endTime='5sec', minValue=0, maxValue=100 )", 
    "annotate": "\n\nimport maya.cmds as cmds\n\n# The following specifies an annotation with text \"my annotation text\" on\n# object mySphere, with the text being centered at point [5,6,3].\ncmds.sphere( name='mySphere' )\ncmds.annotate( 'mySphere', tx='my annotation text', p=(5, 6, 5) )", 
    "applyAttrPattern": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ncmds.polySphere( name=\"sphere1\" )\ncmds.applyAttrPattern( patternName=\"myXMLPattern\" )\n// Result: 1 //\nname2 = cmds.polySphere( name=\"sphere2\" )\nname3 = cmds.polySphere( name=\"sphere3\" )\ncmds.select( [name2, name3] )\ncmds.applyAttrPattern( patternName=\"myXMLPattern\" )\n// Result: 2 //\ncmds.applyAttrPattern( patternName=\"myXMLPattern\", nodeType=\"transform\" )\n// Result: 1 //", 
    "applyTake": "\n\nimport maya.cmds as cmds\n\n#    Apply all of the recorded data to param curves.\ncmds.applyTake()\n\n#    Applies the takes from clock and ultra devices and starts the\n#    data at anim time 100.\ncmds.applyTake( d=('clock', 'ultra'), st=100 )\n\n#    Applies the take from the ultra device and uses the euler and\n#    simplify filters.\ncmds.applyTake( d='ultra', f=('euler', 'simplify') )\n\n#    Applies only the shoulder channel and all of its children.\ncmds.applyTake( d='ultra', c='shoulder', sc=True, rc=True )", 
    "arcLenDimContext": "\n\nimport maya.cmds as cmds\n\ncmds.arcLenDimContext()", 
    "arcLengthDimension": "\n\nimport maya.cmds as cmds\n\n# Measure the arcLength of curve curveShape1 at u = 0.5\ncmds.curve( d=3, p=((-9.3, 0, 3.2), (-4.2, 0, 5.0), (6.0, 0, 8.6), (2.1, 0, -1.9)), k=(0, 0, 0, 1, 2, 2));\ncmds.arcLengthDimension( 'curveShape1.u[0.5]' )\n\n# Measure the arcLength of sphere nurbsSphere1 at u = 0.5 and v = 0.5\ncmds.sphere();\ncmds.arcLengthDimension( 'nurbsSphere1.uv[0.5][0.5]' );", 
    "arclen": "\n\nimport maya.cmds as cmds\n\ncmds.arclen( 'curve1' )\n# This command returns a float value that is the length of curve1 in\n# the current linear units.\n\ncurveInfoNode = cmds.arclen('curve1', ch=True)\ncmds.expression( s= 'surface1.sx = %s.arcLength' %  curveInfoNode )\n# The first command produces a curve info node for curve1 and returns\n# the name of the curve info node.  The second command shows how the\n# arc length attribute of the curve info node can be used to set up\n# an expression, ie. it drives one of the scale factors of surface1.\n#\n# Note the expression command still only creates MEL expressions, although they can\n# be called from Python.", 
    "arrayMapper": "\n\nimport maya.cmds as cmds\n\ncmds.arrayMapper( target='particle1', destAttr='rgbPP', inputV='ageNormalized', type='ramp' )", 
    "art3dPaintCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new 3d paint context, then switch to it\ncmds.art3dPaintCtx('art3dPaintCtx1')\ncmds.setToolTo('art3dPaintCtx1')\n\n# Set art3dPaintCtx1's radius to 2.0, lowerradius to 0.5\ncmds.art3dPaintCtx('art3dPaintCtx1', edit=True, r=2.0, lr=0.5)", 
    "artAttr": "", 
    "artAttrCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new Attribute Paint Tool context, then switch to it\ncmds.artAttrCtx('artAttrCtx1')\ncmds.setToolTo('artAttrCtx1')\n\n# Set brush's radius to 2.0, lower radius to 0.5\ncmds.artAttrCtx('artAttrCtx1', edit=True, r=2.0, lr=0.5)", 
    "artAttrPaintVertexCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new vertexAttr paint context, then switch to it\ncmds.artAttrPaintVertexCtx('artAttrPaintVertexCtx1')\ncmds.setToolTo('artAttrPaintVertexCtx1')", 
    "artAttrSkinPaintCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new skinAttr paint context, then switch to it\ncmds.artAttrSkinPaintCtx('artAttrSkinPaintCtx1')\ncmds.setToolTo('artAttrSkinPaintCtx1')\n\n# Set the edit weight operation to \"smooth\"\ncmds.artAttrSkinPaintCtx('artAttrSkinPaintCtx1', edit=True, sao='smooth')", 
    "artAttrTool": "\n\nimport maya.cmds as cmds\n\n# Add a tool named \"customtoolPaint\" to the list of\n# attribute painting tools, then creates a new context called\n# \"customtoolPaintContext\" which utilises the \"customtoolPaint\" tool.\n#\ncmds.artAttrTool( add='customtoolPaint' )\ncmds.artAttrCtx( 'customtoolPaintContext', whichTool='customtoolPaint' )\n# List all tools currently defined.\n#\ncmds.artAttrTool( query=True )", 
    "artBaseCtx": "", 
    "artBuildPaintMenu": "\n\nimport maya.cmds as cmds\n\n# build a list of paintable attributes for the selected item(s)\n#\ncmds.artBuildPaintMenu();", 
    "artFluidAttr": "", 
    "artFluidAttrCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new fluidAttr paint context, then switch to it\ncmds.artFluidAttrCtx('artFluidAttrCtx1')\ncmds.setToolTo('artFluidAttrCtx1')\n\n# Set to paint the color property on the fluid\ncmds.artFluidAttrCtx('artFluidAttrCtx1', edit=True, property='color')", 
    "artPuttyCtx": "\n\nimport maya.cmds as cmds\n\n# Set the brush radius to 20.0\ncmds.artPuttyCtx( 'artPuttyContext', e=True, radius=20.00  )\n\n# Set the display of additional brush feedback\ncmds.artPuttyCtx( 'artPuttyContext', e=True, brushfeedback=True )", 
    "artSelect": "", 
    "artSelectCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new select context, then switch to it\ncmds.artSelectCtx('artSelectCtx1')\ncmds.setToolTo('artSelectCtx1')\n\n# Set brush's radius to 2.0, lower radius to 0.5\ncmds.artSelectCtx('artSelectCtx1', edit=True, r=2.0, lr=0.5)", 
    "artSetPaint": "", 
    "artSetPaintCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new set membership paint context, then switch to it\ncmds.artSetPaintCtx('artSetPaintCtx1')\ncmds.setToolTo('artSetPaintCtx1')\n\n# Set brush's radius to 2.0, lower radius to 0.5\ncmds.artSetPaintCtx('artSetPaintCtx1', edit=True, r=2.0, lr=0.5)", 
    "artUserPaintCtx": "\n\nimport maya.cmds as cmds\n\n# create the context\ncmds.artUserPaintCtx('artUserPaintCtx')\n\n# set the init mel script\ncmds.artUserPaintCtx( 'artUserPaintCtx', e=True, ic='spherePaint' )", 
    "assembly": "\n\nimport maya.cmds as cmds\n\n#Create a default type of assembly named as MyAssembly.\n#Assembly name is optional.\n#\ncmds.assembly( name='MyAssembly')\n#Set the default type as MyAssemblyType.\n#\ncmds.assembly( edit=True, defaultType='MyAssemblyType')", 
    "assignCommand": "\n\nimport maya.cmds as cmds\n\n# Print out all the names of the named command objects and the\n# hotkey attached to them.\n#\ncount = cmds.assignCommand(query=True, numElements=True)\nprint ('There are ' + str(count) + ' named command objects.')\n\nfor index in range(1, count+1):\n        keyString = cmds.assignCommand(index, query=True, keyString=True)\n\n        displayString = '(';\n\n        if 0 \" len(keyString):\n                if \"1\" == keyString[2]: displayString += 'Ctrl+'\n                if \"1\" == keyString[1]: displayString += 'Alt+'\n                if \"1\" == keyString[4]: displayString += 'Command+'\n\n                displayString += keyString[0]\n\n                if \"1\" == keyString[3]: displayString += ' Release'\n\n        displayString += ')'\n\n        print cmds.assignCommand(index, query=True, name=True), displayString", 
    "assignInputDevice": "\n\nimport maya.cmds as cmds\n\ncmds.assignInputDevice( 'setKeyframe', d='spaceball', c='Button1' )\n\n# This command will assign button1 on the spaceball with\n# the setKeyframe command.  This is very much like using\n# the spaceball buttons as hotkeys.\n\ncmds.assignInputDevice( '\"currentTime -e Axis0\"', d='midi', ct=True, m=True )\n\n# This command will execute the command to set the time\n# to the value of the first midi slider.  As the slider\n# moves this command will be executed.  So the slider\n# will control time.", 
    "assignViewportFactories": "\n\nimport maya.cmds as cmds\n\n# To set the viewport factories for all dgs_material nodes.\n#\ncmds.assignViewportFactories( materialFactory='MentalRayMaterial', textureFactory='MentalRayTexture', nodeType='dgs_material' )", 
    "attachCurve": "\n\nimport maya.cmds as cmds\n\n# Attach the curves and remove the multiple knots:\ncmds.attachCurve( 'curve1', 'curve2', kmk=False )", 
    "attachDeviceAttr": "\n\nimport maya.cmds as cmds\n\ncmds.attachDeviceAttr( 'surface1.translateX', d='spaceball', ax='XAxis' )\n\n# This command will assign the XAxis of the spaceball to\n# the translateX attribute of surface1.  This\n# assignment is independent of the selection list (i.e.\n# if surface1 was selected when the command is executed,\n# surface1 will be translated by the spaceball regardless\n# of the current selection.)\n\ncmds.attachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )\n\n# This command will assign the XAxis of the spaceball to\n# the translateX attribute of the selected objects.\n\ncmds.attachDeviceAttr( d='wacom', ax='puck:X', c='puckButton1', at='translateX', sl=True )\ncmds.attachDeviceAttr( d='wacom', ax='puck:Y', c='puckButton1', at='translateY', sl=True )\n\n# This command will attach the wacom puck X and Y axes to the\n# X and Y translate attributes of the selected items.\n# When the selection changes so does the attachment.\n# The -c option means you can only move the selected items\n# with the puck when button1 on the puck is down.", 
    "attachSurface": "\n\nimport maya.cmds as cmds\n\n# Attach the nurbs planes (in the default U direction) and remove the\n# multiple knots:\ncmds.attachSurface( 'nurbsPlane1', 'nurbsPlane2', kmk=False )\n\n# Attach the two active surfaces along the v direction (keeps multiple\n# knots by default):\ncmds.attachSurface( du=False )", 
    "attrColorSliderGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window( title='Attr Field Slider Groups' )\nobjName = cmds.shadingNode('phong', asShader=True)\ncmds.columnLayout()\ncmds.attrColorSliderGrp( at='%s.color' % objName )\ncmds.showWindow()", 
    "attrCompatibility": "\n\nimport maya.cmds as cmds\n\n# Rename '.x' attributes in old files to '.tx' for all nodes\n# of type 'transform'\n#\ncmds.attrCompatibility( 'transform', 'x', r='tx' )\n\n# Rename the old 'group' node to the new 'transform' node\n#\ncmds.attrCompatibility( 'group', nr='transform' )\n\n# This will cause all subsequent attrCompatibility calls to translate\n# files from older versions to version 1.0.\n#\ncmds.attrCompatibility( v='1.0' )", 
    "attrControlGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.attrControlGrp( attribute='defaultResolution.width' )\ncmds.showWindow()", 
    "attrEnumOptionMenu": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\nnode = cmds.createNode('opticalFX')\nattrib = node + '.glowType'\ncmds.attrEnumOptionMenu( label='Glow Type', attribute=attrib );\ncmds.showWindow( window )", 
    "attrEnumOptionMenuGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.attrEnumOptionMenuGrp( l='Output Format',\n                            at='defaultRenderGlobals.imageFormat',\n                            ei=[(0, 'GIF'),(1, 'SoftImage'), (2, 'RLA'),\n                                (3, 'TIFF'), (4, 'TIFF16'), (5, 'SGI'),\n                                (6, 'Alias PIX'), (7, 'Maya IFF'), (8, 'JPEG'),\n                                (9, 'EPS'), (10, 'Maya16 IFF'), (11, 'Cineon'),\n                                (12, 'Quantel'), (13, 'SGI16'), (19, 'Targa'),\n                                (20, 'BMP') ] )\ncmds.showWindow()", 
    "attrFieldGrp": "\n\nimport maya.cmds as cmds\n\n#    Create an object and a window containing an 'attrFieldGrp' that will\n#    manipulate the position of that object.\n#\nobject = cmds.sphere()\nwindow = cmds.window(title='attrFieldGrp Example')\ncmds.columnLayout()\ncmds.attrFieldGrp( attribute='%s.translate' % object[0] )\ncmds.showWindow()", 
    "attrFieldSliderGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window( title='Attr Field Slider Groups' )\nobjName = cmds.sphere()\ncmds.columnLayout()\ncmds.attrFieldSliderGrp( min=-10.0, max=10.0, at='%s.tx' % objName[0] )\ncmds.showWindow()", 
    "attrNavigationControlGrp": "\n\nimport maya.cmds as cmds\n\nnewNode = cmds.shadingNode( 'blinn', asShader=True )\nnewNodeAttr = newNode + '.normalCamera'\ncmds.window()\ncmds.columnLayout()\ncmds.attrNavigationControlGrp( l='bump mapping', at=newNodeAttr )\ncmds.showWindow()", 
    "attributeInfo": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'choice' )\n# Get the list of only hidden choice node attributes\n#\ncmds.attributeInfo( h=True, t='choice' )\n# Result: [u'message', u'isHistoricallyInteresting', u'binMembership'] #\n# Get the list of all attributes on choice nodes\ncmds.attributeInfo( all=True, t='choice' )\n# Result: [u'message', u'caching', u'isHistoricallyInteresting', u'nodeState', u'binMembership', u'selector', u'input', u'output'] #\n# Get the list of boolean or enumerated transform node attributes\n#\ncmds.attributeInfo( b=True, e=True, t='transform' )\n# Result: [u'caching', u'nodeState', u'visibility', u'intermediateObject', u'template', u'ghosting', u'useObjectColor', u'overrideDisplayType', u'overrideLevelOfDetail', u'overrideShading', u'overrideTexturing', u'overridePlayback', u'overrideEnabled', u'overrideVisibility', u'lodVisibility', u'layerRenderable', u'renderLayerRenderable', u'ghostingControl', u'rotateOrder', u'minTransXLimitEnable', u'minTransYLimitEnable', u'minTransZLimitEnable', u'maxTransXLimitEnable', u'maxTransYLimitEnable', u'maxTransZLimitEnable', u'minRotXLimitEnable', u'minRotYLimitEnable', u'minRotZLimitEnable', u'maxRotXLimitEnable', u'maxRotYLimitEnable', u'maxRotZLimitEnable', u'minScaleXLimitEnable', u'minScaleYLimitEnable', u'minScaleZLimitEnable', u'maxScaleXLimitEnable', u'maxScaleYLimitEnable', u'maxScaleZLimitEnable', u'inheritsTransform', u'displayHandle', u'displayScalePivot', u'displayRotatePivot', u'displayLocalAxis', u'dynamics', u'showManipDefault', u'rotationInterpolation', u'miDeriveFromMaya', u'miHide', u'miVisible', u'miTrace', u'miShadow', u'miCaustic', u'miGlobillum', u'miExportGeoShader'] #\n# Get the list of short names of enumerated attributes on a particular choice\n# node.\n#\ncmds.attributeInfo( 'choice1', s=True, e=True )\n# Result: message input output selector\n# Get the list of hidden or internal attributes on one particular choice node\n# using the UI name for the attributes (that is the one that will show up\n# in the attribute editor).\n#\ncmds.attributeInfo( 'choice1', ui=True, h=True, i=True )\n# Result: [u'Message', u'Caching', u'Is Historically Interesting', u'Node State', u'Bin Membership'] #", 
    "attributeMenu": "\n\nimport maya.cmds as cmds\n\ncmds.attributeMenu( 'nodeName', inputs=1, beginMenu=True, editor='editor' )\ncmds.attributeMenu( 'nodeName', inputs=0, beginMenu=True, editor='editor' )", 
    "attributeName": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ncmds.attributeName( \"persp.tx\" )\n# Result: Translate X #\ncmds.attributeName( \"persp.translateX\", s=True )\n# Result: tx #\ncmds.attributeName( \"persp.tx\", l=True )\n# Result: translateX #\ncmds.attributeName( \"nurbsSphere1.controlPoints[50].xv\", leaf=True )\n// Result: xValue //\ncmds.attributeName( \"nurbsSphere1.controlPoints[50].xv\", leaf=False )\n// Result: Control Points[50].X Value //", 
    "attributeQuery": "\n\nimport maya.cmds as cmds\n\n# Determine the hidden status of the \"selector\" attribute on choice nodes.\n#\ncmds.attributeQuery( 'selector', typ='choice', h=True )\n# Result: 0\n# Determine the hidden status of the \"selector\" attribute on this choice node.\n# (Usually the same but you can do this for dynamic attributes too.)\n#\ncmds.createNode( 'choice', n='whoIsIt' )\n# Result: choice1\ncmds.attributeQuery( 'selector', n='whoIsIt', h=True )\n# Result: 0\n# Determine the range of the selector value on choice nodes.\n# In this case there is no range.\n# Note, if there is only a minimum or only a maximum range will not set.\n#\ncmds.attributeQuery( 'selector', typ='choice', range=True )\n# For the next several examples create a poly cube and add extra attributes.\ncmds.polyCube( cuv=4, ch=1, w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0) )\ncmds.addAttr( '|pCube1', ln='egRange', at='long', min=0, max=5, dv=2 )\ncmds.setAttr( '|pCube1.egRange', e=True, keyable=False )\n# Determine if an attribute is keyable\n#\ncmds.attributeQuery( 'egRange', node='pCube1', k=True )\n# Result: 0\n# Determine the minimum and maximum values of the added attribute egRange\n#\ncmds.attributeQuery( 'egRange', node='pCube1', range=True )\n# Result: [0.0, 5.0]\n# Determine if there is a minimum for the attribute.\n# Note, having a minimum or maximum value does not imply the attribute has a range.\ncmds.addAttr( '|pCube1', ln='egMin', at='long', min=2 )\ncmds.attributeQuery( 'egMin', node='pCube1', minExists=True )\n# Result: 1\ncmds.attributeQuery( 'egMin', node='pCube1', maxExists=True )\n# Result: 0\ncmds.attributeQuery( 'egMin', node='pCube1', min=True )\n# Result: [2.0]\n# Determine if an attribute is an enum\n# List the enum strings. This will use ':' as a separator like the attr is written in\n# an .ma file.\ncmds.addAttr( '|pCube1', ln='myEnum', at='enum', en='chicken:turkey:duck:', ct='fowl' )\ncmds.attributeQuery( 'myEnum', node='pCube1', listEnum=True )\n# Result: [u'chicken:turkey:duck'] #\n# Secondary way to find an attribute's type directly\ncmds.attributeQuery( 'myEnum', node='pCube1', attributeType=True )\n# Result: ['enum'] #\n# See to which categories and attribute belongs\ncmds.attributeQuery( 'myEnum', node='pCube1', categories=True )\n# Result: ['fowl'] #", 
    "audioTrack": "\n\nimport maya.cmds as cmds\n\n#  Move the audio clip named \"audio2\" to track 3\n#\ncmds.audioTrack( 'audio2', track=3 )\n# Lock the track containing the audio clip named \"audio1\"\n#\ncmds.audioTrack( 'audio1', lock=True )\n# Remove any empty tracks\n#\ncmds.audioTrack(removeEmptyTracks=True)\n# audioTrack -q -track audio1;\n#\ncmds.audioTrack( 'audio1', q=True, track=True )", 
    "autoKeyframe": "\n\nimport maya.cmds as cmds\n\n# Start remembering attributes that have changed\n#\ncmds.autoKeyframe( state=True )\n\n# Set a keyframe for all attributes that have changed\n# since the last \"autoKeyframe( state=True )\n#\ncmds.autoKeyframe()\n\n# Stop remembering attributes that have changed.\n# Note that Subsequent \"autoKeyframe\" commands\n# (with no flags) will have no effect until an\n# autoKeyframe( state=True ) command is executed.\n#\ncmds.autoKeyframe( state=False )\n\n# When auto-keying, key all character attributes, not just\n# those that have changed.\n#\ncmds.autoKeyframe( characterOption=\"all\" )", 
    "autoPlace": "\n\nimport maya.cmds as cmds\n\n#    Move the scene around a bit so the grid is no longer\n#    centered in the view.\n#\ncmds.track( right=10 )\ncmds.track( down=10 )\n\n#    Create a sphere.\n#\nsphere = cmds.sphere()\n\n#    Reposition the sphere so that it is in the center of the\n#    view.\n#\nposition = cmds.autoPlace()\ncmds.move( position[0], position[1], position[2], sphere[0], relative=True )", 
    "autoSave": "\n\nimport maya.cmds as cmds\n\n# set the interval between auto-saves to 5 minutes\n#\ncmds.autoSave( int=300 )\n\n# query the auto-save interval\n#\ncmds.autoSave( q=True, int=True )\n# Result: 300.0 #", 
    "bakeClip": "\n\nimport maya.cmds as cmds\n\n#    First create a simple character.\n#\ncmds.cone( n='bakeCone' )\ncmds.character( n='coneCharacter' )\n#    Create some animation.\n#\ncmds.select( 'bakeCone', r=True )\ncmds.currentTime( 0 )\ncmds.setKeyframe( 'bakeCone.tx', v=0 )\ncmds.currentTime( 10 )\ncmds.setKeyframe( 'bakeCone.tx', v=10 )\n#     Make a clip.\n#\ncmds.clip( 'coneCharacter', startTime=0, endTime=10, name='up' )\n#    Create a second clip.\n#\ncmds.select( 'bakeCone', r=True )\ncmds.currentTime( 15 )\ncmds.setKeyframe( 'bakeCone.tx', v=15 )\ncmds.currentTime( 25 )\ncmds.setKeyframe( 'bakeCone.tx', v=0 )\n# Make a clip.\n#\ncmds.clip( 'coneCharacter', startTime=15, endTime=25, name='down' )\n# Blend the clips, with a linear weighting function.\n#\nscheduler = cmds.character('coneCharacter', query=True, sc=True)\ncmds.clipSchedule( scheduler, b=(0, 1) )\nblendNode = cmds.clipSchedule( scheduler, q=True, bn=(0, 1))\ncmds.setKeyframe( blendNode[0], at='weight', t=0.0, v=0.0 )\ncmds.setKeyframe( blendNode[0], at='weight', t=1.0, v=1.0 )\n#    Bake out the two clips and the blend.\n#\ncmds.bakeClip( 'coneCharacter', ci=[0, 1], name='bakedUpAndDown' )", 
    "bakePartialHistory": "\n\nimport maya.cmds as cmds\n\n# create a cylinder with history to use as an example\n#\ncyl = cmds.polyCylinder()\ncmds.polySmooth()\ncmds.cluster()\ncmds.select( cyl[0],r=True )\ncmds.polyTriangulate()\n# query what will be baked\n#\ncmds.bakePartialHistory( cyl[0],query=True,prePostDeformers=True )\n# perform the bake, baking history from before and after the\n# deformer\n#\ncmds.bakePartialHistory( cyl[0],prePostDeformers=True )\n# Bake the history before the geometry cache on the cylinder.\n# To actually demo, add a geometry cache before executing the command\n# below.\n#\ncmds.select( cyl[0],r=True )\ncmds.bakePartialHistory( cyl[0],preCache=True )", 
    "bakeResults": "\n\nimport maya.cmds as cmds\n\n# To replace the set of nodes controlling the animation of\n# surface1.translateX with a single animation animCurve, between the\n# time interval 5-44, with a sampling frequency of 2 timeUnits, use the\n# following command:\ncmds.bakeResults( 'surface1.translateX', t=(5,44), sb=2 )\n\n# This bakes the joints on a skeleton over the time interval 1-40.\ncmds.bakeResults( 'joint*', t=(1,40), simulation=True )", 
    "bakeSimulation": "\n\nimport maya.cmds as cmds\n\n# To replace the animation driven by an ik handle of joints,\n# starting from joint1, with separate animCurves, within the\n# time interval 5-44, with a sampling frequency of 2 timeUnits,\n# use the following command:\n#\ncmds.bakeSimulation( 'joint1', t=(5,44), sb=2, at=[\"rx\",\"ry\",\"rz\"], hi=\"below\" )", 
    "baseTemplate": "\n\nimport maya.cmds as cmds\n\n#    Determine if template exists\n#\ncmds.baseTemplate ('foo.xml', exists=True)\n#", 
    "baseView": "\n\nimport maya.cmds as cmds\n\n# Obtain a list of all available views for template1\n#\ncmds.baseView ( 'AEblinn', query=True, viewList=True);\n# Result: [u'Animation', u'Rendering'] #\n#", 
    "batchRender": "\n\nimport maya.cmds as cmds\n\ncmds.batchRender()\n\ncmds.batchRender( 'mayafile' )", 
    "bevel": "\n\nimport maya.cmds as cmds\n\n# Bevel (one) active curve with a width and depth of 1.5:\ncmds.bevel( w=1.5, d=1.5 )\n\n# Create a single-sided bevel (at start) surface using the specified\n# curve (with the default dimensions):\ncmds.bevel( 'curve1', ns=2 )", 
    "bevelPlus": "\n\nimport maya.cmds as cmds\n\ncmds.circle()\ncmds.scale( 10, 10, 10, r=True )\ncmds.circle()\ncmds.scale( 5, 5, 5, r=True )\ncmds.bevelPlus( 'nurbsCircle1', 'nurbsCircle2', po=1, cap=4, outerStyle=2, innerStyle=4 )", 
    "bezierAnchorPreset": "\n\nimport maya.cmds as cmds\n\n# Applies the \"Bezier\" anchor preset to all selected anchors\ncmds.bezierAnchorPreset( p=0 )\n\n# Applies the \"Bezier Corner\" anchor preset to all selected anchors\ncmds.bezierAnchorPreset( p=1 )\n\n# Applies the \"Corner\" anchor preset to all selected anchors\ncmds.bezierAnchorPreset( p=2 )", 
    "bezierAnchorState": "\n\nimport maya.cmds as cmds\n\n# Sets all selected anchors (or attached tangent handles) to smooth and uneven\ncmds.bezierAnchorState( sm=1, ev=0 )", 
    "bezierCurveToNurbs": "\n\nimport maya.cmds as cmds\n\ncmds.bezierCurveToNurbs( )\n# Converts call selected Bezier curves to NURBS curves.", 
    "bezierInfo": "\n\nimport maya.cmds as cmds\n\n# Queries the CV index of the anchor index 1\ncmds.bezierInfo( cfa=1 )\n\n# Queries the anchor index of a CV index 3\ncmds.bezierInfo( afc=3 );", 
    "binMembership": "\n\nimport maya.cmds as cmds\n\n# Add a given node to a bin.\n#\ncmds.binMembership( 'lambert1', addToBin='wood' )\n# Add a selection of nodes to a given bin.\n#\nnewLambertNode = cmds.createNode('lambert')\nlist = (\"lambert1\", newLambertNode)\ncmds.binMembership( list, addToBin='grass' )\n# Check if a node exists in a bin.\n#\ncmds.binMembership( 'lambert1', exists='wood' )\n# Query and return all the nodes which belong to the bin.\n#\nnewLambertNode = cmds.createNode('lambert')\nnodeList = (\"lambert1\", newLambertNode)\ncmds.binMembership( nodeList, query=True, listBins=True )\n# Make the nodes belong exclusively in bin \"wood\".\n#\nnewLambertNode = cmds.createNode('lambert')\nnodeList = (\"lambert1\", newLambertNode)\ncmds.binMembership( nodeList, makeExclusive='wood' )\n# Let the dest node inherit bins from nodes in the src node list.\n# The dest node is specified by the \"inheritBinsFromNodes\" flag's\n# argument.\n#\ncmds.binMembership( 'lambert1', addToBin='wood' )\nnode = cmds.createNode('lambert')\ncmds.binMembership( node, addToBin='grass' )\nsrcNodeList = (\"lambert1\", node)\ndestNode = cmds.createNode('blinn')\ncmds.binMembership( srcNodeList, inheritBinsFromNodes=destNode )\n# Notify that binMembership has been changed.\n#\ncmds.binMembership( notifyChanged=True )\n# Check if a bin name is valid or not.  If valid, return true.\n# Otherwise, return false.\n#\ncmds.binMembership( isValidBinName='wood' )", 
    "bindSkin": "\n\nimport maya.cmds as cmds\n\n# Create a joint chain and a polygonal plane.\ncmds.select(d=True)\ncmds.joint(p=(-3.0, 0.0,-12.0))\ncmds.joint(p=(-3.0, 0.0, -5.0))\ncmds.joint(p=(1.0, 0.0, 5.5))\ncmds.joint(p=(6.0, 0.0, 10.0))\ncmds.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\n\ncmds.select('joint1',add=True)\n\n# to bind the selected objects to the selected skeleton\n#\ncmds.bindSkin()\n\n# to bind nurbsSphere1 and pPlane1 to the skeleton containing joint2\n#\ncmds.bindSkin( 'nurbsSphere1', 'joint2', 'pPlane1' )\n\n# to bind the selected partition to the selected skeleton\n#\ncmds.bindSkin( bp=True )\n\n# to bind the selected objects to the selected bones only,\n# not the entire skeleton\n#\ncmds.bindSkin( tsb=True )\n\n# to detach the selected objects and delete any unused\n# bindSkin history\n#\ncmds.bindSkin( unbind=True )\n\n# to detach pPlane1 and delete any unused\n# bindSkin history\n#\ncmds.bindSkin( 'pPlane1', unbind=True )\n\n# to detach the selected objects and keep the history\n#\ncmds.bindSkin( unbindKeepHistory=True )\n\n# To disable the skin on the selected skeletons. This gives\n# the effect of detaching the skin without removing the\n# bindSkin groups on the object. You can then modify the joint\n# positioning, and enable the binding, keeping your original\n# groups.\n#\ncmds.bindSkin( enable=False )\n\n# to enable skin on a skeleton which has been disabled\n#\ncmds.bindSkin( enable=True )", 
    "blend": "", 
    "blend2": "\n\nimport maya.cmds as cmds\n\n# Do blend with auto normal and with no history:\ncmds.blend2( an=True, ch=False )\n\n# Do blend without auto normal\ncmds.blend2( an=False, fln=True, frn=True )", 
    "blendCtx": "", 
    "blendShape": "\n\nimport maya.cmds as cmds\n\n#\n# Perform a blendShape using the currently-selected objects.\n# The lead (last-selected) object will be the base shape, and each\n# of the others become targets.\n#\ncmds.blendShape()\n\n#\n# Create a blendShape that starts with curve3 as the base, and blends\n# in curve1 and curve2 as targets.\n\ncmds.blendShape( 'curve1', 'curve2', 'curve3' )\n\n#\n# Apply 80% of the total blendShape deformation, by setting\n# the envelope parameter to 0.8\ncmds.blendShape( 'blendShape1', edit=True, en=0.8 )\n\n\n#\n# Set the weights for the first two target shapes to 0.6\n# and 0.1 respecxtively\ncmds.blendShape( 'blendShape1', edit=True, w=[(0, 0.6), (1, 0.1)] )\n\n#\n# Add a third target (target3) to the blendShape on curve3\ncmds.blendShape( 'blendShape1', edit=True, t=('curve3', 1, 'target3', 1.0) )\n\n#\n# Add an inbetween (smirk) on target3 for base shape curve3\n# The inbetween will take effect at a weight of 0.2\ncmds.blendShape( 'blendShape2', edit=True, ib=True, t=('curve3', 2, 'smirk', 0.2) )", 
    "blendShapeEditor": "\n\nimport maya.cmds as cmds\n\ncmds.blendShapeEditor( 'libEd' )", 
    "blendShapePanel": "\n\nimport maya.cmds as cmds\n\ncmds.blendShapePanel( 'bsP' )", 
    "blendTwoAttr": "\n\nimport maya.cmds as cmds\n\n# Assume we have animated a bouncing sphere, sphere1, and we would like\n# the sphere to smoothly transition into following a second sphere's,\n# sphere2, animation between time 15 and 20.\n#\ncmds.select( 'sphere1' )\ncmds.blendTwoAttr( at='tx', at1='sphere2.tx', t=(15,20) )\ncmds.blendTwoAttr( at='ty', at1='sphere2.ty', t=(15,20) )\ncmds.blendTwoAttr( at='tz', at1='sphere2.tz', t=(15,20) )\n\n# You can use the \"-at\" flag to narrow the query. For example, if\n# you wanted to know the names of the newly created blender curves\n# for only the tx and tz attributes of sphere1, you could say:\n#\ncmds.blendTwoAttr( at=['tx','tz'], query=True, blender=True )\n\n# You can now keyframe the sphere2's animation by changing the\n# driver on sphere1.\n#\ncmds.blendTwoAttr( at='tx', edit=True, driver=1 )\n# setKeyframe ...\n\n# If you already had two objects, sphere1 and sphere2 animated, and\n# you wanted to blend between their animation abruptly at time 15,\n# you could do:\n#\ncmds.blendTwoAttr( 'newObject.tx', t=(15,15), at0='sphere1.tx', at1='sphere2.tx' )", 
    "blindDataType": "\n\nimport maya.cmds as cmds\n\n# To create a new blind data typeId with a floating point attribute\ncmds.blindDataType( id=9001, dt='float', longDataName='bdFloat', shortDataName='bdf' )\n# To create a Blind Data type with several attributes\ncmds.blindDataType( 'ruf', '-dt', 'float', '-longDataName', 'smoothness', '-shortDataName', 'smo', '-dt', 'int' id=9005, dt='float', longDataName='roughness', shortDataName='', longDataName='count', shortDataName='cnt' )\n# To query if a type is already used\ncmds.blindDataType( 9001\n# to query the type of a single attribute\n 'blindDataType', '-q', '-id', 9001, '-tn', '-ldn', 'smoothness', query=True, id=True )\n# to get the types and names for all attributes\ncmds.blindDataType( 9001, '-tn', query=True, id=True )", 
    "boneLattice": "\n\nimport maya.cmds as cmds\n\n# select a lattice that has been added to a rigid skin shape\n#\ncmds.boneLattice( joint='joint2' )\ncmds.boneLattice( transform='joint1', joint='joint2' )\ncmds.boneLattice( 'boneLattice1', edit=True, bicep=0.5 )", 
    "boundary": "\n\nimport maya.cmds as cmds\n\n# Creating boundary surfaces with three curves:\n\ncrv1 = cmds.curve(d= 3, p= ((8, 0, 3), (5, 0, 3), (2, 0, 2), (0, 0, 0)) )\ncrv2 = cmds.curve(d= 3, p= ((8, 0, -4), (5, 0, -3), (2, 0, -2), (0, 0, 0)) )\ncrv3 = cmds.curve(d= 3, p= ((10, 0, 3), (9, 3, 2), (11, 3, 1), (9, 0, -3)) )\n\n# These curves form a rough triangle shape pointing at the origin.\n# If order is OFF, then the apex of the surface will always between\n# the 1st and 2nd curves.\n\ncmds.boundary( crv3, crv1, crv2, order=False, ep=0 )\ncmds.boundary( crv3, crv2, crv1, order=False, ep=0 )\n\n# If order is ON, then think of the order of selection as \"rail, rail, profile\"\n# where the boundary is formed by sweeping the profile along two rails.\n# Direction of the curves becomes important as well; use the reverseCurve\n# command if you want to change a curve's direction.\ncmds.boundary( crv1, crv2, crv3, order=True )\n\n\n# Creating boundary surfaces with four curves:\n\ncrv1 = cmds.curve(d= 3, p=((-2, 0, 5), (-1, 0, 3), (1, 0, 3), (3, 0, 4), (6, 0, 5)) )\ncrv2 = cmds.curve(d= 3, p=(( 7, 0, 4), (8, 0, 2), (8, 0, -3), (7, 0, -4)) )\ncrv3 = cmds.curve(d= 3, p=(( 6, 0, -5), (2, 0, -3), (1, 0, -5), (-3, 0, -5)) )\ncrv4 = cmds.curve(d= 3, p=((-2, 0, 4), (-4, 0, 1), (-4, 0, -3), (-2, 0, -4)) )\n\n# These curves form a rough square shape around the origin.\n# To make a boundary surface from four curves, two of the curves are\n# \"rails\" while the other two are \"profiles\".\n\ncmds.boundary( crv1, crv2, crv3, crv4, order=False, ep=0 )\ncmds.boundary( crv2, crv3, crv4, crv1, order=False, ep=0 )\n\n# profile, rail, profile, rail\n# Notice that in both cases, the resulting boundary surface passes through\n# the rail curves.\n\n# When order is ON, direction of the curves becomes important;\n# use the reverseCurve command if you want to change a curve's direction.\n# Notice the difference between:\n\ncmds.boundary( crv1, crv2, crv3, crv4, order=False, ep=0 )\ncmds.boundary( crv1, crv2, crv3, crv4, order=True, ep=0 )", 
    "boxDollyCtx": "\n\nimport maya.cmds as cmds\n\ncmds.boxDollyCtx( 'boxDollyContext', ac=False )", 
    "boxZoomCtx": "\n\nimport maya.cmds as cmds\n\ncmds.boxZoomCtx( 'boxZoomContext', zs=1.0 )", 
    "bufferCurve": "\n\nimport maya.cmds as cmds\n\n# Create a buffer curve for the selected keys\ncmds.bufferCurve( animation='keys', overwrite=True )\n\n# Swap the buffer curve for the selected keys\ncmds.bufferCurve( animation='keys', swap=True )", 
    "buildBookmarkMenu": "\n\nimport maya.cmds as cmds\n\n# Update the bookmarkMenu to show animation (bookmarkAnimCurves)\n# bookmarks\n#\ncmds.menu( 'bookmarkMenu' )\ncmds.buildBookmarkMenu( 'bookmarkMenu', type='bookmarkAnimCurves' )", 
    "buildKeyframeMenu": "\n\nimport maya.cmds as cmds\n\n# Set up \"myAttributeMenu\" as a menu to always\n# reflect what's currently keyframable.\n#\ncmds.buildKeyframeMenu( 'myAttributeMenu' )", 
    "button": "\n\nimport maya.cmds as cmds\n\ndef defaultButtonPush(*args):\n  print 'Button 1 was pushed.'\n\ncmds.window( width=150 )\ncmds.columnLayout( adjustableColumn=True )\ncmds.button( label='Button 1', command=defaultButtonPush )\ncmds.button( label='Button 2' )\ncmds.button( label='Button 3' )\ncmds.button( label='Button 4' )\ncmds.showWindow()", 
    "buttonManip": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\n#    Create a button manipulator that will be parented to a sphere and will\n#    print \"Button Manipulator\" whenever it is pressed.\n#\n#    Note that moving the sphere will also move the manipulator.\n#\nsphere = cmds.sphere()\ncmds.buttonManip( 'print \"Button Manipulator\"', sphere[0])\n\n#    Example 2.\n#\n#    Create a button manipulator that will execute the 'setKeyframe' command\n#    when it is pressed.\n#\ncmds.buttonManip( 'setKeyframe' )", 
    "cacheFile": "\n\nimport maya.cmds as cmds\n\n# Create a disk cache containing the points of a plane from\n# frames 1 - 100. Typically the shape would be deforming.\n#\ncmds.polyPlane()\ncacheFiles = cmds.cacheFile(f='shapeCache', st=1, et=100, points='pPlaneShape1')\n# Add a historySwitch node to the history of the shape, and attach the\n# newly created cache into the historySwitch node.\n#\nswitch = maya.mel.eval('createHistorySwitch(\"pPlaneShape1\",false)')\ncacheNode = cmds.cacheFile(f=cacheFiles[0], cnm='pPlaneShape1', ia='%s.inp[0]' % switch ,attachFile=True)\ncmds.setAttr( '%s.playFromCache' % switch, 1 )\n# query the files associated with a cacheFile node\n#\ncmds.cacheFile( cacheNode, query=True, f=True )\n# Now use the staticCache flag to indicate that the cache should not be\n# created if the object appears to have no animation.\n# Since the plane is not animated or deformed, no cache will be created.\n#\ncmds.polyPlane()\ncacheFiles = cmds.cacheFile(f='shapeCache', staticCache=0, st=1, et=100, points='pPlaneShape2')\n# Convert a maya cache into pc2 format. The maya cache is named\n# pSphereShape1.xml and located in the directory \"c:/test/\".\n#\ncmds.cacheFile(pc2=0,pcf='c:/test/mypc2.pc2',f='pSphereShape1',dir='c:/test/')\n# Convert a pc2 cache into a maya cache, with the cache data in a single\n# file.\n#\ncmds.cacheFile(pc2=1,pcf='c:/test/mypc2.pc2',f='mayaCache2',dir='c:/test/',format='OneFile')", 
    "cacheFileCombine": "\n\nimport maya.cmds as cmds\n\n# Create a cacheBlend node so that additional caches can be added to\n# the shape. This will attach the existing cacheFile on the shape\n# to the new cacheBlend node.\n#\ncmds.select( 'cachedShape', r=True )\nnewBlend = cmds.cacheFileCombine()\n# attach an additional cacheFile to the cacheBlend node\n#\ncmds.cacheFileCombine( newBlend[0], e=True, cc='cacheFile2' )\n# query the index of the newly connected cache\n#\ncmds.cacheFileCombine( newBlend[0], cc='cacheFile2', query=True, cacheIndex=True )\n# When more than one object is driven by the caches connected\n# to the cacheBlend node, the -channelName and -objectIndex flags can be\n# used to control which is connected.\n#\n# Query the objectIndex for the armShape geometry driven by cacheBlend3:\n#\nindex = cmds.cacheFileCombine('cacheBlend3' ,object='armShape', query=True, objectIndex=True)\n# Connect another cache up to drive the armShape\n#\ncmds.cacheFileCombine( 'cacheBlend3', channelName='myChannel', objectIndex=index, e=True, cc='cacheFile2' )", 
    "cacheFileMerge": "\n\nimport maya.cmds as cmds\n\n# Find associated geometry nodes\n#\ngeom = cmds.cacheFileMerge('cache1', 'cache2' ,query=True, geometry=True)\n# Validate merging of caches and find out start/end times.\n# This will give a warning if there is a gap letting you know that\n# simulation data will fill the gap.\n#\nstartEndTimes = cmds.cacheFileMerge('cache1', 'cache2')\n# Result: { 0, 20, 5, 10 }\nstart = startEndTimes[0]\nend = startEndTimes[1]\ngapStart = startEndTimes[2]\ngapEnd = startEndTimes[3]\n# Create a new merged cache, using simulation data to fill in\n# any gaps between cache1 and cache2.\n#\ncacheFiles = cmds.cacheFile(fileName='mergedCache', startTime=start, endTime=end, points=geom[0])\nswitch = maya.mel.eval('createHistorySwitch(\"pPlaneShape1\", false)');\ncmds.cacheFile( attachFile=True, f=cacheFiles[0], ia='%s.inp[0]' % switch)\ncmds.setAttr( '%s.playFromCache' % switch, 1 )\n# Alternatively, can use append to make sure that we interpolate\n# for the frames in the gap between cache1 and cache2.\n#\ncacheFiles = cmds.cacheFile(fileName='mergedCache', startTime=start, endTime=gapStart, points=geom[0])\nswitch = maya.mel.eval('createHistorySwitch(\"pPlane1\", false)');\ncmds.cacheFile( attachFile=True, f=cacheFiles[0], ia='%s.inp[0]' % switch)\ncmds.setAttr( '%s.playFromCache' % switch, 1 )\ncmds.cacheFile( replaceCachedFrame=True, startTime=gapEnd, endTime=end, points=geom[0] )", 
    "cacheFileTrack": "\n\nimport maya.cmds as cmds\n\n# Move the cache clip named \"cubeCache2\" to track 3\n#\ncmds.cacheFileTrack( 'cubeCache2', track=3 )\n# Lock the track containing the cache clip named \"sphCache1\"\n#\ncmds.cacheFileTrack( 'sphCache1', lock=True )\n# Remove any empty cache tracks for the object \"sphereShape1\"\n#\ncmds.cacheFileTrack('sphereShape1',removeEmptyTracks=True)\n# query the track index of the cache clip named \"sphCache1\"\n#\ncmds.cacheFileTrack( 'sphCache1', q=True, track=True )", 
    "callbacks": "\n\nimport maya.cmds as cmds\n\ndef myCallbackFunction(arg1, arg2):\n                return arg1 + arg2\n# add a new callback for myPlugin to be called when creating the attribute editor UI\ncmds.callbacks(addCallback=myCallbackFunction, hook='desiredHook', owner='myPlugin')\n# remove an individual callback\ncmds.callbacks(removeCallback=myCallbackFunction, hook='desiredHook', owner='myPlugin')\n# remove all callbacks for myPlugin for a specified hook\ncmds.callbacks(clearCallbacks=True, hook='desiredHook', owner='myPlugin')\n# remove all callbacks for myPlugin for all hooks\ncmds.callbacks(clearCallbacks=True, owner='myPlugin')\n# list callbacks for a specified hook\ncallbacks = cmds.callbacks(listCallbacks=True, hook='desiredHook')\n# list callbacks for a specified hook and for a specified owner\ncallbacks = cmds.callbacks(listCallbacks=True, hook='desiredHook', owner='myPlugin')\n# get a list of the standard Maya hooks\ncmds.callbacks(describeHooks=True)\n# execute the callbacks for the hook 'desiredHook'\nresults = cmds.callbacks('arg1', 'arg2', executeCallbacks=True, hook='desiredHook')", 
    "camera": "\n\nimport maya.cmds as cmds\n\n# Create a camera and get the shape name.\ncameraName = cmds.camera()\ncameraShape = cameraName[1]\n\n# Get the focal length of the camera.\nfocalLength = cmds.camera(cameraShape, q=True, fl=True)\n\n# Change the film fit type.\ncmds.camera( cameraShape, e=True, ff='overscan' )", 
    "cameraSet": "\n\nimport maya.cmds as cmds\n\n# create some objects\ncmds.sphere(n='sphere1')\ncmds.cone(n='cone1')\n\n# create a set with whatever is currently active\ncmds.select( 'sphere1', 'cone1')\nnewSet2 = cmds.sets()\n\ncmds.loadPlugin( \"stereoCamera\", qt=True )\nfrom maya.app.stereo import stereoCameraRig\nrig = stereoCameraRig.createStereoCameraRig('StereoCamera')\n\n# Create a new cameraSet node.\ncmds.cameraSet()\n\n# Add the cam \" object set to the set\ncmds.cameraSet( 'cameraSet1', edit=True, appendTo=True, cam=rig[0], objectSet=newSet2 )", 
    "cameraView": "\n\nimport maya.cmds as cmds\n\n# Save the current position of the persp camera.\nhomeName = cmds.cameraView(camera='persp')\n\n# Add this view to the persp bookmark menu.\ncmds.cameraView( homeName, e=True, camera='persp', ab=True )\n\n# Change the persp camera position.\ncmds.dolly( 'persp', distance=-30 )\n\n# Create another bookmark for the zoomed position.\ncmds.cameraView( camera='persp', name='zoom', ab=True )\n\n# Restore original camera position.\ncmds.cameraView( homeName, e=True, camera='persp', sc=True )\n\n# Save the current 2D pan/zoom attributes of the persp camera\npanZoomBookmark = cmds.cameraView( camera='persp', ab=True, typ=1 )\n\n# Enable 2D pan/zoom\ncmds.setAttr( 'perspShape.panZoomEnabled', True )\n\n# Pan right\ncmds.panZoom( 'persp', r=0.6 )\n\n# Restore original film position\ncmds.cameraView( panZoomBookmark, e=True, camera='persp', sc=True )", 
    "canCreateManip": "\n\nimport maya.cmds as cmds\n\ncanWeCreateIt = cmds.canCreateManip('node')", 
    "canvas": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( rowSpacing=5 )\ncmds.canvas( rgbValue=(0, 0, 1), width=100, height=20 )\ncmds.canvas( hsvValue=(60, 1, 1), width=100, height=20 )\ncmds.canvas( rgbValue=(1, 0, 1), width=100, height=20 )\ncmds.showWindow()", 
    "changeSubdivComponentDisplayLevel": "\n\nimport maya.cmds as cmds\n\n# change the selected subdivision surface to display level 4 components\ncmds.changeSubdivComponentDisplayLevel( l=4 )\n# increase the display level of the selected subivision surface by 1\ncmds.changeSubdivComponentDisplayLevel( l=1, r=True )", 
    "changeSubdivRegion": "\n\nimport maya.cmds as cmds\n\n# delete the selection region on the base mesh\ncmds.changeSubdivRegion( a=1, l=0 )\n# expand the selection region at the current level\ncmds.changeSubdivRegion( a=2 )", 
    "channelBox": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.formLayout( 'form' )\ncmds.channelBox( 'dave' )\ncmds.formLayout( 'form', e=True, af=(('dave', 'top', 0), ('dave', 'left', 0), ('dave', 'right', 0), ('dave', 'bottom', 0)) )\ncmds.showWindow()\n\n// Color all attributes names, which have an attribute name\n// beginning with \"T\", white for all current and future objects\n// in the current Maya session\n\ncmds.channelBox( 'cb1', attrRegex='T*', attrColor=(1.0, 1.0, 1.0), attrBgColor=(0.0, 0.0, 0.0) )\ncmds.channelBox( 'cb1', e=True, nodeRegex='D*', attrRegex='A*', attrColor=(0, 0, 0) )", 
    "character": "\n\nimport maya.cmds as cmds\n\n# create two characters with whatever is currently active\ncmds.character()\ncmds.character()\n\n# create a set which contains two sub characters\ncmds.character( 'character1', 'character2', n='parentCharacter' )\n\n# Add the keyable attributes of ikHandle1 to a character\ncmds.character( 'ikHandle1', add='character1' )\n\n# Remove the scale attributes for a transform from a character\ncmds.character( 'sphere1.sx', 'sphere1.sy', 'sphere1.sz', remove='character1' )\n\n# Query the members of the character\nmembers = cmds.character('character1', query=True)\n\n# Query the character plug for a specified member\ncmds.character( members[0], q=True, cp=True )\n\n# Query the library and scheduler of the character\ncmds.character( 'character1', q=True, library=True )\ncmds.character( 'character2', q=True, sc=True )\n\n# Add the sphere as an offset object on the character\ncmds.character( 'pSphere1', e=True, addOffsetObject = 'character1' )", 
    "characterMap": "\n\nimport maya.cmds as cmds\n\n# Create a mapping between character1 and character2, or if a map already\n# exists, update the mapping between any unmapped members.\n#\ncmds.characterMap( 'character1', 'character2' )\n# Query as to whether a mapping exists between two characters\n#\ncmds.characterMap( 'character1', 'character2', query=True )\n# Query which attributes are mapped between two characters\n#\ncmds.characterMap( 'character1', 'character2', query=True, mapAttr=True )\n# Delete the mapping between two pairs of attributes. If no mapping\n# exists between the attributes, nothing will happen.\n#\ncmds.characterMap( 'character1', 'character2', unmapAttr=('sphere1.tx','sphere2.tx') )\n# Add a mapping between two attributes.  Only attributes that\n# are members of characters can be mapped.\n#\ncmds.characterMap( 'character1', 'character2', mapAttr=('sphere1.tx','sphere2.tx') )\n# Query what attribute(s) are mapped to sphere1.tx between character1 and\n# character2\n#\ncmds.characterMap( 'character1', 'character2', mapping='sphere1.tx' )", 
    "characterize": "\n\nimport maya.cmds as cmds\n\n# Characterize a skeleton.  Select the root of the skeleton and enter\n# the following. The skeleton joints must be named according to the\n# FBIK naming conventions described in the main Maya documentation.\n#\ncmds.characterize( pinHandFeet=True )\n# Characterize a skeleton that has not been named according to the\n# FBIK naming conventions by using the -sk flag to define the\n# purpose of the joints. Select the skeleton and enter the following.\n#\ncmds.characterize( sk = 'pelvis Hips,hipL LeftUpLeg,kneeL LeftLeg,footL LeftFoot,toeL LeftToeBase,hipR RightUpLeg,kneeR RightLeg,footR RightFoot,toeR RightToeBase,spine Spine,spine1 Spine1,collarL LeftShoulder,shoulderL LeftArm,elbowL LeftForeArm,handL LeftHand,collarR RightShoulder,shoulderR RightArm,elbowR RightForeArm,handR RightHand,neck Neck,head Head,spine2 Spine2' )\n# Add a floor contact plane to the selected effector\n#\ncmds.select('LeftFootEff', r=True)\ncmds.characterize( e=True, addFloorContactPlane=True )\n# Add a full body pivot to the selected effector.\n#\ncmds.select('LeftHandEff', r=True)\ncmds.characterize( e=True, placeNewPivot=True )\ncmds.move( 1, 1, 0, r=True)\n# Activate a new pivot now that it has been placed in the desired location.\n#\ncmds.characterize( e=True, activatePivot=True )\n# De-activate a pivot so that it can be moved to another location.\n#\ncmds.characterize( e=True, changePivotPlacement=True )", 
    "checkBox": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window('window', width=150)\ncmds.columnLayout( adjustableColumn=True )\ncmds.checkBox( label='One' )\ncmds.checkBox( label='Two' )\ncmds.checkBox( label='Three' )\ncmds.checkBox( label='Four' )\ncmds.showWindow( window )", 
    "checkBoxGrp": "\n\nimport maya.cmds as cmds\n\nexampleWindow = cmds.window()\ncmds.columnLayout()\ncmds.checkBoxGrp( numberOfCheckBoxes=3, label='Three Buttons', labelArray3=['One', 'Two', 'Three'] )\ncmds.checkBoxGrp( numberOfCheckBoxes=4, label='Four Buttons', labelArray4=['I', 'II', 'III', 'IV'] )\ncmds.showWindow( exampleWindow )", 
    "checkDefaultRenderGlobals": "\n\nimport maya.cmds as cmds\n\n# To check if the defaultRenderGlobals node is marked dirty or not.\n#\ncmds.checkDefaultRenderGlobals( query=True, changed=True )\n# To mark the defaultRenderGlobals node dirty.\n#\ncmds.checkDefaultRenderGlobals( changed=True )\n# To mark the defaultRenderGlobals node not dirty.\n#\ncmds.checkDefaultRenderGlobals( changed=False )", 
    "choice": "\n\nimport maya.cmds as cmds\n\n# This example animates an object airplane along a motion path\n# from frames 1 to 30, then continues with keyframe animation until\n# frame 50, then returns to the motion path at frame 50.\npath = cmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\ncmds.polyPlane()\ncmds.pathAnimation('pPlane1',c=path,stu=1,etu=100)\n\n# Set a choice node on the path animation, ensuring that the choice\n# selects path animation from 1 to 30, and then returns at 50.\ncmds.choice( 'pPlane1', at='ty', t=[1,30,50] )\n\n# Start a new kind of choice at time 31\ncmds.choice( 'pPlane1', at='ty', t=31 )\n\n# Create some keyframe animation between times 31 and 49\ncmds.currentTime( 31 )\ncmds.setKeyframe( 'pPlane1', at=\"ty\" )\ncmds.move( 1, 2, 3, r=True )\ncmds.setKeyframe( 'pPlane1', at=\"ty\", t=40 )\ncmds.move( 4, 5, 6, r=True )\ncmds.setKeyframe( 'pPlane1', at=\"ty\", t=49 )\n\n# Note that the -at/attribute and -t/time flags are not\n# queryable in themselves, but they can be used to\n# modify the choice nodes to query.\n\n# What is the attribute that is connected to the pPlane1.ty choice node's\n# selector attribute?\ncmds.choice( 'pPlane1', at='ty', query=True, sl=True)\n\n# Which indices will be evaluated for the choice node to pPlane1.ty\n# at the given times?\ncmds.choice( 'pPlane1', at='ty', t=[1,30,50], query=True, index=True)", 
    "circle": "\n\nimport maya.cmds as cmds\n\n# create full circle at origin on the x-y plane\ncmds.circle( nr=(0, 0, 1), c=(0, 0, 0) )\n\n# create half circle at origin on the x-y plane with radius 2\ncmds.circle( nr=(0, 0, 1), c=(0, 0, 0), sw=180, r=2 )", 
    "circularFillet": "\n\nimport maya.cmds as cmds\n\ncmds.circularFillet( 'surface1', 'surface2', ch=True, pr=-1.0, sr=1.0, cos=False )\ncmds.circularFillet( 'surface3', 'surface4', ch=False, pr=-1.0, sr=2.0, cos=True, pt=0.001 )", 
    "clearCache": "\n\nimport maya.cmds as cmds\n\n# Clear one node's datablock cache\ncmds.clearCache( 'node' )\n# Clear caches in all dependency graph nodes\ncmds.clearCache( all=True )", 
    "clearShear": "", 
    "clip": "\n\nimport maya.cmds as cmds\n\n# First, create a character to hold the clips. The character will be\n# a 3-bone skeleton named \"arm\".\n#\ncmds.select( d=True )\ncmds.joint( p=(0, 0, 0) )\ncmds.joint( p=(0, 4, 0)  )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 8, -1) )\ncmds.joint( 'joint2', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 9, -2) )\ncmds.joint( 'joint3', e=True, zso=True, oj='xyz' )\ncmds.select( 'joint1', 'joint2', 'joint3', r=True )\ncmds.character( name='arm' )\n# Create some animation for the character. For this example the animation will\n# be quite trivial.\n#\ncmds.select( 'joint3', r=True )\ncmds.currentTime( 0 )\ncmds.setKeyframe( 'joint3.rx' )\ncmds.currentTime( 10 )\ncmds.setKeyframe( 'joint3.rx', v=90 )\ncmds.currentTime( 20 )\ncmds.setKeyframe( 'joint3.rx', v=0 )\n# Create a clip for the current animation named \"handWave\"\n#\ncmds.clip( 'arm', startTime=0, endTime=20, name='handWave' )\n# Create a 2nd animation for the character.\n#\ncmds.select( 'joint2', r=True )\ncmds.currentTime( 0 )\ncmds.setKeyframe( 'joint2.rx' )\ncmds.setKeyframe( 'joint2.ry', v=20 )\ncmds.currentTime( 10 )\ncmds.setKeyframe( 'joint2.rx', v=45 )\ncmds.setKeyframe( 'joint2.ry', v=-20 )\ncmds.currentTime( 20 )\ncmds.setKeyframe( 'joint2.rx', v=0 )\ncmds.setKeyframe( 'joint2.ry', v=20 )\n# Create a clip for the current animation named \"elbowWave\"\n#\ncmds.clip( 'arm', startTime=0, endTime=20, name='elbowWave' )\n# Query the existing source clips\n#\ncmds.clip( 'arm', query=True, n=True )\n# Result:[u'handWaveSource', u'elbowWaveSource'] #\n# Query the active clip. Note that the default clip is always active unless\n# another clip has been specified as active. This means that new keyframes\n# always go into the default clip unless you make another clip active.\n#\ncmds.clip( 'arm', query=True, active=True )\n# Result: default #\n# Duplicate the clip named \"elbowWaveSource\" on the character named \"arm\" and\n# place the duplicate in the schedule at a start time of 50\n#\ncmds.clip( 'arm', duplicate=True, name='elbowWaveSource', s=50 )\n# Duplicate the clip named \"wiggle\" on the character named \"arm\" and\n# do not place the duplicate in the schedule\n#\ncmds.clip( 'arm', duplicate=True, sc=False, name='wiggle' )\n# Remove the clip from the character altogether. All instances of the clip will be\n# removed from the schedule and deleted from the library.\n#\ncmds.clip( 'arm', rm=True, name='elbowWaveSource')\n# Make the handWave clip active. This means that any new keyframes get\n# placed in the handWave clip, and modifications to existing handWave\n# keyframes can be made.\n#\ncmds.clip( 'arm', edit=True, active='handWave' )\n# Split the clip named \"handWave\" into two clips at time 10\n#\ncmds.clip( 'arm', split=10, name='handWave' )\n# Query the startTime of a clip. This is the start frame of the animation\n# curve range of the clip, and may differ from the scheduled time of the clip,\n# which is accessed using the clipSchedule command.\n#\ncmds.clip( 'arm', name='handWave', query=True, s=True )", 
    "clipEditor": "\n\nimport maya.cmds as cmds\n\ncmds.clipEditor( \"clipEditorName\" )", 
    "clipEditorCurrentTimeCtx": "\n\nimport maya.cmds as cmds\n\ncmds.clipEditorCurrentTimeCtx()", 
    "clipMatching": "\n\nimport maya.cmds as cmds\n\n# Compute and set the offset on the \"walk\" clip in order to have it's start\n# pose align to the end of the \"tornadoKick\" clip at the LeftAnkle match\n# element.  Note that here we are matching the translation by specifying\n# with mt = 0.\n#\ncmds.select( 'character', 'LeftAnkle' )\ncmds.clipMatching( mt=0, cs=(\"walk\",0.0), cd=(\"tornadoKick\",1.0) )", 
    "clipSchedule": "\n\nimport maya.cmds as cmds\n\n# First, create a character to hold the clips. The character will be\n# a 3-bone skeleton named \"arm\".\n#\ncmds.select( d=True )\ncmds.joint( p=(0, 0, 0) )\ncmds.joint( p=(0, 4, 0)  )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 8, -1) )\ncmds.joint( 'joint2', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 9, -2) )\ncmds.joint( 'joint3', e=True, zso=True, oj='xyz' )\ncmds.select( 'joint1', 'joint2', 'joint3', r=True )\ncmds.character( name='arm' )\n# Create some animation for the character. For this example the animation will\n# be quite trivial.\n#\ncmds.select( 'joint3', r=True )\ncmds.currentTime( 0 )\ncmds.setKeyframe( 'joint3.rx' )\ncmds.currentTime( 10 )\ncmds.setKeyframe( 'joint3.rx', v=90 )\ncmds.currentTime( 20 )\ncmds.setKeyframe( 'joint3.rx', v=0 )\n# Create a clip for the current animation named \"handWave\"\n#\ncmds.clip( 'arm', startTime=0, endTime=20, name='handWave' )\n# Query the name of the clipScheduler for this character\n#\ncmds.character( 'arm', query=True, sc=True )\n# Result: armScheduler1\n# Create a 2nd animation for the character.\n#\ncmds.select( 'joint2', r=True )\ncmds.currentTime( 0 )\ncmds.setKeyframe( 'arm' )\ncmds.currentTime( 10 )\ncmds.setKeyframe( 'joint2.rx', v=45 )\ncmds.setKeyframe( 'joint2.ry', v=-20 )\ncmds.currentTime( 20 )\ncmds.setKeyframe( 'joint2.rx', v=0 )\ncmds.setKeyframe( 'joint2.ry', v=20 )\n# Create a clip for the current animation named \"elbowWave\"\n#\ncmds.clip( 'arm', startTime=0, endTime=20, name='elbowWave' )\n# Instance handeWave at time 10\n#\ncmds.clipSchedule( 'armScheduler1', instance='handWave', s=10 )\n# Query the clip index of the latest instance of handWave. Each instance\n# of a clip received a unique clipIndex. The clip index is used to\n# edit and query data for existing clips.\n#\ncmds.clipSchedule( 'armScheduler1', name='handWave1', query=True, ci=True )\n# Query whether the clip associated with index 2 is enabled or not\n#\ncmds.clipSchedule( 'armScheduler1', ci=2, query=True, enable=True )\n# Query the name of the clip associated with index 2\n#\ncmds.clipSchedule( 'armScheduler1', ci=2, query=True, n=True )\n# Query the weight of the clip associated with index 2\n#\ncmds.clipSchedule( 'armScheduler1', ci=2, query=True, weight=True )\n# Modify the elbowWave clip to start at frame 10 instead of frame 0\n#\ncmds.clipSchedule( 'armScheduler1', start=10, ci=1 )\n# Trim the start of the elbowWave clip to\n# use the animation starting at frame 5 instead 0\n#\ncmds.clipSchedule( 'armScheduler1', sourceStart=5, ci=1 )\n# Trim the end of the elbowWave clip to\n# use the animation up to frame 15 instead 20\n#\ncmds.clipSchedule( 'armScheduler1', sourceEnd=15, ci=1 )\n# Modify the handWave clip to have two cycles instead of 1\n#\ncmds.clipSchedule( 'armScheduler1', postCycle=1, ci=0 )\n# list the animation curves associated with a particular clip\n#\ncmds.clipSchedule( 'armScheduler1', ci=2, listCurves=True )\n# Move a particular clip to a particular track\n#\ncmds.clipSchedule( 'armScheduler1', track=2, ci=0 )\n# Add a blend between clips 1 and 2\n#\ncmds.clipSchedule( 'armScheduler1', b=(1, 2) )\n# Query the name of the blendNode between clips 1 and 2\n#\ncmds.clipSchedule( 'armScheduler1', q=True, bn=(1, 2) )\n# Lock the first track and then query its state\n#\ncmds.clipSchedule( 'armScheduler1', track=1, e=True, lock=1 )\ncmds.clipSchedule( 'armScheduler1', track=1, query=True, lock=True )\n# Query the existing clips in the scheduler.\n# In query mode, returns an array of strings in this form:\n# (clipName,index,start,sourceStart,sourceEnd,scale,preCycle,postCycle,hold)\n#\n# In this case there are three scheduled clips:\n#  2 instances of \"handWave\" and 1 of \"elbowWave\". The clip indices for \"handWave\" are 0\n#  and 3. The clip index for \"elbowWave\" is 2. Note that the clip indices can be sparse\n#  since a clip maintains its index as long as it is in the schedule (the TraX editor).\n#\ncmds.clipSchedule( 'armScheduler1', query=True )\n# Result: handWave,0,0.000000,0.000000,20.000000,1.000000,0.00000,2.00000 elbowWave,1,0.000000,5.000000,15.000000,1.000000,0.00000,1.00000 handWave,2,10.000000,0.000000,20.000000,1.000000,0.00000,1.00000\n#\n# Shift clips 1 and 2 up 3 tracks\n#\ncmds.clipSchedule( 'armScheduler1', sh=-3, shi=1, shi=2 )\n# Print out which anim curves animate which channels for the\n# clip with an index of 2.\n#\nout = cmds.clipSchedule('armScheduler1' ,ci=2, query=True, lp=True)\nfor pair in out:\n   print pair", 
    "clipSchedulerOutliner": "\n\nimport maya.cmds as cmds\n\ncmds.window( 'myWindow', rtf=0, width=200 )\ncmds.formLayout( 'myForm' )\ncmds.clipSchedulerOutliner( 'myOutliner', clipScheduler='charScheduler1' )\ncmds.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\ncmds.showWindow()", 
    "closeCurve": "\n\nimport maya.cmds as cmds\n\ncmds.closeCurve( 'curve1', ch=True, ps=True )\n# Closes curve1 with history and by preserving shape.  The result will\n# be the name of the closed curve, and the name of the newly created\n# dependency node.\n\ncmds.closeCurve( 'curve1', ch=True, ps=False )\n# Closes curve1 with history and will not preserve the shape of the\n# curve.\n\ncmds.closeCurve( 'curve1', ch=True, rpo=True )\n# Closes curve1 with history and replaces the original curve with\n# the closed one.", 
    "closeSurface": "\n\nimport maya.cmds as cmds\n\ncmds.closeSurface( 'surface1', ch=True, d=0, ps=True )\n# Closes surface1 in the U direction with history and by preserving shape.\n# The name of the closed surface, and the name of the newly created\n# dependency node are returned.\n\ncmds.closeSurface( 'surface1', ch=True, d=2, ps=False )\n# Closes surface1 in both U and V directions, with history.  Closing\n# the surface will not preserve the shape of the surface.\n\ncmds.closeSurface( 'surface1.u[0.66]', ch= True )\n# Closes surface1 in the V direction, with history.  The direction is\n# implied from the specified isoparm.", 
    "cluster": "\n\nimport maya.cmds as cmds\n\n# Create a cluster which uses the transformation of elbow1\n#\ncmds.joint(p=(2,0,0),name=\"elbow1\")\ncmds.joint(p=(4,0,0),name=\"wrist1\")\n\ncmds.sphere()\ncmds.cluster( wn=('elbow1', 'elbow1') )\n\n# Edit cluster1 to use the transformation of wrist1.\n#\ncmds.cluster( 'cluster1', e=True, bs=1, wn=('wrist1', 'wrist1') )\n\n# Create a relative cluster with its own cluster handle. The\n# cluster handle is drawn as the letter \"C\".\n#\ncmds.cluster( rel=True )\n\n# Modify the membership of an existing cluster. First, find\n# the name of the cluster's associated set, then use the sets\n# command to edit the set membership (add a cube and remove a plane).\n#\ncmds.listConnections( 'cluster1', type=\"objectSet\" )\n# Result: cluster1Set\ncmds.sets( 'pCube1', add='cluster1Set' )\ncmds.sets( 'pPlane1', rm='cluster1Set' )", 
    "cmdFileOutput": "\n\nimport maya.cmds as cmds\n\ncmds.cmdFileOutput( o='dbOutput.txt' )\n# Result: 1 #\nprint( 'This message is in the file\\n' )\n# This message is in the file\ncmds.cmdFileOutput( s=1 )\n# Result: 0 #\ncmds.cmdFileOutput( s=2 )\n# Result: -3 #\ncmds.cmdFileOutput( c=1 )\n# Result: 0 #\n# Notice that the 'This message is in the file' string is in the file,\n# as are all of the entered commands and the\n# '# Result: ...' lines, etc.\n\n# Turn on logging to a file on Maya startup so as to log all error\n# messages which happen on startup.\n#\n# Set the environment variable MAYA_CMD_FILE_OUTPUT to \"trace.txt\"\n# Start up Maya\n# Messages should now be logged to the file \"trace.txt\" as well as the\n# script editor window.\n\n# Turn off logging to the filename specified by $MAYA_CMD_FILE_OUTPUT\n# after Maya has completed startup.\n#\nimport os\ntraceFile = os.environ[ \"MAYA_CMD_FILE_OUTPUT\" ]\ndescriptor = cmds.cmdFileOutput( q=True, o=traceFile )\nif -1 != descriptor:\n        cmds.cmdFileOutput( close=descriptor )", 
    "cmdScrollFieldExecuter": "\n\nimport maya.cmds as cmds\n\n# this will create a tiny window with a Mel command executer.\ncmds.window()\ncmds.columnLayout()\ncmds.cmdScrollFieldExecuter(width=200, height=100)\ncmds.showWindow()\n\n# this will create a tiny window with a Python command executer.\ncmds.window()\ncmds.columnLayout()\ncmds.cmdScrollFieldExecuter(width=200, height=100, sourceType=\"python\")\ncmds.showWindow()", 
    "cmdScrollFieldReporter": "\n\nimport maya.cmds as cmds\n\n# this will create a tiny window with a command history reporter\ncmds.window()\ncmds.columnLayout()\ncmds.cmdScrollFieldReporter(width=200, height=100)\ncmds.showWindow()", 
    "cmdShell": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\n\n#    Delete the window if it already exists.\n#\nif cmds.window( 'ExampleWindow', exists=True):\n        cmds.deleteUI( 'ExampleWindow', window=True)\n\n#    Create a window containing a cmdShell and a couple buttons.\n#\n#    Use a form layout to position the controls.\n#\ncmds.window( 'ExampleWindow', widthHeight=(300, 300) )\nform = cmds.formLayout()\ncmdShell = cmds.cmdShell()\nclearButton = cmds.button(label='Clear', command=('cmds.cmdShell(\\\"' + cmdShell + '\\\", edit=True, clear=True)' ))\ncloseButton = cmds.button(label='Close', command=('cmds.deleteUI( \"ExampleWindow\", window=True )' ) )\n\n#    Set up the attachments.\n#\ncmds.formLayout( form, edit=True,\n        attachForm=((cmdShell, 'top', 0), (cmdShell, 'left', 0), (cmdShell, 'right', 0), (clearButton, 'left', 0),\n                                                                (clearButton, 'bottom', 0), (closeButton, 'bottom', 0), (closeButton, 'right', 0)),\n        attachControl=(cmdShell, 'bottom', 0, clearButton),\n        attachNone=((clearButton, 'top'), (closeButton, 'top')),\n        attachPosition=((clearButton, 'right', 0, 50), (closeButton, 'left', 0, 50)))\n\ncmds.showWindow( 'ExampleWindow' )", 
    "coarsenSubdivSelectionList": "\n\nimport maya.cmds as cmds\n\n# after selecting components of a subdivision surface\ncmds.coarsenSubdivSelectionList()", 
    "collision": "\n\nimport maya.cmds as cmds\n\ncmds.collision( 'nurbsSphere1', 'particle1', r=.75, f=.1 )\n# Causes particles of particle1 to collide with nurbsSphere1,\n# and sets a resilience value of 0.75 and a friction value of 0.1\n# for the surface.\n\ncmds.collision( 'nurbsSphere1', q=True, f=1 )\n# Returns the friction value stored in the geoConnector for nurbsSphere1.\n\ncmds.collision( 'particleShape1', 'nurbsSphere1', q=True, f=1 )\n# Returns the friction value that particleShape1 is using for collisions\n# against nurbsSphere1.  This may be the same as the friction stored in\n# nurbsSphere1's geoConnector.  Or, if the user broke that connection,\n# then it is whatever value is in the particleShape1's collisionFriction\n# attribute that is used for collision with nurbsSphere1.\n\ncmds.collision( 'nurbsSphere1', 'particleShape1', q=True )\n# Returns whether or not particleShape1 is checking for collisions\n# against nurbsSphere1.\n\ncmds.collision( 'particleShape1', q=True )\n# Returns all of the geometries that particleShape1 is colliding with.", 
    "color": "\n\nimport maya.cmds as cmds\n\n# create a sphere and deselect it\ncmds.sphere( n='sphere1' )\ncmds.select( d=True )\n\n# Set the inactive wireframe color of the sphere to the\n# first user defined color\ncmds.color( 'sphere1', ud=1 )\n\n# set the wireframe color of the sphere back to its default color\ncmds.color( 'sphere1' )", 
    "colorAtPoint": "\n\nimport maya.cmds as cmds\n\n# The return value is the array of values determined by the number of\n# coord flag uses or samplesU * samplesV. The default return value is alpha.\n# If instead the return value is RGB there will be 3 times as many values returned,\n# and if it is RGBA there will be 4 times as many values.\ncmds.createNode( 'checker' )\ncmds.colorAtPoint( 'checker1' )\n# returns the alpha value at uv (0.0,0.0) for texture checker1\n# The return array will have one entry corresponding to this alpha.\ncmds.colorAtPoint( 'checker1', u=.5, v=.5 )\n# returns the alpha value at uv (0.5,0.5) for texture checker1\n# The return array will have one entry corresponding to this alpha.\ncmds.colorAtPoint( 'checker1', o='RGB', u=(.5, 0.0), v=(.5, 0.1) )\n# returns the colors at uv (0.5,0.5) and (0.0, 0.01) for texture checker1\n# The return array will have 6 values in the following order: RGBRGB\ncmds.colorAtPoint( 'checker1', o='A', su=11, sv=6 )\n# returns the alpha for 50 points in a uniform 11 by 6 grid mapped across\n# uv (0.0, 0.0) to uv (1.0, 1.0) The 12th point would be the first point\n# in the second row of samples where uv = (0.0, 0.2)\ncmds.colorAtPoint( 'checker1', o='A', su=3, sv=3, mu=0.3, mv=0.3, xu=0.4, xv=0.4 )\n# returns the alpha for 9 points in a uniform 3 by 3 grid mapped across\n# uv (0.3, 0.3) to uv (0.4, 0.4) The 4th point would be the first point\n# in the second row of samples where uv = (0.35, 0.3).", 
    "colorEditor": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\ncmds.colorEditor()\nif cmds.colorEditor(query=True, result=True):\n        values = cmds.colorEditor(query=True, rgb=True)\n        print 'RGB = ' + str(values)\n        values = cmds.colorEditor(query=True, hsv=True)\n        print 'HSV = ' + str(values)\n        alpha = cmds.colorEditor(query=True, alpha=True)\n        print 'Alpha = ' + str(alpha)\nelse:\n        print 'Editor was dismissed'\n\n#    Example 2.\n#\nresult = cmds.colorEditor()\nbuffer = result.split()\nif '1' == buffer[3]:\n        values = cmds.colorEditor(query=True, rgb=True)\n        print 'RGB = ' + str(values)\n        alpha = cmds.colorEditor(query=True, alpha=True)\n        print 'Alpha = ' + str(alpha)\nelse:\n        print 'Editor was dismissed'", 
    "colorIndex": "\n\nimport maya.cmds as cmds\n\n# Set the first entry in the color palette to have RGB values 1 0 0 - red.\ncmds.colorIndex( 1, 1, 0, 0 )\n\n# Set the first entry in the color palette to have HSV values 360 1 1 - red.\ncmds.colorIndex( 1, 360, 0, 0, hsv=True )\n\n# Return the RGB color values of the first entry of the color palette.\ncmds.colorIndex( 1, q=True )\n\n# Return the HSV color values of the first entry of the color palette.\ncmds.colorIndex( 1, q=True, hsv=True )", 
    "colorIndexSliderGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.colorIndexSliderGrp( label='Select Color', min=0, max=20, value=10 )\ncmds.showWindow()", 
    "colorSliderButtonGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.colorSliderButtonGrp( label='Label', buttonLabel='Button', rgb=(1, 0, 0), symbolButtonDisplay=True, columnWidth=(5, 30), image='navButtonUnconnected.png' )\ncmds.showWindow()", 
    "colorSliderGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.colorSliderGrp( label='Blue', rgb=(0, 0, 1) )\ncmds.colorSliderGrp( label='Green', hsv=(120, 1, 1) )\ncmds.showWindow()", 
    "columnLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( columnAttach=('both', 5), rowSpacing=10, columnWidth=250 )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "commandEcho": "\n\nimport maya.cmds as cmds\n\n# Echo everything\ncmds.commandEcho( state=True )\n# Go back to normal\ncmds.commandEcho( state=False )\n# Display line number information in messages.  This is the default.\ncmds.commandEcho( lineNumbers=True )\n# Do not display line number information in messages.\ncmds.commandEcho( lineNumbers=False )\n# Do not display changeToolIcon, escapeCurrentTool or autoUpdateAttrEd commands when echoing everything\ncmds.commandEcho( filter=('changeToolIcon', 'escapeCurrentTool', 'autoUpdateAttrEd') );\n# Do not display setLastFocusedCommandReporter or setLastFocusedCommandExecuter when echoing everything\ncmds.commandEcho( filter=('setLastFocusedCommand') );", 
    "commandLine": "\n\nimport maya.cmds as cmds\n\n#    Create a window that contains a command line.\n#\nwindow = cmds.window('window')\nform = cmds.formLayout()\nfield = cmds.scrollField()\n\ncmdLine = cmds.commandLine()\ncmds.commandLine( cmdLine, edit=True, height=25)\ncmds.commandLine( cmdLine, edit=True, sourceType=\"python\")\ncmds.formLayout( form, edit=True, attachForm=[(cmdLine, 'top', 0), (cmdLine, 'left', 0), (cmdLine, 'right', 0), (field, 'left', 0), (field, 'bottom', 0), (field, 'right', 0)], attachNone=(cmdLine, 'bottom'), attachControl=(field, 'top', 5, cmdLine) )\n\n#    Give the command line initial keyboard focus.\n#\ncmds.setFocus( cmdLine )\ncmds.showWindow( window )", 
    "commandPort": "\n\nimport maya.cmds as cmds\n\n# Open a command port with the default name \"mayaCommand\".\ncmds.commandPort()\n\n# Close the command port with the default name. Open client connections\n# are not broken.\ncmds.commandPort( cl=True )\n\n# Query to see if the command command port \"mayaCommand\" exists.\ncmds.commandPort( 'mayaCommand', q=True )", 
    "componentBox": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.formLayout( 'form' )\ncmds.componentBox( 'cbox' )\ncmds.formLayout( 'form', e=True, af=(('cbox', 'top', 0), ('cbox', 'left', 0), ('cbox', 'right', 0), ('cbox', 'bottom', 0)) )\ncmds.showWindow()", 
    "componentEditor": "\n\nimport maya.cmds as cmds\n\n# componentEditorWindow is a MEL procedure so need to call through MEL.\nimport maya.mel\nmaya.mel.eval('componentEditorWindow()')\ncmds.componentEditor( 'componentEditorWinComponEditor', q=True, ctl=True )", 
    "condition": "\n\nimport maya.cmds as cmds\n\n#    Create a new condition, called \"UndoNorRedo\", which is true if\n#    and only if undo is not available and redo is not available:\n\ndef isUndoNorRedo() :\n        return not cmds.isTrue('UndoAvailable') and not cmds.isTrue('RedoAvailable')\n\ncmds.condition('UndoNorRedo', initialize=True, d=['UndoAvailable', 'RedoAvailable'], s='isUndoNorRedo')\n\n# Try out the new condition\n#\nif cmds.isTrue('UndoNorRedo') :\n        print 'Neither undo nor redo is available'\nelse :\n        print 'Undo or redo is available'\n\ncmds.condition('UndoNorRedo', delete=True)", 
    "cone": "\n\nimport maya.cmds as cmds\n\ncmds.cone()\ncmds.cone( ch= True, radius=10, hr=3 )\ncmds.cone( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg' )\ncmds.cone( ut=True, tol=0.01 )\n\n#Query the radius of the selected cone\nr = cmds.cone( q=True, r=True )", 
    "confirmDialog": "\n\nimport maya.cmds as cmds\n\n\n# Create an empty single button dialog.\n#\n\ncmds.confirmDialog()\n\n\n# Create a basic Yes/No dialog.\n#\n\ncmds.confirmDialog( title='Confirm', message='Are you sure?', button=['Yes','No'], defaultButton='Yes', cancelButton='No', dismissString='No' )", 
    "connectAttr": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'transform', n='firstGuy' )\ncmds.createNode( 'transform', n='secondGuy' )\n\n# Connect the translation of two nodes together\ncmds.connectAttr( 'firstGuy.t', 'secondGuy.translate' )\n\n# Connect the rotation of one node to the override colour\n# of a second node.\ncmds.connectAttr( 'firstGuy.rotate', 'secondGuy.overrideColor' )", 
    "connectControl": "\n\nimport maya.cmds as cmds\n\nsphereNames = cmds.sphere()\nsphereName = sphereNames[0]\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.text( l='X Value:' )\ncmds.floatField( 'xx' )\ncmds.connectControl( 'xx', '%s.tx' % sphereName )\ncmds.text( l='Visibility' )\ncmds.checkBox( 'vis' )\ncmds.connectControl( 'vis', '%s.visibility' % sphereName )\ncmds.floatFieldGrp( 'rot', l='Rotation:', numberOfFields=3 )\n# index 1 would be the text label\ncmds.connectControl( 'rot', '%s.rx' % sphereName, index=2 )\ncmds.connectControl( 'rot', '%s.ry' % sphereName, index=3 )\ncmds.connectControl( 'rot', '%s.rz' % sphereName, index=4 )\ncmds.showWindow( window )\n\n# Connecting two attributes to a single control\n#\ncmds.window()\ncmds.columnLayout()\ncmds.floatSlider( 'slider' )\ncmds.showWindow()\n\ncmds.polySphere()\ncmds.polyCube()\ncmds.move( 0, 2, 0 )\ncmds.connectControl( 'slider', 'pCube1.tx', 'pSphere1.tx' )", 
    "connectDynamic": "\n\nimport maya.cmds as cmds\n\ncmds.connectDynamic( 'Book', c='Floor' )\n# Connects the dynamic object \"Book\" to the collision model of the\n# \"Floor\". This means that the book will collide with and bounce off of\n# the floor.\n\ncmds.connectDynamic( 'Moon', 'Spaceship', f='Moon' )\n# Connects dynamic object \"Spaceship\" to the all fields and emitters\n# owned by \"Moon\".\n\ncmds.connectDynamic( 'Spaceship', f='newtonField1' )\n# Connects dynamic object \"Spaceship\" to \"newtonField1\" owned by \"Moon\".\n\ncmds.connectDynamic( 'Moon', f='newtonField1' )\n# If the selection list consists of \"Spaceship\", connects dynamic object\n# \"Spaceship\" to \"newtonField1\" and all emitters owned by \"Moon\".\n\ncmds.connectDynamic( 'Spaceship', d=True, f='Moon' )\n# Deletes the field connection between all the fields owned by \"Moon\" and\n# \"Spaceship\". Note that the command establishing the connection need not\n# be in the undo queue.\n\ncmds.connectDynamic( 'Spaceship', d=True, f='newtonField1' )\n# Deletes the field connection between \"newtonField1\" owned by \"Moon\" and\n# \"Spaceship\".", 
    "connectJoint": "\n\nimport maya.cmds as cmds\n\n# make joint1 a child of joint4.\n#\ncmds.connectJoint( 'joint1', 'joint4', pm=True )\n\n# make joint1 a child of joint4's parent\n#\ncmds.connectJoint( 'joint1', 'joint4', cm=True )", 
    "connectionInfo": "\n\nimport maya.cmds as cmds\n\n#    Create a sphere and a cone and make the Z translation of the cone\n#    be dependent on the X translation of the sphere.\n#\ncone = cmds.cone()\nsphere = cmds.sphere()\nsphereTx = '%s.tx' % sphere[0]\nconeTz = '%s.tz' % cone[0]\ncmds.connectAttr(sphereTx, coneTz)\n\n#    Verify the connection and print out the source plug.\n#\nif cmds.connectionInfo( coneTz, isDestination=True):\n  print( 'Source: %s' % cmds.connectionInfo(coneTz,sourceFromDestination=True) )\n\n#    Verify the connection and print out the destination plug.\n#\nif cmds.connectionInfo( sphereTx, isSource=True):\n  destinations = cmds.connectionInfo(sphereTx, destinationFromSource=True)\n  for destination in destinations:\n    print destination", 
    "constrain": "\n\nimport maya.cmds as cmds\n\n# \"Nail\" a rigid body at position \"\"0.0, 2.5, 0.0\"\"\n#\ncmds.constrain( 'rigidBody1', nail=True, p=(0, 2.5, 0) )\n\n# \"Pin\" two rigid bodies together at the position \"\"0.0, 2.5, 0.0\"\".\n#\ncmds.constrain( 'rigidBody1', 'rigidBody2', pin=True, n='pin', p=(0, 2.5, 0) )\n\n# \"Hinge\" a rigid body at the position \"\"0.0, 2.5, 0.0\"\".\n#\ncmds.constrain( 'rigidBody1', hinge=True, p=(0, 2.5, 0) )\n\n# Create a barrier for a rigid body which will not allow the rigid body\n# to fall below (in y by default) the plane defined by the\n# barrier point \"\"0.0, 2.5, 0.0\"\".\n#\ncmds.constrain( 'rigidBody1', barrier=True, p=(0, 2.5, 0) )\n\n# Add a \"Spring\" to a rigid body at the position \"\"0.0, 2.5, 0.0\"\"\n# connected on the rigid body at point \"\"0, 0, 0\"\"\n#\ncmds.constrain( 'rigidBody1', spring=True, name='spring', p=(0, 2.5, 0), rl=1.0 )", 
    "constructionHistory": "\n\nimport maya.cmds as cmds\n\ncmds.constructionHistory( tgl=True )\ncmds.constructionHistory( tgl=False )\n\n# Returns true if construction history is on.\n# Returns false if construction history is off.\ncmds.constructionHistory( q=True, tgl=True )", 
    "container": "\n\nimport maya.cmds as cmds\n\n# Create a container holding a locator transform only (not its shape)\n#\nloc = cmds.spaceLocator()\ncon1 = cmds.container(addNode=[loc[0]])\n\n# Select the nodes that would be in the container, but don't create it\n#\ncmds.container(preview=True,addNode=[cone[0]],includeNetwork=True,includeHierarchyBelow=True)\n\n\n# Create a container holding a polygon shape, its transform and its\n# history node. Publish its tx attr.\n#\ncone = cmds.polyCone()\ncon2 = cmds.container(addNode=[cone[0]],includeNetwork=True,includeHierarchyBelow=True)\n\n# Publish the cone's tx and the locator's tx with the same name\n#\ncmds.container(con1,edit=True,publishName='main_tx')\ncmds.container(con1,edit=True,bindAttr=['%s.tx' % loc[0],'main_tx'])\ncmds.container(con2,edit=True,publishName='main_tx')\ncmds.container(con2,edit=True,bindAttr=['%s.tx' % cone[0],'main_tx'])\n\n# Publish the name \"sam\", but don't bind it to anything\n#\ncmds.container(con1,edit=True,publishName='sam')\n\n# Query the bound publications\n#\ncmds.container(con1,query=True,bindAttr=1)\n# Result: [u'locator1.translateX', u'main_tx'] #\n\n# Query all the published names:\n#\ncmds.container(con1,query=True,publishName=1)\n# Result: [u'main_tx' u'sam'] #\n\n# Query just the bound published names:\n#\ncmds.container(con1,query=True,publishName=1,bindAttr=1)\n# Result: [u'main_tx'] #\n\n# Query just the unbound published names:\n#\ncmds.container(con1,query=True,publishName=1,unbindAttr=1)\n# Result: [u'sam'] #\n\n# Query just the published name for the published attribute locator1.translateX\n#\ncmds.container(con1,query=True,publishName=1,publishAttr='locator1.translateX')\n# Result: [u'main_tx'] #\n\n# keyframe the cone's tx\n#\ncmds.currentTime(0)\nconeTx = '%s.tx' % cone[0]\ncmds.setKeyframe(coneTx)\ncmds.currentTime(4)\ncmds.setAttr(coneTx,10.0)\ncmds.setKeyframe(coneTx)\n\n# Query the nodes in the container\n#\nnodes = cmds.container(con2,query=True,nodeList=True)\n\n# Remove a node from the container\n#\ncmds.container(con2,edit=True,removeNode=nodes[2])\n\n# Remove the container without deleting the nodes within it\n#\ncmds.container(con2,edit=True,removeContainer=True)\n\n# query a referenced scenes for its assets\n#\ncmds.container(q=True,fileName='C:/My Documents/maya/projects/default/scenes/refFile.mb')", 
    "containerBind": "\n\nimport maya.cmds as cmds\n\n# query the template binding sets available for this container\n#\ncmds.containerBind(container1, query=1, bindingSetList=1)\n# attempt to bind published names on the container\n# using matching information in the bindingSet specified.\n# By default only unbound names are considered.\n#\ncmds.containerBind(container1, bindingSet=\"MayaBindings\")\n# Attempt to bind all published names on the container\n# using matching information in the bindingSet specified.\n# Previously bound names will only be re-bound if the bindingSet\n# produces an appropriate match.\n#\ncmds.containerBind(container1, bindingSet=\"MayaBindings\", allNames=1)\n# Forcibly re-bind all published names on the container\n# using matching information in the bindingSet specified.\n# All previously bound names will be unbound and will only\n# be re-bound if the binding set produces an appropriate match.\n#\ncmds.containerBind(container1, bindingSet=\"MayaBindings\", allNames=1, force=1)\n# preview what the results of a binding operation would be, but do\n# not actually perform it.\ncmds.containerBind(container1, bindingSet=\"MayaBindings\", preview=1, allNames=1, force=1)", 
    "containerProxy": "\n\nimport maya.cmds as cmds\n\n# create a proxy for container1\n#\ncmds.containerProxy('container1')", 
    "containerPublish": "\n\nimport maya.cmds as cmds\n\n# create a proxy for container1\n#\ncmds.containerPublish(container1,inConnections=True,mergeShared=True)\n# add a published name 'mainShader' of type 'objectSet'\n#\ncmds.containerPublish(container1,publishNode=['mainShadingSet','objectSet']\n# bind a shading group to the published name\n#\ncontainerPublish -bindNode \"mainShadingSet\" blinn1SG container1;\n# query what is bound\n#\ncontainer -q -bindNode container1;\n# unbind the shading group\n#\ncontainerPublish -unbindNode \"mainShadingSet\" container1;", 
    "containerTemplate": "\n\nimport maya.cmds as cmds\n\n#    Create a container template.\n#\ncmds.containerTemplate( 'characterRig' )\n# Create a container template using the published attribute information from\n# container1.\ncmds.containerTemplate ('characterRig', fromContainer='container1')\n#\n# Save the template to a template file in the default template location.\ncmds.containerTemplate ('characterRig', save=True)\n# Load a template (the template is located along the template search path)\ncmds.containerTemplate ('characterRig', load=True)\n# Re-load a template that has already been loaded\n# This is useful if you have made edits to the template outside of maya\ncmds.containerTemplate ('characterRig', force=True, load=True)\n# Determine the file that a template was loaded from\ncmds.containerTemplate ('characterRig', query=True, fileName=True)\n# Result: C:/myTemplates/characterRig.template #\n#\n# Add a view to a container template. This view will be generated from the\n# given container, and will use a group-by-node hierarchical layout.\n# The view can be subesequently customized if desired.\n#\ncmds.containerTemplate ('characterRig', edit=True, addView='newView', fromContainer='container1', layoutMode=1)\ncmds.containerTemplate ('characterRig', save=True)\n#\n# Add another view to a container template.\n# This view will be generated with a default layout and can be\n# subsequently customized.\n#\ncmds.containerTemplate ('characterRig', edit=True, addView=\"newView2\")\ncmds.containerTemplate ('characterRig', save=True)\n#\n# Get the list of attributes in the template.  This will return\n# a flat list of attribute names in the order in which they appear\n# in the template definition.\n#\ncmds.containerTemplate ('characterRig', query=True, attributeList=True)\n# Result: [u'attribute1', u'attribute2', u'attribute3'] #\n#\n# List all loaded templates\nlist = cmds.containerTemplate(query=True, templateList=True)\n# Result: [u'Object', u'characterRig'] #\n#\n# List all templates matching a a given template name\n# Note that all templates with matching base name (in any package) will\n# be returned.\ncmds.containerTemplate (query=True, templateList=True, matchName='characterRig')\n# Result: [u'characterRig'] #\n#", 
    "containerView": "\n\nimport maya.cmds as cmds\n\n# Obtain a list of all available views for container1\n#\ncmds.containerView ( 'container1', query=True, viewList=True);\n# Result: [u'Animation', u'Rendering'] #\n#\n# Get a list of view items in the current view for container1\n# In this example the list returned will include only the name for\n# each item in the view.\ncmds.containerView ( 'container1', itemList=True, itemInfo=\"itemName\", query=True)\n# Result: [u'RenderSetup', u'color', u'intensity', u'Transform', u'rotateY'] #\n#\n# Get a list of view items.\n# In this query the list returned will include the group boolean and label\n# for each item in the view.\ncmds.containerView ( 'container1', itemList=True, itemInfo=\"itemIsGroup:itemLabel\", query=True)\n# Result: [u'1', u'RenderSetup', u'0', u'Color', u'0', u'Intensity', u'1', u'Transform', u'0', u'Rotate Y'] #", 
    "contextInfo": "\n\nimport maya.cmds as cmds\n\n# Create a particle tool context, then switch to it\ncmds.dynParticleCtx('dynParticleCtx1')\ncmds.setToolTo('dynParticleCtx1')\n\n# Get the class type of the current context\nctx = cmds.currentCtx()\ncmds.contextInfo(ctx, c=True)\n# Result: dynParticle #\n\n# Get the title of the current context\ncmds.contextInfo(ctx, t=True)\n# Result: Particle Tool #", 
    "control": "\n\nimport maya.cmds as cmds\n\n#    Create a simple window containing a single column layout\n#    and a button.\n#\nwindow = cmds.window(title='Control Example')\ncolumn = cmds.columnLayout()\nbutton = cmds.button()\ncmds.showWindow( window )\n\n#    If you don't know that the control is actually a 'button' then\n#    you may use the 'control' command to determine certain properties.\n#\ncmds.control( button, query=True, width=True )\ncmds.control( button, query=True, height=True )\ncmds.control( button, edit=True, visible=False )\ncmds.control( button, query=True, visible=True )", 
    "convertIffToPsd": "\n\nimport maya.cmds as cmds\n\ncmds.convertIffToPsd( 'd:/test.iff', 'd:/test.psd', xr=640, yr=320 )", 
    "convertSolidTx": "\n\nimport maya.cmds as cmds\n\ncmds.file( f=True, new=True )\n\n# Create a blinn shader with a marble texture.\ncmds.shadingNode( 'blinn', asShader=True )\ncmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='blinn1SG' )\ncmds.connectAttr( 'blinn1.outColor', 'blinn1SG.surfaceShader', f=True )\ncmds.shadingNode( 'marble', asTexture=True )\ncmds.connectAttr( 'marble1.outColor', 'blinn1.color', f=True )\n\n# Create two objects, and assign the blinn shader to them.\ncmds.polySphere()\ncmds.sets( e=True, forceElement='blinn1SG' )\ncmds.polyPlane()\ncmds.move( 2, 0, 0 )\ncmds.sets( e=True, forceElement='blinn1SG' )\n\n# Create a low resolution texture for the sphere\ncmds.convertSolidTx( 'marble1', 'pSphere1', rx=64, ry=64 )\n\n# Create a transparency texture forthe plane.\ncmds.convertSolidTx( 'marble1.outAlpha', 'pPlane1' )\n\n# Create a texture named myTexture.iff for the sphere.\ncmds.convertSolidTx( 'marble1', 'pSphere1', bm='extend', fileImageName='myTexture.iff' )", 
    "convertTessellation": "\n\nimport maya.cmds as cmds\n\n# Convert the basic tessellation settings to advanced.\ncmds.convertTessellation( 'nurbsSphere1' )\n# Set the tessellation for nurbsSphere1 based on camera projection\n# from persp.\ncmds.convertTessellation( 'nurbsSphere1', camera='persp' )\n# Set tessellation based on all renderable cameras.\ncmds.convertTessellation( 'nurbsSphere2', allCameras='nurbsSphere1' )\n# Set the tessellation for all selected objects.\ncmds.convertTessellation()", 
    "convertUnit": "\n\nimport maya.cmds as cmds\n\n# Returns string \"4.80315in\", which is 12.2cm in inches.\ncmds.convertUnit( '12.2', fromUnit='cm', toUnit='in' )\n\n# Returns string \"3.499563yd\", which is 3.2m in yards.\ncmds.convertUnit( '3.2m', toUnit='yard' )\n\n# Returns float value 13.716, which is 5.4 inches in cm (default system units).\ncmds.convertUnit( '5.4', fromUnit='inch' )", 
    "copyAttr": "\n\nimport maya.cmds as cmds\n\n# transfer input connections and values from locator1 to locator2\n#\ncmds.copyAttr('locator1','locator2',inConnections=True,values=True)\n# transfer only the translateX and translateY values\n#\ncmds.copyAttr('locator1','locator2',values=True,attribute=['tx','translateY'])", 
    "copyDeformerWeights": "\n\nimport maya.cmds as cmds\n\n# Create plane and a cluster.\n#\ncmds.file( f=True,new=True )\ncmds.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\ncmds.cluster( n='testCluster', 'pPlane1' )\n# Modify some weights on the -x side of the character\n#\ncmds.select( ['pPlane1.vtx[0]', 'pPlane1.vtx[6]', 'pPlane1.vtx[12]', 'pPlane1.vtx[18]'])\ncmds.percent( 'testCluster', v='0.5' )\n# Mirror the skin weights to the other side of the character\n# Mirror inverse is chosen since we want to go from -x to +x, not +x to -x.\n#\ncmds.copyDeformerWeights( ss='pPlane1', ds='pPlane1', sd='testCluster', mirrorMode='YZ', mirrorInverse = True)\ncmds.select( ['pPlane1.vtx[5]', 'pPlane1.vtx[11]', 'pPlane1.vtx[17]', 'pPlane1.vtx[23]'])\ncmds.percent( 'testCluster', q=True, v=True )", 
    "copyFlexor": "\n\nimport maya.cmds as cmds\n\n# Copy flexor ffd1Lattice to joint8\n#\ncmds.copyFlexor( 'ffd1Lattice', 'joint8' )", 
    "copyKey": "\n\nimport maya.cmds as cmds\n\n# Copy keyframes from frame 10 to 20 of cube1's \"Translate X\" attribute\n#\ncmds.copyKey( 'cube1', time=(10,20), attribute='translateX', option=\"curve\" )\n\n# Copy from all active objects all keys in the range 0 to 60\n#\ncmds.copyKey( time=(0,60) )", 
    "copyNode": "", 
    "copySkinWeights": "\n\nimport maya.cmds as cmds\n\n# Create plane and a skeleton. Bind the skin.\n#\ncmds.file( f=True,new=True )\ncmds.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\ncmds.select( d=True )\ncmds.joint( p=(0, 0, -6) )\ncmds.joint( p=(0, 0, -4) )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz')\ncmds.joint( p=(2, 0, -4) )\ncmds.joint( 'joint2', e=True, zso=True, oj='xyz')\ncmds.joint( p=(5, 0, -3) )\ncmds.joint( 'joint3', e=True, zso=True, oj='xyz')\ncmds.select( 'joint2', r=True )\ncmds.joint( p=(-2, 0, -4) )\ncmds.joint( 'joint4', e=True, zso=True, oj='xyz')\ncmds.joint( p=(-5, 0, -3) )\ncmds.joint( 'joint5', e=True, zso=True, oj='xyz')\ncmds.select( 'joint2', r=True )\ncmds.joint( p=(0, 0, 3) )\ncmds.joint( 'joint6', e=True, zso=True, oj='xyz')\ncmds.joint( p=(5, 0, 5) )\ncmds.joint( 'joint7', e=True, zso=True, oj='xyz')\ncmds.select( 'joint7', r=True )\ncmds.joint( p=(-5, 0, 5) )\ncmds.joint( 'joint8', e=True, zso=True, oj='xyz')\ncmds.select( 'pPlane1', 'joint1', r=True )\nmaya.mel.eval('createSkinCluster \"-mi 5 -dr 4\"' )\n# Modify some weights on the -x side of the character\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[30]', tv=('joint2',0.200000) )\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[31]', tv=('joint2',0.200000) )\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[24]', tv=('joint5',0.550000) )\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[25]', tv=('joint5',0.550000) )\n# Mirror the skin weights to the other side of the character\n# Mirror inverse is chosen since we want to go from -x to +x, not +x to -x.\n#\ncmds.copySkinWeights( ss='skinCluster1', ds='skinCluster1', mirrorMode='YZ', mirrorInverse=True )\n# Now create a second plane and bind it as skin\n#\ncmds.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\ncmds.select( 'pPlane2', r='joint1' )\nmaya.mel.eval('createSkinCluster \"-mi 5 -dr 4\"' )\n# Copy the skin weights from the first plane onto the new plane.\n# The -noMirror flag is used since we want to copy directly, not mirror.\n#\ncmds.copySkinWeights( ss='skinCluster1', ds='skinCluster2', noMirror=True )", 
    "createAttrPatterns": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ncmds.createAttrPatterns( patternType=\"xmlPattern\", patternFile=\"patterns/patternFile.xml\" )\n// Result: [myXMLPattern] //", 
    "createDisplayLayer": "\n\nimport maya.cmds as cmds\n\n#    Create a sphere.\n#\nobjectArray = cmds.sphere()\n#    Select the sphere.\n#\ncmds.select( objectArray[0] )\n#    Create a layer. The selected object will be placed\n#    in this layer. Note in this case both the nurbsSphere\n#    and nurbsSphere shape are placed in the layer.\n#\ncmds.createDisplayLayer()\n#    Create a cone.\n#\nobjectArray = cmds.cone()\n#    Select the cone.\n#\ncmds.select( objectArray[0] )\n#    Create a layer but only put the nurbsCone in the layer.\n#    The nurbsConeShape will remain in the default layer\n#    as a result of specifying the -nr/noRecurse flag.\n#\n#    Note also that you can specify the name of the layer\n#    with the -n/name flag.\n#\ncmds.createDisplayLayer( noRecurse=True, name='ExampleLayer' )", 
    "createEditor": "\n\nimport maya.cmds as cmds\n\n# The following command will create an attribute\n# editor in someWindow|topLayout for curve2.\n#\ncmds.createEditor( 'someWindow|toplayout', 'curve2' )", 
    "createLayeredPsdFile": "\n\nimport maya.cmds as cmds\n\n# Creates a layered PSD file with \"Layer 1\" as one of the layers. The image which\n# gets transfered to \"Layer 1\" is picked from D:/test.iff. The blend mode assigned to\n# is the \"Normal\" mode.\ncmds.createLayeredPsdFile( 'D:/test.psd', xr=640, yr=480, ifn=('D:/test.iff', 'Normal', 'Layer 1') )", 
    "createNode": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'transform', n='transform1' )\ncmds.createNode( 'nurbsSurface', n='surface1', p='transform1' )\ncmds.createNode( 'camera', shared=True, n='top' )\n\n# This transform will be selected when created\ncmds.createNode( 'transform', n='selectedTransform' )\n\n# This will create a new transform node, but 'selectedTransform'\n# will still be selected.\ncmds.createNode( 'transform', ss=True )\n\n# Create node under new namespace\ncmds.createNode( 'transform', n='newNS:transform1' )", 
    "createNurbsCircleCtx": "", 
    "createNurbsConeCtx": "", 
    "createNurbsCubeCtx": "", 
    "createNurbsCylinderCtx": "", 
    "createNurbsPlaneCtx": "", 
    "createNurbsSphereCtx": "", 
    "createNurbsSquareCtx": "", 
    "createNurbsTorusCtx": "", 
    "createPolyConeCtx": "", 
    "createPolyCubeCtx": "", 
    "createPolyCylinderCtx": "", 
    "createPolyHelixCtx": "", 
    "createPolyPipeCtx": "", 
    "createPolyPlaneCtx": "", 
    "createPolyPlatonicSolidCtx": "", 
    "createPolyPrismCtx": "", 
    "createPolyPyramidCtx": "", 
    "createPolySoccerBallCtx": "", 
    "createPolySphereCtx": "", 
    "createPolyTorusCtx": "", 
    "createRenderLayer": "\n\nimport maya.cmds as cmds\n\n# Add nut and nutShape to a new render layer\n#\ncmds.select( 'nut' )\ncmds.createRenderLayer()\n# Result: renderLayer1 #\n# Add only bolt to a new render layer\n#\ncmds.createRenderLayer( 'bolt', noRecurse=True )\n# Result: renderLayer2 #\n# Add washer to the new render layer 'assembly'.\n#\ncmds.createRenderLayer( 'washer', noRecurse=True, name='assembly' )\n# Result: assembly #\n# Create a layer that will always contains everything\n#\ncmds.createRenderLayer( g=True )\n# Result: renderLayer3 #", 
    "createSubdivRegion": "\n\nimport maya.cmds as cmds\n\n# after selecting components of a subdivision surface\ncmds.createSubdivRegion()", 
    "ctxAbort": "\n\nimport maya.cmds as cmds\n\n# Create a new particle tool context, then switch to it\ncmds.dynParticleCtx('dynParticleCtx1')\ncmds.setToolTo('dynParticleCtx1')\n# Click the positions where you want to place the particles\n\n# This command will reset the particle tool, clear the particles you have just created\ncmds.ctxAbort();", 
    "ctxCompletion": "\n\nimport maya.cmds as cmds\n\n# Create a curve\ncmds.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n# Result: curve1 #\n\n# Create a new curve editor context to modify the curve, then switch to it\n# You can modify the curve using the manipulator handle\ncmds.curveEditorCtx('curveEditorCtx1')\ncmds.setToolTo('curveEditorCtx1')\n\n# This command ends curve editing, the manipulator handle will disappear, leaving the modified curve\ncmds.ctxCompletion()", 
    "ctxData": "", 
    "ctxEditMode": "\n\nimport maya.cmds as cmds\n\n# Create a poly cube\ncmds.polyCube(w=2, h=2, d=2, n='pCube1')\n\n# Create a new rotate manip context, then switch to it.\ncmds.manipRotateContext('manipRotateContext1')\ncmds.setToolTo('manipRotateContext1')\n\n# Switch to edit mode to change pivots\ncmds.ctxEditMode()", 
    "ctxTraverse": "\n\nimport maya.cmds as cmds\n\n# Create a particle context, then switch to it\ncmds.dynParticleCtx('dynParticleCtx1')\ncmds.setToolTo('dynParticleCtx1')\n\n# Now you can create particles by mouse clicking\n# After creating several particles, we switch to edit mode\ncmds.ctxEditMode()\n\n# Traverse in the created particles\ncmds.ctxTraverse(left=True)\ncmds.ctxTraverse(left=True)\ncmds.ctxTraverse(right=True)", 
    "currentCtx": "\n\nimport maya.cmds as cmds\n\ncmds.currentCtx()", 
    "currentTime": "\n\nimport maya.cmds as cmds\n\n# Query the current time\n#\ncmds.currentTime( query=True )\n\n# Change the current time to \"30\" in current time units\n#\ncmds.currentTime( 30, edit=True )\ncmds.currentTime( 30 )\n\n# Change the current time to 2 seconds\n#\ncmds.currentTime( '2sec', edit=True )\n\n# Change the current time, but do not cause the model\n# to update.\n#\ncmds.currentTime( -10, update=False, edit=True )", 
    "currentTimeCtx": "\n\nimport maya.cmds as cmds\n\ncmds.currentTimeCtx()", 
    "currentUnit": "\n\nimport maya.cmds as cmds\n\n# What is the current linear unit?\ncmds.currentUnit( query=True, linear=True )\n\n# What is the current angular unit in its long name form?\ncmds.currentUnit( fullName=True, query=True, angle=True )\n\n# Change the current time unit to ntsc\ncmds.currentUnit( time='ntsc' )\n\n# Change the current linear unit to inches\ncmds.currentUnit( linear='in' )", 
    "curve": "\n\nimport maya.cmds as cmds\n\n# These commands create curves with four control vertices.\n# The first one is created without weights.  The third command\n# shows how you can use units to specify position.\ncmds.curve( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\ncmds.curve( pw=[(0, 0, 0, 1), (3, 5, 6, 1), (5, 6, 7, 1), (9, 9, 9, 1)] )\ncmds.curve( p=[('0cm', '0cm', '0cm'), ('3in', '5in', '6in'), ('5ft', '6ft', '7ft'), (9, 9, 9)] )\n\n# This command replaces an existing curve, curve1, with the given points.\n# Do not use this flag on a curve that is a result of a construction\n# history operation.\ncmds.curve( 'curve1', r=True, p=[(0, 0, 0), (3, 5, 6), (10, 12, 14), (9, 9, 9)] )\n\n# This command adds two CVs to an existing curve, curve1.\n# The \"-ws\" flag can be used if the specified CVs are in world space.\n# Do not use this flag on a curve that is a result of a construction\n# history operation.\ncmds.curve( 'curve1', a=True, p=[(13, 13, 13), (13, 15, 16)] )\n\n# This command creates a curve with five control vertices,\n# with a knot vector. Notice that there must be\n# (number of CVs + degree - 1) knots and that the knot\n# vector must be non-decreasing.\ncmds.curve( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2] )\n\n# This command creates a closed (or \"periodic\") curve with\n# four distinct CVs. You must specify a knot vector when the\n# \"-per\" flag is used. Notice that the first \"degree\" points\n# are the same as the last \"degree\" points (ie. the first three\n# points are the same as the last three points). Notice also\n# that the knot spacing between the first \"degree\" knots must\n# be the same as the spacing between the last \"degree\" knots\n# (ie. the space between the 1st and 2nd knots is the same as\n# the space between the 7th and 8th knots, and the space between\n# the 2nd and 3rd knots is the same as the space between the\n# 8th and 9th knots). There must be space between the first\n# \"degree\" knots, unlike the previous example, where the first\n# \"degree\" knots are the same.\ncmds.curve( per=True, p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (0, 0, 0), (3, 5, 6), (5, 6, 7)], k=[-2,-1,0,1,2,3,4,5,6] )\n\n# How to query curve properties:\n\n# This returns the degree of the curve.  Note that the\n# number of CVs = degree + spans.\ncmds.getAttr( 'curve1.degree' )\n\n# This returns the number of spans in the curve.  Note that the\n# number of CVs = degree + spans.\ncmds.getAttr( 'curve1.spans' )\n\n# This returns the curve form.\ncmds.getAttr( 'curve1.form' )\n\n# This returns the minimum parameter value on the curve.\ncmds.getAttr( 'curve1.minValue' )\n\n# This returns the maximum parameter value on the curve.\ncmds.getAttr( 'curve1.maxValue' )\n\n# This returns the local x,y,z of the 1st CV.  Use a curve info node if\n# the curve is a result of a construction history operation.\ncmds.getAttr( 'curve1.cv[0]' )\n\n# This returns the local x,y,z of the 1st three CVs.  Use a curve info\n# node if the curve is a result of a construction history operation.\ncmds.getAttr( 'curve1.cv[*]' )\n\n# This returns the local x,y,z of all CVs.  Use a curve info node if\n# the curve is a result of a construction history operation.\ncmds.getAttr( 'curve1.cv[0:2]' )\n\n# This returns the arc length of the curve.  Use \"-ch\" flag with\n# the arclen command to get a curve info node that constantly updates\n# to the current arc length.\ncmds.arclen( 'curve1' )\n\n# This sequence creates a curve info node, connects the info node to the\n# curve and queries the knot vector of the curve using the curve info node.\n# You can use the curve info node to query other attributes such as\n# world space CV values and arc length.\ncmds.createNode( 'curveInfo' )\ncmds.connectAttr( 'curveShape1.worldSpace', 'curveInfo1.inputCurve' )\ncmds.getAttr( 'curveInfo1.knots[*]' )", 
    "curveAddPtCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new context:\ncmds.curveAddPtCtx(\"CurveAddPtCtx\")\ncmds.setToolTo(\"CurveAddPtCtx\")", 
    "curveBezierCtx": "", 
    "curveCVCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new context that will create curves of degree 5:\ncmds.curveCVCtx( \"curveCVContext\", degree=5 )\ncmds.setToolTo(\"curveCVContext\")\n\n# To query the degree of an existing context:\ncmds.curveCVCtx( \"curveCVContext\", q=True, degree=True )\n\n# To edit the degree of an existing context:\ncmds.curveCVCtx( \"curveCVContext\", , e=True, degree=7 )", 
    "curveEPCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new context that will create curves of degree 5:\ncmds.curveEPCtx( degree=5 )\n\n# To query the degree of an existing context:\ncmds.curveEPCtx( 'curveEPCtx1', q=True, degree=True )\n\n# To edit the degree of an existing context:\ncmds.curveEPCtx( 'curveEPCtx1', e=True, degree=7 )", 
    "curveEditorCtx": "\n\nimport maya.cmds as cmds\n\n# Create a curve\ncmds.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n# Result: curve1 #\n\n# Create a new curve editor context to modify the curve, then switch to it\n# You can modify the curve using the manipulator handle\ncmds.curveEditorCtx('curveEditorCtx1')\ncmds.setToolTo('curveEditorCtx1')", 
    "curveIntersect": "\n\nimport maya.cmds as cmds\n\ncmds.curveIntersect( 'curve1', 'curve2' )\n# Returns the parameter values that the curves intersect at.\n# eg. if 6 parameter values are returned, the first 3 are\n# on curve1 and the last 3 are on curve2.\n\n\ncmds.curveIntersect( 'curve1', 'curve2', useDirection=True, direction=(0, 1, 0) )\n# Returns the parameter values that the curves intersect at\n# when projected along vector (0, 1, 0).  This is useful\n# for example when you are viewing the two curves in an orthographic\n# view and the curves appear to intersect, even though\n# they do not intersect in 3D.\n\nnode = cmds.curveIntersect('curve1', 'curve2', ch= True)\np1 = cmds.getAttr(node + \".parameter1\" )   # or use \".p1\"\np2 = cmds.getAttr(node + \".parameter2\" )   # or use \".p2\"\n# Returns a string which is the name of a new curveIntersect\n# dependency node.\n# The \"getAttr\" commands return the parameter values at\n# which the curves intersect each other.", 
    "curveMoveEPCtx": "\n\nimport maya.cmds as cmds\n\n# Create a curve\ncmds.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9), (12, 10, 2)], k=[0,0,0,1,2,2,2])\n# Result: curve1 #\n\n# Change the selection mode to components, and set edit-point selection mask on only\ncmds.selectMode(co=True)\ncmds.selectType(allComponents=False, editPoint=True)\n\n# Create a new curve edit point editor context, then switch to it\n# You can move the edit points using manipulator\ncmds.curveMoveEPCtx('curveMoveEPCtx1')\ncmds.setToolTo('curveMoveEPCtx1')", 
    "curveOnSurface": "\n\nimport maya.cmds as cmds\n\ncmds.curveOnSurface( 'surface1', d=3, uv=((0, 0),(0.3, 0.5), (0.5, 0.6), (0.9, 1.0)) )\n# This command creates a curve-on-surface of degree three with\n# four control vertices on surface1.\n\ncmds.curveOnSurface( 'surface1', uv=((0, 0), (0.3, 0.5), (0.5, 0.6), (0.7, 0.8), (1.0, 1.0)), k=(0, 0, 0, 1, 2, 2, 2) )\n# This command creates a curve-on-surface with five CVs\n# and a knot vector, on surface1. Notice that there must be\n# (number of CVs + degree - 1) knots and that the knot\n# vector must be non-decreasing.\n\ncmds.curveOnSurface( 'surface1', degree=3, per=True, uv=((0, 0), (0.2, 0.6), (0.4, 0.7), (0.9, 0.9), (0.0, 0.0), (0.2, 0.6), (0.4, 0.7)), k=(-2, -1, 0, 1, 2, 3, 4, 5, 6) )\n# This command creates a closed (or \"periodic\") curve-on-surface with\n# four distinct CVs. You must specify a knot vector when the\n# \"-per\" flag is on. Notice that the first \"degree\" points\n# are the same as the last \"degree\" points (ie. the first three\n# points are the same as the last three points). Notice also\n# that the knot spacing between the first \"degree\" knots must\n# be the same as the spacing between the last \"degree\" knots\n# (ie. the space between the 1st and 2nd knots is the same as\n# the space between the 7th and 8th knots, and the space between\n# the 2nd and 3rd knots is the same as the space between the\n# 8th and 9th knots). There must be space between the first\n# \"degree\" knots, unlike the previous example, where the first\n# \"degree\" knots are the same.\n\ncmds.curveOnSurface( 'surface1-\"curve1', append=True, uv=(1.0, 1.0) )\n# This command appends a point to an existing curve-on-surface.\n# Notice that the curve-on-surface is specified, not just the surface.\n\ncmds.curveOnSurface( 'surface1-\"curve1', replace=True, d=1, uv=((1.0, 1.0), (2.0, 2.0)) )\n# This command replaces an existing curve, surface1-\"curve1, with a\n# new curve of degree 1 having the given points. Do not use this\n# flag on a curve that is a result of a construction history operation.", 
    "curveRGBColor": "\n\nimport maya.cmds as cmds\n\n# Set all \"translateX\" curves to draw magenta\ncmds.curveRGBColor( 'translateX', 1, 0, 1 )\n\n# Set all curves whose names end in \"Y\" to draw yellow\ncmds.curveRGBColor( '*Y', 1, 1, 0 )\n\n# Remove the custom color for \"translateX\" curves\n# (which will revert to the standard UI color)\ncmds.curveRGBColor( r=True, 'translateX' )\n\n# List the currently defined custom curve colors\ncmds.curveRGBColor( list=True )", 
    "curveSketchCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new sketch context, which creates degree 3 curves:\ncmds.curveSketchCtx( \"pencilContext\", degree=3 )\ncmds.setToolTo(\"pencilContext\")\n\n# To query the degree of an existing context:\ncmds.curveSketchCtx( \"pencilContext\",q=True, degree=True )\n\n# To edit the degree of an existing context:\ncmds.curveSketchCtx( \"pencilContext\", e=True, degree=1 )", 
    "customerInvolvementProgram": "", 
    "cutKey": "\n\nimport maya.cmds as cmds\n\n# Cut keyframes from frame 10 to 20 of cube1's \"Translate X\" attribute\n#\ncmds.cutKey( 'cube1', time=(10,20), attribute='translateX', option=\"keys\" )\n\n# Cut from all active objects all keys in the range 0 to 60\n#\ncmds.cutKey( time=(0,60) )", 
    "cycleCheck": "\n\nimport maya.cmds as cmds\n\n# Print a message if xNode.tx is in a cycle.\ncmds.createNode( 'transform', n='xNode' )\nif cmds.cycleCheck('xNode.tx') \" 0:\n  print('xNode.tx is in a cycle')\n\n# Get the list of plugs in a cycle with xNode.ty\ncmds.connectAttr( 'xNode.tx', 'xNode.ty' )\ncmds.connectAttr( 'xNode.ty', 'xNode.tx' )\ncycles = cmds.cycleCheck()\n\n# Print a message if there are any cycles in the graph.\nif cmds.cycleCheck(all=True, tl='10sec') \" 0:\n  print(\"Your graph has a cycle.\")\nelse:\n  print(\"Your graph probably does not have a cycle\")\n\n# List all cycles involving the DG and DAG hierarchy.\ncmds.cycleCheck(all=True,dag=True,l=True )", 
    "cylinder": "\n\nimport maya.cmds as cmds\n\ncmds.cylinder()\ncmds.cylinder( ch=True, radius=10, hr=3 )\ncmds.cylinder( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg' )\ncmds.cylinder( ut=True, tol=0.01 )\n\n#Query the radius of the selected cylinder\nr = cmds.cylinder( q=True, r=True )", 
    "dagObjectCompare": "\n\nimport maya.cmds as cmds\n\n# Compare two objects based on type and their relatives where one is in the namespace \"base\":\ncmds.dagObjectCompare( t=True, r=True, n=\"base\" )\n# Compare two objects based on their connections and attributes where one is in the namespace \"base\" , break on first error:\ncmds.dagObjectCompare( c=True, a=True, b=\"first\")\n# Compare two objects based on their type, connections, attributes, relatives and break on error while finishing current category:\ncmds.dagObjectCompare( t=True, r=True, c=True, a=True, b=True, category=True, n=\"base\")", 
    "dagObjectHit": "", 
    "dagPose": "\n\nimport maya.cmds as cmds\n\n# To create a pose for all objects parented above and below\n# the selected items.\n#\ncmds.dagPose( save=True )\n\n# To create a dagPose named \"mypose\" for the selected items only and not\n# the dag objects parented below the selected items.\n#\ncmds.dagPose( save=True, selection=True, name='mypose' )\n\n# To restore the local (rather than global) mypose pose\n#\ncmds.dagPose( 'mypose', restore=True )\n\n# To restore the mypose pose in global mode.\n#\ncmds.dagPose( 'mypose', restore=True, global=True )\n\n# To query the members of the mypose pose.\n#\ncmds.dagPose( 'mypose', query=True, members=True )\n\n# To return the name (if any) of the bindPose attached to the\n# selected items.\n#\ncmds.dagPose( q=True, bindPose=True )\n\n# To reset the pose data on a joint named bigToe for \"mypose\"\n#\ncmds.dagPose( 'bigToe', reset=True, n='mypose' )\n\n# To remove a joint named pinky from \"mypose\"\n#\ncmds.dagPose( 'pinky', remove=True, n='mypose' )\n\n# To restore the skeleton to its bindPose\n#\ncmds.dagPose( restore=True, global=True, bindPose=True )", 
    "date": "\n\nimport maya.cmds as cmds\n\n# Get the current date and time\ncmds.date()\n# Result:2006/03/09 16:50:24 #\n# Get only the month and day\ncmds.date( shortDate=True )\n# Result:03/09 #\n# Get the date and time in a fancy format\ncmds.date( format='Year is YY (or YYYY), month is MM, day is DD. And it is now hh:mm:ss' )\n# Result:Year is 06 (or 2006), month is 03, day is 09. And it is now 16:53:20 #", 
    "dbcount": "\n\nimport maya.cmds as cmds\n\ncmds.dbcount( e='on' )              # Enable counters\ncmds.dbcount( )                     # Print all available counters\ncmds.dbcount( f='myCounts.txt' )    # Print all available counters to the file \"myCounts.txt\"\ncmds.dbcount( k='dirty' )           # Print all counters with \"dirty\" in their name\ncmds.dbcount( r=True, k='dirty' )   # Reset counters with \"dirty\" in their name\ncmds.dbcount( l=True )              # List all counters\ncmds.dbcount( l=True, k='dirty' )   # List all counters with \"dirty\" in their name\ncmds.dbcount( s=True, f='xls.txt' ) # Print all counters in spreadsheet form to the file \"xls.txt\"", 
    "dbmessage": "\n\nimport maya.cmds as cmds\n\ncmds.dbmessage( m='on' )                  # Enable monitoring of all messages\ncmds.dbmessage( l=True )                  # Print all available messages and monitoring state\ncmds.dbmessage( f='msgs.txt' )            # Redirect all message output to the file \"msgs.txt\"\ncmds.dbmessage( t='dgNodeAdded', m='on' ) # Turn on monitoring for the \"dgNodeAdded\" message", 
    "dbtrace": "", 
    "debug": "", 
    "debugNamespace": "", 
    "debugVar": "", 
    "defaultLightListCheckBox": "\n\nimport maya.cmds as cmds\n\n# Create a window with a check box for at most 10 shading groups\n\ncmds.window( wh=(200, 100) )\ncmds.columnLayout( adj=True )\nseList = cmds.ls(type='shadingEngine')\nnumLines = min(len(seList), 10)\nfor i in range(numLines):\n    cmds.defaultLightListCheckBox( sg=seList[i], label=seList[i] )\ncmds.showWindow()", 
    "defaultNavigation": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# This will open the Create Render Node window from which you can select a node that you want to connect to the existing lambert1.color attribute\ncmds.defaultNavigation(createNew=True, destination='lambert1.color')\n\n# Select the Checker Node, you will find \"checker1.outColor\" is connected to \"lambert1.color\"\n\n# Break the connection between \"checker1.outColor\" and \"lambert1.color\" you have just established\ncmds.disconnectAttr('checker1.outColor', 'lambert1.color')\n\n# Connect \"checker1\" to \"lambert1\". Only node is specified here, but the command will make a best guess.\n# So \"checker1.outColor\" and \"lambert1.color\" are connected\ncmds.defaultNavigation(connectToExisting=True, source='checker1', destination='lambert1')", 
    "defineDataServer": "\n\nimport maya.cmds as cmds\n\ncmds.defineDataServer( s='ultratrak_server', d='melvin' )\n\n# Connects to the ultratrak_server running on the localhost and gives it\n# the name \"melvin\"\n\ncmds.defineDataServer( s='mocap_lab:5200', d='labFlock' )\n\n# Creates a device called \"labFlock\" which connects to the server running\n# on host \"mocap_lab\" at port \"5200\".\n\ncmds.defineDataServer( undefine=True, d='labFlock' )\n\n# Delete the device \"labFlock\" closing the connection with the server\n# specified when it was created.", 
    "defineVirtualDevice": "\n\nimport maya.cmds as cmds\n\n#    Create a virtual clock and read in some data.\ncmds.defineVirtualDevice( create=True )\ncmds.defineVirtualDevice( channel='seconds', usage='rotZ', axis=2 )\ncmds.defineVirtualDevice( channel='minutes', usage='rotZ', axis=1 )\ncmds.defineVirtualDevice( channel='hours', usage='rotZ', axis=0 )\ncmds.defineVirtualDevice( device='virtualClock' )\ncmds.readTake( device='virtualClock', take='clock.mov' )\n\n#    Undefine the virtualClock\ncmds.defineVirtualDevice( device='virtualClock', undefine=True )\n\n#    Create a body device.\ncmds.defineVirtualDevice( create=True )\ncmds.defineVirtualDevice( channel='pelvis', usage='posRot' )\ncmds.defineVirtualDevice( channel='back', usage='posRot' )\ncmds.defineVirtualDevice( channel='head', usage='posRot' )\ncmds.defineVirtualDevice( device='body' )\n\n#    Explicitly order the axis of the device. The created device is\n#    the same as the above body device.\ncmds.defineVirtualDevice( create=True )\ncmds.defineVirtualDevice( channel='head', usage='posRot', axis=12 )\ncmds.defineVirtualDevice( channel='back', usage='posRot', axis=6 )\ncmds.defineVirtualDevice( channel='pelvis', usage='posRot', axis=0 )\ncmds.defineVirtualDevice( device='body' )", 
    "deformer": "\n\nimport maya.cmds as cmds\n\n# To create a plugin of type \"squash\" on the selected object.\n# First, load the plugin. The deformer command will not autoload\n# your plugin. Then, select the geometries that you'd like to deform,\n# and use the deformer command as follows. For example, to deform a\n# cylinder with a squash:\n#\ncmds.cylinder( ax=(0, 1, 0), r=1, hr=10, d=3, s=8, nsp=20, ch=1 )\ncmds.select( 'nurbsCylinder1', r=True )\ncmds.deformer( type=\"squash\" )\n\n# To query the membership of the deformer\n#\ncmds.deformer( 'squash1',q=True, g=True )\n\n# To add additional geometries from your deformer, type:\n#\ncmds.select( 'nurbsCylinder1', r=True )\ncmds.duplicate()\n# Result: nurbsCylinder2 #\ncmds.move( -2.749017, 0, 0, r=True )\ncmds.deformer( 'squash1', e=True, g='nurbsCylinder2' )\n\n# To remove a geometry from your deformer, type:\n#\ncmds.deformer( 'squash1', e=True, rm=True, g='nurbsCylinder2' )", 
    "deformerWeights": "import maya.cmds as cmds\n\n# Create plane and a cluster.\n#\ncmds.file( f=True,new=True )\ncmds.polyPlane( ch=1, w=10, h=10, sx=5, sy=5, ax=(0,1,0) )\ncmds.cluster('pPlane1', name='testCluster')\n# Modify some weights on the -x side of the character\n#\ncmds.select( ['pPlane1.vtx[5]', 'pPlane1.vtx[11]', 'pPlane1.vtx[17]', 'pPlane1.vtx[23]'])\ncmds.percent( 'testCluster', v=0.5 )\n# export the weights from the cluster node\n#\ncmds.deformerWeights (\"clusterWeights.xml\", ex=True, deformer=\"testCluster\")", 
    "delete": "\n\nimport maya.cmds as cmds\n\n# To delete selected objects use:\ncmds.delete()\n\n# To delete a few specific objects like surfaceShape1, surface1 and\n# paramCurve1 use:\ncmds.delete( 'surfaceShape1', 'surface1', 'paramCurve1' )\n\n# To delete all channels in the scene:\ncmds.delete( all=True, c=True )\n\n# To delete static channels connected to selected nodes:\ncmds.delete( sc=True )\n\n# To delete motion path nodes connected to selected nodes:\ncmds.delete( mp=True )\n\n# To delete all expressions in the scene:\ncmds.delete( all=True, e=True )\n\n# To delete selected constraints and constraints attached to selected nodes:\ncmds.delete( cn=True )\n\n# Notes:\n\n# The at, h, s and cp flags only apply when either c/channels\n# or sc/staticChannels or e/expressions options are specified.", 
    "deleteAttr": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'planet', n='mars' )\ncmds.addAttr( ln='martians', sn='mr', at='double' )\ncmds.addAttr( ln='greenMen', sn='gm', at='double' )\n\n# Delete an attribute named mr/martians.\ncmds.deleteAttr( 'mars', at='mr' )\n\n# Alternative syntax\ncmds.deleteAttr( 'mars.greenMen' )\n\n# Query for the list of dynamic attributes.\ncmds.deleteAttr( 'mars', q=True )", 
    "deleteAttrPattern": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ncmds.deleteAttrPattern( patternType=\"xmlPattern\" )\n// Result: [myXMLPattern, myOtherXMLPattern] //\ncmds.deleteAttrPattern( patternName=\"myJSONPattern\" )\n// Result: myJSONPattern //", 
    "deleteExtension": "\n\nimport maya.cmds as cmds\n\ncmds.addExtension( nodeType='planet', longName='martians', shortName='mr', attributeType='double' )\ncmds.createNode( 'planet', name='jupiter' )\ncmds.createNode( 'planet', name='mars' )\ncmds.setAttr( 'mars.mr', 35 )\n# Delete an extension attribute named mr/martians.\n# Only returns 1 since the planet node 'jupiter'\n# does not have a non-default value on the extension.\ncmds.deleteExtension( nodeType='planet', forceDelete=True, attribute='martians' )\n# Return: 1 //\n# The attribute is gone since it was forced out\ncmds.attributeQuery( type='planet', attribute='mr', query=True, exists=True )\n# Return: 0 //\n# Re-add and delete the extension again, forcing the\n# attribute to remain if non-default values exist.\ncmds.addExtension( nodeType='planet', longName='martians', shortName='mr', attributeType='double' )\ncmds.setAttr( 'mars.mr', 35 )\ncmds.deleteExtension( nodeType='planet', forceDelete=False, attribute='mr' )\n# Return: 0 //\n# The attribute still exists since it had some non-default values\ncmds.attributeQuery( type='planet', attribute='mr', query=True, exists=True )\n# Return: 1 //\ncmds.attributeQuery( name='jupiter', attribute='mr', query=True, exists=True )\n# Return: 1 //", 
    "deleteUI": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\n#    Create a simple window and then delete it and all of its children\n#    with one 'deleteUI -window' command.\n#\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.button()\ncmds.showWindow( window )\n\ncmds.deleteUI( window, window=True )\n\n#    Example 2.\n#\n#    Create a window with a number of buttons and delete a few of the\n#    buttons with the 'deleteUI -control' command.\n#\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\nb1 = cmds.button()\nb2 = cmds.button()\nb3 = cmds.button()\ncmds.showWindow( window )\n\ncmds.deleteUI( b1, b2, b3, control=True )", 
    "detachCurve": "\n\nimport maya.cmds as cmds\n\ncmds.detachCurve( 'curve1', ch=True, p=0.2, replaceOriginal=False )\n# Detaches curve1 at parameter value 0.2.  The\n# result is two curves and a detachCurve dependency node.\n# The \"-rpo\" flag specifies that the original curve is not to be\n# replaced; as a result a new curve is created for each curve piece.\n# Note that if \"k\" flag is not used, then the default is that\n# all pieces are kept.\n\ncmds.detachCurve( 'curve1.ep[1]', ch=True, replaceOriginal=False )\n# Detaches curve1 at its second edit point.\n\ncmds.detachCurve( 'curve1.u[0.2]', ch=True, replaceOriginal=False )\n# Detaches curve1 at parameter value 0.2\n\ncmds.detachCurve( 'curve1', ch=True, p=0.4, k=(1 , 0), rpo=False )\n# Detaches curve1 at parameter value 0.4 into two curves.  Because of\n# the \"k\" flags, two curves are created, but the second one is empty.\n# A detachCurve dependency node is also returned.\n\ncmds.detachCurve( 'curve1', ch=True, p=(0.2, 0.4), rpo=True )\n# Detaches curve1 into three pieces.  Because the \"rpo\" flag is on,\n# the original curve is replaced with the first piece.  The names\n# of all curve pieces are returned.  If curve1 is a result of history,\n# then a dependency node is created and its output is connected as\n# the input to curve1.  If curve1 is not a result of construction\n# history, then a dependency node is not created (even though the\n# \"ch\" flag is on).\n\ncmds.detachCurve( 'circle1', ch=True, p=(0.2, 0.4) )\n# Detaches a periodic curve, circle1, at two places.  Before\n# the detach, the circle is periodic, with a start parameter of 0.0,\n# and an end parameter of 8.0.\n# The first parameter, 0.2, is used to move the start point of the curve,\n# also called the \"seam\".  The second parameter, 0.4, is used to perform\n# a detach operation.  The result is TWO curves only.  The first curve\n# has a parameter range of 0.2 to 0.4.  The second curve has a parameter\n# range of 0.4 to 8.2.", 
    "detachDeviceAttr": "\n\nimport maya.cmds as cmds\n\ncmds.detachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )", 
    "detachSurface": "\n\nimport maya.cmds as cmds\n\ncmds.detachSurface( 'surface1', ch=True, d=1, p=0.3, rpo=False )\ncmds.detachSurface( 'surface1.u[0.3]', ch=True )\n# Detaches surface1 into two pieces at u = 0.3.\n# The results are two surface pieces, and a detachSurface dependency node.\n# Since no \"-keep\" flag is used, all pieces are kept.\n\ncmds.detachSurface( 'surface1', ch=True, k=(1,0), rpo=False, p=0.34, d=0 )\ncmds.detachSurface( 'surface1.v[0.34]', ch=True, k=(1,0), rpo=False )\n# Detaches surface1 at v = 0.34.  Because of the \"k\" flags, two\n# surfaces are created but the second surface is empty.  A\n# detachSurface dependency node is also returned.\n\ncmds.detachSurface( 'surface1', ch=True, rpo=True, p=(0.2, 0.5), d=1 )\ncmds.detachSurface( 'surface1.u[0.2]', 'surface1.u[0.5]', ch=True, rpo=True )\n# Detaches surface1 into three pieces.  Because of the \"-rpo\" flag,\n# the first surface piece is used to replace the original surface1.\n# The results are the three surfaces (including the original surface).\n# Even though the \"ch\" flag is on, a dependency node is not created\n# if surface1 is not a result of construction history.  If surface1\n# is the result of construction history, then a dependency node is\n# created and its name is returned.\n\ncmds.detachSurface( 'cylinder1', ch=True, d=0, p=0.3, rpo=False )\n# Detaches cylinder1, which is periodic in V, where the V parameter\n# ranges between 0.0 and 8.0.  The parameter, 0.3, is used to move\n# the start point of the cylinder, also known as the \"seam\".\n# The resulting surface's V parameter range is 0.0 to 0.3.\n\ncmds.detachSurface( 'cylinder1', ch=True, d=0, p=(0.3, 0.7), rpo=False )\n# Detaches cylinder1, which is periodic in V, where the V parameter\n# ranges between 0.0 and 8.0.  The 1st parameter, 0.3, is used to move\n# the start point of the cylinder, also known as the \"seam\".\n# The second parameter, 0.7, is used to detach the cylinder again.\n# The result is only TWO surfaces; the first surface's V parameter ranges\n# from 0.0 to 0.3. The second surface's V parameter ranges from 0.3 to 0.7.", 
    "deviceEditor": "\n\nimport maya.cmds as cmds\n\n# This example creates a new device editor in its own window\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.deviceEditor('myDeviceEditor')\ncmds.showWindow( window )", 
    "deviceManager": "\n\nimport maya.cmds as cmds\n\n# FIXME: get python sytax for above query.\ncmds.deviceManager(\"layer1\", root=True)", 
    "devicePanel": "\n\nimport maya.cmds as cmds\n\n# This example creates a new device panel in its own window\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.devicePanel()\ncmds.showWindow( window )", 
    "dgControl": "", 
    "dgInfo": "\n\nimport maya.cmds as cmds\n\n# create a node\ncmds.createNode('transform',name='NODE')\ncmds.setKeyframe('NODE.translate')\n# Print all things connected to node NODE\ncmds.dgInfo( 'NODE', c=True )\n# Print all connections currently in the graph\ncmds.dgInfo( c=True, all=True )\n# Print the datablock size of all nodes currently in the graph\ncmds.dgInfo( sz=True, all=True )\n# Return: [12, 12, 12314]\n# Print all connections to attribute tx on node NODE\ncmds.dgInfo('NODE.tx',c=True)\n# Print all dirty connections in the entire graph\ncmds.dgInfo( c=True, all=True, d=True )", 
    "dgPerformance": "", 
    "dgcontrol": "", 
    "dgdebug": "", 
    "dgdirty": "\n\nimport maya.cmds as cmds\n\n# Set everything in the entire scene dirty\n#\ncmds.dgdirty(a=True);\n\n# Set all connected plugs dirty on \"myNode\"\n#\ncmds.dgdirty( 'myNode' )\n# Result: 5\n# 5 plugs were set dirty\n\n#  Set all connected plugs dirty on \"locator1\"\ncmds.dgdirty( 'locator1' )\n# Result: 0\n# 0 plugs were connected so no dirty message was sent\n\n# Set myNode.tx dirty\ncmds.select( 'myNode.tx' )\ncmds.dgdirty()\n# Result: 1", 
    "dgeval": "\n\nimport maya.cmds as cmds\n\n# Evaluate all (connected) plugs on \"myNode\"\ncmds.dgeval( 'myNode' )\n# Result: 5\n# This means that 5 plugs were evaluated\n\n# Evaluate myNode.tx only\ncmds.select( 'myNode.tx' )\ncmds.dgeval()\n# Result: 1", 
    "dgfilter": "", 
    "dgfootprint": "", 
    "dgmodified": "\n\nimport maya.cmds as cmds\n\n# list all modified nodes\ncmds.dgmodified()", 
    "dgstats": "", 
    "dgtimer": "\n\nimport maya.cmds as cmds\n\n# Turns on node timing and resets the timers.\ncmds.dgtimer( on=True )\n# Turns off node timing. Note that this does not reset the\n# timers.\ncmds.dgtimer( off=True )\n# Prints the current timer values to the default (stdout).\ncmds.dgtimer( query=True )\n# To reset the timers:\ncmds.dgtimer( reset=True )\n# Turn on node timing and reset the timer values to zero.\n# Then, playback the scene, turn off timing and dump to a file.\n# Turn on timing without resetting the timers, and repeat.\ncmds.dgtimer( on=True, reset=True )\ncmds.play( wait=True )\ncmds.dgtimer( off=True )\ncmds.dgtimer( outputFile='/home/virginia/timing/dgtrace_once.txt', query=True )\ncmds.dgtimer( on=True )\ncmds.play( wait=True )\ncmds.dgtimer( off=True )\ncmds.dgtimer( outputFile='/home/virginia/timing/dgtrace_twice.txt', query=True )", 
    "dimWhen": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a menu item and button that will dim if\n#    there are no objects selected in the scene.\n#\nwindow = cmds.window(menuBar=True, title='dimWhen Example')\ncmds.menu( label='Edit' )\nmenuItem = cmds.menuItem(label='Delete Selection', command='cmds.delete()')\ncmds.columnLayout(adjustableColumn=True)\nbutton = cmds.button(label='Delete Selection', command='cmds.delete()')\n\n#    Create a few buttons to create some objects, select all the objects in\n#    the scene, and clear the selection.\n#\ncmds.button(label='Create Objects', command='cmds.sphere(); cmds.cone(); cmds.cylinder();')\ncmds.button(label='Select All', command='cmds.select(all=True)')\ncmds.button(label='Select Nothing', command='cmds.select(clear=True)')\n\n#    Add the dim conditions.\n#\ncmds.dimWhen( 'SomethingSelected', button, false=True )\ncmds.dimWhen( 'SomethingSelected', menuItem, false=True )\n\ncmds.showWindow( window )", 
    "directConnectPath": "", 
    "directKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a directKeyCtx which works in insert mode\n#\ncmds.directKeyCtx( 'specialDirectKeyContext', option='insert' )", 
    "directionalLight": "\n\nimport maya.cmds as cmds\n\n# Create a directional light\nlight = cmds.directionalLight(rotation=(45, 30, 15))\n\n# Change the light intensity\ncmds.directionalLight( light, e=True, intensity=0.5 )\n\n# Query it\ncmds.directionalLight( light, q=True, intensity=True )\n# Result:0.5#", 
    "dirmap": "\n\nimport maya.cmds as cmds\n\ncmds.dirmap( en=True )\ncmds.dirmap( m=('/usr/maya/textures', '/share/store/textures') )\ncmds.dirmap( cd='/usr/maya/textures/characters/skin1.iff' )\n# Result: /share/store/textures/characters/skin1.iff\"\ncmds.dirmap( m=('D:/mySoundfiles', '/usr/me/sounds') )\ncmds.dirmap( cd='D:/mySoundfiles/' )\n# Result: /usr/me/sounds/", 
    "disable": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.formLayout()\ncmds.button( 'fred' )\ncmds.showWindow()\ncmds.disable( 'fred' ) # dims the button\ncmds.disable( 'fred', v=False ) # un-dims it", 
    "disconnectAttr": "\n\nimport maya.cmds as cmds\n\n#    Create a sphere and cone and connect their rotate attribute.\n#\nsph = cmds.sphere()\ncon = cmds.cone()\nsphereR = '%s.r' % sph[0]\nconeR = '%s.r' % con[0]\ncmds.connectAttr(sphereR, coneR)\n\n#    Break the connection between the rotate attributes.\n#\ncmds.disconnectAttr(sphereR, coneR)", 
    "disconnectJoint": "\n\nimport maya.cmds as cmds\n\ncmds.joint( p=(0, 0, 0), name='jointA' )\ncmds.joint( p=(0, 1, 0), name='jointB' )\ncmds.joint( p=(0, 2, 0), name='jointC' )\ncmds.disconnectJoint( 'jointB' )", 
    "diskCache": "\n\nimport maya.cmds as cmds\n\n# Explicitly specify the settings for disk cache\n# creation: the start time to 3 and the end time to 10.\ncmds.diskCache( startTime=3, endTime=10 )\n# Specify to use over sampling and with sampling\n# rate set to 2, sampling twice for each frame.\ncmds.diskCache( overSample=True, samplingRate=2 )\n# Delete all caches\ncmds.diskCache( deleteAll=True )\n# Clear the cache content for diskCache3's cache.\ncmds.diskCache( empty='diskCache3' )\n# Close all the disk caches.\ncmds.diskCache( emptyAll=True )", 
    "dispatchGenericCommand": "", 
    "displacementToPoly": "\n\nimport maya.cmds as cmds\n\n# To bake the rendered geometry and create a new meshShape, for the\n# selected geometry shape use:\ncmds.displacementToPoly()", 
    "displayAffected": "\n\nimport maya.cmds as cmds\n\n# Turn on the display of affected objects\ncmds.displayAffected( True )\n\n# Query whether the display of affected objects is turned on:\ncmds.displayAffected( query=True )", 
    "displayColor": "\n\nimport maya.cmds as cmds\n\ncmds.displayColor( 'grid', 15, dormant=True )\ncmds.displayColor( 'grid', q=True, dormant=True )\ncmds.displayColor( list=True )\ncmds.displayColor( resetToFactory=True )\ncmds.displayColor( queryIndex=15 )", 
    "displayCull": "\n\nimport maya.cmds as cmds\n\ncmds.displayCull( bfc=True )\ncmds.displayCull( bfc=False )\ncmds.displayCull( q=True, bfc=True )\n# Returns 0 if the back-face-culling on the selected object is false.\n# Returns 1 if the back-face-culling on the selected object is true.", 
    "displayLevelOfDetail": "\n\nimport maya.cmds as cmds\n\ncmds.displayLevelOfDetail( lod=True )\ncmds.displayLevelOfDetail( lod=False )\ncmds.displayLevelOfDetail( q=True, lod=True )\n# Returns 0 if the level-of-detail display is false.\n# Returns 1 if the level-of-detail display is true.", 
    "displayPref": "\n\nimport maya.cmds as cmds\n\n# Turn on the display of affected objects\ncmds.displayPref( displayAffected=True )\n\n# Query whether affected objects will be displayed\n# in a special color or not.\ncmds.displayPref( q=True, displayAffected=True )\n# Result: 1 #\n\n# Turn on full wireframes on active shaded objects\ncmds.displayPref( wireframeOnShadedActive='full' )", 
    "displayRGBColor": "\n\nimport maya.cmds as cmds\n\n# Set the background colour to red\ncmds.displayRGBColor( 'background', 1, 0, 0 )\n\n# List the current RGB color settings\ncmds.displayRGBColor( list=True )", 
    "displaySmoothness": "\n\nimport maya.cmds as cmds\n\n# create a surface\ncmds.sphere()\n\n# set rough smoothness settings\ncmds.displaySmoothness( du=0, dv=0, pw=4, ps=1 )\n\n# set medium smoothness settings\ncmds.displaySmoothness( du=1, dv=1, pw=8, ps=2 )\n\n# set fine smoothness settings\ncmds.displaySmoothness( du=2, dv=2, pw=16, ps=4 )\n\n# Display surface as a hull\ncmds.displaySmoothness( hull=True )\n\n# Display with reduced number of points\ncmds.displaySmoothness( hull=True, su=2, sv=2 )\n\n# Display rendering tesselation\ncmds.displaySmoothness( rt=1 )\n\n# Set default value for pointsShaded.\n# Subsequent surfaces created will have pointsShaded as 2.\ncmds.displaySmoothness( dc=True, ps=2 )\n\n# displaySmoothness queries\n#\n# query hull display, returns boolean\ncmds.displaySmoothness( q=True, hull=True )\n\n# query default pointsShaded value\ncmds.displaySmoothness( q=True, dc=True, ps=True )\n\n# query surface divisionsU value\ncmds.displaySmoothness( q=True, du=True )\n\n# Only the -pointsWire flag works on curves.\ncmds.circle()\n\n# change the number of points displayed per curve span.\ncmds.displaySmoothness( pw=3 )\n# query default pointsWire value for curves.\ncmds.displaySmoothness( q=True, dc=True, pw=True )\n\ncmds.polyCube()\n\n# Query the display resolution\ncmds.displaySmoothness( q=True, polygonObject=True )\n# Result: 0\n\n# Change the display resolution\ncmds.displaySmoothness( polygonObject=2 )", 
    "displayStats": "", 
    "displayString": "\n\nimport maya.cmds as cmds\n\n#    Associate a string with an identifier.\n#\ncmds.displayString( 'kExampleHelloWorld', value='Hello world' )\n#    Query string associated with an identifer.\n#\ncmds.displayString( 'kExampleHelloWorld', query=True, value=True )\n#    Define a simple formatted string to append ellipses.\n#\ncmds.displayString( 'kExampleEllipsesFormat', value='^1s...' )\ncmds.displayString( 'kExampleEllipsesFormat', 'kExampleHelloWorld', query=True, value=True )\n#    Define a formatted string using all the available\n#    embedded characters.\n#\ncmds.displayString( 'kExampleAnotherFormat', value='These ^1s are ^2s me ^3s' )\ncmds.displayString( 'kExamplePretzels', value='pretzels' )\ncmds.displayString( 'kExampleAnotherFormat', 'kExamplePretzels', 'making', 'thirsty', query=True, value=True )\n# Obtain a list of matching displayString keys.\n# In the first example  a list of  all keys containing the substring\n# \"niceName\".\n# In the second example a list of all keys in the string set\n# m_testStrings\ncmds.displayString( 'niceName', query=True, keys=True )\ncmds.displayString( 'm_testStrings.', query=True, keys=True )\n#    If you do not specify the -v/value flag on creating then\n#    the value will be the same as the identifier.\n#\ncmds.displayString( 'kExampleMissingValue' )\ncmds.displayString( 'kExampleMissingValue', query=True, value=True )", 
    "displaySurface": "\n\nimport maya.cmds as cmds\n\ncmds.sphere(n='mySphere1')\ncmds.sphere(n='mySphere2')\ncmds.displaySurface( ['mySphere1', 'mySphere2'], two=False )\ncmds.displaySurface( xRay=True )", 
    "distanceDimContext": "\n\nimport maya.cmds as cmds\n\ncmds.distanceDimContext()", 
    "distanceDimension": "\n\nimport maya.cmds as cmds\n\n# To measure ths distance between [0,2,2] and [1,5,6]:\ncmds.distanceDimension( sp=(0, 2, 2), ep=(1, 5, 6) )\n#  Result: distanceDimensionShape1  #", 
    "doBlur": "\n\nimport maya.cmds as cmds\n\ncmds.doBlur( l=2, s=1, m=2, c='testimage', v='testimage.motion' )", 
    "dockControl": "\n\nimport maya.cmds as cmds\n\nmyWindow = cmds.window()\nbuttonForm = cmds.formLayout( parent = myWindow )\ncmds.button( parent = buttonForm )\nallowedAreas = ['right', 'left']\ncmds.dockControl( area='left', content=myWindow, allowedArea=allowedAreas )", 
    "dolly": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\n\n# Moves the persp camera forward through its center of interest\ncmds.dolly( 'persp', abs=True, d=-3 )\n\n# Move the persp camera and its center of interest.\ncmds.dolly( 'persp', d=-3 )\n\n# Changes the ortho-width of the top camera to 7.5\ncmds.dolly( 'top', abs=True, os=7.5 )\n\n# Scale the ortho-width of the top camera by a quarter from its current value.\ncmds.dolly( 'top', os=0.25 )", 
    "dollyCtx": "\n\nimport maya.cmds as cmds\n\ncmds.dollyCtx( 'dollyContext', s=1.0, ac=False, ld=False, cd=False )\n\ncmds.dollyCtx( 'dollyContext', e=True, bdt='surface' )", 
    "dopeSheetEditor": "\n\nimport maya.cmds as cmds\n\ncmds.dopeSheetEditor( 'dopeSheetEditor' )", 
    "doubleProfileBirailSurface": "\n\nimport maya.cmds as cmds\n\ncmds.doubleProfileBirailSurface( 'curve1', 'curve2', 'curve3', 'curve4', bl=0.5 )\n\n# Tangent continuous birail surface across the two profiles.\ncmds.doubleProfileBirailSurface( 'surface1.u[0.5]', 'surface2.v[0.2]', 'curve1', 'curve2', bl=1.0, tp1=True, tp2=True )", 
    "dpBirailCtx": "", 
    "drag": "\n\nimport maya.cmds as cmds\n\n# Creates a drag field resisting in direction (0,1,0.5).\ncmds.drag( name='myDrag', dx=0, dy=1.0, dz=0.5, useDirection=1 )\n\n# Edits the acceleration value of the field myDrag\ncmds.drag( 'myDrag', e=True, m=0.75 )\n\n# Queries myDrag for its magnitude\ncmds.drag( 'myDrag', q=True, m=True )", 
    "dragAttrContext": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( w=10, h=10, sx=3, sy=3, ax=(0, 1, 0), tx=1, ch=1 )\n\ncmds.dragAttrContext( 'myDragAttrContext' )\n\n# Example 1: Move along X direction and rotate around X at the same time.\ncmds.dragAttrContext( 'myDragAttrContext', edit=True, connectTo=('pPlane1.translateX', 'pPlane1.rotateX') )\ncmds.setToolTo( 'myDragAttrContext' )\n\n# Example 2: Extrude a face and then modify the distance that it is extruded by.\ncmds.polyExtrudeFacet( 'pPlane1.f[0]', ch=1, kft=0, pvx=-1.633333373, pvy=-1.111623654, pvz=3.142515589, tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, sx=1, sy=1, sz=1, ran=0, divisions=1, twist=0, taper=1, off=0, ltz=0, ws=0, ltx=0, lty=0, lrx=0, lry=0, lrz=0, lsx=1, lsy=1, lsz=1, ldx=1, ldy=0, ldz=0, w=0, gx=0, gy=-1, gz=0, att=0, mx=0, my=0, mz=0, sma=30 )\ncmds.dragAttrContext( 'myDragAttrContext', edit=True, connectTo='polyExtrudeFace1.localTranslateZ' )\ncmds.setToolTo( 'myDragAttrContext' )\n\n# Example 3: Do a wedge face and modify both the number of divisions and the\n# angle at the same time.\ncmds.polyWedgeFace( 'pPlane1.f[0]', 'pPlane1.e[30]', ws=1, wedgeAngle=90, divisions=4, ed=30, ch=1 )\ncmds.dragAttrContext( 'myDragAttrContext', edit=True, connectTo=('polyWedgeFace1.wedgeAngle', 'polyWedgeFace1.divisions') )\ncmds.setToolTo( 'myDragAttrContext' )", 
    "draggerContext": "\n\nimport maya.cmds as cmds\n\n# Procedure called on press\ndef SampleContextPress():\n        pressPosition = cmds.draggerContext( 'sampleContext', query=True, anchorPoint=True)\n        print (\"Press: \" + str(pressPosition))\n\n# Procedure called on drag\ndef SampleContextDrag():\n        dragPosition = cmds.draggerContext( 'sampleContext', query=True, dragPoint=True)\n        button = cmds.draggerContext( 'sampleContext', query=True, button=True)\n        modifier = cmds.draggerContext( 'sampleContext', query=True, modifier=True)\n        print (\"Drag: \" + str(dragPosition) + \"  Button is \" + str(button) + \"  Modifier is \" + modifier + \"\\n\")\n        message = str(dragPosition[0]) + \", \" + str(dragPosition[1])\n        cmds.draggerContext( 'sampleContext', edit=True, drawString=message)\n\n# Define draggerContext with press and drag procedures\ncmds.draggerContext( 'sampleContext', pressCommand='SampleContextPress()', dragCommand='SampleContextDrag()', cursor='hand' );\n\n# Set the tool to the sample context created\n# Results can be observed by dragging mouse around main window\ncmds.setToolTo('sampleContext')", 
    "drawExtrudeFacetCtx": "", 
    "dropoffLocator": "\n\nimport maya.cmds as cmds\n\n# create a wire deformer\n#\ncmds.polyPlane(w=24,h=24,sx=20,sy=20)\ncmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\ncmds.select('pPlane1')\ncmds.wire(w='curve1')\n\n# add a locator at curve point 0.5, with envelope 2 and percent 1\n#\ncmds.select( 'curve1.u[0.5]', r=True )\ncmds.dropoffLocator( 2.0, 1.0, 'wire1' )", 
    "duplicate": "\n\nimport maya.cmds as cmds\n\n# Create a hierarchy of two spheres;\ncmds.sphere( n='sphere1' )\ncmds.move( 3, 0, 0 )\ncmds.sphere( n='sphere2' )\ncmds.move( -3, 0, 0 )\ncmds.group( 'sphere1', 'sphere2', n='group1' )\ncmds.circle( n='circle1' )\n\n# Create a duplicate of the group\ncmds.duplicate( 'group1' )\n# Result: group2 sphere1 sphere2 #\n\ncmds.undo()\ncmds.duplicate( 'group1', rr=True )\n# Result: group2 #\n\n# Create a row of 4 circles equally spaced using\n# the -smartTransform flag.\ncmds.duplicate( 'circle1' )\ncmds.move( 3, 0, 0 )\ncmds.duplicate( st=True )\ncmds.duplicate( st=True )\n\n# Duplicate a sphere along with its input connections.\n# If animCurves were feeding into original transforms of the\n# sphere, they will feed into the duplicated ones also.\n# If the sphere has history (in this case it does),\n# then the history is connected to the duplicate. Note that\n# changing the radius for the makeNurbSphere for the sphere1\n# affects the duplicated sphere.\n#\ncmds.duplicate( 'group1|sphere1', ic=True )\ncmds.move( 0, 0, 0 )\ncmds.setAttr( 'makeNurbSphere1.radius', 2 )\n\n# Duplicate selected objects along with their upstream nodes\n# and connections. This will duplicate the history.\ncmds.select( 'group1|sphere2' )\ncmds.duplicate( un=True )", 
    "duplicateCurve": "\n\nimport maya.cmds as cmds\n\ncmds.cone( ch=True, o=True, po=0, ax=(0, 1, 0), r=3, hr=4 )\n# Result: [u'nurbsCone1', u'makeNurbCone1'] #\n\n# duplicate isoparm at v param 0.5 with history\ncmds.duplicateCurve( 'nurbsCone1.v[0.5]', ch= True, o=True )\n\n# duplicate isoparm at normalized u param 0.1, no history\ncmds.duplicateCurve( 'nurbsCone1.un[0.1]', ch=False )\n\ncmds.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=10, lr=1 ) ;\ncmds.circle( ch=True, o=True, nr=(0, 1, 0), r=4 ) ;\ncmds.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=False, rn=False, un=False, tol=0.01 )\n# duplicate curve on surface\ncmds.duplicateCurve( 'nurbsPlaneShape1-\"projectionCurve1_1', ch=True, o=False )\n\ncmds.trim( 'nurbsPlaneShape1', 'projectionCurve1_Shape1', ch=True, o=True, rpo=True, lu=0.2, lv=0.3 )\n# duplicate trim edge\ncmds.duplicateCurve( 'nurbsPlane1.edge[1][1][1]', ch=True, o=False);", 
    "duplicateSurface": "\n\nimport maya.cmds as cmds\n\ncmds.nurbsPlane( u=4, v=3 )\ncmds.duplicateSurface( 'nurbsPlane1.sf[1:2][0:1]', ch=True, o=True )\n\n# Duplicates 4 faces of a nurbs plane.", 
    "dynCache": "\n\nimport maya.cmds as cmds\n\n# Create an emitter and connect it to a particle shape\ncmds.emitter(typ='omni', pos=(1, 1, 1), n='myEmitter')\ncmds.particle(n='myParticles')\ncmds.connectDynamic('myParticles', em='myEmitter')\n\n# Cache all attributes of the particle shape at time 50\ncmds.playbackOptions(min=0, max=50, ast=0, aet=100)\ncmds.currentTime('0');\ncmds.play(w=True)\ncmds.dynCache()", 
    "dynControl": "", 
    "dynExport": "\n\nimport maya.cmds as cmds\n\ncmds.dynExport( 'particle1', mnf=5, mxf=10, os=2, atr=('position', 'velocity'), p='PDB' )\n\n# Export position and velocity attributes for particle1\n# for frames 5 through 10 at every half frame interval,\n# to files in subdirectory \"PDB\" of the workspace root\n# directory. The default format (binary) will be used.", 
    "dynExpression": "\n\nimport maya.cmds as cmds\n\ncmds.dynExpression( 'particleShape1', s='rgbPP = \"\" 1, 0, 0 \"\"', c=1 )\n\n# This expression tells particleShape1 that whenever new particles are\n# created for this object, then their color should start out as \"\" 1, 0, 0 \"\",\n# which is red.\n\ncmds.dynExpression( 'particleShape1', s='rgbPP = rgbPP * .9;', rbd=1 )\n\n# This sets the runtime before dynamics expression for rgbPP.  When a particle is\n# first \"born\", its color will be red from the previous example.  Every other frame after\n# that, its color is reduced by 10 percent each time the expression is executed.\n\ncmds.dynExpression( 'particleShape1', s='rgbPP = rgbPP * .9;', rad=1 )\n\n# This sets the runtime after dynamics expression for rgbPP.  When a particle is\n# first \"born\", its color will be red from the previous example.  Every other frame after\n# that, its color is reduced by 10 percent each time the expression is executed.", 
    "dynGlobals": "\n\nimport maya.cmds as cmds\n\ncmds.dynGlobals( e=True, os=5 )\n# or\ncmds.dynGlobals( os=5 )\n\n# Both of these commands will edit the overSampling attribute of\n# the active dynGlobals node.", 
    "dynPaintCtx": "", 
    "dynPaintEditor": "\n\nimport maya.cmds as cmds\n\ncmds.dynPaintEditor( 'editor' )\n\ncmds.dynPaintEditor( 'editor', e=True, ni=(640, 480, 1.0, 0.5, 0.2) )", 
    "dynParticleCtx": "\n\nimport maya.cmds as cmds\n\ncmds.dynParticleCtx( 'dynParticleContext', e=True, nj=5, jr=1.5 )\n# Set the option values for number of jitters to 5 and jitter\n# radius to 1.5 in the particle context, which will result in\n# creating 5 particles for each mouse click in the viewport,\n# randomly placed, but all within 1.5 units of the mouse click.", 
    "dynPref": "\n\nimport maya.cmds as cmds\n\n# Sets autoCreate rigid bodies to \"on\"\ncmds.dynPref( autoCreate=1 )", 
    "dynSelectCtx": "", 
    "dynTestData": "", 
    "dynWireCtx": "", 
    "dynamicLoad": "\n\nimport maya.cmds as cmds\n\ncmds.dynamicLoad( 'libDynSlice.dll' )", 
    "editDisplayLayerGlobals": "\n\nimport maya.cmds as cmds\n\ncmds.editDisplayLayerGlobals( cdl='displayLayer1' )\ncmds.editDisplayLayerGlobals( query=True, cdl=True )\n# Result: displayLayer1\ncmds.editDisplayLayerGlobals( 'bi', query=True )\n# Result: 10\ncmds.editDisplayLayerGlobals( useCurrent='on' )", 
    "editDisplayLayerMembers": "\n\nimport maya.cmds as cmds\n\ncmds.editDisplayLayerMembers( 'displayLayer1', 'sphere1', 'cone1' )\n# Result : 2\ncmds.editDisplayLayerMembers( 'displayLayer1', query=True )\n# Result : sphere1 cone1\ncmds.editDisplayLayerMembers( 'displayLayer1', 'expression1', 'sphere2' )\n# Warning : Only DAG objects can be in a display layer.  'expression1' ignored.\n# Result : 1", 
    "editRenderLayerAdjustment": "\n\nimport maya.cmds as cmds\n\n# Create two adjustments for layer1\ncmds.editRenderLayerAdjustment( 'lambert1.color', 'lambert1.diffuse', layer='layer1' )\n# Result : 2\n# List all the adjustments to renderlayer1\ncmds.editRenderLayerAdjustment( 'layer1', query=True, layer=True )\n# Result : lambert1.color lambert1.diffuse\n# Create adjustments for the current render layer\ncmds.editRenderLayerAdjustment( 'lambert1.color' )\n# Result : 1\n# Remove one adjustment from the current render layer\ncmds.editRenderLayerAdjustment( 'lambert1.color', remove=True )\n# Result : 1\n# Query the current layer for the list of adjustments\ncmds.editRenderLayerAdjustment( query=True, alg=True )\n# castsShadows         nurbsSphereShape1.castsShadows\n#                      pPlaneShape1.castsShadows\n#                      pSphereShape1.castsShadows\n# instObjGroups        pCylinderShape1.instObjGroups[0]\n# motionBlurByFrame    defaultRenderGlobals.motionBlurByFrame\n# receiveShadows       nurbsSphereShape1.receiveShadows\n#                      pPlaneShape1.receiveShadows\n#                      pSphereShape1.receiveShadows\n# shadingSamples       defaultRenderQuality.shadingSamples", 
    "editRenderLayerGlobals": "\n\nimport maya.cmds as cmds\n\ncmds.editRenderLayerGlobals( currentRenderLayer='layer1' )\ncmds.editRenderLayerGlobals( query=True, currentRenderLayer=True )\n# Result: layer1\ncmds.editRenderLayerGlobals( query=True, baseId=True )\n# Result: 1\ncmds.editRenderLayerGlobals( useCurrent=True )\n# Enable automatic creation of adjustments\ncmds.editRenderLayerGlobals( enableAutoAdjustments=True )", 
    "editRenderLayerMembers": "\n\nimport maya.cmds as cmds\n\ncmds.editRenderLayerMembers( 'layer1', 'sphere1', 'cone1' )\n# Result : 4\ncmds.editRenderLayerMembers( 'layer1', query=True )\n# Result : sphere1 sphere1Shape cone1 cone1Shape\ncmds.editRenderLayerMembers( 'layer1', 'expression1', 'sphere2' )\n# Result : 2\ncmds.editRenderLayerMembers( 'layer1', 'sphere1', remove=True)\n# Result : 2", 
    "editor": "\n\nimport maya.cmds as cmds\n\n# To change the selection connection for any editor\n#\ncmds.editor( 'anyEditor', edit=True, mainListConnection='newConnection' )", 
    "editorTemplate": "\n\nimport maya.cmds as cmds\n\n# You will most likely want to use this command when defining the controls\n# that appear in the Attribute Editor for a custom node created in a plugin.\n\n# To see how this is done compile and load the transCircleNode plugin. Then\n# create a node of type \"transCircle\" and show the Attribute Editor.\n\n# Now look at the AEtransCircleTemplate.mel script to see how the\n# editorTemplate command is used to define the controls that appear in\n# the Attribute Editor.\n\n# As you may have noticed the name of the template script must match the\n# node type you create, ie. AEnodeTypeTemplate.mel.", 
    "effector": "\n\nimport maya.cmds as cmds\n\n# Will cause effector1 not to be displayed if attached to a handle.\n# This is the default.\n#\ncmds.effector( 'effector1', e=True, hi=False )\n\n# Will cause effector1 to be displayed if attached to a handle.\n#\ncmds.effector( 'effector1', e=True, hi=True )", 
    "emit": "\n\nimport maya.cmds as cmds\n\ncmds.particle()\ncmds.emit( object='particle1', position=(1, 1, 1) )\n\n# This will create one particle at position \"\"1,1,1\"\" in the\n# already-existing particle object \"i\"particle1\"/i\".\n#\n\ncmds.particle()\ncmds.emit( object='particle1', position=((1, 1, 1), (2, 2, 2)), attribute=('velocity', 'rgbPP'), vectorValue=((1, 2, 3), (2, 3, 4), (.5, 1, 0)), floatValue=.1 )\n\n# This will create two particles at positions \"\"1,1,1\"\" and \"\"2,2,2\"\" in\n# the already-existing particle object \"i\"particle1\"/i\".  Then the velocity\n# attribute of those particles is set to \"\"1,2,3\"\" and \"\"2,3,4\"\",\n# respectively.  Also, the rgbPP values are set to \"\".5,1,0\"\" and\n# \"\".1,.1,.1\"\", respectively.  Notice that the rgbPP value for the\n# second particle was set with the -floatValue flag, even though rgbPP\n# is a vector attribute.  The single value was converted into a vector.\n\ncmds.particle()\ncmds.emit( object='particle1', position=((1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5)), attribute=('velocity', 'mass', 'velocity'), vectorValue=((1, 2, 3), (2, 3, 4), (.1, .2, .3), (3, 4, 5)), floatValue=.5)\n\n# This will create five particles in \"i\"particle1\"/i\".  The values\n# for their attributes are:\n#\n# Attribute  Particle1   Particle2   Particle3   Particle4   Particle5\n# ----------+-----------+-----------+-----------+-----------+---------\n# position   \"\"\"\"1,1,1\"\"\"\"   \"\"\"\"2,2,2\"\"\"\"   \"\"\"\"3,3,3\"\"\"\"   \"\"\"\"4,4,4\"\"\"\"   \"\"\"\"5,5,5\"\"\"\"\n# velocity   \"\"\"\"1,2,3\"\"\"\"   \"\"\"\"2,3,4\"\"\"\"   \"\"\"\"3,4,5\"\"\"\"   \"b\"\"\"\"\"3,4,5\"\"\"\"   \"\"\"\"3,4,5\"\"\"\"\"/b\"\n# mass     .5          .3742       \"b\".3742       .3742       .3742\"/b\"\n#\n# Notice that the second value for mass was seet with the -vectorValue\n# flag, even though mass is a float attribute.  The vector was\n# converted into a float by taking its length.  Also, notice the \"b\"bold\"/b\"\n# values in the table.  The values for those attribute values were not\n# explicitly set in the command.  If there are fewer values given for\n# an attribute than there are position flags, the remaining unset\n# values are set to the last value set for that attribute.  This\n# allows the user to set many of the values to be the same without\n# having to use multiple value flags.  One last note.  Notice that the\n# attribute flag was passed twice for the attribute velocity.  The value\n# flags for repeated attributes pick up where the previous ones left\n# off.\n\nx = rand(1)\ny = rand(1)\nz = rand(1)\np = sphrand(5)\ncmds.emit( object='particle1', pos=((x, y, z), ('($p.x)', '($p.y)', '($p.z)')) )\n\n# This is a piece of Python code that could be put in a script or\n# even in an expression.  It adds a random number of particles\n# to the already-existing particle object \"i\"particle1\"/i\".  Since\n# the number of particles as well as the positions and velocities\n# of the particles are random, it would be impossible to just have\n# the emit action itself in the expression or script.  It must be\n# built as a string and then sent to the command processor with the\n# \"b\"eval\"/b\" or \"b\"evalEcho\"/b\" commands.  Notice that when appending\n# the vector variables to the string, it is not necessary to append\n# each component of the vectors separately.  When they are converted\n# from a vector to a string, the three components get separated with\n# a space automatically, thus formatting them in the desired way.\n# An example of a possible result from this \"script\" could be:\n\ncmds.emit( object='particle1', pos=((1.899864198, -6.721569708, 0.585203937), (8.103957656, -4.042442985, 2.047724209), (-1.392914569, -0.109724376, 8.62265813), (1.960103537, -3.203145195, -7.6892516), (2.564072614, -6.049536895, 1.334818295), (-5.603376821, 4.33595058, 6.952385447), (-2.478591746, 6.286855715, 6.851659059), (2.424670276, -4.083412217, 6.320538621), (6.440800453, 3.405519296, 5.462135819), (2.445192551, 1.397203422, 3.443755853)), at='velocity', vv=((-2.348796409, 4.022130218, 0.5316172944), (4.149667117, -1.023146404, 1.97965556), (-0.08429132578, -0.5518495233, 1.591812495), (2.597930963, 1.033536331, -1.398351383), (-3.102859272, 3.423569856, 0.7895603241), (-2.519331228, -2.5684916, -1.530779154), (-2.645169119, -0.3186551381, 0.9164776099), (-0.6183816487, -1.060784068, -0.8748223942), (-0.2460372256, 3.567980747, -2.007567372), (1.735044809, -3.660099445, -1.765401859)) )\n\n# The spacing in the string is just for formatting reasons and does\n# not affect how the action executes or compiles.", 
    "emitter": "\n\nimport maya.cmds as cmds\n\ncmds.particle( p=((-1, 5, 2), (2, 2, 2), (3, 3, 3)), n='particles' )\ncmds.emitter( 'particles', r=300, mnd=1.5, mxd=2.5, n='emitter' )\ncmds.particle( n='emitted' )\ncmds.connectDynamic( 'emitted', em='emitter' )\n\n# Creates a particle emitter.\n\ncmds.emitter( dx=1, dy=0, dz=0, sp=0.33, pos=(1, 1, 1), n='myEmitter' )\ncmds.particle( n='emittedParticles' )\ncmds.connectDynamic( 'emittedParticles', em='myEmitter' )\n\n# Creates a point emitter.", 
    "enableDevice": "\n\nimport maya.cmds as cmds\n\n# Enables all assignInputDevice and attachDeviceAttr actions for the\n# device named \"clock\"\ncmds.enableDevice( enable=True, d='clock' )\n\n# Stops applyTake (with no arguments) from updating param curves\n# attached to the minutes  and hours channels of device named \"clock\"\ncmds.enableDevice( 'minutes', 'hours', enable=False, d='clock', apply=True )", 
    "encodeString": "\n\nimport maya.cmds as cmds\n\n# Set the string s to: print('Hello\\n');\nquote = '\\\"'\nbackslash = '\\\\'\ns = 'print(' + quote + 'Hello' + backslash + 'n' + quote + ')'\nprint 's=' + s\ns=print(\"Hello\\n\")\n\nes = cmds.encodeString(s)\nprint 'es=' + es\nes=print(\\\"Hello\\\\n\\\")", 
    "error": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ndef lightError():\n    l = cmds.ls( lights=True )\n    if len(l) == 0:\n        cmds.error( \"No Lights\" )\nlightError()\n# The above will produce the following output and raise a RuntimeError\n# exception from the script containing it:\n#\n#   # Error: No Lights #\n#\n# If the option to display line numbers or the stack trace is turned on\n# the following output will be produced and the same exception raised:\n#\n#   # Error: line 13 of 'lightError' in '\"maya console'\": No Lights #\n#", 
    "eval": "\n\nimport maya.mel as mel\n\nmel.eval('match \"a+b+\" \"abbcc\"')\n# Result: abb #\n\n# Eval can be used to access global MEL variables. For example, the following\n# assigns the current value in $gMainWindow to a Python variable.\nmyPythonVar=mel.eval('$tempMelVar=$gMainWindow')\n\n# Print the value retrieved.\nprint myPythonVar\n# Result: MayaWindow", 
    "evalContinue": "", 
    "evalDeferred": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\nbutton = cmds.button(label='Delete Me')\ncmds.button(button, edit=True, command=('cmds.evalDeferred(\"cmds.deleteUI(button)\")'))\ncmds.showWindow()", 
    "evalEcho": "", 
    "event": "\n\nimport maya.cmds as cmds\n\ncmds.event( em=2, t='newCloud' )\n# At every collision, emit two new particles into the object\n# newCloud. The original colliding particles will survive and\n# remain in their original object. This event will be\n# assigned to the currently selected object.\n\ncmds.event( em=2 )\n# At every collision, emit two new particles into the same object.\n\ncmds.event( count=1, em=2 )\n# At the first collision for each particle, emit two new particles\n# into the same object.\n# Subsequent collisions for that same particle will not cause any\n# additional particles to be emitted. However, the new particles will\n# each emit two new ones at their first collision, since they also\n# belong to the object for which this event has been assigned.\n\ncmds.event( die=1, count=2 )\n# All particles in the selected object will die at their second\n# collision.\n\ncmds.event( 'myCloud', name='foo', count=1, q=1 )\n# Return the current value of the count parameter for the event \"foo\"\n# assigned to particle shape myCloud.  The order of the flags is\n# important.  Thef lag you are querying (in this case, -count) must\n# come before the -q.  The -name flag and the particle object name must\n# come after.\n\ncmds.event( 'myCloud', d=True, name='foo' )\n# Delete the event \"foo\" assigned to particle shape myCloud.\n\ncmds.event( 'myCloud', e=True, name='foo', emit=2 )\n# Edit the \"emit\" value of the event \"foo\" assigned to\n# particle shape myCloud.\n\ncmds.event( 'myCloud', proc='myProc' )\n# Call the MEL proc \"myProc(name, id, name) each time a particle\n# of myCloud collides with anything.\n\ncmds.event( name='oldName', e=1, rename='newName' )\n# For the selected particle shape, rename the event \"oldName\" to \"newName.\"", 
    "exactWorldBoundingBox": "\n\nimport maya.cmds as cmds\n\nbbox = cmds.exactWorldBoundingBox( 'sphere1', 'cube1', 'cone2')\nprint 'Bounding box ranges from: %f' % bbox[0], ', %f' % bbox[1], ', %f' % bbox[2],\nprint ' to %f' % bbox[3], ', %f' % bbox[4], ', %f' % bbox[5]", 
    "exclusiveLightCheckBox": "\n\nimport maya.cmds as cmds\n\n# Create a spot light\nmyLight = cmds.spotLight(coneAngle=45)\n\nmyWindow = cmds.window()\ncmds.columnLayout('cl')\ncmds.exclusiveLightCheckBox(width=200, label='Exclusive', light=myLight)\ncmds.showWindow(myWindow)", 
    "exportEdits": "\n\nimport maya.cmds as cmds\n\n# query nodes to be exported, target is selected nodes, include related shaders\nnodeList = cmds.exportEdits(query=1,selected=1,includeShaders=1)\n# exported selected nodes and related animation nodes to file\ncmds.exportEdits(\"myExportFile.ma\",type='editMA',selected=1,includeShaders=1)\n# Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/myExportFile.editMA", 
    "expression": "\n\nimport maya.cmds as cmds\n\ncmds.expression( s='a.translateX = b.translateX * sin(c.translateX)' )\n\ncmds.expression( o='ball', s='tx = sin(time);' )", 
    "expressionEditorListen": "\n\nimport maya.cmds as cmds\n\ncmds.expressionEditorListen()", 
    "extendCurve": "\n\nimport maya.cmds as cmds\n\n# to extend the start of a curve with a line of distance 3\ncmds.extendCurve( em=0, et=0, s=True, d=3.0 )\n\n# to extend the end of a curve to a point\ncmds.extendCurve( em=2, s=False, ip=(1, 2, 3) )", 
    "extendFluid": "", 
    "extendSurface": "\n\nimport maya.cmds as cmds\n\n#Create a nurbs plane, then extend both sides of the plane by 10\ncmds.nurbsPlane(n='plane1')\ncmds.extendSurface('plane1', d=10, es=2)", 
    "extrude": "\n\nimport maya.cmds as cmds\n\n# extrude profile curve \"distance\" 5 units along x axis\ncmds.extrude ('profile', et = 0, d= (1, 0, 0), l= 5)\n\n# extrude profile curve along path curve using \"flat\" method\ncmds.extrude( 'profile', 'path', et=1 )\n\n# extrude profile curve along path curve using \"tube\" method\ncmds.extrude( 'profile', 'path', et=2 )", 
    "fcheck": "\n\nimport maya.cmds as cmds\n\n# View the image \"myImage.iff\"\n#\ncmds.fcheck( 'myImage.iff' )\n# You can also display several images at once using filenames with\n# wildcards (each in a separate window)\n#\ncmds.fcheck( 'myTest*' )\n# You can display an animation using a trailing dot (.) on the\n# filename.\n#\ncmds.fcheck( 'mySequence.' )", 
    "file": "\n\nimport maya.cmds as cmds\n\n# save the current scene to an ascii file named \"fred.ma\"\n#\ncmds.file( rename='fred.ma' )\ncmds.file( save=True, type='mayaAscii' )\n\n# save the current scene to an ascii file without the \".ma\" extension\n#\ncmds.file( rename='tmp' )\ncmds.file( save=True, defaultExtensions=False, type='mayaAscii' )\n\n# open the file fred.ma, using the default load settings. Any references will\n# be brought in in the same state they were in when fred.ma was last saved.\n#\ncmds.file( 'fred.ma', open=True )\n\n# reference the file wilma.ma\n#\ncmds.file( 'C:/mystuff/wilma.mb', reference=True )\n\n# reference the file barney.mb into a namespace called \"rubble\".\n#\ncmds.file( 'C:/maya/projects/default/scenes/barney.ma', reference=True, type='mayaAscii', namespace='rubble' )\n\n# change the namespace containing barney.mb.\n#\ncmds.file( 'C:/maya/projects/default/scenes/barney.ma', edit=True, namespace='purpleDinosaur' )\n\n# retrieve a unresolved URI string array of all files referenced in the scene.\n# suppose that your Path handling option is Relative(Preference-\"Files/Projects-\"File Paths)\n# your project directory is \"C:/maya/projects/default/\" and there is a file rule \"scene\" that\n# refers to the relative path \"scenes\".(Please refer to the workspace command if you want to\n# know more about the project concept,)\n#\ncmds.file( query=True, reference=True, unresolvedName=True, asURI=True)\n# Result: file:///C:/mystuff/wilma.mb maya:/barney.ma?rule=scene\n\n# retrieve a string array of all files such as main scene and reference files in the scene\n#\ncmds.file( query=True, list=True )\n# Result: C:/maya/projects/default/scenes/fred.ma C:/mystuff/wilma.mb C:/maya/projects/default/scenes/barney.ma\n\n# retrieve a unresolved URI string array of all files such as main scene and reference files in the scene.\n#\ncmds.file( query=True, list=True, unresolvedName=True, asURI=True)\n# Result: C:/maya/projects/default/scenes/fred.ma file:///C:/mystuff/wilma.mb maya:/barney.ma?rule=scene\n\n# Select \"betty\" and export betty to a separate file called \"betty.mb\".\n# Reference the new betty file into this scene, replacing the\n# previous betty object from this scene with the reference to betty.\n#\ncmds.file( 'c:/mystuff/betty.mb', type='mayaBinary', namespace='rubble', exportAsReference=True )\n\n# Select all the objects associated with file betty.mb\n#\ncmds.file( 'c:/mystuff/betty.mb', selectAll=True )\n# Result: rubble:betty\n\n# Remove the reference file betty.mb. All nodes in betty.mb will\n# be removed from the scene\ncmds.file( 'c:/mystuff/betty.mb', removeReference=True )\n\n# Query whether the file named \"foo.mb\" exists on disk\n#\ncmds.file( 'foo.mb', query=True, exists=True )\n# Result: 0 #\n\n# Query whether the reference node \"rubble:betty is deferred loaded.\n# Note, -referenceNode flag has to come before -q flag.\ncmds.file(referenceNode='rubbleRN', query=True, deferReference=True )\n\n# Query the last temp file during file save\n#\ncmds.file( query=True, lastTempFile=True)\n\n####################################/\n#/   Example for the '-buildLoadSettings' and '-loadSettings' flags  #/\n####################################/\n\n# Build load settings for \"ref.ma\"\ncmds.file( 'ref.ma', open=True, buildLoadSettings=True )\n# Edit those settings, to indicate that some reference should\n# be brought in unloaded.\n# Note: the following command is primarily intended for internal\n# use. It may not be easy to determine the numeric ID of a given\n# reference (\"2\" in this case) .\n# cmds.loadSettings( '2', deferReference=1 )\n# Use the edited settings when opening the file\ncmds.file('ref.ma', open=True, loadSettings='implicitLoadSettings')\n\n#\n#   Example for the '-cleanReference' and '-editCommand' flags\n#\n\n# Create a simple reference to a sphere\n#\ncmds.file( force=True, new=True )\ncmds.polySphere()\ncmds.file( rename='ref.ma' )\ncmds.file( force=True, type='mayaAscii', save=True )\ncmds.file( force=True, new=True )\ncmds.file( 'ref.ma', reference=True, namespace='ref' )\n\n# Scale the sphere\n#\ncmds.setAttr( 'ref:pSphere1.s', 5, 5, 5 )\ncmds.getAttr( 'ref:pSphere1.s' )\n# Result: 5 5 5 #\n\n# The 'cleanReference' and 'editCommand' flags only work on\n# unloaded references.\n#\ncmds.file( unloadReference='refRN' )\n\n# Query the setAttr edits:\n#\ncmds.reference( referenceNode='refRN', query=True, editCommand=True )\n# Result: setAttr ref:pSphere1.s -type \"double3\" 5 5 5 setAttr ref:lightLinker1.lnk -s 2 #\n\n# Remove all setAttr edits on refRN:\n#\ncmds.file( cleanReference='refRN', editCommand='setAttr' )\ncmds.reference( referenceNode='refRN', query=True, editCommand=True )\n# Note that nothing is returned\n\ncmds.file( loadReference='refRN' )\n\ncmds.getAttr( 'ref:pSphere1.s' )\n# Result: 1 1 1 #\n# Note that scale has returned to 1 1 1\n\n# apply the edit file to a reference\ncmds.file(\"translateSphere.editMA\", reference=True, applyTo=\"refRN\")\n# Result: maps \"main\" to refRN's namespace\n\n# apply the edit file to nodes in the main scene\ncmds.file(\"translateSphere.editMA\", import=True, applyTo=\":\")\n# Result: maps \"main\" to the root namespace\n\n# apply the edit file to a reference, but it also has connections between two refs\ncmds.file(\"connectionsBetweenRefs.editMA\", reference=True, applyTo=\"refRN\", mapPlaceHolderNamespace=(\"\"otherRef\"\", \"otherRefRN\"))\n# Result: maps \"main\" to refRN's namespace and \"otherRef\" to otherRefRN's namespace\n\n# Change the modified state of the file.\ncmds.file(modified=True)\n\n# Set the file options\ncmds.file( force=True, save=True, options='v=1;p=17',type='mayaAscii');\n# Result:The saved file uses full names for attributes on nodes and flags in command.Also the precision of values in file is 17.\n\n# Load Reference Preview\n\n# Create a nested reference with a child reference under a parent reference.\ncmds.file( force=True, new=True )\ncmds.polySphere()\ncmds.file( rename='child.ma' )\ncmds.file( force=True, type='mayaAscii', save=True )\ncmds.file( force=True, new=True )\ncmds.file( 'child.ma', reference=True, namespace='child_namespace' )\ncmds.file( rename='parent.ma' )\ncmds.file( force=True, type='mayaAscii', save=True )\n\n# Preview the unloaded child reference under the unloaded parent reference.\ncmds.file( force=True, new=True )\ncmds.file( 'parent.ma', reference=True, namespace='parent_namespace' )\ncmds.file( 'parent.ma', unloadReference=True )\ncmds.file( 'parent.ma', loadReferencePreview=True )", 
    "fileBrowserDialog": "\n\nimport maya.cmds as cmds\n\n# Old way:\ndef importImage( fileName, fileType):\n   cmds.file( fileName, i=True );\n   return 1\n\ncmds.fileBrowserDialog( m=0, fc=importImage, ft='image', an='Import_Image', om='Import' )\n\n# Recommended way:\nfilename = cmds.fileDialog2(fileMode=1, caption=\"Import Image\")\ncmds.file( filename[0], i=True );", 
    "fileDialog": "\n\nimport maya.cmds as cmds\n\n# Old way:\ncmds.fileDialog()\ncmds.fileDialog( directoryMask='/usr/u/bozo/myFiles/*.ma' )\ncmds.fileDialog( dm='*.cc' )\n\n# Recommended way:\ncmds.fileDialog2(startingDirectory =\"/usr/u/bozo/myFiles/\", fileFilter=\"Maya Ascii (*.ma)\")", 
    "fileDialog2": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\n\nbasicFilter = \"*.mb\"\ncmds.fileDialog2(fileFilter=basicFilter, dialogStyle=2)\n\nsingleFilter = \"All Files (*.*)\"\ncmds.fileDialog2(fileFilter=singleFilter, dialogStyle=2)\n\nmultipleFilters = \"Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)\"\ncmds.fileDialog2(fileFilter=multipleFilters, dialogStyle=2)", 
    "fileInfo": "\n\nimport maya.cmds as cmds\n\ncmds.fileInfo( 'application', 'maya' )\ncmds.fileInfo( 'product', 'Maya Unlimited 4.5' )\ncmds.fileInfo( 'version', '4.5' )\ncmds.fileInfo( 'cutIdentifier', '200111091529' )\ncmds.fileInfo( 'osv', 'IRIX 6.5 04151556 IP32' )\ncmds.fileInfo( 'application', query=True )\n# maya\ncmds.fileInfo( query=True )\n# returns a list of all keyword/value pairs, in the order they were\n# defined.", 
    "filletCurve": "\n\nimport maya.cmds as cmds\n\n# Create a circular fillet (by default) having radius 2.5 between the\n# active curves:\ncmds.filletCurve( r=2.5 )\n\n# Create a freeform curve fillet between the two specified curves at\n# these parameter values:\ncmds.filletCurve( 'curve1', 'curve2', cir=True, cp1=0.5, cp2=2.0 )", 
    "filter": "\n\nimport maya.cmds as cmds\n\ncmds.filter( t='filterEuler', n='houston' )\ncmds.filter( 'houston', edit=True, irx=0.0 )\ncmds.filter( 'houston', query=True, irx=True )", 
    "filterCurve": "\n\nimport maya.cmds as cmds\n\ncmds.filterCurve( 'nurbsCone1_rotateX', 'nurbsCone1_rotateY', 'nurbsCone1_rotateZ' )", 
    "filterExpand": "\n\nimport maya.cmds as cmds\n\n# Returns any selected isoparms (mask 45) as individual items\n# (because of \"ex=True\").\ncmds.filterExpand( ex=True, sm=45 )\n\n# Returns any selected CVs (mask 28) as compact items.  For example,\n#   if curve.cv[0:3] is selected, then \"curve.cv[0:3]\" is returned.\n#   If \"ex=True\", then four items are returned, one for each CV.\ncmds.filterExpand( ex=False, sm=28 )\n\n# Returns any selected CVs (mask 28) and edit points (mask 30).\ncmds.filterExpand( sm=(28,30) )\n\n# Returns any selected nurbs curves.\ncmds.filterExpand( sm=9 )\n\n# Returns any selected nurbs curves-on-surface.\ncmds.filterExpand( sm=11 )\n\n# return the poly faces (mask 34) from the specified arguments\ncmds.filterExpand([\"pCube1.f[1]\",\"pCube1.f[4]\",\"pCube1.vtx[0:3]\"], sm=34)", 
    "findKeyframe": "\n\nimport maya.cmds as cmds\n\n# Find the next key from the current time, based upon the ticks\n# displayed within the time slider\n#\ncmds.findKeyframe( timeSlider=True, which=\"next\" )\n\n# Find the next key for nurbsCone1 after time 25\n#\ncmds.findKeyframe( 'nurbsCone1', time=(25,25), which=\"next\" )\n\n# Find the curves driving the nurbsCone1's rotateX attribute\n#\ncmds.findKeyframe( 'nurbsCone1', curve=True, at='rotateX' )", 
    "findType": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'transform', name='silly' )\ncmds.createNode( 'transform', name='putty' )\ncmds.connectAttr( 'silly.tx', 'putty.tx' )\n# Find transform nodes connected to node \"silly\"\n#\ncmds.findType( type='transform', 'silly' )\n# Result: silly #\ncmds.select( 'silly' )\n#\n# Same again from selection list\n#\ncmds.findType( type='transform' )\n# Result: silly #\ncmds.setKeyframe( t=10 )\n#\n# Find all time nodes\n#\ncmds.findType( type='time', deep=True, e=True )\n# Result: u'time1'   #\n#\n# Find all anim curve nodes\n#\ncmds.findType( type=\"animCurve\", deep=True )\n# Result: u'silly_visibility', u'silly_translateX', u'silly_translateY', u'silly_translateZ', u'silly_rotateX', u'silly_rotateY', u'silly_rotateZ', u'silly_scaleX', u'silly_scaleY', u'silly_scaleZ'   #", 
    "fitBspline": "\n\nimport maya.cmds as cmds\n\ncmds.curve( d=1, p=((0.2662494, 0, 10.640916), (-4.71138, 0, 7.070603), (-7.849212, 0, 1.051444), (-6.646792, 0, -3.475301), (-2.499369, 0, -3.770414), (2.041102, 0, -1.381914), (5.408074, 0, 3.095469)), k=(0, 1, 2, 3, 4, 5, 6) )\n\ncmds.fitBspline( ch=1, tol=0.01 )", 
    "flagTest": "", 
    "flexor": "\n\nimport maya.cmds as cmds\n\n# Create a sculpt object with a max displacement of 4.0 at the\n# selected joint\ncmds.flexor( typ='sculpt', dc=\"sculpt -mxd 4.0\", aj=True )\n\n# Create a lattice flexor at all joints on the skeleton:\ncmds.flexor( type='jointLattice', aj=True, ts=True )\n\n# Create a lattice flexor of dimensions 4 6 4 on the selected joint\ncmds.flexor( type='jointLattice', dc=\"lattice -dv 4 6 4 -cp -dualBase true\", aj=True)", 
    "floatField": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.floatField()\ncmds.floatField( editable=False )\ncmds.floatField( minValue=-10, maxValue=10, value=0 )\ncmds.floatField( minValue=0, maxValue=1, precision=2 )\ncmds.floatField( minValue=-1, maxValue=1, precision=4, step=.01 )\ncmds.showWindow( window )", 
    "floatFieldGrp": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.floatFieldGrp( numberOfFields=3, label='Scale', extraLabel='cm', value1=0.3, value2=0.5, value3=0.1 )\ncmds.showWindow( window )", 
    "floatScrollBar": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.floatScrollBar()\ncmds.floatScrollBar( min=-100, max=100, value=0, step=1, largeStep=10 )\ncmds.showWindow()", 
    "floatSlider": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.floatSlider()\ncmds.floatSlider( min=-100, max=100, value=0, step=1 )\ncmds.showWindow()", 
    "floatSlider2": "\n\nimport maya.cmds as cmds\n\n############ floatSlider2 example #############\n#\n# First, create one object to control with the slider. We will use one\n# slider handle to control the startSweep and the other the endSweep so\n# that the sphere can be made to open and close via the handles.\n#\ncmds.sphere()\n\n# Create a window containing a floatSlider2 (two handled float slider).\n# The window also contains two floating-point textfields.\n#    - Moving the handle updates the associated textfield.\n#    - Typing a value into a textfield moves the associated handle.\n#\ncmds.window()\ncmds.columnLayout()\n\nff1    = cmds.floatField()\nslider = cmds.floatSlider2()\nff2    = cmds.floatField()\n\n# Hook the slider handles up to drive the textfields. When you move the\n# slider handles, the textfields will update to display the\n# position of the handle.\n#\ncmds.floatSlider2( slider, edit=True, positionControl1=ff1, positionControl2=ff2 )\n\n# Set the slider direction (polarity) and upper limit.\n#\ncmds.floatSlider2( slider, edit=True, polarity=1, max=360 )\n\n# Connect the slider so that the handles drive the sweep angles of\n# the NURBS sphere.\n#\ncmds.floatSlider2(slider, edit=True, cc1='setAttr makeNurbSphere1.endSweep', cc2='setAttr makeNurbSphere1.startSweep' )\n\n# Display the window.\n#\ncmds.showWindow()", 
    "floatSliderButtonGrp": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.floatSliderButtonGrp( label='Label', field=True, buttonLabel='Button', symbolButtonDisplay=True, columnWidth=(5, 23), image='cmdWndIcon.xpm' )\ncmds.showWindow( window )", 
    "floatSliderGrp": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a couple float slider groups.  The first will\n#    use default limit values, and the second will set up a group that has\n#    a field range greater than the slider range.  Try entering values\n#    greater than the slider limits in both groups.\n#\nwindow = cmds.window(title='floatSliderGrp Example')\ncmds.columnLayout()\ncmds.floatSliderGrp( label='Group 1', field=True )\ncmds.floatSliderGrp( label='Group 2', field=True, minValue=-10.0, maxValue=10.0, fieldMinValue=-100.0, fieldMaxValue=100.0, value=0 )\ncmds.showWindow( window )", 
    "flow": "\n\nimport maya.cmds as cmds\n\n# Create a simple motion path animation\n\n# create a path, e,g, a curve\npath = cmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n\n# create an object, e.g. a sphere\nobject = cmds.sphere()\ncmds.scale( 0.5, 2.0, 0.2 )\n\n# animate the object using a motion path with follow on for 30 frames\ncmds.pathAnimation( object[0], f=1, stu=0, etu=30, c=path )\n\n# select only the animated object\ncmds.select( object[0], r=True )\n\n# Create flow deformation on the selected object with default values:\ncmds.flow()\n\n# Create flow deformation on the selected object with\n# the lattice around the path, and lattice division of 3,20,2:\ncmds.flow( oc=False, dv=(3, 20, 2) )\n\n# Create flow deformation on the selected object with\n# lattice subdivisions 4, 7, and 3:\n\ncmds.flow( dv=(4, 7, 3) )\n\n# When the object is not currently selected, the name of the object\n# has to be specified in the command line (note: $object[0] has to\n# have a motion path animation):\n\ncmds.flow( object[0], dv=(4, 7, 3) )", 
    "flowLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.flowLayout( columnSpacing=10 )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "fluidCacheInfo": "\n\nimport maya.cmds as cmds\n\n# get start frame for Initial Conditions Cache\ncmds.fluidCacheInfo( ic=True, sf=True )\n# get resolution for Initial Conditions Cache\ncmds.fluidCacheInfo( ic=True, re=True )\n# get end frame for Playback Cache\ncmds.fluidCacheInfo( pb=True, ef=True )\n# get resolution for Playback Cache\ncmds.fluidCacheInfo( pb=True, re=True )\n# Is there data for any of the valid properties\n# in the playback cache?\ncmds.fluidCacheInfo( pb=True, hd=True )\n# Is there density data in the playback cache?\ncmds.fluidCacheInfo( at='density', pb=True, hd=True )", 
    "fluidEmitter": "\n\nimport maya.cmds as cmds\n\ncmds.fluidEmitter( pos=(0, 0, 0), type='omni', der=1, her=2, fer=3, fdr=1.5, r=100.0, cye='none', cyi=1, mxd=0, mnd=0 )\ncmds.connectDynamic( 'fluidShape1', em='emitter1' )\n\n# Creates an omni emitter that's emitting density, heat and fuel\n# into fluidShape1", 
    "fluidVoxelInfo": "\n\nimport maya.cmds as cmds\n\n# fluid3D is a 10x10x5 three-dimensional fluid.\n# fluid2D is a 9x9 two-dimensional fluid.\n#\n# Are the given indices within the bounds of the fluids?\n#\ncmds.fluidVoxelInfo( 'fluid2D', inBounds=( 9, 9, 0) )\n# Result: false\ncmds.fluidVoxelInfo( 'fluid2D', inBounds=( 8, 8, 0) )\n# Result: true\ncmds.fluidVoxelInfo( 'fluid3D', inBounds=( 2, 3, 4 ) )\n# Result: true\ncmds.fluidVoxelInfo( 'fluid3D', inBounds=( 12, 9, 2) )\n# Result: false", 
    "flushIdleQueue": "", 
    "flushThumbnailCache": "", 
    "flushUndo": "\n\nimport maya.cmds as cmds\n\ncmds.flushUndo()", 
    "fontAttributes": "", 
    "fontDialog": "\n\nimport maya.cmds as cmds\n\nfont = cmds.fontDialog()\nprint font;\n\nfonts = cmds.fontDialog(FontList=True)\nprint fonts;", 
    "formLayout": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\nform = cmds.formLayout(numberOfDivisions=100)\nb1 = cmds.button()\nb2 = cmds.button()\ncolumn = cmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\n\ncmds.formLayout( form, edit=True, attachForm=[(b1, 'top', 5), (b1, 'left', 5), (b2, 'left', 5), (b2, 'bottom', 5), (b2, 'right', 5), (column, 'top', 5), (column, 'right', 5) ], attachControl=[(b1, 'bottom', 5, b2), (column, 'bottom', 5, b2)], attachPosition=[(b1, 'right', 5, 75), (column, 'left', 0, 75)], attachNone=(b2, 'top') )\n\ncmds.showWindow( window )", 
    "format": "\n\nimport maya.cmds as cmds\n\n# The mel script below returns the sentence\n#     \"Display all lambert and blinn nodes.\"\n#\ncmds.format( 'Display all ^1s and ^2s nodes.', stringArg=('lambert', 'blinn') )", 
    "frameBufferName": "\n\nimport maya.cmds as cmds\n\ncmds.frameBufferName(renderLayer='layer1', renderPass='renderPass1', camera='camera1')", 
    "frameLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.scrollLayout( 'scrollLayout' )\ncmds.columnLayout( adjustableColumn=True )\ncmds.frameLayout( label='Buttons', borderStyle='in' )\ncmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.setParent( '..' )\ncmds.setParent( '..' )\ncmds.frameLayout( label='Scroll Bars', borderStyle='out' )\ncmds.columnLayout()\ncmds.intSlider()\ncmds.intSlider()\ncmds.intSlider()\ncmds.setParent( '..' )\ncmds.setParent( '..' )\ncmds.frameLayout( label='Fields', borderStyle='etchedIn' )\ncmds.columnLayout()\ncmds.intField()\ncmds.intField()\ncmds.intField()\ncmds.setParent( '..' )\ncmds.setParent( '..' )\ncmds.frameLayout( label='Check Boxes', borderStyle='etchedOut' )\ncmds.columnLayout()\ncmds.checkBox()\ncmds.checkBox()\ncmds.checkBox()\ncmds.setParent( '..' )\ncmds.setParent( '..' )\ncmds.showWindow()", 
    "freeFormFillet": "\n\nimport maya.cmds as cmds\n\n# Create the fillet across a curve on surface and surface isoparm.\ncmds.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=11, lr=1 )\ncmds.circle( ch=True, o=True, nr=(0, 1, 0), r=3.79518 )\ncmds.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=False, rn=False, un=False, tol=0.01 )\n# Result: [u'nurbsPlane1-\"projectionCurve1'] #\ncmds.nurbsPlane( p=(0, 6, 0), ax=(0, 1, 0), w=11, lr=1 )\n# Result: [u'nurbsPlane2', u'makeNurbPlane2'] #\ncmds.freeFormFillet( 'nurbsPlaneShape1-\"projectionCurve1_1', 'nurbsPlane2.v[1.0]', ch=True, bias=0.0, depth=0.5, po=True )\n# Result: [u'freeformFilletSurface1', u'ffFilletSrf1'] #\n\ncmds.trim( 'nurbsPlaneShape1', 'projectionCurve1_Shape1', ch=True, o=True, rpo=True, lu=0.2, lv=0.2 )\n# Result: [u'nurbsPlaneShape1', u'trim1'] #\n# Fillet across a surface trim edge boundary and surface isoparm.\ncmds.freeFormFillet( 'nurbsPlane1.edge[1][1][4]', 'nurbsPlane2.v[0][0.0:0.6]', ch=False )\n# Result: [u'freeformFilletSurface2'] #", 
    "geometryConstraint": "\n\nimport maya.cmds as cmds\n\n# Constrain cube1 to surf1 at the closest point to  cube1.\ncmds.geometryConstraint( 'surf1', 'cube1' )\n\n# Will prefer surf1 though the weights are equal\ncmds.geometryConstraint( 'surf1', 'surf2', 'cube2', w=.1 )\n\n# Now constraints cube2 to lie on surf2 as it's weight is greater\ncmds.geometryConstraint( 'surf2', 'cube2', e=True, w=10. )\n\n# Removes surf2 from cube2's geometryConstraint.\ncmds.geometryConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's geometryConstraint with the default weight.\ncmds.geometryConstraint( 'surf3', 'cube2' )", 
    "getAttr": "\n\nimport maya.cmds as cmds\n\ncmds.createNode( 'revolve', n='gravityWell' )\ncmds.sphere( n='loxTank' )\ncmds.cone( n='noseCone' )\ncmds.cone( n='fin' )\ncmds.pointConstraint( 'fin', 'noseCone', n='weld' )\n\nangle = cmds.getAttr('gravityWell.esw')\n# Result: 360 #\ntype = cmds.getAttr('loxTank.translate',type=True)\n# Result: double3 #\nlock = cmds.getAttr('noseCone.translateX',lock=True)\n# Result: 0 #\nfinZ = cmds.getAttr('fin.translateZ',time=12)\n# Result: 0.0 #\nsize = cmds.getAttr('weld.target',size=True)\n# Result: 1 #\nsize = cmds.getAttr('weld.target',settable=True)\n# Result: 0 #\nmatrix = cmds.getAttr('loxTank.matrix')\n# Result: 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 #\ncmds.createNode('file',n='file1')\ncmds.setAttr( 'file1.ftn', '$TMPDIR/smile.gif',type='string' )\ns = cmds.getAttr('file1.ftn')\n# Result: $TMPDIR/smile.gif #\ns = cmds.getAttr('file1.ftn',x=True)\n# Result: /var/tmp/smile.gif #\ns = cmds.getAttr('file1.ftn',x=True,asURI=True)\n# Result: file:///var/tmp/smile.gif #\n\n# Get the list of all used indices on a multi attribute\ncmds.getAttr('initialShadingGroup.dagSetMembers', multiIndices=True)\n# Result: [0, 1, 2] #", 
    "getClassification": "\n\nimport maya.cmds as cmds\n\n# Get the classification string for the \"lambert\" node type\n#\nclassifications = cmds.getClassification('lambert')\nfor c in classifications[:]:\n    print '\\tClassified as ' + c + '\\n'\n\nisShader = cmds.getClassification(\"lambert\",satisfies=\"shader\")", 
    "getDefaultBrush": "\n\nimport maya.cmds as cmds\n\n# get the name of the current brush\n#\nbrush = cmds.getDefaultBrush()", 
    "getFileList": "\n\nimport maya.cmds as cmds\n\n# List the contents of the user's projects directory\n#\ncmds.getFileList( folder=cmds.internalVar(userWorkspaceDir=True) )\n\n# List all MEL files in the user's script directory\n#\ncmds.getFileList( folder=cmds.internalVar(userScriptDir=True), filespec='*.mel' )", 
    "getFluidAttr": "\n\nimport maya.cmds as cmds\n\n# get density for entire fluid\ncmds.getFluidAttr( at='density' )\n# get density at the cell x=1, y=2, z=3\ncmds.getFluidAttr( at='density', xi=1, yi=2, zi=3 )\n# get the velocity at the cell  x=1, y=2, z=3\ncmds.getFluidAttr( at='velocity', xi=1, yi=2, zi=3 )\n# get the x-component of the velocity at cell x=1,\n# y=2, z=3\ncmds.getFluidAttr( xvalue=True, at='velocity', xi=1, yi=2, zi=3 )\n# get the first component (red) of the rgb vector-valued\n# attribute \"color\" at the cell x=1, y=2, z=3\ncmds.getFluidAttr( xvalue=True, at='color', xi=1, yi=2, zi=3 )\n# get the velocity x component the plane x=5\ncmds.getFluidAttr( at='velocity', x=True, xi=5 )", 
    "getInputDeviceRange": "\n\nimport maya.cmds as cmds\n\n# This will return a single value which is the minimum value\n# the spaceball translate:X axis can return.\ncmds.getInputDeviceRange( 'spaceball', 'translate:X', min=True )\n\n# This will return an array containing the maximum values for\n# all of the spaceball axes.\ncmds.getInputDeviceRange( 'spaceball', max=True )\n\n# Warning:\n#     Maya is dependent on the device driver or plugin to supply it with\n#     the correct value.  Some device drivers don't return correct\n#     information.", 
    "getLastError": "", 
    "getModifiers": "\n\nimport maya.cmds as cmds\n\ndef PrintModifiers(*args):\n    mods = cmds.getModifiers()\n    print 'Modifiers are:'\n    if (mods \" 1) \" 0: print ' Shift'\n    if (mods \" 4) \" 0: print ' Ctrl'\n    if (mods \" 8) \" 0: print ' Alt'\n    if (mods \" 16): print ' Command/Windows'\n\ncmds.window()\ncmds.columnLayout()\ncmds.button( label='Press Me', command=PrintModifiers )\ncmds.showWindow()", 
    "getModulePath": "\n\nimport maya.cmds as cmds\n\ncmds.getModulePath(moduleName='myModule')", 
    "getPanel": "\n\nimport maya.cmds as cmds\n\ncmds.getPanel( all=True )\ncmds.getPanel( type='modelPanel' )\ncmds.getPanel( containing='button0' )\ncmds.getPanel( underPointer=True )\ncmds.getPanel( withFocus=True )\n\n# Whenever the hotBox's 'noClickCommand' is invoked, have it switch the\n# main Maya view to a single pane configuration, displaying the panel\n# which was under the mouse pointer at the time the 'hotBox' command was\n# executed.\ndef panePopAt(x, y):\n        panel = cmds.getPanel(atPosition=(x, y))\n        if panel != '':\n                mel.eval('doSwitchPanes(1, { \"single\", \"' + panel + '\" })')\n\ncmds.hotBox(noClickCommand=panePopAt, noClickPosition=True)", 
    "getParticleAttr": "\n\nimport maya.cmds as cmds\n\ncmds.getParticleAttr( 'particle1', at='velocity' )\n\n# This will return the average velocity for the entire particle\n# object as well as the maximum offset from the average.\n\ncmds.getParticleAttr( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]', at='velocity' )\n\n# This will return the average velocity for particles 0-7 and 11\n# as well as the maximum offset from the average.\n\ncmds.getParticleAttr( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]', at='position', array=1 )\n# This will return an array of 27 floats containing the position\n# values for the nine specified particles.", 
    "getProcArguments": "", 
    "getRenderDependencies": "\n\nimport maya.cmds as cmds\n\n# Return the dependencies of render target myRenderTarget.\n#\nimport maya.cmds as cmds\ndependencies = cmds.getRenderDependencies(myRenderTarget)", 
    "getRenderTasks": "\n\nimport maya.cmds as cmds\n\n# Return render tasks for myImageSource.\n#\nimport maya.cmds as cmds\ntasks = cmds.getRenderTasks('myImageSource', c='myCamera', rl='myRenderLayer')", 
    "glRender": "\n\nimport maya.cmds as cmds\n\n# Do a hardware render\ncmds.glRender(e=1)", 
    "glRenderEditor": "\n\nimport maya.cmds as cmds\n\n# Create a glRender editor, using the top view\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.glRenderEditor(lookThru='top')\ncmds.showWindow( window )", 
    "globalStitch": "\n\nimport maya.cmds as cmds\n\n# GlobalStitch across three surfaces surface1, surface2, surface3.\ncmds.globalStitch( 'surface1', 'surface2', 'surface3', ch=True )", 
    "goal": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( name='surface1')\ncmds.particle( name='Particle')\n\ncmds.goal( 'Particle', g='surface1', w=.75 )\n\n# This command assigns surface1 as a goal of Particle with a goal\n# weight of 0.75.\n\ncmds.goal( 'Particle', g='surface1', w=.75, utr=1 )\n\n# This command assigns the transform of surface1 as a goal of Particle\n# with a goal weight of 0.75.\n\ncmds.goal( 'Particle', g='camera1', w=.75 )\n\n# This command assigns the transform of camera1 as a goal of Particle\n# with a goal weight of 0.75.  The -utr flag is not relevant because\n# only the transform can be used for any object other than geometry\n# or particles.", 
    "grabColor": "\n\nimport maya.cmds as cmds\n\ncmds.grabColor()\ncmds.grabColor( hsv=True )\ncolor = cmds.grabColor()", 
    "gradientControl": "\n\nimport maya.cmds as cmds\n\n# Create a ramp widget for the profileCurve attribute\n#\ncmds.window( title='Gradient Control For Attribute' )\nobjName = cmds.createNode('polySplitRing')\ncmds.columnLayout()\ncmds.gradientControl( at='%s.profileCurve' % objName )\ncmds.showWindow()\n\n# To add a ramp widget in the attribute editor, call the\n# AEaddRampControl mel script.\n#", 
    "gradientControlNoAttr": "\n\nimport maya.cmds as cmds\n\n# Create a window with a gradient control for an optionVar\n#\ncmds.window( title='Gradient Control For OptionVar' )\ncmds.optionVar(stringValueAppend=['falloffCurveOptionVar', '0,1,2'])\ncmds.optionVar(stringValueAppend=['falloffCurveOptionVar', '1,0,2'])\ncmds.columnLayout()\ncmds.gradientControlNoAttr( 'falloffCurve', h=90)\ncmds.gradientControlNoAttr( 'falloffCurve', e=True, optionVar='falloffCurveOptionVar' )\ncmds.showWindow()\n\n# Query for the value on the curve at a given position.\n#\ncmds.gradientControlNoAttr( 'falloffCurve', q=True, valueAtPoint=0.5 )", 
    "graphDollyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a dolly view context for the graph editor\n#\ncmds.graphDollyCtx( 'graphDollyContext' )", 
    "graphSelectContext": "\n\nimport maya.cmds as cmds\n\n# Create a selection context for the hypergraph editor.\n#\ncmds.graphSelectContext( 'hyperGraphSelectContext' )", 
    "graphTrackCtx": "\n\nimport maya.cmds as cmds\n\n# Create a track view context for the graph editor\n#\ncmds.graphTrackCtx( 'graphTrackContext' )", 
    "gravity": "\n\nimport maya.cmds as cmds\n\ncmds.gravity( 'particle1' )\n# Creates a gravity field and adds it to the list of fields\n# owned by particle1.\n\ncmds.gravity( pos=(-2, 0, 4) )\n# Creates a gravity field at position (0,2,4) in world coordinates.\n\ncmds.gravity( 'MyGravity', e=True, att=10.4 )\n# Changes the gravitational acceleration of the field called\n# \"MyGravity\" to 10.4.\n\ncmds.gravity( dx=0, dy=1.0, dz=0.5 )\n# Creates a gravity field pulling in direction (0,1,0.5) for every\n# active selection. If there is no active selection, it creates this\n# field at world position (0,0,0).", 
    "grid": "\n\nimport maya.cmds as cmds\n\n#To toggle the grid display of the grid (in all views):\ncurrState = cmds.grid( toggle=True, q=True )\ncmds.grid( toggle=(currState == 0) )\n\n# To reset the grid to default values:\ncmds.grid( reset=True )\n\n# To change the grid spacing and subdivisions:\ncmds.grid( spacing=10, d=10 )\n\n# To set the defaults for inches\ncmds.grid( default=True, spacing='1in', size='1ft', divisions=4 )\n\n# To change the size of the grid to 20x20, extending 10 units\n# in each direction:\ncmds.grid( spacing=10 )\n\n# To query the current size of the grid:\n# returns a size in the current linear unit.\ncmds.grid( query=True, size=True )\n\n# A typical grid would be a grid size of 20x20, with\n# major grid lines every 5 units, with 5 divisions between\n# major grid lines. This be done with the following command.\ncmds.grid( size='10cm', sp='5.0cm', d=5 )\n\n# Turn on numeric grid labels.\n#\ncmds.grid( displayPerspectiveLabels=True )\n\n# Display grid labels along the axes.\n#\ncmds.grid( perspectiveLabelPosition='axis' )", 
    "gridLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.gridLayout( numberOfColumns=2, cellWidthHeight=(50, 50) )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "group": "\n\nimport maya.cmds as cmds\n\n# create an empty group node with no children\ncmds.group( em=True, name='null1' )\n\n# create some objects and group them\ncmds.sphere( n='sphere1' )\ncmds.circle( n='circle1' )\ncmds.group( 'circle1', 'sphere1', n='group1' )\n\n# create a group node under another node and move\n# the sphere under the new group node.\ncmds.group( 'sphere1', parent='null1' )", 
    "groupParts": "", 
    "hardenPointCurve": "\n\nimport maya.cmds as cmds\n\n# Make the example curve.\ncmds.curve( d=3, p=((-7.253894, 0, 10.835724), (-7.423939, 0, 6.977646), (-7.400778, 0, 2.798971), (-7.458196, 0, -1.524959), (-2.411453, 0, -1.07677), (1.44791, 0, -0.8977448), (5.526346, 0, -0.8610371), (5.740407, 0, 3.780402), (6.293634, 0, 7.571941), (5.957847, 0, 10.72273), (2.753946, 0, 10.894312), (-0.6375988, 0, 11.062571), (-5.889847, 0, 10.940658)), k=(0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10) )\n\n# Raise the ones that you want to have \"sharp\" corners\ncmds.hardenPointCurve( 'curve1.cv[3]', 'curve1.cv[6]', 'curve1.cv[9]', ch=True, rpo=True, m=-1 )\n\n# Same result, as the in-between CVs are ignored:\ncmds.undo()\ncmds.hardenPointCurve( 'curve1.cv[0:12]', ch=1, rpo=1, m=-1 )", 
    "hardware": "\n\nimport maya.cmds as cmds\n\ncmds.hardware( cpu=True )\ncmds.hardware( brd=True )", 
    "hardwareRenderPanel": "\n\nimport maya.cmds as cmds\n\ncmds.window( width=500 )\ntheLayout = cmds.formLayout()\ntheHWbuffer = cmds.hardwareRenderPanel()\ncmds.formLayout( theLayout, e=True, af=((theHWbuffer, 'top', 0), (theHWbuffer, 'left', 0), (theHWbuffer, 'bottom', 0), (theHWbuffer, 'right', 0)) )\ncmds.showWindow()", 
    "headsUpDisplay": "\n\nimport maya.cmds as cmds\n\n#\n#Define a procedure that returns a value to be used by the Heads Up Display\n#\ndef objectPosition(*args):\n        try:\n                selectedNodes = cmds.selectedNodes()\n                mainObj = selectedNodes[-1]\n                positionList = cmds.getAttr('%s.translate' % mainObj)\n                return positionList[0]\n        except:\n                return (0.0,0.0,0.0)\n#\n#Now, create a HUD object to display the return value of the above procedure\n#\n#Attributes:\n#\n#        - Section 1, block 0, represents the top second slot of the view.\n#        - Set the blockSize to \"medium\", instead of the default \"small\"\n#        - Assigned the HUD the label: \"Position\"\n#        - Defined the label font size to be large\n#        - Assigned the HUD a command to run on a SelectionChanged trigger\n#        - Attached the attributeChange node change to the SelectionChanged trigger\n#          to allow the update of the data on attribute changes.\n#\ncmds.headsUpDisplay( 'HUDObjectPosition', section=1, block=0, blockSize='medium', label='Position', labelFontSize='large', command=objectPosition, event='SelectionChanged', nodeChanges='attributeChange' )\n#\n#Create a preset HUD object to display the camera names.\n#\n#Attributes:\n#\n#    - Section 2, block 0, represents the top middle slot of the view.\n#    - Using blockalign, the HUD object is centered in the middle of the block\n#    - Setting a dw of 50, allocates a space of 50 pixels for the data to reside in.\n#    - Finally setting the preset to \"cameraNames\", selects a preset which will\n#      automatically insert the associated data into the data field.\n#\ncmds.headsUpDisplay( 'HUDCameraName', s=2, b=0, ba='center', dw=50, pre='cameraNames')\n#\n#Now, remove these two HUDs. Both can be removed in three ways: name, ID or position.\n#The following examples will demonstrate removal by name and position\n#\ncmds.headsUpDisplay( 'HUDObjectPosition', rem=True )\ncmds.headsUpDisplay( rp=(7, 0) )", 
    "headsUpMessage": "\n\nimport maya.cmds as cmds\n\ncmds.headsUpMessage( 'Ouch!' )\ncmds.headsUpMessage( 'This is Circle 1', object='circle1' )\ncmds.headsUpMessage( 'These objects are selected', selection=True )\ncmds.headsUpMessage( 'Text appears for minimum of 5 seconds.', time=5.0 )\ncmds.headsUpMessage( 'Text appears 0 pixels above point.', verticalOffset=20 )\ncmds.headsUpMessage( 'Text appears 20 pixels to the left of the point.', horizontalOffset=-20 )", 
    "help": "\n\nimport maya.cmds as cmds\n\n# List all commands starting with a, b or c\ncmds.help( '[a-c]*', list=True )\n\n# List all commands without vowels!\ncmds.help( '[^aeiou]+', list=True )\n\n# Print a message explaining how to use help\ncmds.help()\n\n# Bring up the main on-line help index\ncmds.help( doc=True)\n\n# Bring up the Python version of command documentation for the polySphere\n# command\ncmds.help( language='python', doc='polySphere' )\n\n# Bring up the on-line help for the disable command.\ncmds.help( 'disable', doc=True )", 
    "helpLine": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a menu bar, some buttons and a help\n#    line.  Attach some annontations to the UI so that they\n#    appear in the help line.\n#\nwindow = cmds.window( menuBar=True )\ncmds.menu( label='File' )\ncmds.menuItem( label='New', annotation='Help for New' )\ncmds.menuItem( label='Open', annotation='Help for Open' )\ncmds.menuItem( label='Close', annotation='Help for Close' )\n\nform = cmds.formLayout()\ncolumn = cmds.rowLayout(numberOfColumns=4,\n                        columnWidth4=(32, 32, 32, 32),\n                        columnAttach4=('both', 'both', 'both', 'both'))\ncmds.button( label='A', height=32, annotation='Help for A' )\ncmds.button( label='B', height=32, annotation='Help for B' )\ncmds.button( label='C', height=32, annotation='Help for C' )\ncmds.button( label='D', height=32, annotation='Help for D' )\ncmds.setParent( '..' )\n\nframe = cmds.frameLayout( labelVisible=False )\ncmds.helpLine()\ncmds.formLayout( form, edit=True,\n                 attachForm=((column, 'top', 0), (column, 'left', 0),\n                             (column, 'right', 0), (frame, 'left', 0),\n                             (frame, 'bottom', 0), (frame, 'right', 0)),\n                 attachNone=((column, 'bottom'), (frame, 'top')) )\ncmds.showWindow( window )", 
    "hide": "\n\nimport maya.cmds as cmds\n\ncmds.hide( all=True )\ncmds.hide( cmds.ls( type='nurbsSurface' ) )", 
    "hikGlobals": "\n\nimport maya.cmds as cmds\n\n# Enable the global release all pinning HIK flag\ncmds.hikGlobals( rap=1 )", 
    "hilite": "\n\nimport maya.cmds as cmds\n\n#    Create a few objects.\n#\nsphere = cmds.sphere()\ncmds.move( 0, 0, 3, relative=True )\ncone = cmds.cone()\ncmds.move( 0, 0, -3, relative=True )\ncylinder = cmds.cylinder()\n\n#    Select the sphere.\n#\ncmds.select( sphere, replace=True )\n\n#    Add the cone and cylinder to the hilite list.\n#\ncmds.hilite( cone[0], cylinder[0] )\n\n#    Toggle the hilite state of the cylinder.\n#\ncmds.hilite( cylinder[0], toggle=True )\n\n#    Replace the hilite list with the current selected objects.\n#\ncmds.hilite( replace=True )", 
    "hitTest": "\n\nimport maya.cmds as cmds\n\n#    Let's say that you have the name of a model editor that was\n#    created elsewhere.\n#\neditor = \"MyModelEditor\"\n#    Here's your drop callback:\n#\ndef myModelEditorDropCallback( dragControl,\n                                                           dropControl,\n                                                           msgs,\n                                                           x,\n                                                           y,\n                                                           type ):\n        #       Inside the callback we can hit-test the (x,y) drop-point\n        #       against the control. This will return a list of DAG objects\n        #       underneath the drop-point.\n        #\n        objects = cmds.hitTest( dropControl, x, y )\n        if len( objects ):\n                #       The hit-test returned something. You can now do something\n                #       with these objects.\n                pass\n#\n#       Attach a drop callback to this model editor.\n#\ntry:\n        control = cmds.editor( editor ,query=True, control=True )\n        if cmds.control( control, exists=True ):\n                cmds.control( control, edit=True, dropCallback=myModelEditorDropCallback )\nexcept RuntimeError:\n        pass", 
    "hotBox": "\n\nimport maya.cmds as cmds\n\n# Bind the hotBox to the spacebar.\n#\ncmds.nameCommand( 'NameComPop_hotBox', annotation='Pop Hotbox', command='hotBox' )\ncmds.hotkey( k=' ', name='NameComPop_hotBox' )\n\n# Give the hotBox a 'noClickCommand' which displays the screen position at\n# which the hotBox was requested. Note that 'showPos' function is passed\n# to the 'noClickCommand' flag as a function, not as a string. This is necessary\n# to allow Maya to pass the coordinates to it properly.\n#\ndef showPos(x, y):\n    print(\"hotBox requested at (%d, %d)\" % (x, y))\n\ncmds.hotBox(noClickCommand=showPos, noClickPosition=True)", 
    "hotkey": "\n\nimport maya.cmds as cmds\n\n# Here's an example of how to create a namedCommand\n# object and then map it to a key.\n#\ncmds.nameCommand( 'circleToolNamedCommand', annotation='Select Circle Tool', command='setToolTo circleContext')\ncmds.hotkey( k='F5', alt=True, name='circleToolNamedCommand' )\n\n\n# Here are more examples of how to use the hotkey command.\n#\ncmds.hotkey( k='d', name='Delete_Command' )\ncmds.hotkey( k='d', name='' ) # unsets the above command\n\ncmds.hotkey( k='d', name='Delete_Command' )\ncmds.hotkey( k='d', releaseName='After_Delete_Command' )\ncmds.hotkey( k='d', name='' ) #only unsets the key press name\ncmds.hotkey( k='d', releaseName='' ) #only unsets the key release name\ncmds.hotkey( k='d', n='', rn='' ) #unsets both the key press and release name\n\n#    Determine if a command is attached to either the press or release\n#    of the \"z\" hotkey.\n#\ncmds.hotkey( 'z', query=True )\n\n#    Likewise, for the modified variations of the \"z\" key.\n#\ncmds.hotkey( 'z', query=True, alt=True )\ncmds.hotkey( 'z', query=True, ctl=True )\ncmds.hotkey( 'z', query=True, alt=True, ctl=True )\n\n#    Determine the press command attached to the \"z\" key.\n#\ncmds.hotkey( 'z', query=True, name=True )\n\n#    To query the \"-\" hotkey use the string \"Dash\" instead.\n#\ncmds.hotkey( 'Dash', query=True )", 
    "hotkeyCheck": "\n\nimport maya.cmds as cmds\n\n#    Create a window in which you can type a hotkey character\n#    and determine via the 'hotkeyCheck' command the annotation\n#    of the command attached.\n#\nwindow = cmds.window( title='hotkeyCheck Example' )\ncmds.columnLayout( adjustableColumn=True )\n\n#    A few instructions in a scrollField for the user.\n#\ninstructions = \"Enter a single character in the field below.  \\\nThen press the 'Query' button to determine the annotation of the command attached to that hotkey.\"\n\ncmds.scrollField( text=instructions, editable=False, height=120, wordWrap=True )\ntextFieldGrp = cmds.textFieldGrp( label=\"Enter a single hotkey character\", text='a', columnWidth2=(200, 50) )\n\n#    Create a couple controls for specifying modifier keys and the\n#    key press/release information.\n#\ncheckBoxGrp = cmds.checkBoxGrp( label=\"Modifiers\",\n                                                        numberOfCheckBoxes=2,\n                                                        labelArray2=('Ctrl', 'Alt'),\n                                                        columnWidth3=(100, 75, 75))\nradioButtonGrp = cmds.radioButtonGrp( label=\"Action\",\n                                                        numberOfRadioButtons=2,\n                                                        select=1,\n                                                        labelArray2=('Press', 'Release'),\n                                                        columnWidth3=(100, 75, 75))\n\n#    Create a scroll field for printing the results.\n#\nscrollField = cmds.scrollField(editable=False, height=120, wordWrap=True)\n\n#    Create a button for querying the hotkey.\n#\ncmds.button( label='Query', command=('ExampleHotkeyCheck(\"' + textFieldGrp + '\",\"' + checkBoxGrp + '\",\"' + radioButtonGrp + '\",\"' + scrollField + '\")'))\ncmds.showWindow( window )\n\n#    This procedure uses the 'hotkeyCheck' command to determine the\n#    annotation of the command attached to a hotkey.\n#\ndef ExampleHotkeyCheck( textFieldGrp, checkBoxGrp, radioButtonGrp, scrollField):\n        #    Get the hotkey character, modifier state and key press/release\n        #    information from the window.\n        #\n        key = cmds.textFieldGrp(textFieldGrp, query=True, text=True)\n        ctrl = cmds.checkBoxGrp(checkBoxGrp, query=True, value1=True)\n        alt = cmds.checkBoxGrp(checkBoxGrp, query=True, value2=True)\n        press = cmds.radioButtonGrp(radioButtonGrp, query=True, select=True)\n\n        #    Get the hotkey mapping taking into consideration key up or down\n        #    and the state of the modifier keys.\n        #\n        if 1 == press:\n                if not ctrl and not alt:\n                        mapping = cmds.hotkeyCheck(keyString=key)\n                        result = key + '-Press'\n                elif ctrl and not alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, ctl=True)\n                        result = 'Ctrl-' + key + '-Press'\n                elif not ctrl and alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, alt=True)\n                        result = 'Alt-' + key + '-Press'\n                elif ctrl and alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, ctl=True, alt=True)\n                        result = 'Ctrl-Alt-' + key + '-Press'\n        else:\n                if not ctrl and not alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, keyUp=True)\n                        result = key + '-Release'\n                elif ctrl and not alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, ctl=True, keyUp=True)\n                        result = 'Ctrl-' + key + '-Release'\n                elif not ctrl and alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, alt=True, keyUp=True)\n                        result = 'Alt-' + key + '-Release'\n                elif ctrl and alt:\n                        mapping = cmds.hotkeyCheck(keyString=key, ctl=True, alt=True, keyUp=True)\n                        result = 'Ctrl-Alt-' + key + '-Release'\n\n\n        #    Print the results in the example window.\n        #\n        if mapping == \"\": mapping = 'Nothing'\n        cmds.scrollField( scrollField, edit=True, text=(result + ' is mapped to:\\n\\n' + mapping ) )", 
    "hudButton": "\n\nimport maya.cmds as cmds\n\n# Define a \"Hello!\" counter procedure. This procedure will output\n# \"Hello! [number]\"\n# each time it is run. The number is incremented at the end of each call.\n#\ngHelloCount = 0\ndef HUDButtonHello(*args):\n  global gHelloCount\n  print 'Hello!( %i )' % gHelloCount\n  gHelloCount += 1\n# Now create our button. Only execute on mouse release.\n#\ncmds.hudButton('HUDHelloButton', s=7, b=5, vis=1, l='Button', bw=80, bsh='roundRectangle', rc=HUDButtonHello )", 
    "hudSlider": "\n\nimport maya.cmds as cmds\n\n# Define a procedure to execute on press/drag/release. This procedure\n# will explicitly set any selected transforms to a given position along\n# the X axis based on the value of a given HUD slider.\n#\ndef translateXSlider( HUD ):\n        # Since undo is not turned off automatically, we must\n        # do it ourselves. The HUD will fire off many calls to this\n        # procedure during a drag so we don't want to flood the undo\n        # queue.\n        cmds.undoInfo( swf=False )\n        for object in cmds.ls( sl=True ):\n                if cmds.objectType( object, isType='transform' ):\n                   translateX = object + '.tx'\n                   value = cmds.hudSlider( HUD, q=True, v=True )\n                   cmds.setAttr( translateX, value )\n        # Re-enable the undo queue.\n        #\n        cmds.undoInfo( swf=True)\n# Now create our slider HUD\n#\ncmds.hudSlider( 'HUDTranslateXSlider',\n                                section=2,\n                                block=5,\n                                visible=1,\n                                label=\"TranslateX:\",\n                                value=0,\n                                type=\"int\",\n                                minValue=-10,\n                                maxValue=10,\n                                labelWidth=80,\n                                valueWidth=50,\n                                sliderLength=100,\n                                sliderIncrement=1,\n                                pressCommand='translateXSlider( \"HUDTranslateXSlider\" )',\n                                dragCommand='translateXSlider( \"HUDTranslateXSlider\" )',\n                                releaseCommand='translateXSlider( \"HUDTranslateXSlider\" )')", 
    "hudSliderButton": "\n\nimport maya.cmds as cmds\n\n# Define a procedure to execute on press/drag/release. This procedure\n# will explicitly set any selected transforms to a given position along\n# the X axis based on the value of a given HUD slider.\n#\ndef translateXSliderButton( HUD ):\n        cmds.undoInfo( swf=True )\n        selList = cmds.ls( sl=True )\n        for object in selList:\n                if cmds.objectType( object, isType='transform' ):\n                        cmds.setAttr( object+\".tx\", cmds.hudSliderButton( HUD, query=True, v=True ) )\n# Create our slider button.  Use lambda to create an \"anonymous\" function that invokes the\n# callback with the desired button name argument.\n#\ncmds.hudSliderButton( 'HUDTranslateXSliderButton', s=5, b=5, vis=True, sl='Slider:', value=0, type='int', min=-10, max=10, slw=50, vw=50, sln=100, si=1, bl='Button', bw=60, bsh='rectangle', brc=lambda : translateXSliderButton( 'HUDTranslateXSliderButton' ))", 
    "hwReflectionMap": "\n\nimport maya.cmds as cmds\n\ncmds.hwReflectionMap( cm=1, en=1, ftn='D:\\\\Textures\\\\room.front.jpg', bkn='D:\\\\Textures\\\\room.back.jpg', tpn='D:\\\\Textures\\\\room.top.jpg', bmn='D:\\\\Textures\\\\room.bottom.jpg', ltn='D:\\\\Textures\\\\room.left.jpg', rtn='D:\\\\Textures\\\\room.right.jpg', smn='D:\\\\Textures\\\\room.front.jpg' )", 
    "hwRender": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere.\ncmds.polySphere()\n# Render it\ncmds.hwRender()\n# Render the region where left=20, right=50, bottom=30, top=60.\n# And do not write the output to a file.\n#\ncmds.hwRender( renderRegion=(20, 50, 30, 60), notWriteToFile=True )\n# Render with the specified width and height.\n#\ncmds.hwRender( width=100, height=200 )\n# Returns the imageFileName for image frame 11.\n#\ncmds.hwRender( imageFileName=True, frame=11 )\n# Returns the imageFileName for current frame.\n#\ncmds.hwRender( imageFileName=True )\n# Returns a version of the image file name after its number pattern\n# being represented in a unique way.\n#\ncmds.hwRender( query=True, fixFileNameNumberPattern=True )\n# Render the specified render layer.\ncmds.hwRender( layer='layer1' )", 
    "hwRenderLoad": "\n\nimport maya.cmds as cmds\n\n# Load the HW render engine\ncmds.hwRenderLoad()", 
    "hyperGraph": "\n\nimport maya.cmds as cmds\n\n# The hyperGraph command is not one which would commonly be used\n# by the user.\ncmds.polySphere( r=1, sx=20, sy=20, ax=(0, 1, 0), tx=2, ch=1 )\n\n# Gets the position of the node in the graph.\nmaya.mel.eval( \"HypergraphHierarchyWindow\" )\nposition = cmds.hyperGraph( 'hyperGraphPanel1HyperGraphEd', query=True, getNodePosition='pSphere1' )\nprint position", 
    "hyperPanel": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.frameLayout( lv=False )\ncmds.hyperPanel()\ncmds.showWindow()", 
    "hyperShade": "\n\nimport maya.cmds as cmds\n\ncmds.sphere()\ncmds.cone()\nmyBlinn = cmds.shadingNode('blinn', asShader=True)\ncmds.select( 'nurbsSphere1' )\ncmds.hyperShade( myBlinn, assign=True )\ncmds.select( cl=True )\ncmds.hyperShade( objects=myBlinn )\nblinn = cmds.createNode('blinn')\ncmds.select( 'lambert1', blinn )\ncmds.hyperShade( objects='' )", 
    "iconTextButton": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.iconTextButton( style='textOnly', image1='sphere.png', label='sphere' )\ncmds.iconTextButton( style='iconOnly', image1='spotlight.png', label='spotlight' )\ncmds.iconTextButton( style='iconAndTextHorizontal', image1='cone.png', label='cone' )\ncmds.iconTextButton( style='iconAndTextVertical', image1='cube.png', label='cube' )\ncmds.showWindow( window )", 
    "iconTextCheckBox": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.iconTextCheckBox( style='textOnly', image1='sphere.png', label='sphere' )\ncmds.iconTextCheckBox( style='iconOnly', image1='spotlight.png', label='spotlight' )\ncmds.iconTextCheckBox( style='iconAndTextHorizontal', image1='cone.png', label='cone' )\ncmds.iconTextCheckBox( style='iconAndTextVertical', image1='cube.png', label='cube' )\ncmds.showWindow( window )", 
    "iconTextRadioButton": "\n\nimport maya.cmds as cmds\n\ncmds.window( tlc=(100, 400) )\ncmds.columnLayout( adj=True )\ncmds.iconTextRadioCollection( 'itRadCollection' )\ncmds.iconTextRadioButton( st='textOnly', i1='sphere.png', l='sphere' )\ncmds.iconTextRadioButton( st='iconOnly', i1='spotlight.png', l='spotlight' )\ncmds.iconTextRadioButton( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\ncmds.iconTextRadioButton( st='iconAndTextVertical', i1='cube.png', l='cube' )\ncmds.showWindow()", 
    "iconTextRadioCollection": "\n\nimport maya.cmds as cmds\n\ncmds.window( tlc=(100, 400) )\ncmds.columnLayout( adj=True )\ncmds.iconTextRadioCollection( 'itRadCollection' )\ncmds.iconTextRadioButton( st='textOnly', i1='sphere.png', l='sphere' )\ncmds.iconTextRadioButton( st='iconOnly', i1='spotlight.png', l='spotlight' )\ncmds.iconTextRadioButton( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\ncmds.iconTextRadioButton( st='iconAndTextVertical', i1='cube.png', l='cube' )\ncmds.showWindow()", 
    "iconTextScrollList": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.paneLayout()\ncmds.iconTextScrollList(allowMultiSelection=True, append=('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen'), selectItem='six' )\ncmds.showWindow()", 
    "iconTextStaticLabel": "\n\nimport maya.cmds as cmds\n\ncmds.window( tlc=(100, 400) )\ncmds.columnLayout()\ncmds.iconTextStaticLabel( st='textOnly', i1='sphere.png', l='sphere' )\ncmds.iconTextStaticLabel( st='iconOnly', i1='spotlight.png', l='spotlight' )\ncmds.iconTextStaticLabel( st='iconAndTextHorizontal', i1='cone.png', l='cone' )\ncmds.iconTextStaticLabel( st='iconAndTextVertical', i1='cube.png', l='cube' )\ncmds.showWindow()", 
    "ikHandle": "\n\nimport maya.cmds as cmds\n\n# Will create a handle from Joint-1 to an end-effector at\n# the location of Joint-5 with a priority of 2 and a\n# weight of 0.5\n#\ncmds.ikHandle( sj='joint1', ee='joint5', p=2, w=.5 )\n\n# Create a handle called leg from the start joint\n# named hip to the end-effector named Ankle.\n#\ncmds.ikHandle( n='Leg', sj='Hip', ee='Ankle' )", 
    "ikHandleCtx": "\n\nimport maya.cmds as cmds\n\n#    Edit an existing context to create an ikHandle with snapping on.\n#\nif cmds.ikHandleCtx( 'ikHandleCtx', q=True, ex=True ):\n  cmds.ikHandleCtx('ikHandleCtx', e=True, snapHandleH=True)", 
    "ikHandleDisplayScale": "\n\nimport maya.cmds as cmds\n\n# Half the display size with respect to the default size.\ncmds.ikHandleDisplayScale( 0.5 )", 
    "ikSolver": "\n\nimport maya.cmds as cmds\n\n# creates fooSolver of type ikSCsolver with max error of 0.5\n#\ncmds.ikSolver( st='ikSCsolver', ep=0.5, n='fooSolver' )", 
    "ikSplineHandleCtx": "\n\nimport maya.cmds as cmds\n\n#    Edit an existing context to create an ikSplineHandle with\n#    the curve parented to the corresponding joint.\n#\nif cmds.ikSplineHandleCtx( 'ikSplineHandleCtx', q=True, ex=True ):\n  cmds.ikSplineHandleCtx('ikSplineHandleCtx', e=True, parentCurve=True)", 
    "ikSystem": "\n\nimport maya.cmds as cmds\n\n# Prints out the solver execution order\n#\ncmds.ikSystem( q=True, ls=True )\n\n# Moves solver on position 2 to position 1 in\n# the execution order list ( zero based index )\n#\ncmds.ikSystem( e=True, ls=(1, 0) )", 
    "ikSystemInfo": "\n\nimport maya.cmds as cmds\n\n# Enable global handle snapping\n#\ncmds.ikSystemInfo( gsh=True )", 
    "ikfkDisplayMethod": "\n\nimport maya.cmds as cmds\n\n# Just display ik.\n#\ncmds.ikfkDisplayMethod( display='ik' )\n# Display ik and fk when the handle is selected\n#\ncmds.ikfkDisplayMethod( display='ikfk' )", 
    "illustratorCurves": "\n\nimport maya.cmds as cmds\n\n# Create curves from an input Adobe(R) Illustrator(R) file d:/sample.ai\n# and scale factor 2.54\ncmds.illustratorCurves( ifn='d:/sample.ai', sf=2.54 )", 
    "image": "\n\nimport maya.cmds as cmds\n\n#    Note that for this example to work you must substitute\n#    \"image\" below with the full path name to a valid image.\n#\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.image( image='image' )\ncmds.showWindow( window )", 
    "imagePlane": "\n\nimport maya.cmds as cmds\n\n# query whether the image plane on the persp camera\n# is using a QuickTime movie\ncmds.imagePlane( 'persp', q=True, qt=True )\n\n# get the current timecode\ncmds.imagePlane( 'persp', q=True, tc=True )", 
    "imageWindowEditor": "", 
    "imfPlugins": "\n\nimport maya.cmds as cmds\n\ncmds.imfPlugins( query=True )\n# returns a list of all imf plugin names\ncmds.imfPlugins( 'pluginName', query=True, ext=True )\n# returns image file extension of the plugin\ncmds.imfPlugins( 'pluginName', query=True, key=True )\n# returns IMF keyword of the plugin\ncmds.imfPlugins( 'imfKeyWord', query=True, pn=True )\n# returns plugin name corresponding to imf keyword\ncmds.imfPlugins( 'imfKeyWord', query=True, ws=True )\n# returns true if this plugin key supports write operations\ncmds.imfPlugins( 'imfKeyWord', query=True, rs=True )\n# returns true if this plugin key supports read operations\ncmds.imfPlugins( 'imfKeyWord', query=True, mfs=True )\n# returns true if this plugin key supports multiframe input/output", 
    "inheritTransform": "\n\nimport maya.cmds as cmds\n\n# create an circle, move it off center, group it\n# and move the group so that the circle is back in center\ncmds.circle( nr=(0, 1, 0), n='circle1' )\ncmds.move( 2, 0, 0 )\ncmds.group()\ncmds.move( -2, 0, 0 )\n\n# turn off inherits transform flag of circle1.\n# The circle will now appear at (2, 0, 0)\ncmds.inheritTransform( 'circle1', off=True )\n\n# turn off inherits transform flag of circle1 but preserve the\n# position of the circle. The circle will stay centered at (0, 0, 0)\ncmds.inheritTransform( 'circle1', on=True )\ncmds.inheritTransform( 'circle1', off=True, preserve=True )\n\n# query state of inherits transform flag\ncmds.inheritTransform( 'circle1', q=True )", 
    "insertJoint": "\n\nimport maya.cmds as cmds\n\n# Will insert a new joint under joint2. Child joints of joint2 will be\n# under the new inserted joint.\ncmds.insertJoint( 'joint2' )", 
    "insertJointCtx": "\n\nimport maya.cmds as cmds\n\ncmds.insertJointCtx()", 
    "insertKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a insert key context for the graph editor\n#\ncmds.insertKeyCtx( 'insertKeyContext' )", 
    "insertKnotCurve": "\n\nimport maya.cmds as cmds\n\ncmds.insertKnotCurve( 'curve1', ch=True, p=0.3, nk=2 )\ncmds.insertKnotCurve( 'curve1.u[0.3]', ch=True, nk=2 )\n# Both commands will insert two knots into curve1 at parameter value 0.3.\n# Because the ch flag is used, a dependency node is created.\n\ncmds.insertKnotCurve( 'curve1', ch=True, add=False, p=0.5, nk=3 )\n# Inserts enough knots into curve1 at parameter value 0.5 to\n# achieve a knot multiplicity of 3.  Because the ch flag is used,\n# a dependency node is created.\n\ncmds.insertKnotCurve( 'curve1', ch=True, p=(0.3, 0.5, 0.8) )\n# Inserts a default of one knot at each parameter value: 0.3, 0.5 and 0.8.\n\ncmds.insertKnotCurve( 'curve1', ch=True, p=(0.3, 0.5, 0.8), nk=2 )\n# Inserts two knots at each parameter value: 0.3, 0.5 and 0.8.\n\ncmds.insertKnotCurve( 'curve1', ch=True, p=(0.1, 0.3, 0.5, 0.8), nk=(1, 2) )\n# RuntimeError: Number of knot flags must match number of parameter flags.", 
    "insertKnotSurface": "\n\nimport maya.cmds as cmds\n\ncmds.insertKnotSurface( 'surface1', ch=True, p=0.3, d=0 )\ncmds.insertKnotSurface( 'surface1.v[0.3]', ch=True )\n# Inserts one knot (which is the default) into surface1 at\n# parameter value v = 0.3.  When an isoparm is specified, the direction\n# and parameter value is implied and the \"p\" and \"d\" flags can be omitted.\n\ncmds.insertKnotSurface( 'surface1', ch=True, p=0.3, nk=2, d=0 )\n# Inserts two knots into surface1 at parameter value v = 0.3.\n\ncmds.insertKnotSurface( 'surface1', ch=True, p=0.3, p=0.5, p=0.8, nk=2, d=0 )\n# Inserts two knots at each parameter value v = 0.3, 0.5 and 0.8.\n\ncmds.insertKnotSurface( 'surface1', ch=True, p=0.5, add=False, nk=3, d=1 )\n# Inserts enough knots into surface1 at parameter value u = 0.5 to\n# achieve a knot multiplicity of 3.", 
    "instance": "\n\nimport maya.cmds as cmds\n\n# Create a hierarchy\ncmds.sphere( n='sphere1' )\ncmds.move( 3, 0, 0 )\ncmds.sphere( n='sphere2' )\ncmds.move( -3, 0, 0 )\ncmds.group( 'sphere1', 'sphere2', n='group1' )\ncmds.group( 'group1', n='group2' )\n\n# Create an instance of one of the spheres\ncmds.instance( 'sphere1' )\n\n# Duplicate the hierarchy except for the shapes which are\n# instanced.instances of all leaf level shapes\ncmds.instance( 'group1', leaf=True )\n\n# Create a row of 4 instanced circles which are equally spaced\ncmds.circle( n='circle1' )\ncmds.instance()\ncmds.move( 3, 0, 0 )\ncmds.instance( smartTransform=True )\ncmds.instance( smartTransform=True )", 
    "instanceable": "\n\nimport maya.cmds as cmds\n\n# create a sphere.\n# flag the transform and its shape as non-instanceable, then try to instance the sphere.\n# you get an error because the shape is non-instanceable.\ncmds.sphere()\ncmds.instanceable( allow=0, shape=True )\ncmds.instance()\n# Error: '|nurbsSphere1' has non-instanceable children thus it cannot be instanced.\n# Flag the sphere and its shape as instanceable. Then it can be instanced.\ncmds.instanceable( allow=1, shape=True )\ncmds.instance()\n# Result: nurbsSphere2 #", 
    "instancer": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere(n='myShape')\ncmds.instancer( name='myInstancerNode', a=True, object='myShape' )", 
    "intField": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.intField()\ncmds.intField( editable=False )\ncmds.intField( minValue=-10, maxValue=10, value=0 )\ncmds.intField( minValue=-1000, maxValue=1000, step=10 )\ncmds.showWindow()", 
    "intFieldGrp": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.intFieldGrp( numberOfFields=3, label='Scale', extraLabel='cm', value1=3, value2=5, value3=1 )\ncmds.showWindow( window )", 
    "intScrollBar": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.intScrollBar()\ncmds.intScrollBar( min=-100, max=100, value=0, step=1, largeStep=10 )\ncmds.showWindow()", 
    "intSlider": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( adjustableColumn=True )\ncmds.intSlider()\ncmds.intSlider( min=-100, max=100, value=0, step=1 )\ncmds.showWindow()", 
    "intSliderGrp": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a couple integer slider groups.  The first will\n#    use default limit values, and the second will set up a group that has\n#    a field range greater than the slider range.  Try entering values\n#    greater than the slider limits in both groups.\n#\nwindow = cmds.window( title='intSliderGrp Example' )\ncmds.columnLayout()\ncmds.intSliderGrp( field=True, label='Group 1' )\ncmds.intSliderGrp( field=True, label='Group 2', minValue=-10, maxValue=10, fieldMinValue=-100, fieldMaxValue=100, value=0 )\ncmds.showWindow( window )", 
    "interactionStyle": "", 
    "internalVar": "\n\nimport maya.cmds as cmds\n\nmyScriptDir = cmds.internalVar(userScriptDir=True)", 
    "intersect": "\n\nimport maya.cmds as cmds\n\n# Intersect the two active surfaces and create the resulting curve on\n# surface as a 3D curve (note: only one 3D curve is created for each\n# pair of intersecting surfaces):\ncmds.intersect( cos=True )\n\n# Intersect the nurbs sphere and nurbs plane, creating a curve-on-surface\n# on each surface:\ncmds.intersect( 'nurbsSphere1', 'nurbsPlane1', fs=True )", 
    "iprEngine": "\n\nimport maya.cmds as cmds\n\n# Create a iprEngine and tell it about an already created ipr image.\ncmds.iprEngine(ipr='iprImages/persp_scene1_ipr.iff')\n\n# Tell the iprEngine about the region to update.\ncmds.iprEngine( 'iprEngine1', e=True, region=(10, 10, 100, 100))\n\n# Tell the iprEngine to watch changes and update pixels.\ncmds.iprEngine( 'iprEngine1', e=True, startTuning=True )", 
    "isConnected": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( n='jupiter' )\ncmds.sphere( n='io' )\ncmds.connectAttr( 'jupiter.ty', 'io.ty' )\n\n# Are the two \"tx\" attributes on transform1 and transform2 connected?\ncmds.isConnected( 'jupiter.tx', 'io.tx' )\n# Result: 0 #\n\n# Are the two \"ty\" attributes on transform1 and transform2 connected?\ncmds.isConnected( 'jupiter.ty', 'io.ty' )\n# Result: 1 #", 
    "isDirty": "\n\nimport maya.cmds as cmds\n\n# Create a plusMinusAverage node and a transform. We set the 'skipSelect'\n# flag so that they are not displayed in the Attribute Editor because\n# that would force an evaluation and cause the plugs to become clean.\nimport maya.cmds as cmds\ncmds.createNode('plusMinusAverage', n='pma', skipSelect=True)\ncmds.createNode('transform', n='t', skipSelect=True)\n\n# Hide the transform so that Maya's draw won't force an evaluation which\n# would clean its plugs.\ncmds.hide('t')\n\n# Connect the transform's 'tx' to one of the plusMinusAverage node's\n# inputs.\ncmds.connectAttr('t.tx', 'pma.input1D[0]')\n\n# Set the value of the transform's 'tx' and check that the\n# target of the connection has become dirty.\ncmds.setAttr('t.tx', 13)\ncmds.isDirty('pma.input1D[0]')\n# Result: 1 #\n\n# If we retrieve the value of the destination attribute\n# then the connection becomes clean.\ncmds.getAttr('pma.input1D[0]')\n# Result: 13.0 #\ncmds.isDirty('pma.input1D[0]')\n# Result: 0 #\n\n# A plusMinusAverage node's 'output1D' attribute depends\n# upon the values in its 'input1D' array. Since we haven't\n# retrieved its value yet, it should still be dirty. However,\n# it seems to be clean:\ncmds.isDirty('pma.output1D')\n# Result: 0 #\n\n# The reason for this is that the 'isDirty' command\n# by default only checks connections and 'output1D' has\n# no connection to be dirty. If we instead check its\n# value in the datablock, we get the expected result:\ncmds.isDirty('pma.output1D', d=True)\n# Result: 1 #\n\n# The output value will remain dirty until we\n# force its evaluation by retrieving it.\ncmds.getAttr('pma.output1D')\n# Result: 13.0 #\ncmds.isDirty('pma.output1D', d=True)\n# Result: 0 #", 
    "isTrue": "\n\nimport maya.cmds as cmds\n\ncmds.isTrue( 'SomethingSelected' )\n# Result: 1 #", 
    "isolateSelect": "\n\nimport maya.cmds as cmds\n\n# create some primitives and go into component selection mode\ncmds.sphere( n='sphere1' )\ncmds.cone( n='cone1' )\ncmds.selectMode( component=True )\n\n# to query the current modelPanel, you can use the command\n#\ncmds.paneLayout('viewPanes', q=True, pane1=True)\n\n# turn on isolate select mode for a particular 3d view. Only\n# the sphere and the selected CVs will be displayed.\ncmds.select( 'sphere1.cv[0:2][*]' )\ncmds.isolateSelect( 'modelPanel1', state=1 )\n\n# add the code to the list of objects to be viewed\ncmds.select( 'cone1' )\ncmds.isolateSelect( 'modelPanel1', addSelected=True )\n\n# make just the sphere the object to be viewed\ncmds.select( 'sphere1' )\ncmds.isolateSelect( 'modelPanel1', loadSelected=True )", 
    "itemFilter": "\n\nimport maya.cmds as cmds\n\n#    Create a filter that will pass all transforms.\n#\ntransforms = cmds.itemFilter(byType='transform')\n\n#    Create a filter that will pass all spot lights.\n#\nspotLights = cmds.itemFilter(byType='spotLight')\n\n#    There are two ways to create a filter that passes both\n#    spot lights and transforms.  You can create a filter\n#    that is a union of the previous two or just specify\n#    both object types on one filter.\n#\nunionFilter = cmds.itemFilter(union=(transforms, spotLights))\nspotLightsAndTransforms = cmds.itemFilter(byType=('transform','spotLight'))\n\n#    Create a filter that lists all objects beginning with the\n#    letter \"a\".\n#\naFilter = cmds.itemFilter(byName='a*')\n\n#    Create a filter that lists only transforms and spot lights\n#    that begin with the letter \"a\".\n#\nintersectionFilter = cmds.itemFilter( intersect=(spotLightsAndTransforms, aFilter) )\n\n#    Delete the filters when done with them.\n#\ncmds.delete( transforms, spotLights, aFilter )\ncmds.delete( unionFilter, intersectionFilter )", 
    "itemFilterAttr": "\n\nimport maya.cmds as cmds\n\n#    Create a filter that will pass all the SRT (scale-rotate-translate)\n#    attributes.\n#\nsrtFilter = cmds.itemFilterAttr('itemFilterAttr', scaleRotateTranslate=True)\n\n#    Create a filter that will pass all the attributes driven by an\n#    expression.\n#\nexprFilter = cmds.itemFilterAttr(hasExpression=True)\n\n#    Create a filter that will pass all the SRT attributes driven by an\n#    expression (intersect two previous ones).\n#\nsrtExprFilter = cmds.itemFilterAttr(intersect=(srtFilter, exprFilter))\n\n#    Delete the filters when done with them.\n#\ncmds.delete( srtFilter, exprFilter, srtExprFilter )", 
    "itemFilterAttrOld": "", 
    "itemFilterOld": "", 
    "itemFilterRender": "\n\nimport maya.cmds as cmds\n\n#    If an object is a shader or any type of texture, it will pass\n#    this filter.\n#\n\n\n#    If an object is not a 3d Texture, it will pass this filter.\n#\nno3dTextures = cmds.itemFilterRender(negate=True, textures3d=True)\n\n#    A couple more filters.  One showing only lights, the other showing\n#    everything but lights.\n#\nlights = cmds.itemFilterRender(lights=True)\nnoLights = cmds.itemFilterRender(lights=True, negate=True)\n\n#    Create a window with an outliner editor, along with some buttons that\n#    will apply a different filter to the outliner.\n#\nwindow = cmds.window()\nform = cmds.formLayout()\neditor = cmds.outlinerEditor(showDagOnly=False)\ncolumn = cmds.columnLayout(adjustableColumn=True)\ncmds.button( label='No Filter',            command='cmds.outlinerEditor(\"'+editor+'\", edit=True, filter=\"\")')\ncmds.button( label='Shaders and Textures', command='cmds.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+shadersAndTextures+'\")')\ncmds.button( label='No 3D Textures',       command='cmds.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+no3dTextures+'\")')\ncmds.button( label='Light',                command='cmds.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+lights+'\")')\ncmds.button( label='No Light',             command='cmds.outlinerEditor(\"'+editor+'\", edit=True, filter=\"'+noLights+'\")')\ninput = cmds.selectionConnection(worldList=True)\ncmds.editor( editor, edit=True, mainListConnection=input )\n\n#    Apply the layout attachments.\n#\ncmds.formLayout(form, edit=True,\n                attachForm=((column, 'top',    0), (column, 'left', 0),\n                            (column, 'bottom', 0), (editor, 'top', 0),\n                            (editor, 'bottom', 0), (editor, 'right', 0)),\n                attachNone=(column, 'right'),\n                attachControl=(editor, 'left', 0, column))\n\n#    Put some objects in the scene.\n#\ncmds.spotLight()\ncmds.pointLight()\ncmds.shadingNode( 'bulge', asTexture=True )\ncmds.shadingNode( 'checker', asTexture=True )\ncmds.shadingNode( 'granite', asTexture=True )\ncmds.shadingNode( 'wood', asTexture=True )\ncmds.shadingNode( 'lambert', asShader=True )\ncmds.shadingNode( 'blinn', asShader=True )\n\ncmds.showWindow( window )", 
    "itemFilterRenderOld": "", 
    "itemFilterType": "\n\nimport maya.cmds as cmds\n\n#    Create a filter that will pass all spot lights and transforms.\n#\nfilter = cmds.itemFilter(byType=('transform', 'spotLight'))\n\n#    Now query the type of the filter.\n#\ntype = cmds.itemFilterType(filter, q=True, type=True)\nprint( 'Filter type: ' + type + '\\n' )\n\n#    Delete the filter.\n#\ncmds.delete( filter )", 
    "itemFilterTypeOld": "", 
    "iterOnNurbs": "", 
    "joint": "\n\nimport maya.cmds as cmds\n\n# Create a 3-joint chain\n#\ncmds.select( d=True )\ncmds.joint( p=(0, 0, 0) )\ncmds.joint( p=(0, 4, 0)  )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 8, -1) )\ncmds.joint( 'joint2', e=True, zso=True, oj='xyz' )\n\n# Create a fourth joint with z joint limits of -90 deg for\n# the lower limit and 90 deg for the upper limit.  The\n# joint will be positioned at (0, 0, 4) in world\n# coordinates.\n#\ncmds.joint( lz=('-90deg', '90deg'), p=(0, 8, 4) )\n\n# Set the joint limits but leave them disabled.\ncmds.joint( edit=True, lz=('-90deg', '90deg'), lsz=False )", 
    "jointCluster": "\n\nimport maya.cmds as cmds\n\n# To add a joint cluster to a rigidly bound skin.\n# Note the skin should be at bind pose when the cluster is added.\n#\ncmds.jointCluster( j='joint2', ab=20, bb=20 )", 
    "jointCtx": "\n\nimport maya.cmds as cmds\n\n#    Create a joint context that makes a ikHandle with an ikRPSolver.\n#    The use the tool.\n#\ncmds.jointCtx( 'myJointContext', createIKHandle=True, solverTypeH='ikRPsolver' )\ncmds.setToolTo( 'myJointContext' )", 
    "jointDisplayScale": "\n\nimport maya.cmds as cmds\n\n# Half the display size with respect to the default size.\n#\ncmds.jointDisplayScale( 0.5 )\n\n# Display the joint with diameter of 2 linear units.\n#\ncmds.jointDisplayScale( 2.0, a=True )", 
    "jointLattice": "\n\nimport maya.cmds as cmds\n\n# Select a \"dualBase\" lattice that is connected to a rigidly bound skin.\n# To create a dualBase lattice, use the dualBase flag on the lattice command.\n#\ncmds.jointLattice( joint='joint2', upperBindSkin='joint1Cluster1',lowerBindSkin='joint2Cluster2' )\ncmds.jointLattice( upperTransform='joint1', lowerTransform='joint2', joint='joint2', upperBindSkin='joint1Cluster1',lowerBindSkin='joint2Cluster1' )\ncmds.jointLattice( 'jointLattice1', edit=True, creasing=0.5 )", 
    "journal": "", 
    "keyTangent": "\n\nimport maya.cmds as cmds\n\n# Set the in-tangent to spline for all keyframes\n# on an object between 1 and 2 seconds.\n#\ncmds.keyTangent( 'nurbsSphere1', inTangentType='spline', time=('0sec','2sec') )\n\n# Set the angle and value for the out tangent of the\n# keyframe at time 5 of nurbsSphere1's translateX.\n#\ncmds.keyTangent( 'nurbsSphere1', edit=True, time=(5,5), attribute='translateX', absolute=True, outAngle=10, outWeight=5 )", 
    "keyframe": "\n\nimport maya.cmds as cmds\n\n# Two ways to find out how many keys there are on the\n# paramCurve connected to surface1.translateX;\n#\ncmds.keyframe( 'surface1', attribute='translateX', query=True, keyframeCount=True )\ncmds.keyframe( 'surface1.translateX', query=True, keyframeCount=True )\n\n# Query all keyframes of object \"surface1\" within the time range 0 to 20.\n#\ncmds.keyframe( 'surface1', time=(0,20), query=True, valueChange=True, timeChange=True);\n\n# Query just the time of the first key in the\n# \"Translate X\" parameter curve.  Note that the indices are 0-based.\n#\ncmds.keyframe('surface1.translateX',index=(0,0),query=True);\n\n# Shift all the active object's keys in the range 10-20\n# by one (current) time unit (frame, second, etc.)\n#\ncmds.keyframe(edit=True,relative=True,timeChange=1,time=(10,20))\n\n# Two ways to move all keys at time 10 of\n# the active object to time 12.  Note that \"-absolute\"\n# is the default.\n#\ncmds.keyframe(time=(10,10),timeChange=12)\ncmds.keyframe(time=(10,10),absolute=True,timeChange=12)\n\n# Set the 2nd keyframe of cube1's Translate X parameter\n# curve to be 10.25 at time 1.5 seconds.\n#\ncmds.keyframe('surface1.translateX',edit=True,index=(1,1),timeChange='1.5sec',valueChange=10.25)\n\n# Evaluate the animCurve feeding into nurbsCone1's translateX attribute at time 3\n#\ncmds.keyframe('nurbsCone1',at='tx',t=(3,3),q=True,eval=True)\n\n# Query the times of the active keys on attribute translateX of nurbsCone1\n#\ncmds.keyframe( 'nurbsCone1', at='tx', sl=True, q=True, tc=True )\n\n# How many keys are selected on nurbsCone1?\n#\ncmds.keyframe( 'nurbsCone1', sl=True, q=True, kc=True )\n\n# Here's a script to print out all a cone's animCurves that have\n# keys selected.  Each animCurve is followed by a list of times\n# for the selected keys.  The result of this script is:\n#     nurbsCone1_translateX: 5\n#     nurbsCone1_translateY: 12\n#     nurbsCone1_translateZ: 4 14\n#\nmyCone = cmds.cone()\ncmds.setKeyframe( myCone[0], t=[0,5,10], at='tx', v=5 )\ncmds.setKeyframe( myCone[0], t=[2,7,12], at='ty', v=10 )\ncmds.setKeyframe( myCone[0], t=[4,9,14], at='tz', v=15 )\ncmds.selectKey( t=[(5,5),(12,12),(4,4)] )\ncmds.selectKey( animation='objects', add=True, t=(14,14) )\n\nnodes = cmds.keyframe(myCone,query=True,name=True)\nfor node in nodes:\n   keyTimes = cmds.keyframe(node,sl=True,query=True,tc=True)\n   print \"Node: %s\" % node\n   print keyTimes\n\n# For the above sample script, the last selected key is\n# nurbsCone1_translateZ: 14.  The following may be used to query\n# the values for that key\n#\ncmds.keyframe( query=True, lastSelected=True, name=True )\ncmds.keyframe( query=True, lastSelected=True, timeChange=True )\ncmds.keyframe( query=True, lastSelected=True, valueChange=True )", 
    "keyframeOutliner": "\n\nimport maya.cmds as cmds\n\ncmds.window( 'myWindow', width=850, height=75 )\ncmds.formLayout( 'myForm' )\ncmds.keyframeOutliner( 'myOutliner', animCurve='animCurve1' )\ncmds.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\ncmds.showWindow()", 
    "keyframeRegionCurrentTimeCtx": "\n\nimport maya.cmds as cmds\n\ncmds.keyframeRegionCurrentTimeCtx()", 
    "keyframeRegionDirectKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a direct key context for the dope sheet editor\n#\ncmds.keyframeRegionDirectKeyCtx( 'keyframeRegionDirectKeyContext' )", 
    "keyframeRegionDollyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a dolly view context for the dope sheet editor\n#\ncmds.keyframeRegionDollyCtx( 'keyframeRegionDollyContext' )", 
    "keyframeRegionInsertKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create an insert key context for the dope sheet editor\n#\ncmds.keyframeRegionInsertKeyCtx( 'keyframeRegionInsertKeyContext' )", 
    "keyframeRegionMoveKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a move key context which works in insert mode\n# for the dope sheet editor\n#\ncmds.keyframeRegionMoveKeyCtx( 'keyframeRegionMoveKeyContext', option='insert' )", 
    "keyframeRegionScaleKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a manipulator style scale key context\n# for the dope sheet editor\n#\ncmds.keyframeRegionScaleKeyCtx( 'keyframeRegionScaleKeyContext', type='rect' )", 
    "keyframeRegionSelectKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a select key context for the dope sheet editor\n#\ncmds.keyframeRegionSelectKeyCtx( 'keyframeRegionSelectKeyContext' )", 
    "keyframeRegionSetKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a set key context for the dope sheet editor\n#\ncmds.keyframeRegionSetKeyCtx( 'keyframeRegionSetKeyContext' )", 
    "keyframeRegionTrackCtx": "\n\nimport maya.cmds as cmds\n\n# Create a track view context for the dope sheet editor\n#\ncmds.keyframeRegionTrackCtx( 'keyframeRegionTrackContext' )", 
    "keyframeStats": "\n\nimport maya.cmds as cmds\n\ncmds.window( 'myWindow', rtf=0, width=200 )\ncmds.formLayout( 'myForm' )\ncmds.keyframeStats( 'myOutliner' )\ncmds.formLayout( 'myForm', e=True, af=[('myOutliner', 'top', 0), ('myOutliner', 'left', 0), ('myOutliner', 'bottom', 0), ('myOutliner', 'right', 0)] )\ncmds.showWindow()", 
    "keyingGroup": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\n\ncmds.file(f=1, new=1)\n\n# Create a keying group with keyable attrs of the currently selected\n# object\n#\ncmds.polySphere(n='sphere1')\nsphereKG = cmds.keyingGroup(n='sphereKG')\n\n# Query the members: should return sphere1's visiblity and TRS\nmembers = cmds.keyingGroup(sphereKG, q=True)\n\n# Create a keying group which contains another keying group\nparentKG = cmds.keyingGroup(sphereKG, n='parentKG')\n\n# keying the parent KG should automatically key the sub KGs as well\ncmds.select(parentKG)\ncmds.setKeyframe(time=1)\n\n# Add 2 other spheres to the sphereKG\ncmds.polySphere(n='sphere2');\ncmds.polySphere(n='sphere3');\ncmds.keyingGroup('sphere2', 'sphere3', e=True, add=sphereKG)\n\n# Make another object the activator for the sphereKG. So if\n# this object is keyed, the sphereKG will be keyed\n# Note: the activator itself does not have to be part of the\n# keying group. If it is not part of the keyingGroup, it\n# will not be keyed. So only the spheres will be keyed below.\n# If the cube is to be keyed as well, execute:\n# cmds.keyingGroup('cube1',e=True, add=sphereKG)\ncmds.polyCube(n='cube1')\ncmds.keyingGroup('cube1',e=True,activator=sphereKG)\ncmds.select('cube1')\ncmds.setKeyframe(t=10)", 
    "lassoContext": "\n\nimport maya.cmds as cmds\n\n# Create a new lasso context, then switch to it\ncmds.lassoContext('lassoContext1')\ncmds.setToolTo('lassoContext1')", 
    "lattice": "\n\nimport maya.cmds as cmds\n\n# to create a 4x5x4 lattice centered around the sphere\n#\ncmds.sphere();\ncmds.lattice( dv=(4, 5, 4), oc=True )\n\n# to edit the lattice divisions to be 6x6x6\n#\ncmds.lattice( 'ffd1', e=True, dv=(6, 6, 6) )\n\n# move a point on the lattice\ncmds.select('ffd1Lattice.pt[2][2][5]',r=True)\ncmds.move(0,0,3,r=True)\n\n# to reset the lattice\n#\ncmds.lattice( 'ffd1', e=True, lr=True )", 
    "latticeDeformKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a lattice manipulator with 4 x 4 lattice.\n#\ncmds.latticeDeformKeyCtx( 'latticeContex', latticeColumns=4, latticeRows=4 )", 
    "launch": "\n\nimport maya.cmds as cmds\n\n#launch a web browser to open webpage http://www.autodesk.com\ncmds.launch(web=\"http://www.autodesk.com\")", 
    "launchImageEditor": "\n\nimport maya.cmds as cmds\n\n# Create a blinn shader with a psd file texture.\ncmds.shadingNode('blinn', asShader=True)\ncmds.sets(renderable=True, noSurfaceShader=True, empty=True, name='blinn1SG')\ncmds.connectAttr('blinn1.outColor', 'blinn1SG.surfaceShader', f=True)\ncmds.shadingNode('psdFileTex', asTexture=True)\ncmds.connectAttr('psdFileTex1.outColor', 'blinn1.color')\ncmds.setAttr('psdFileTex1.fileTextureName', 'C:/test.psd', type='string')\n\n# Create a poly plane, and assign the blinn shader to it.\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\ncmds.sets(e=True, forceElement='blinn1SG')\n\n# Now you can launch Photoshop to edit this psd texture file\ncmds.launchImageEditor(eif=cmds.getAttr('psdFileTex1.fileTextureName'))", 
    "layerButton": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\n# Create a button for the default layer, colour it red and select it\nb = cmds.layerButton(name='defaultLayer', cl=(1.0, 0.0, 0.0), s=True)\ncmds.showWindow()\n\n# Find out how wide the layer buttons are when created\nwidth = cmds.layerButton(b ,q=True, labelWidth=True )", 
    "layeredShaderPort": "\n\nimport maya.cmds as cmds\n\nlayer = cmds.shadingNode('layeredShader', asShader=True)\ncmds.window()\ncmds.columnLayout('r')\ncmds.layeredShaderPort(n=layer)\ncmds.showWindow()", 
    "layeredTexturePort": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout('r')\ncmds.layeredTexturePort(n='layeredTexture1')\ncmds.showWindow()", 
    "layout": "\n\nimport maya.cmds as cmds\n\n#    Create a simple window containing a single column layout\n#    and a few buttons.\n#\nwindow = cmds.window(title='Layout Example')\ncolumn = cmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow( window )\n\n#    If you don't know that the layout is actually a 'columnLayout' then\n#    you may use the 'layout' command to determine certain properties.\n#\ncmds.layout( column, query=True, numberOfChildren=True )\ncmds.layout( column, query=True, childArray=True )\ncmds.layout( column, query=True, height=True )", 
    "layoutDialog": "\n\nimport maya.cmds as cmds\n\ndef checkboxPrompt():\n        # Get the dialog's formLayout.\n        #\n        form = cmds.setParent(q=True)\n\n        # layoutDialog's are not resizable, so hard code a size here,\n        # to make sure all UI elements are visible.\n        #\n        cmds.formLayout(form, e=True, width=300)\n\n        t = cmds.text(l='What do you want to do?')\n\n        b1 = cmds.button(l='Abort', c='cmds.layoutDialog( dismiss=\"Abort\" )' )\n        b2 = cmds.button(l='Skip', c='cmds.layoutDialog( dismiss=\"Skip\" )' )\n        b3 = cmds.button(l='Continue', c='cmds.layoutDialog( dismiss=\"Continue\" )' )\n\n        cb1 = cmds.checkBox(label='Remember my choice')\n\n        spacer = 5\n        top = 5\n        edge = 5\n\n        cmds.formLayout(form, edit=True,\n                                        attachForm=[(t, 'top', top), (t, 'left', edge), (t, 'right', edge), (b1, 'left', edge), (b3, 'right', edge), (cb1, 'left', edge), (cb1, 'bottom', spacer)],\n                                        attachNone=[(t, 'bottom'), (b1, 'bottom'), (b2, 'bottom'), (b3, 'bottom'), (cb1, 'right')],\n                                        attachControl=[(b1, 'top', spacer, t), (b2, 'top', spacer, t), (b3, 'top', spacer, t), (cb1, 'top', spacer, b1)],\n                                        attachPosition=[(b1, 'right', spacer, 33), (b2, 'left', spacer, 33), (b2, 'right', spacer, 66), (b3, 'left', spacer, 66)])\n\nprint cmds.layoutDialog(ui=checkboxPrompt)", 
    "license": "\n\nimport maya.cmds as cmds\n\ncmds.license( )\n\nmethod = cmds.license(licenseMethod=True)", 
    "licenseCheck": "", 
    "lightList": "\n\nimport maya.cmds as cmds\n\ncmds.lightList( add='foo' )", 
    "lightlink": "\n\nimport maya.cmds as cmds\n\ncmds.lightlink( light=('spotLight1', 'pointLight2', 'ambientLight4'), object=('apple', 'orange', 'banana') )\n\n# causes a light link to be \"created between\"    each of the lights\n# spotLight1, pointLight2, ambientLight4 and each of the objects\n# apple, orange, banana. This creates 9 links. Note that no make,\n# break or query flag is specified so make is assumed since both\n# lights and objects are specified.\n\ncmds.lightlink( make=True, light='ceilingLightSet', object='apple' )\n# causes a light link to be \"created between\" the ceiling lights and\n# the apple geometry. If apple is already illuminated by\n# ceilingLightSet, then nothing changes and a warning is produced.\n\ncmds.lightlink( object='stillLifeSet', light='spotLight1' )\n# causes a light link to be \"created between\" spotLight1 and the still\n# life. If stillLifeSet is already illuminated by spotLight1, then\n# nothing changes and a warning is produced. Note: no make, break or\n# query flag is specified so the make flag is assumed since both lights\n# and objects are specified.\n\ncmds.lightlink( light=('ceilingLightSet', 'floorLightSet'), object='tableAndChairsSet' )\n# causes a light link to be \"created between\" each of the light sets\n# ceilingLightSet, floorLightSet and the object set tableAndChairsSet.\n\ncmds.lightlink( query=True, light='ceilingLightSet' )\n# will return a string array of objects which are illuminated by the\n# set ceilingLightSet. For example, the return value might be:\n# stillLifeSet table chair floor roomWallsSet binky\n\ncmds.lightlink( query=True, object='apple' )\n# will return a string array of lights which illuminate the object\n# apple. For example, the return value might be ceilingLightSet\n# spotLight1 spotLight2 ambientLight1\n\ncmds.lightlink( object='apple' )\n# will return a string array of lights which illuminate the object\n# apple. For example, the return value might be ceilingLightSet\n# spotLight1 spotLight2 ambientLight1. Note that no make, break\n# or query flag is specified, so query is assumed since no lights\n# are specified.\n\ncmds.lightlink( b=True, light='ceilingLightSet', object='apple' )\n# causes the light set ceilingLightSet to no longer illuminate the\n# object apple. If ceilingLightSet was already not illuminating apple,\n# nothing changes and a warning is produced.", 
    "linearPrecision": "\n\nimport maya.cmds as cmds\n\ncmds.linearPrecision( 3 )\ncmds.linearPrecision( 10 ) # will be rounded down to 6, the maximum", 
    "listAnimatable": "\n\nimport maya.cmds as cmds\n\n# List only the attrs driven by the current manip.\n#\ncmds.listAnimatable( manip=True )\n\n# List only the attrs driven by the current manipulator handle.\n#\ncmds.listAnimatable( manipHandle=True )\n\n# List only the types of nodes driven by the current manip.\n#\ncmds.listAnimatable( manip=True, type=True )\n\n# List only the types of the active nodes.\n#\ncmds.listAnimatable( type=True )\n\n# List attributes on active objects (and shapes below them),\n# or active attrs.\n#\ncmds.listAnimatable()\n\n# List types of active objects and types of any shapes below active\n# objects.\n#\ncmds.listAnimatable( type=True )", 
    "listAttr": "\n\nimport maya.cmds as cmds\n\ncmds.sphere()\ncmds.listAttr( r=True, s=True )\n# This will list the scalar readable attributes of the\n# selected nodes.  If more than one node is selected attributes\n# may be listed several times.\n\ncmds.listAttr( s=True, r=True, w=True, c=True, st=['centerX','centerY'] )\n# This will list all scalar, readable, writable, and connectable\n# attributes whose names are \"centerX\" or \"centerY\".\n\ncmds.listAttr( r=True, st='center*', ct='a*' )\n# This will list all readable attributes whose names match\n# \"center*\" (e.g. \"centerX\" or \"centerpede\") and who belong to\n# a category starting with the letter \"a\".\n\ncmds.listAttr( 'nurbsSphere1', s=True, cfo=True )\n# This will list all scalar attributes of\n# nurbsSphere1 that have been changed since the\n# file in which nurbsSphere1 is defined has been\n# opened.  If nurbsSphere1 comes from a referenced file,\n# the result will be all the attributes that have changed\n# since the referenced file was opened.", 
    "listAttrPatterns": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ncmds.listAttrPatterns()\n// Return: [\"approvalAttrs\", \"sceneAndShotAttrs\"] //\ncmds.listAttrPatterns( patternType=True )\n// Return: \"xmlPatternFactory\" //\ncmds.listAttrPatterns( patternType=True, verbose=True )\n// Return: [\"xmlPatternFactory\", \"xmlPatternFactory/approvalAttrs\", \"xmlPatternFactory/sceneAndShotAttrs\"] //\ncmds.listAttrPatterns( verbose=True )\nPattern approvalAttrs\n    PatternFactory xmlPatternFactory:\n    File: \"attrPatterns/approvalAttrs.xml\"\n    Attribute Count: 8\n    Attribute Tree:\n      fxApproval (compound)\n        fxApprover (string)\n        fxApprovalDate (int)\n        fxApprovalState (enum)\n      layoutApproval (compound)\n        layoutApprover (string)\n        layoutApprovalDate (int)\n        layoutApprovalState (enum)\n  Pattern sceneAndShotAttrs\n    PatternFactory xmlPatternFactory:\n    File: \"attrPatterns/sceneAndShotAttrs.xml\"\n    Attribute Count: 4\n    Attribute Tree:\n      sceneId (int)\n      sceneOwner (string)\n      shotId (int)\n      shotOwner (string)\n// Return: [\"approvalAttrs\", \"sceneAndShotAttrs\"] //", 
    "listCameras": "\n\nimport maya.cmds as cmds\n\n# List all cameras\ncmds.listCameras()\n\n# List all persp cameras\nperspCameras = cmds.listCameras( p=True )", 
    "listConnections": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( ch=True, n='BALL' )\ncmds.setKeyframe()\n# List all connections to BALL\nlist = cmds.listConnections('BALL')\n# List only incoming connections from BALL.tx\ncmds.listConnections( 'BALL.tx', d=False, s=True )\n# List connections from BALL to nodes of type 'transform'\ncmds.listConnections( t='transform' )\n# List connections on BALL, ignoring unit conversion nodes\ncmds.listConnections( 'BALL', scn=True )", 
    "listDeviceAttachments": "\n\nimport maya.cmds as cmds\n\ncmds.listDeviceAttachments()# List all attachments\n\n# List attachments on the spaceball that are clutched on Button1\ncmds.listDeviceAttachments( d='spaceball', c='Button1' )\n\n# write out attachments for the spaceball device, since there is\n# no file name specified, attachments will be written out to\n# spaceball.mel\ncmds.listDeviceAttachments( d='spaceball', w=True )\n\n# write out attachments for all devices, since there is not file\n# name specified, attachments will be written out to devices.mel\ncmds.listDeviceAttachments( w=True )", 
    "listHistory": "\n\nimport maya.cmds as cmds\n\ncmds.curve( d=3, p=[(-3, 0, 0),(-1, 0, 6),(6, 0, 8),(8, 0, 2)], k=[0,0,0,1,1,1], n=\"snake\" )\ncmds.instance( n=\"rattler\" )\ncmds.revolve( 'rattler', ch=True, n=\"charmer\" )\ncmds.revolve( 'snake', ch=True, n=\"medusa\" )\n\ncmds.listHistory()\n# Result:[u'medusaShape', u'revolve2', u'snake|curveShape1'] #\n\ncmds.listHistory( 'charmer' )\n# Result:[u'charmerShape', u'revolve1', u'rattler|curveShape1'] #\n\ncmds.listHistory( 'medusa', lv=1 )\n# Result:[u'medusaShape', u'revolve2'] #\n\ncmds.listHistory( 'medusa', future=True )\n# Result:[u'medusaShape', u'initialShadingGroup'] #\n\n# If you just list the curve's future you get both directions\ncmds.listHistory( 'curveShape1', future=True )\n# Result:[u'snake|curveShape1', u'revolve2', u'medusaShape', u'revolve1', u'charmerShape'] #\n\n# To follow only one history you'll need to follow the path you\n# want first, then add the node you started at if so desired since\n# it will not be included (here snake|curveShape1 won't list).\n\n# List the future of the first curve\nhist = cmds.listConnections('curveShape1.ws[0]',c=1)\ncmds.listHistory( hist[1], future=True )\n# Result:[u'revolve2', u'medusaShape'] #\n\n# List the future of the second curve\nhist = cmds.listConnections('curveShape1.ws[1]',c=1)\ncmds.listHistory( hist[1], future=True )\n# Result:[u'revolve1', u'charmerShape'] #\n\ncmds.listHistory( leaf=0 )\n# Result:[u'medusa'] #", 
    "listInputDeviceAxes": "\n\nimport maya.cmds as cmds\n\n# Returns a list of the axes of the spaceball.\ncmds.listInputDeviceAxes( 'spaceball' )", 
    "listInputDeviceButtons": "\n\nimport maya.cmds as cmds\n\n# Returns a list of the buttons of the spaceball.\ncmds.listInputDeviceButtons( 'spaceball' )", 
    "listInputDevices": "\n\nimport maya.cmds as cmds\n\n# Returns a list of devices.\ncmds.listInputDevices()", 
    "listNodeTypes": "\n\nimport maya.cmds as cmds\n\n# List all shader types in the system\ncmds.listNodeTypes( 'shader' )\n\n# List all 2D textures that are also shaders\ncmds.listNodeTypes( 'texture/2D:shader' )\n\n# List all mental ray nodes that are not shaders\ncmds.listNodeTypes( 'rendernode/mentalray', ex='shader' )", 
    "listRelatives": "\n\nimport maya.cmds as cmds\n\n# create an object and an instance for queries\ncmds.sphere( n='nexus' )\ncmds.instance( n='ball' )\n\n# List the name of the shape below the transform node.\nshapes = cmds.listRelatives('nexus')\n\n# list all parents of shape\n# (The result of the command is shown)\ncmds.listRelatives( shapes[0], allParents=True )\n# Result:[u'nexus', u'ball'] #", 
    "listSets": "\n\nimport maya.cmds as cmds\n\n# Get a list of all the sets which `nurbsSphere1` belongs to:\ncmds.listSets( object='nurbsSphere1' )\n\n# Get a list of all the deformer sets in the scene:\ncmds.listSets( type=2 )\n\n# Get a list of all the rendering sets which `coneShape1` belongs to:\ncmds.listSets( type=1, object='coneShape1' )", 
    "loadFluid": "\n\nimport maya.cmds as cmds\n\n# Load the initial state cache into the fluid\ncmds.loadFluid( ic=True )", 
    "loadPlugin": "\n\nimport maya.cmds as cmds\n\n# Load the plug-in named \"newNode\" into Maya.\n#\ncmds.loadPlugin( 'newNode.py' )\n\n# Load all the plug-ins found in all the directories that are\n# included in MAYA_PLUG_IN_PATH.\n#\ncmds.loadPlugin( allPlugins=True )", 
    "loadPrefObjects": "\n\nimport maya.cmds as cmds\n\ncmds.loadPrefObjects()", 
    "loadUI": "\n\nimport maya.cmds as cmds\n\n# Note: mydialog.ui must already exist\ndialog1 = cmds.loadUI(f='/users/username/mydialog.ui')\ncmds.showWindow(dialog1)\n\n# Load from a string\ndialogString = \\\nr\"\"\"\"?xml version=\"1.0\" encoding=\"UTF-8\"?\"\n\"ui version=\"4.0\"\"\n \"class\"Dialog\"/class\"\n \"widget class=\"QDialog\" name=\"Dialog\"\"\n  \"layout class=\"QVBoxLayout\" name=\"verticalLayout\"\"\n   \"item\"\n    \"widget class=\"QLabel\" name=\"mylabel\"\"\n     \"property name=\"text\"\"\n      \"string\"Test Dialog\"/string\"\n     \"/property\"\n    \"/widget\"\n    \"/item\"\n    \"item\"\n    \"widget class=\"QPushButton\" name=\"mybutton\"\"\n     \"property name=\"text\"\"\n      \"string\"Press Me\"/string\"\n     \"/property\"\n     \"property name=\"+command\"\"\n      \"string\"\"import time;cmds.text('mylabel',e=True,label='CPU Time: '+repr(time.clock()))\"\"/string\"\n     \"/property\"\n    \"/widget\"\n   \"/item\"\n  \"/layout\"\n \"/widget\"\n\"/ui\"\n\"\"\"\ndialog2 = cmds.loadUI(uiString=dialogString)\ncmds.showWindow(dialog2)", 
    "lockNode": "\n\nimport maya.cmds as cmds\n\n# create a sphere, lock it, then try to delete it.\ncmds.sphere( n='sphere1' )\ncmds.lockNode( 'sphere1' )\ncmds.delete( 'sphere1' )\n# Error: Cannot delete locked nodes.\n# Unlock the sphere, then it can be deleted.\ncmds.lockNode( 'sphere1', lock=False )\ncmds.delete( 'sphere1' )", 
    "loft": "\n\nimport maya.cmds as cmds\n\n# A loft across two curves: curve1, curve2. Curve ranges\n# have been enabled on the curves. The curves will be reversed\n# internally if needed to avoid a bowtie looking surface.\ncmds.curve( d=3, p=( (-11, 0, 0), (-13, 0, -4), (-17, 0, -15), (-4.7, 0, -10), (1, 0, -8 ) ) )\n# Result: curve1 #\ncmds.curve( d=3, p=( (-2, 0, 5), (-2, 0, 3), (-2, 0, -1), (4, 0, 0), (7, 0, 0 ) ) )\n# Result: curve2 #\ncmds.loft( 'curve1', 'curve2', ch=True, rn=True, ar=True )", 
    "lookThru": "\n\nimport maya.cmds as cmds\n\ncmds.lookThru( 'cameraShape1', 'topView' )\n\ncmds.lookThru( 'perspView', 'cameraShape1', nc=100, fc=200 )\n\ncmds.lookThru( 'camera1' )\n\ncmds.lookThru( 'nurbsSphere1', nc=0.001, fc=5000.0 )\n\ncmds.lookThru( 'perspView', q=True )\n\ncmds.lookThru( q=True )", 
    "ls": "\n\nimport maya.cmds as cmds\n\n# create some objects to operate on and select them all.\n# Note that there are two objects named circle1;\ncmds.circle( n='circle1' )\ncmds.group()\ncmds.circle( n='circle1' )\ncmds.sphere( n='sphere1' )\ncmds.group()\ncmds.instance()\ncmds.select( ado=True )\n\n# list all objects\ncmds.ls()\n\n# List all selected objects\ncmds.ls( selection=True )\n\n# List all hilited objects\ncmds.ls( hilite=True )\n\n# List last selected object\ncmds.ls( selection=True, tail=1 )\n\n# List all objects named \"sphere1\". Note that since sphere1 is\n# instanced, the command below lists only the first instance.\ncmds.ls( 'sphere1' )\n\n# To list all instances of sphere1, use the -ap/allPaths flag.\ncmds.ls( 'sphere1', ap=True )\n\n# List all selected objects named \"group*\"\ncmds.ls( 'group*', sl=True )\n\n# List all geometry, lights and cameras in the DAG.\ncmds.ls( geometry=True, lights=True, cameras=True )\n\n# List all shapes in the dag.\ncmds.ls( shapes=True )\n\n# One thing to note is that it is better to always use the\n# -l/long flag when listing nodes without any filter. This is\n# because there may be two nodes with the same name (in this\n# example, circle1). 'ls' will list the names of all the objects\n# in the scene. Objects with the same name need a qualified\n# path name which uniquely identifies the object. A command\n# to select all objects such as \"select `ls`\" will fail because\n# the object lookup can't resolve which \"circle1\" object is\n# intended. To select all objects, you need the following:\ncmds.select(cmds.ls(sl=True))\n\n# When trying to find a list of all objects of a specific\n# type, one approach might be to list all objects and then\n# use the nodeType command to then filter the list. As in:\nallObjects = cmds.ls(l=True)\nfor obj in allObjects:\n   if cmds.nodeType(obj) == 'surfaceShape':\n     print obj\n\n# The problem with this is that 'nodeType' returns the\n# most derived type of the node. In this example, \"surfaceShape\"\n# is a base type for nurbsSurface so nothing will be printed.\n# To do this properly, the -typ/type flag should be used\n# to list objects of a specific type as in:\nallObjects = cmds.ls(type='surfaceShape')\nfor obj in allObjects:\n    print obj\n\n# List all geometry shapes and their types\ncmds.ls( type='geometryShape', showType=True )\n\n# List all paths to all leaf nodes in the DAG\ncmds.ls( dag=True, lf=True, ap=True )\n\n# List all nodes below the selected node\ncmds.ls( dag=True, ap=True, sl=True )\n\n# List all dag nodes that are read-only (i.e. referenced nodes)\ncmds.ls( dag=True, ro=True )\n\n# List all ghosting objects\ncmds.ls( ghost=True )\n\n# List reference nodes associated with specific files\ncmds.ls( references=True )\n\n# List all reference nodes, including unknown and shared reference nodes\ncmds.ls( type='reference' )\n\n\n# Select some components and then get the list in both selected and numeric order\nobj1 = cmds.polySphere( sx=20, sy=20 )\ncmds.select( clear=True )\n\ncmds.selectPref( trackSelectionOrder=1 )\n\ncmds.select( obj1[0]+\".f[100]\" )\ncmds.select( (obj1[0]+\".f[50:55]\"), add=True )\ncmds.select( (obj1[0]+\".f[0]\"), add=True )\ncmds.select( (obj1[0]+\".f[56:60]\"), add=True )\n\n# regular -selection flag returns the components in compacted numeric order.\ncmds.ls( selection=True )\n# Result:_ [u'pSphere1.f[0]', u'pSphere1.f[50:60]', u'pSphere1.f[100]'] #\n\n# -orderedSelection flag returns the components in the order that we selected them.\ncmds.ls( orderedSelection=True )\n# Result:_ [u'pSphere1.f[100]', u'pSphere1.f[50:55]', u'pSphere1.f[0]', u'pSphere1.f[56:60]'] #\n\n# turn off tracking when we are done\ncmds.selectPref( trackSelectionOrder=0 )\n\n# init some namespace\ncmds.namespace( add=\"A:B:C\" )\n\n# add object into namespace\ncmds.namespace( set=\":A:B\" )\ncmds.polySphere( name=\"obj1\" )\ncmds.namespace( set=\":A:B:C\" )\ncmds.polySphere( name=\"obj1\" )\ncmds.polySphere( name=\"obj2\" )\n\n\n# The current Namespace is \":A:B:C\" and relative mode is off\n# List all objects and their namespace in the scene\n# If the object is in the root namespace, then return root \":\"\n# Note that the results shown below have been elided (...) for documentation purposes.\ncmds.ls( showNamespace=True )\n# Result: [u'time1', u':', u'sequenceManager1', u':', u'renderPartition', u':', (...), u'A:B:obj1', u'A:B', u'A:B:C:obj1', u'A:B:C', u'A:B:C:obj2', u'A:B:C'] #\n\ncmds.select( \":A:B:obj1\", r=True )\ncmds.select( \":A:B:C:obj2\", add=True)\n\n\n# List namespace of all objects named \"obj1\"\ncmds.ls( \"obj1\", showNamespace=True, recursive=True )\n# Result: [u'A:B:obj1', u'A:B', u'A:B:C:obj1', u'A:B:C'] #\n\n# List both name and namespace of each selected object\ncmds.ls( showNamespace=True, selection=True )\n# Result: [u'A:B:obj1', u'A:B', u'A:B:C:obj2', u'A:B:C'] #\n\n# set current Namespace\ncmds.namespace( set=\":A:B\" )\n\n# enable relative mode\ncmds.namespae( relativeNames=True )\n\n# Now the current Namespace is \":A:B\" and relative mode is on\n# Note that the name of the current namespace is \"\" in relative mode\n# List both name and namespace of each selected objects\ncmds.ls( showNamespace=True, selection=True )\n# Result: [u'obj1', u'', u'C:obj2', u'C'] #\n\n#make a new scene modify the transform of the camera perspective, play with the timeline and modified the camera's shape\ncmds.file(force=True, new=True)\ncmds.setAttr('persp.translateX', 10)\ncmds.currentTime(8)\ncmds.setAttr('perspShape.horizontalFilmAperture', 16)\n\n#list all modified objects of type camera and type time\nallObjects=cmds.ls(type=['camera','time'], modified=True)\nprint allObjects\n# Result: [u'perspShape', u'time1']\n\ncmds.ls(modified=True)\n# Result: [u'persp', u'perspShape', u'time1']\n\ncmds.ls(modified=True, excludeType='camera')\n# Result: [u'persp', u'time1']", 
    "lsThroughFilter": "\n\nimport maya.cmds as cmds\n\n# Return all objects in the model that are named bob.\n# (See the command \"itemFilter\" for how to construct these filters.)\ncmds.lsThroughFilter( 'texturesNamedBobFilter' )\n\n# Return same objects as above, but sorted in reverse\n# alphabetical order:\ncmds.lsThroughFilter( 'texturesNamedBobFilter', na=True, sort='byName', reverse=True )", 
    "lsUI": "\n\nimport maya.cmds as cmds\n\n#    List all windows.\n#\ncmds.lsUI( windows=True )\n\n#    List all panels and editors.\n#\ncmds.lsUI( panels=True, editors=True )\n\n#    Use the -typ/type flag to list all controls and control layouts.\n#    Alternatively, you could use the -ctl/controls and -cl/controlLayouts\n#    flags.\n#\ncmds.lsUI( type=['control','controlLayout'] )\n\n#    Or...\n#\ncmds.lsUI( controls=True, controlLayouts=True )", 
    "makeIdentity": "\n\nimport maya.cmds as cmds\n\n# Example 1:  Create a hierarchical object, for example a\n# car. Scale the tires, translate the doors into place, rotate the\n# steering wheel, then select the group node above the car, and type:\n\ncmds.makeIdentity( apply=True )\n# The car should not move.\n\ncmds.move( 3, 0, 0 )\n# The car should move exactly 3 units to (3, 0, 0), since\n# the previous makeIdentity command set its translation to (0, 0, 0).\n\ncmds.makeIdentity()\n# The car should return to the same position as before the move.\n\n# Example 2:  Create a curve and translate, rotate and scale it.\n# Then group it and translate, rotate and scale the group.\n\ncmds.makeIdentity( 'group1', apply=True, translate=True )\n# The curve will not move, but both the curve transform's and group\n# transform's translation will be set to 0, 0, 0. The rotation and\n# scale will remain the same.\n\ncmds.makeIdentity( 'group1', apply=True, rotate=True )\n# The curve will not move, but both the curve transform's and group\n# transform's rotation will be set to 0, 0, 0. The translation and\n# scale will remain the same.\n\ncmds.makeIdentity( 'group1', apply=True, scale=True )\n# The curve will not move, but both the curve transform's and group\n# transform's scale will be set to 1, 1, 1. The translation and rotation\n# will remain the same.\n\ncmds.makeIdentity( 'group1', apply=True, translate=True, rotate=True )\n# The curve will not move, but both the curve transform's and group\n# transform's translation and rotation will be set to 0, 0, 0.\n# The scale will remain the same.\n\ncmds.makeIdentity( 'group1', apply=False, translate=True )\n# The curve transform and group transform will have their translation\n# set to 0, 0, 0. The curve will probably move, since the apply\n# flag is false.\n\ncmds.makeIdentity( apply=True, translate=True, rotate=True, scale=True )\n# This is the same as \"makeIdentity -apply true\".\n\n# Example 3:  Create a polyCube and translate, rotate and scale it.\n# And then freeze the normals.\n\ncmds.polyCube()\ncmds.rotate( 30, 45, 0 )\ncmds.move( 2, 0, 2, r=True )\ncmds.scale( 2, 1, 2, r=True )\ncmds.makeIdentity( apply=True, t=1, r=1, s=1, n=2 )", 
    "makeLive": "\n\nimport maya.cmds as cmds\n\ncmds.makeLive( 'surface1' )\ncmds.makeLive( none=True )", 
    "makePaintable": "\n\nimport maya.cmds as cmds\n\n# Make particle.mass paintable.\ncmds.makePaintable( 'particle', 'mass', attrType='doubleArray' )\n# Make particle.goalPP paintable, with a ui name myGoalPP.\n# Also make the goalPP0 attribute painted simultaneously\ncmds.makePaintable( 'particle', 'goalPP', attrType='doubleArray', ui='myGoalPP', altAttribute='goalPP0' )\n# Make weightGeometryFilter.weights paintable. Define\n# weightGeometryFilter as a deformer node.\ncmds.makePaintable( 'weightGeometryFilter', 'weights', attrType='multiFloat', sm='deformer' )\n# Make all the attributes paintable on the artAttrPaintTest node.\ncmds.makePaintable( 'artAttrPaintTest', 'intArray', attrType='intArray' )\ncmds.makePaintable( 'artAttrPaintTest', 'dblArray', attrType='doubleArray' )\ncmds.makePaintable( 'artAttrPaintTest', 'vecArray', attrType='vectorArray' )\ncmds.makePaintable( 'artAttrPaintTest', 'intMulti', attrType='multiInteger' )\ncmds.makePaintable( 'artAttrPaintTest', 'fltMulti', attrType='multiFloat' )\ncmds.makePaintable( 'artAttrPaintTest', 'dblMulti', attrType='multiDouble' )\ncmds.makePaintable( 'artAttrPaintTest', 'flt3Multi', attrType='multiVector' )\ncmds.makePaintable( 'artAttrPaintTest', 'dbl3Multi', attrType='multiVector' )", 
    "makeSingleSurface": "\n\nimport maya.cmds as cmds\n\n# To make a single poly surface from a bunch of surfaces\ncmds.makeSingleSurface( 'nurbsPlane1', 'nurbsPlane2', 'nurbsPlane3' )", 
    "makebot": "\n\nimport maya.cmds as cmds\n\ncmds.makebot( i='in_image', o='/usr/tmp/out_bot_file' )", 
    "manipMoveContext": "\n\nimport maya.cmds as cmds\n\n# To create a new move context:\ncmds.manipMoveContext()\n\n# To query the mode of an existing context:\ncmds.manipMoveContext( 'manipMoveContext1', q=True, mode=True )\n\n# To edit an existing context to come up with the X axis handle\n# active by default:\ncmds.manipMoveContext( 'manipMoveContext1', e=True, ah=0 )\n\ncmds.spaceLocator( p=(0, 0, 0), name='locatorA' )\n\ncmds.manipMoveContext( 'manipMoveContext1', e=True, m=2 ) # WorldSpace\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snapValue=0.4 )\n# Now, dragging any of the move handles will\n# move the object in steps of 0.4 units.\n\ncmds.move( 0.8, 0, 0, 'locatorA', a=True )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snapValue=2 )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snapRelative=False )\n# Now, dragging X-axis handle will\n# move the object in steps of 2 units, and will\n# place the object anywhere in (0,0,0) (2,0,0) (4,0,0) ...etc\n# NOTE: If in objectSpace Mode, the snapRelative should be ON.\n# Absolute discrete move is not supported in objectSpace mode.\n\ncmds.move( 0.8, 0, 0, 'locatorA', a=True )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snap=True )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snapValue=2 )\ncmds.manipMoveContext( 'manipMoveContext1', e=True, snapRelative=True )\n# Now, dragging X-axis handle will\n# move the object in steps of 2 units, and will\n# place the object anywhere in (2.8,0,0) (4.8,0,0) (6.8,0,0) ...etc", 
    "manipMoveLimitsCtx": "\n\nimport maya.cmds as cmds\n\ncmds.manipMoveLimitsCtx()", 
    "manipOptions": "\n\nimport maya.cmds as cmds\n\n# Scales all handles by a 1.5 factor\ncmds.manipOptions( r=True, hs=1.5, ls=1.5 )\n\n# All manips are scaled by 2\ncmds.manipOptions( s=2 )", 
    "manipRotateContext": "\n\nimport maya.cmds as cmds\n\n# To create a new rotate context:\ncmds.manipRotateContext()\n\n# To query the mode of an existing context:\ncmds.manipRotateContext( 'manipRotateContext1', q=True, mode=True )\n\n# To edit an existing context to come up with the X axis\n# handle active by default:\ncmds.manipRotateContext( 'manipRotateContext1', e=True, ah=0 )", 
    "manipRotateLimitsCtx": "\n\nimport maya.cmds as cmds\n\ncmds.manipRotateLimitsCtx()", 
    "manipScaleContext": "\n\nimport maya.cmds as cmds\n\n# To create a new scale context:\ncmds.manipScaleContext()\n\n# To query the active handle of an existing scale context:\ncmds.manipScaleContext( 'manipScaleContext1', q=True, ah=True )\n\n# To edit an exiting scale context so that it comes up with the X axis\n# handle active by default:\ncmds.manipScaleContext( 'manipScaleContext1', e=True, ah=0 )", 
    "manipScaleLimitsCtx": "\n\nimport maya.cmds as cmds\n\ncmds.manipScaleLimitsCtx()", 
    "marker": "\n\nimport maya.cmds as cmds\n\n# Create a simple motion path animation:\n\n# create a path, e,g, a curve\npath = cmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n\n# Create an object, e.g. a sphere\nobject = cmds.sphere()\ncmds.scale( 0.5, 2.0, 0.2 )\n\n# animate the object using a motion path with follow on\ncmds.pathAnimation( object[0], f=1, stu=0, etu=30, c=path )\n\n# change the current time to be frame 20\ncmds.currentTime( 20, edit=True )\n\n# Create a position marker on the path, at curve parameter value\n# 0.75 and at current time:\ncmds.marker( path, u=0.75 )\n\n# Create an orientation marker on the path, at time 15:\ncmds.marker( path, om=True, t=15 )\n\n# Create a position marker and an orientation marker on the path,\n# at curve parameter value .35 and at time 10:\ncmds.marker( path, pm=True, om=True, t=10, u=0.35 )", 
    "mateCtx": "", 
    "melInfo": "\n\nimport maya.cmds as cmds\n\n# Query the names of all the global MEL procedures currently defined.\n#\nprocs = cmds.melInfo()", 
    "memory": "\n\nimport maya.cmds as cmds\n\ncmds.memory(fr=True)", 
    "menu": "\n\nimport maya.cmds as cmds\n\ncmds.window( menuBar=True, width=200 )\ncmds.menu( label='File', tearOff=True )\ncmds.menuItem( label='New' )\ncmds.menuItem( label='Open' )\ncmds.menuItem( label='Save' )\ncmds.menuItem( divider=True )\ncmds.menuItem( label='Quit' )\ncmds.menu( label='Help', helpMenu=True )\ncmds.menuItem( 'Application...\"', label='\"About' )\ncmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "menuBarLayout": "\n\nimport maya.cmds as cmds\n\n#    Create a window with two menu bar layouts.\n#\nwindow = cmds.window()\ncmds.columnLayout( adjustableColumn=True )\n\n#    Create first menu bar layout.\n#\nmenuBarLayout = cmds.menuBarLayout()\ncmds.menu( label='File' )\ncmds.menuItem( label='New' )\ncmds.menuItem( label='Open' )\ncmds.menuItem( label='Close' )\n\ncmds.menu( label='Help', helpMenu=True )\ncmds.menuItem( label='About...' )\n\ncmds.columnLayout()\ncmds.button( label='Add Menu', command=('cmds.menu(parent=\\\"' + menuBarLayout + '\\\"); cmds.menuItem()') )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.separator( height=10, style='none' )\n\n#    Create a second menu bar layout.\n#\ncmds.menuBarLayout()\ncmds.menu( label='Edit' )\ncmds.menuItem( label='Cut' )\ncmds.menuItem( label='Copy' )\ncmds.menuItem( label='Paste' )\n\ncmds.menu( label='View' )\ncmds.menuItem( label='Fonts...' )\ncmds.menuItem( label='Colors...' )\n\ncmds.columnLayout()\ncmds.text( label='Add some controls here.' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.showWindow( window )", 
    "menuEditor": "\n\nimport maya.cmds as cmds\n\n# No example is provided as \"b\"menuEditor\"/b\" is not intended to be called\n# independently. It is recommended that you use the Marking Menu editor\n# to customize marking menus.", 
    "menuItem": "\n\nimport maya.cmds as cmds\n\ncmds.window( menuBar=True, width=200 )\ncmds.menu( label='Stuff' )\ncmds.menuItem( subMenu=True, label='Colors' )\ncmds.menuItem( label='Blue' )\ncmds.menuItem( label='Green' )\ncmds.menuItem( label='Yellow' )\ncmds.setParent( '..', menu=True )\ncmds.menuItem( divider=True )\ncmds.radioMenuItemCollection()\ncmds.menuItem( label='Yes', radioButton=False )\ncmds.menuItem( label='Maybe', radioButton=False )\ncmds.menuItem( label='No', radioButton=True )\ncmds.menuItem( divider=True )\ncmds.menuItem( label='Top', checkBox=True )\ncmds.menuItem( label='Middle', checkBox=False )\ncmds.menuItem( label='Bottom', checkBox=True )\ncmds.menuItem( divider=True )\ncmds.menuItem( label='Option' )\ncmds.menuItem( optionBox=True )\ncmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "menuSet": "\n\nimport maya.cmds as cmds\n\n# creating a new menu set;\ncmds.menuSet( 'newMenuSetObjName', label='newMenuSet Label' )\n\n# using commands on a current menu set\n# first find the menu set if you don't know the name of it\nanimMS = maya.mel.eval('findMenuSetFromLabel(\"Animation\")')\n\n# menu sets can be queried like normal commands\nanimMenus = cmds.menuSet(animMS, query=True, menuArray=True)\n\n# but editing the set requires either setting the current menu set...\n# (notice that the menu set comamnds following specify no specific menu set)\ncmds.menuSet( currentMenuSet=animMS )\ncmds.menuSet( removeMenu=animMenus[0] )\n# : (other commands which pertain to the animation menu set)\n\n# .. or temporarily setting the menu set to work on (does not affect current menu set)\n# (notice that every command following specifies the specific set to apply operations to)\npolyMS = maya.mel.eval('findMenuSetFromLabel(\"Polygons\")')\npolyMenus = cmds.menuSet(polyMS, query=True, menuArray=True)\ncmds.menuSet( modelMS, removeMenu=polyMenus[0], insertMenu=(polyMenus[1], 0) )\n\n# .. where the following commands still affect the animation menu set\nanimMenus = cmds.menuSet(query=True, menuArray=True)\n\n# if you need to find a specific menu...\ndeformMenu = maya.mel.eval( ('findMenuFromMenuSet(\\\"' + animMS + '\\\", \"Deform\")') )\n\n# moving a menu from one spot to another\n# (ie. moving the Deform Menu to the front of the list)\ncmds.menuSet( moveMenu=(deformMenu, 0) )", 
    "menuSetPref": "\n\nimport maya.cmds as cmds\n\n# saving the current menuSets\ncmds.menuSetPref( saveAll=True )\n\n# loading to the current menuSets if they exist\nif cmds.menuSetPref(exists=True) :\n        cmds.menuSetPref(loadAll=True)\n\n# in certain cases, you may wish to remove previous preferences before saving\ncmds.menuSetPref( removeAll=True )", 
    "meshIntersectTest": "", 
    "messageLine": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\nform = cmds.formLayout()\nframe = cmds.frameLayout(labelVisible=False)\ncmds.messageLine()\ncmds.formLayout( form, edit=True, attachNone=(frame, 'top'), attachForm=[(frame, 'left', 0), (frame, 'bottom', 0), (frame, 'right', 0)] )\ncmds.showWindow( window )", 
    "minimizeApp": "\n\nimport maya.cmds as cmds\n\ncmds.minimizeApp()", 
    "mirrorJoint": "\n\nimport maya.cmds as cmds\n\n# Create a mirrored branch of the skeleton starting from the joint \"jointName\"\n# about the yz-plane.\n# Joint orientations on the mirrored side will be identical to the source side.\n#\ncmds.mirrorJoint( 'jointName' )\n\n# Create a mirrored branch of the skeleton starting from the joint \"jointName\"\n# about the yz-plane.\n# Joint orientations on the mirrored side will be mirrored from the source side.\n#\ncmds.mirrorJoint('jointName',mirrorBehavior=True,myz=True)\n\n# Create a mirrored branch of the skeleton starting from the selected joint\n# about the xy-plane.\n# Joint orientations on the mirrored side will be mirrored from the source side.\n# Joint names on the duplicated side will contain the string \"right_\" if\n# the corresponding joint on the original side contained the string \"left_\".\n#\ncmds.mirrorJoint(mirrorXY=True,mirrorBehavior=True,searchReplace=('left_', 'right_') )", 
    "modelCurrentTimeCtx": "\n\nimport maya.cmds as cmds\n\ncmds.modelCurrentTimeCtx()", 
    "modelEditor": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a model editor and some buttons that\n#    change the editor's display of objects in the scene.\n#\nwindow = cmds.window('window')\nform = cmds.formLayout()\neditor = cmds.modelEditor()\ncolumn = cmds.columnLayout('true')\n\n#    Create some buttons that will alter the display appearance of\n#    objects in the model editor, eg. wireframe vs. shaded mode.\n#\ncmds.button(label='Wireframe', command= \"cmds.modelEditor(editor, edit=True, displayAppearance='wireframe')\")\ncmds.button(label='Points', command= \"cmds.modelEditor(editor, edit=True, displayAppearance='points')\")\ncmds.button(label='Bounding Box', command= \"cmds.modelEditor(editor, edit=True, displayAppearance='boundingBox')\")\ncmds.button(label='Smooth Shaded', command= \"cmds.modelEditor(editor, edit=True, displayAppearance='smoothShaded')\")\ncmds.button(label='Flat Shaded', command= \"cmds.modelEditor(editor, edit=True, displayAppearance='flatShaded')\")\n\n#    Set up the window layout attachments.\n#\ncmds.formLayout( form, edit=True, attachForm=[(column, 'top', 0), (column, 'left', 0), (editor, 'top', 0), (editor, 'bottom', 0), (editor, 'right', 0)], attachNone=[(column, 'bottom'), (column, 'right')], attachControl=(editor, 'left', 0, column))\n\n#    Create a camera for the editor.  This particular camera will\n#    have a close up perspective view of the centre of the ground plane.\n#\ncamera= cmds.camera(centerOfInterest=2.450351,\n                        position = (1.535314, 1.135712, 1.535314),\n                        rotation = (-27.612504, 45, 0),\n                        worldUp = (-0.1290301, 0.3488592, -0.1290301))\n\n#    Attach the camera to the model editor.\n#\ncmds.modelEditor( editor, edit=True, camera=camera[0] )\n\n#    Put an object in the scene.\n#\ncmds.cone()\n\ncmds.showWindow( window )\n\n#    The following two examples assume a custom model editor command\n#    defined via the MPxModelEditorCommand API class, named 'myEditor'.\n#\n\n#    Create a custom editor, and use it as the model editor of Maya's\n#    default modelPanel4 (the perspective view).\n#\ncmds.myEditor( modelPanel='modelPanel4' )\n\n#    Restore the default model editor.\n#\ncmds.modelEditor( modelPanel='modelPanel4' )", 
    "modelPanel": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\n#    Create a model panel in a separate window.\n#\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.modelPanel()\ncmds.showWindow( window )\n\n#    Example 2.\n#\n#    Set the panel configuration to show all 4 model views.\n#    Then swap the Perspective View and Front View panels.\n#\n\n# Since setNamePanelLayout is a MEL procedures, we need to call through MEL\nimport maya.mel\nmaya.mel.eval('setNamedPanelLayout(\"Four View\")')\nperspPanel = cmds.getPanel( withLabel='Persp View')\nfrontPanel = cmds.getPanel( withLabel='Front View')\ncmds.modelPanel( perspPanel, edit=True, replacePanel=frontPanel )", 
    "mouldMesh": "", 
    "mouldSrf": "", 
    "mouldSubdiv": "", 
    "mouse": "\n\nimport maya.cmds as cmds\n\ncmds.mouse( enableScrollWheel=False )\n\nmouseEnabled = cmds.mouse(scrollWheelStatus=True)\n\ncmds.mouse( mouseButtonTracking=1 )\n\nnumberOfMouseButtons = cmds.mouse(mouseButtonTrackingStatus=True)", 
    "movIn": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( n='sph' )\n\n#    Start importing the data at time 45;\n#\ncmds.currentTime( 45 )\n\n#    Read in rotation, translation, and scale information from the\n#    test.mov file into the sphere. The order of data in the test.mov\n#    file must be: rx, ry, rz, tx, ty, tz.\n#\ncmds.movIn( 'sph.r', 'sph.t', f='sphereMotion.mov' )\n\n#    An equivalent way of importing data into the sphere.\n#\ncmds.movIn( 'sph.rx', 'sph.ry', 'sph.rz', 'sph.tx', 'sph.ty', 'sph.tz', f='sphereMotion.mov' )", 
    "movOut": "\n\nimport maya.cmds as cmds\n\n#    Create a sphere and set some keyframes.\n#\ncmds.sphere( n='sph' )\ncmds.currentTime( 0 )\ncmds.move( 0, 0, 0, 'sph' )\ncmds.setKeyframe( 'sph.t' )\ncmds.currentTime( 24 )\ncmds.move( 8, 9, 10, 'sph' )\ncmds.setKeyframe( 'sph.t' )\n\n#    Write the keys to a .mov file.\n#\ncmds.movOut( 'sph.t', f='sphereMotion.mov', t=(0,24) )\n\n#    Another way to write the same file.\n#\ncmds.movOut( 'sph.tx', 'sph.ty', 'sph.tz', f='sphereMotion.mov', t=(0,24) )", 
    "move": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere()\ncmds.move( 1, 1, 1 )\ncmds.move( 5, y=True )\ncmds.move( '1in', '1in', '1in', relative=True, objectSpace=True, worldSpaceDistance=True )\ncmds.move( 0, 0, 0, 'pSphere1', absolute=True )", 
    "moveKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a move key context which works in insert mode\n# for the graph editor\n#\nnewCtx = cmds.moveKeyCtx(option='insert')\n\n# Edit the context to over mode\n#\ncmds.moveKeyCtx( newCtx, e=True, option='over' )", 
    "moveVertexAlongDirection": "\n\nimport maya.cmds as cmds\n\ncmds.moveVertexAlongDirection( \"nurbsSurface1.cv[1][1]\", \"pPlane1.vtx[120]\", d=[(1, 1, 1), (1, 0, 0)], m=[2.0, 1.0] )\n# Move the control vertex on the surface, mesh in the normalized\n# directions (1,1,1), (1,0,0) by magnitude 2.0, 1.0 respectively.\n\ncmds.moveVertexAlongDirection( \"nurbsSurface1.cv[3][1]\", \"nurbsSurface2.cv[0][0]\", \"pPlane1.vtx[10]\", n=[1, -1.9, 3] )\n# Move the control vertex on the NURBS surfaces, mesh along their\n# respective unit normals by a magnitudes 1.0, -1.9 and 3.0 respectively.\n\ncmds.moveVertexAlongDirection( \"nurbsSurface1.cv[4][5]\", \"nurbsSurface2.cv[0][0]\", u=[2.0, 1.0] )\n# Move the control vertex on the NURBS surfaces in the normalized\n# tangent along U by a magnitude 2.0 and 1.0 respectively.\n\ncmds.moveVertexAlongDirection( \"nurbsSurface1.cv[2][3]\", v=-1.0 )\n# Move the control vertex on the nurbsSurface in the normalized\n# tangent along V by -1.0\n\ncmds.moveVertexAlongDirection( \"nurbsSurface1.cv[1][1]\", uvn=(1, 2, -1) )\n# Move the control vertex on the nurbsSurface in the space defined\n# by triad [u,v,n] by 1,2,-1 respectively.\n# If the initial vertex position is o(ox,oy,oz) and u,v and n are\n# direction vectors then the new position p(px,py,pz) would be:\n# p = o + 1*u + 2*v + (-1)*n ;", 
    "movieCompressor": "", 
    "movieInfo": "\n\nimport maya.cmds as cmds\n\ncmds.movieInfo(\"C:/My Documents/myMovie.avi\", frameCount=1)\n# 24", 
    "mpBirailCtx": "", 
    "multiProfileBirailSurface": "\n\nimport maya.cmds as cmds\n\ncmds.multiProfileBirailSurface( 'curve1', 'curve2', 'curve3', 'surface1.vn[0.5]', 'surface1.vn[1.0]', ch=True )\n\n# tangent continuous surface across the first and last profile.\ncmds.multiProfileBirailSurface( 'surface1.vn[0.5]', 'curve1', 'surface1.vn[1.0]', 'curve3', 'curve4', ch=False, tp1=True, tp2=True )", 
    "mute": "\n\nimport maya.cmds as cmds\n\n# Mute playback of the ry channel of ty on the sphere\n#\nsph = cmds.polySphere()\ncmds.setKeyframe( '%s.translate' % sph[0] )\ncmds.mute( '%s.translateY' % sph[0] )\n# Query whether ty is muted\ncmds.mute('%s.translateY' % sph[0], q=True )\n# Disable muting on any muted attributes on the sphere\n#\ncmds.mute( sph[0], disable=True )", 
    "myTestCmd": "", 
    "nBase": "\n\nimport maya.cmds as cmds\n\n# Stuff the current positions and velocities into nCloth1's startPositions and\n# startVelocities.\n#\ncmds.nBase( 'nCloth1', e=True, stuffStart=True )\n# Clear nCloth1's startPositions and startVelocities.\n#\ncmds.nBase( 'nCloth1', e=True, clearStart=True )\n# Transfer the texture map data for the thicknessMap attribute into the\n# thicknessPerVertex attribute.\n#\ncmds.nBase( 'nCloth1', e=True, textureToVertex='thicknessMap' )", 
    "nParticle": "\n\nimport maya.cmds as cmds\n\n# Creates a particle object with four particles\ncmds.nParticle( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\n\n# Returns the age of the particle with id 2 in object particle1\ncmds.nParticle( 'particle1', q=True, attribute='age', id=2 )\n\n# Returns the velocity of the 3rd particle in the currently selected\n# particle object\ncmds.nParticle( attribute='velocity', q=True, order=3  )\n\n# Edits the velocity of the 7th particle in the currently selected\n# particle object to be 0.0, 1.0, 0.0\ncmds.nParticle( e=True, attribute='velocity', order=3, vectorValue=(0.0, 1.0, 0.0) )\n\n# Edits the mass of the particle in \"particle1\" with id 3 to be 0.7\ncmds.nParticle( 'nParticle1', e=True, attribute='mass', id=3, fv=0.7 )", 
    "nameCommand": "\n\nimport maya.cmds as cmds\n\n# Create a nameCommand object.\n#\ncmds.nameCommand( 'circleToolNameCommand', ann='The Circle Tool', c='cmds.setToolTo(\"circleContext\")' )\n\n# Now map the nameCommand to a hotkey.\n#\ncmds.hotkey( keyShortcut='F5', altModifier=True, name='circleToolNameCommand' )", 
    "nameField": "\n\nimport maya.cmds as cmds\n\n#    Create a window containing a single name field. Associate\n#    the name field with a sphere.\n#\nwindow = cmds.window('window')\ncmds.columnLayout( adjustableColumn=True )\nsphereName = cmds.sphere()\nfield = cmds.nameField(object=sphereName[0])\ncmds.showWindow( window )\n\n#    Rename the sphere and notice that the name field updates.\n#\nobjectName = cmds.nameField(field, query=True, object=True)\ncmds.rename( objectName, 'NewName' )", 
    "namespace": "\n\nimport maya.cmds as cmds\n\n# Create three namespaces\ncmds.namespace( add='FOO' )\ncmds.namespace( add='BAR' )\ncmds.namespace( add='FRED' )\n\n# Create namespace with qualified name\ncmds.namespace( add=\"A:B\" )\n\n# Create namespace with qualified name\ncmds.namespace( add=\"C:D\", parent=\"A:B\" )\n\n# Create namespace with qualified name\ncmds.namespace( add=\":A:B:C:D:E\" )\n\n# Set the current namespace to FOO\ncmds.namespace( set='FOO' )\n\n# Create the namespace BAR Under FOO. Note there are\n# two \"BAR\" namespaces, :BAR and :FOO:BAR.\ncmds.namespace( add='BAR' )\n\n# Check to see that the BAR namespace exists within the current\n# namespace (FOO)\ncmds.namespace( exists='BAR' )\n# Result: 1 #\n\n# Check to see that the FRED namespace exists under the root namespace\ncmds.namespace( exists=':FRED' )\n# Result: 1 #\n\n# Create two objects. It gets added to the current namespace FOO;\ncmds.sphere( n='sphere1' )\ncmds.sphere( n='sphere2' )\n# Result: FOO:sphere2 #\n\n# Move sphere1 from namespace FOO to FOO:BAR. Note that we\n# need to qualify sphere1 with the namespace FOO because\n# \"sphere1\" identifies a non-existent object in the root namespace.\ncmds.rename( 'FOO:sphere1', 'BAR:sphere1' )\n# Result: FOO:BAR:sphere1 #\n\n# Move sphere2 from namespace FOO to BAR.  Note the leading\n# colon on the new name.\ncmds.rename( 'FOO:sphere2', ':BAR:sphere2' )\n# Result: BAR:sphere2 #\n\n# query the current namespace (using the namespaceInfo command)\ncmds.namespaceInfo( currentNamespace=True )\n# Result: FOO #\n\n# remove the namespace FRED (it must be empty)\ncmds.namespace( set=':' )\ncmds.namespace( rm='FRED' )\n\n# Check to see that the FRED namespace has been removed\ncmds.namespace( query=True, exists=':FRED' )\n# Result: 0 #\n\n# Rename namespace BAR to JOE\n# Note: this is done by creating JOE, moving the contents of\n# BAR into JOE, and then removing the (now empty) BAR.\ncmds.namespace( set=':' )\ncmds.namespace( add='JOE' )\ncmds.namespace( mv=('BAR', 'JOE') )\ncmds.namespace( rm='BAR' )\n\n# JOE should now contain a single node: 'sphere2'.\n# Move the contents of JOE into FRANK, when FRANK already\n# has a 'sphere2' node. The '-force'\n# flag is needed.\ncmds.namespace( set=':' )\ncmds.namespace( add='FRANK' )\ncmds.namespace( set='FRANK' )\ncmds.sphere( n='sphere2' )\ncmds.namespace( force=True, mv=(':JOE', ':FRANK') )\n# In moving 'sphere2' from JOE to FRANK it will be renamed to\n# 'sphere3' to ensure uniqueness.\n# The namespace FRANK should now contain 'sphere2', 'sphere2Shape',\n# and 'sphere3'.\n\n# Determine whether the given namespace is root\n#\ncmds.namespace( query=True, isRootNamespace=\"FOO\" )\n\n#Set return value to be absolute namespace name\n#\nprint(cmds.namespace(add = \"testAbsoluteName\", absoluteName = True))\n\n#Create a sample hierachy that contains only empty namespaces, then collapse it\n#\ncmds.namespace( set = \":\");\ncmds.namespace( add = \"emptyLevel1\");\ncmds.namespace( add = \"emptyLevel2\", parent = \"emptyLevel1\");\ncmds.namespace( add = \"leaf\", parent = \"emptyLevel1:emptyLevel2\");\ncmds.namespace( collapseAncestors = \"emptyLevel1:emptyLevel2:leaf\");", 
    "namespaceInfo": "\n\nimport maya.cmds as cmds\n\n# List the contents of the current namespace\n#\ncmds.namespaceInfo( listNamespace=True )\n\n# List the parent of the current namespace\n#\ncmds.namespaceInfo( parent=True )\n\n# List the parent of the current namespace with short name\n#\ncmds.namespaceInfo( parent=True, shortName=True )\n\n# Determine if the current namespace is root\n#\ncmds.namespaceInfo( rootNamespace=True )\n\n# List the parent of the current namespace with absolute name\n#\ncmds.namespaceInfo( parent=True, absoluteName=True )\n\n# List dependency nodes including internal nodes\n#\ncmds.namespaceInfo(listOnlyDependencyNodes = True,  internal = True);\n\n# samples of query info of specified namespace\ncmds.namespace( set =\":\" )\ncmds.namespace( add =\"sample\" )\ncmds.namespace( set =\":sample\" )\ncmds.namespace( add =\"sun\" )\n\n# List the contents of the specified namespace\n#\ncmds.namespaceInfo( \":sample\", listNamespace=True )\n# Result: sample:sun\n\n# List the parent of the specified namespace\n#\ncmds.namespaceInfo( \":sample:sun\", parent=True )\n# result: sample\n\n# List the parent of the specified namespace with short name\n#\ncmds.namespaceInfo( \":sample:sun\", parent=True, shortName=True )\n# result: sample\n\n# Determine if the specified namespace is root\n#\ncmds.namespaceInfo( \":\", isRootNamespace=True )\n# result: True\n\n# List the parent of the specified namespace with absolute name\n#\ncmds.namespaceInfo( \":sample:sun\", parent=True, absoluteName=True )\n# result: :sample\n\n# List dependency nodes including internal nodes\n#\ncmds.namespaceInfo(  \":sample\", listOnlyNamespaces = True )\n# result: sample:sun", 
    "newton": "\n\nimport maya.cmds as cmds\n\ncmds.newton( 'particle1', m=5.0, mxd=2.0 )\n# Creates a newton field with magnitude 5.0 and maximum distance 2.0,\n# and adds it to the list of fields particle1 owns.\n\ncmds.newton( pos=(-2, 0, 4) )\n# Creates a newton field at position (0,2,4) in world coordinates,\n# with default magnitude(1.0), attentuation (1.0),\n# and max distance (5.0).\n\ncmds.newton( 'newtonField1', e=1, att=0.98 )\n# Edits the acceleration value of the field named newtonField1\n\ncmds.newton( 'newtonField1', q=1, m=1 )\n# Queries newtonF ield1for its magnitude.\n\ncmds.newton( 'newtonField1', e=1, mxd=10.0 )\n# Changes the maximum distance of the field called\n# \"newtonField1\" to 10.0.\n\ncmds.newton( m=2.0 )\n# Creates a newton field with magnitude 2.0 for every active selection.\n# If no there are active\n# selections, creates such a field at world position (0,0,0).", 
    "nodeCast": "\n\nimport maya.cmds as cmds\n\ntr1 = cmds.createNode( 'transform' )\ntr2 = cmds.createNode( 'transform' )\ncmds.connectAttr( tr1 + \".t\", tr2 + \".t\" )\ncmds.connectAttr( tr2 + \".r\", tr1 + \".r\" )\ntheT = tr1\ncmds.select( theT, replace=1 )\ncmds.addAttr( ln=\"unmatched\", at=\"long\" )\nmiddle_man = cmds.createNode( 'transform' )\ncmds.connectAttr( theT + \".unmatched\", middle_man + \".tx\" )\nswapNode = cmds.createNode( 'transform' )\ncmds.nodeCast( theT, swapNode, disconnectUnmatchedAttrs=true )", 
    "nodeEditor": "\n\nimport maya.cmds as cmds\n\ncmds.window()\nform = cmds.formLayout()\np = cmds.scriptedPanel(type=\"nodeEditorPanel\", label=\"Node Editor\")\ncmds.formLayout(form, e=True, af=[(p,s,0) for s in (\"top\",\"bottom\",\"left\",\"right\")])\ncmds.showWindow()", 
    "nodeGrapher": "", 
    "nodeIconButton": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window( )\ncmds.columnLayout( adjustableColumn=True )\ncmds.nodeIconButton( style='textOnly', command='cmds.shadingNode(\"lambert\", asShader=True)', label='lambert' )\ncmds.nodeIconButton( style='iconOnly', command='cmds.sphere()', image1='sphere.png' )\ncmds.nodeIconButton( style='iconAndTextHorizontal', command='cmds.spotLight()', image1='spotlight.png', label='Spot Light' )\ncmds.showWindow( window )", 
    "nodeOutliner": "\n\nimport maya.cmds as cmds\n\nmywindow = cmds.window()\nmyform = cmds.formLayout( numberOfDivisions=100 )\n\n# Create an outliner that will print the name of\n# every object added to it to history pane of the\n# script editor, then display all available input\n# plugs on the node.\ndef onAddNode(name):\n    print name\nmyoutliner = cmds.nodeOutliner( showInputs=True, addCommand=onAddNode )\n\n# Attach the nodeOutliner to the layout\ncmds.formLayout( myform, edit=True, attachForm=((myoutliner, 'top', 5), (myoutliner, 'left', 5), (myoutliner, 'bottom', 5), (myoutliner, 'right', 5)) )\n\n# Display the window with the node Outliner\ncmds.showWindow( mywindow )\n\n# Create a sphere\nobjectName = cmds.sphere()\n\n# Have the outliner display the sphere\ncmds.nodeOutliner( myoutliner, e=True, a='nurbsSphere1' )", 
    "nodePreset": "\n\nimport maya.cmds as cmds\n\n# To determine if \"My Special Settings\" is a valid name for a preset (it\n# is not because it contains spaces):\n#\ncmds.nodePreset(isValidName=\"My Special Settings\" )\n# Result: 0 #\n# To save the settings of nurbsSphereShape1 as a preset called \"smithers\":\n#\ncmds.nodePreset( save=(\"nurbsSphereShape1\",\"smithers\") )\n# To get a list of all presets available that could be applied to\n# nurbsSphereShape1:\n#\ncmds.nodePreset( list='nurbsSphereShape1' )\n# Result: [u'smithers', u'smoothSphere', u'roughSphere', u'atmoSphere'] #\n# To load the preset named \"smoothSphere\" onto nurbsSphereShape1:\n#\ncmds.nodePreset( load=('nurbsSphereShape1', 'smoothSphere') )\n# To delete the preset named \"smithers\" which was formerly available for the\n# node nurbsSphereShape1 (and other nodes of the same type):\n#\ncmds.nodePreset( delete=('nurbsSphereShape1', 'smithers') )\n# To determine if a preset named \"smithers\" exists for the node\n# nurbsSphereShape1 (it does not because it has been deleted):\n#\ncmds.nodePreset( exists=('nurbsSphereShape1', 'smithers') )\n# Result: 0 #\n# Create a preset containing only the color and diffuse attributes:\n#\ncmds.nodePreset( save=(\"lambert1\",\"colorAndDiffuse\"), attributes='color diffuse' )\n# Create a preset to map a checker texture to the applied node.\n# Because the \"custom\" callback is required to return an array of MEL commands,\n# each line of python in the array must be wrapped by the MEL \"python\" command.\n#\ndef customChecker():\n    doCheckerCmds = [\n                # Get the name of the node to apply the checker to.\n                \"python( \\\"selection = cmds.ls( selection=True )\\\" );\",\n            \"python( \\\"nodeName = selection[0]\\\" );\",\n            # Create a checker texture.\n            \"python( \\\"checkerName = cmds.shadingNode( 'checker', asTexture=True )\\\" );\",\n            # Connect the checker to the node the preset is applied to.\n                \"python( \\\"cmds.connectAttr( (checkerName+\\\\\\\".outColor\\\\\\\"), (nodeName+\\\\\\\".color\\\\\\\") )\\\" );\"\n                ]\n    return doCheckerCmds\n        cmds.nodePreset(custom=\"python( \\\"customChecker()\\\" )\", save=('lambert1', 'checkered') )", 
    "nodeTreeLister": "\n\nimport maya.cmds as cmds\n\ncmds.window(width=200)\ncmds.formLayout('theForm')\ncmds.nodeTreeLister('theTreeLister')\ncmds.formLayout('theForm', e=True,\n                af=(('theTreeLister', 'top', 0),\n                    ('theTreeLister', 'left', 0),\n                    ('theTreeLister', 'bottom', 0),\n                    ('theTreeLister', 'right', 0)))\ncmds.showWindow()", 
    "nodeType": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( n='balloon' )\n\n# Find the type of node created by the sphere command\ncmds.nodeType( 'balloon' )\n# Result: transform #\n\n# What is the API type of the balloon node?\ncmds.nodeType( 'balloon', api=True )\n# Result: kTransform #\n\n# Which node types derive from camera?\ncmds.nodeType( 'camera', derived=True, isTypeName=True )\n# Result: [u'stereoRigCamera', u'camera'] #", 
    "nonLinear": "\n\nimport maya.cmds as cmds\n\n# To create a bend deformer with curvature 0.5\n#\ncmds.nonLinear( type='bend', curvature=0.5 )\n\n# To edit the curvature of the bend deformer\n#\ncmds.nonLinear( 'bend1', e=True, curvature=0.2 )\n\n# To query the curvature of the bend deformer\n#\ncmds.nonLinear( 'bend1', query=True, curvature=True )", 
    "nop": "", 
    "normalConstraint": "\n\nimport maya.cmds as cmds\n\ncmds.normalConstraint( 'surf1', 'cube1' )\n# orients the aim vector of cube1 in it's local coordinate space,\n# to the normal vector of surf1 at the closest point to  cube1.\n\ncmds.normalConstraint( 'surf1', 'surf2', 'cube2', w=.1 )\n# uses the average of the normals from surf1 and surf2.\n\ncmds.normalConstraint( 'surf1', 'cube2', e=True, w=10. )\n# sets the weight for surf1's effect on cube2 to 10.\n\ncmds.normalConstraint( 'surf2', 'cube2', e=True, rm=True )\n# removes surf2 from cube2's normalConstraint.\n\ncmds.normalConstraint( 'surf3', 'cube2' )\n# adds surf3 to cube2's normalConstraint with the default weight.", 
    "nurbsBoolean": "\n\nimport maya.cmds as cmds\n\n# To do a union between two cubes.\ncmds.nurbsBoolean( 'nurbsCube1', 'nurbsCube2', nsf=1, op=0 )\n\n# To do a subtract between a cube and a sphere.\n# i.e cube - sphere\ncmds.nurbsBoolean( 'nurbsCube1', 'nurbsSphere1', op=1, nsf=1 )\n\n# To do an intersect between two spheres.\ncmds.nurbsBoolean( 'nurbsSphere1', 'nurbsSphere2', op=2, nsf=1 )", 
    "nurbsCopyUVSet": "\n\nimport maya.cmds as cmds\n\ncmds.nurbsCopyUVSet()", 
    "nurbsCube": "\n\nimport maya.cmds as cmds\n\ncmds.nurbsCube()\ncmds.nurbsCube( w=3, hr=5 )\ncmds.nurbsCube( w=10, p=(0, 0, 1) )\ncmds.nurbsCube( d=1, u=3, v=5, w=5 )", 
    "nurbsCurveRebuildPref": "", 
    "nurbsCurveToBezier": "\n\nimport maya.cmds as cmds\n\ncmds.nurbsCurveToBezier( )\n# Converts call selected NURBS curves to Bezier curves.", 
    "nurbsEditUV": "\n\nimport maya.cmds as cmds\n\nresult = cmds.sphere()\nshape = result[0]\ncmds.select(shape, r=True)\ncmds.nurbsUVSet(create=True)\ncmds.nurbsUVSet(useExplicit=True)\ncmds.select(shape+\".cv[3:5][2:4]\", r=True)\n# Rotate the UVs by 45 degrees\ncmds.nurbsEditUV(angle=45)", 
    "nurbsPlane": "\n\nimport maya.cmds as cmds\n\n# Create default plane\ncmds.nurbsPlane()\n\n# Create a degree 3 plane with 4 spans in each direction\ncmds.nurbsPlane( d=3, u=4, v=4 )\n\n# Create plane that is twice as long as it is wide\ncmds.nurbsPlane( w=3, lr=2 )", 
    "nurbsSelect": "\n\nimport maya.cmds as cmds\n\n# Create a Nurbs plane.\ncmds.nurbsPlane( u=5, v=7 )\n# Select it top and bottom CVs.\ncmds.nurbsSelect( topBorder=True, bottomBorder=True )\n# Expand the selection to 3 rows.\ncmds.nurbsSelect( growSelection=3 )\n# Select only the outline of the rows.\ncmds.nurbsSelect( borderSelection=True )", 
    "nurbsSquare": "\n\nimport maya.cmds as cmds\n\n# create degree 1 square with side length 2, center (0,0,0) on the\n# x-y plane\ncmds.nurbsSquare( nr=(0, 0, 1), d=1, c=(0, 0, 0), sl1=2, sl2=2 )\n\n# create degree 2 rectangle with length 2,4 at origin on the x-y plane\ncmds.nurbsSquare( d=2, nr=(0, 0, 1), c=(0, 0, 0), sl1=2, sl2=4 )\n\n# create square of degree 3,side lengths 3, 4 spans per side\ncmds.nurbsSquare( nr=(0, 0, 1), c=(0, 0, 0), d=3, sl1=3, sl2=3, sps=4 )", 
    "nurbsToPoly": "\n\nimport maya.cmds as cmds\n\n# To create a new polygonal surface from a NURBS surface:\ncmds.nurbsToPoly( 'nurbsSphere1' )\n\n# To create a new polygonal surface from a NURBS surface with\n# history so that the tesselation can be edited afterwards:\ncmds.nurbsToPoly( 'nurbsSphere1', ch=True )", 
    "nurbsToPolygonsPref": "\n\nimport maya.cmds as cmds\n\n# To find out what the current format is:\ncmds.nurbsToPolygonsPref( q=True, f=True )", 
    "nurbsToSubdiv": "\n\nimport maya.cmds as cmds\n\n# To create a new subd surface from a NURBS surface:\ncmds.nurbsToSubdiv( 'nurbsSphere1' )\n\n# To create a new subd surface from a NURBS surface with history so that\n# the tesselation can be edited afterwards:\ncmds.nurbsToSubdiv( 'nurbsSphere1', ch=True )", 
    "nurbsToSubdivPref": "\n\nimport maya.cmds as cmds\n\n# To find out what the current format is:\ncmds.nurbsToSubdivPref( q=True, maxPolyCount=True )", 
    "nurbsUVSet": "\n\nimport maya.cmds as cmds\n\nresult = cmds.sphere()\nshape = result[0]\ncmds.select(shape, r=True)\n# Create and activate a UV set\ncmds.nurbsUVSet(create=True)\ncmds.nurbsUVSet(useExplicit=True)\ncmds.select(shape+\".cv[3:5][2:4]\", r=True)\n# Rotate the UVs by 45 degrees\ncmds.nurbsEditUV(angle=45)", 
    "objExists": "\n\nimport maya.cmds as cmds\n\n# Select an object if and only if it exists.\n# Print a warning if it does not exist.\nif cmds.objExists('surface1'):\n  cmds.select('surface1')\nelse:\n  print(\"Warning: no surface exists.\")", 
    "objectCenter": "\n\nimport maya.cmds as cmds\n\n# create a simple hierarchy\ncmds.polyCube( name='a' )\ncmds.polyCube( name='b' )\ncmds.parent( 'b', 'a' )\ncmds.move( 3, 0, 0, 'a', localSpace=True )\ncmds.move( 2, 2, 2, 'b', localSpace=True )\n\nX_COORD = cmds.objectCenter('b',x=True)\n# Result: 5 #\n\n# Get the center of the bounding box of b in local space\nXYZ = cmds.objectCenter('b', l=True)\n# Result: 2 2 2 #\n\n# Get the center of the bounding box of b in world space\nXYZ = cmds.objectCenter('b', gl=True)\n# Result: 5 2 2 #\n\n# Get the center of the bounding box of a in world space\nXYZ = cmds.objectCenter('a', gl=True)", 
    "objectType": "\n\nimport maya.cmds as cmds\n\n# create an object to query type of\ncmds.sphere( n='sphere1' )\n\n# To query the type of an object:\ncmds.objectType( 'sphere1Shape' )\n# Result: nurbsSurface #\n\n# To confirm that sphere1Shape really is a nurbs surface:\ncmds.objectType( 'sphere1Shape', isType='nurbsSurface' )\n# Result: 1 #", 
    "objectTypeUI": "\n\nimport maya.cmds as cmds\n\nprint(cmds.objectTypeUI( 'viewPanes' ))\n\n# show all commands as their types\nimport sys\nfor c,e in enumerate(cmds.objectTypeUI(listAll=True)):\n    c += 1\n    sys.stdout.write(e + \" \")\n    if c % 3 == 0:\n        sys.stdout.write('\\n')\n\n# show Qt inheritence hierachy for buttons\ncmds.window()\ncmds.rowColumnLayout()\nb = cmds.button()\ncmds.showWindow()\nprint(cmds.objectTypeUI(b,sc=True))", 
    "objstats": "", 
    "offsetCurve": "\n\nimport maya.cmds as cmds\n\n# offset all active curves to the specified distance:\ncmds.offsetCurve( d=4.0 )\n\n# create offsets for the specified curve and turn loop cutting off:\ncmds.offsetCurve( 'curve1', cl=False)\n\n# create offsets with circular arcs at the breaks in the curve and use\n# a cutting radius of 2.0 if there are any loops in the offsets:\ncmds.offsetCurve( 'curve1', cb=1, cl=True, cr=2.0 )", 
    "offsetCurveOnSurface": "\n\nimport maya.cmds as cmds\n\ncmds.nurbsPlane( ch=True, o=True, po=0, ax=(0, 1, 0), w=10, lr=2 )\ncmds.circle( ch=True, o=True, nr=(0, 1, 0), r=3 )\ncmds.projectCurve( 'nurbsCircle1', 'nurbsPlane1', ch=0, rn=False, un=False, tol=0.01 )\n\n# Offset given curve to the specified distance at the specified tolerance:\ncmds.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', d=0.12, tol=0.02 )\n\n# Create offsets for the specified curve and turn loop cutting off:\ncmds.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', cl=False )\n\n# Create offsets with circular arcs at the breaks in the curves and trim\n# away any loops in the offset curve:\ncmds.offsetCurveOnSurface( 'nurbsPlaneShape1-\"projectionCurve1_1', cb=1, cl=False )", 
    "offsetSurface": "\n\nimport maya.cmds as cmds\n\n# To offset the active surface to the specified distance:\ncmds.offsetSurface( d=4.0 )\n\n# To create an offset using the surface fit offset method:\ncmds.offsetSurface( 'surface1', m=0, d=2.0 )", 
    "ogs": "\n\nimport maya.cmds as cmds\n\n// Reset the database for all panels running the OGS renderer.\n// Returns the number of panels affected.\ncmds.ogs( reset=True )\n// Result: [modelPanel1] //", 
    "ogsRender": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere.\ncmds.polySphere()\n# Render it\n# It will try to save the image with format according\n# to the file name saved in render globals.\ncmds.ogsRender(w=480,h=270)\ncmds.ogsRender(w=480,h=270)", 
    "ogsdebug": "", 
    "openGLExtension": "\n\nimport maya.cmds as cmds\n\n# Query for the multitexturing extension GL_ARB_multitexture\ncmds.openGLExtension( extension='GL_ARB_multitexture' )\n# Query for all the extensions\ncmds.openGLExtension( extension='' )\n# Query for the renderer name\ncmds.openGLExtension( renderer=True )\n# Query for the vendor\ncmds.openGLExtension( vendor=True )\n# Query for the OpenGL version\ncmds.openGLExtension( version=True )", 
    "openMayaPref": "\n\nimport maya.cmds as cmds\n\n# Enable RTLD_LAZY binding when loading plug-ins\ncmds.openMayaPref( lz=True )\n\n# Force RTLD_NOW binding when loading plug-ins\ncmds.openMayaPref( lz=False )\n\n# Disable the warning about old plug-ins being loaded\ncmds.openMayaPref( ow=False )\n\n# Turn on the Error log\ncmds.openMayaPref( errlog=True )\n\n# Query the Error log\ncmds.openMayaPref( q=True, errlog=True )\n\n# Turn off the Error log\ncmds.openMayaPref( errlog=False )", 
    "optionMenu": "\n\nimport maya.cmds as cmds\n\ndef printNewMenuItem( item ):\n        print item\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.optionMenu( label='Colors', changeCommand=printNewMenuItem )\ncmds.menuItem( label='Yellow' )\ncmds.menuItem( label='Purple' )\ncmds.menuItem( label='Orange' )\ncmds.showWindow( window )", 
    "optionMenuGrp": "\n\nimport maya.cmds as cmds\n\n#    Create a window with two option menu groups.\n#\nwindow = cmds.window( title='Example 1' )\ncmds.columnLayout()\n\n#    Create a couple of option menu groups.\n#\ncolors = cmds.optionMenuGrp(label='Colors')\ncmds.menuItem( label='Red' )\ncmds.menuItem( label='Green' )\ncmds.optionMenuGrp( l='Position' )\ncmds.menuItem( label='Left' )\ncmds.menuItem( label='Center' )\ncmds.menuItem( label='Right' )\n\n#    Now add an additional item to the first option menu.\n#\ncmds.menuItem(parent=(colors +'|OptionMenu'), label='Blue' )\ncmds.showWindow( window )\n\n#    Create another window with an option menu group.\n#\nwindow = cmds.window( title='Example 2' )\ncmds.columnLayout()\ncmds.optionMenuGrp( label='Size', extraLabel='cm', columnWidth=(2, 80) )\ncmds.menuItem( label='10' )\ncmds.menuItem( label='100' )\ncmds.menuItem( label='1000' )\ncmds.showWindow( window )", 
    "optionVar": "\n\nimport maya.cmds as cmds\n\ncmds.optionVar( iv=('defaultTriangles', 4), sv=('defaultFileName', 'buffalo.maya') )\ncmds.optionVar( exists='defaultTriangles' )\n# Result: 1 #\ncmds.optionVar( q='defaultFileName' )\n# Result: buffalo.maya #\ncmds.optionVar( list=True )\ncmds.optionVar( remove='defaultTriangles' )\ncmds.optionVar( exists='defaultTriangles' )\n# Result: 0 #", 
    "orbit": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\ncmds.orbit( 'cameraShape1', ha=-30 )# Change the horizontal angle by -30 degrees\n\ncmds.orbit( 'cameraShape1', va=15 )# Change the vertical angle by 15 degrees\n\ncmds.orbit( 'cameraShape1', ra=(-30, 15) )# Change the horizontal angle by -30 degrees and the vertical angle by 15 degrees", 
    "orbitCtx": "\n\nimport maya.cmds as cmds\n\ncmds.orbitCtx( 'orbitContext', os=30.0, lo=False )", 
    "orientConstraint": "\n\nimport maya.cmds as cmds\n\n# Orients cube1 to match cone1.\ncmds.orientConstraint( 'cone1', 'cube1' )\n\n# Uses the average of the orientations of cone1 and surf2.\ncmds.orientConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.orientConstraint( 'cone1', 'cube2', e=True, w=10. )\n\n# Removes surf2 from cube2's orientConstraint\ncmds.orientConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's orientConstraint with the default weight\ncmds.orientConstraint( 'surf3', 'cube2' )\n\n# Constrain the y and z rotation of sph2 to sph1\ncmds.orientConstraint( 'sph1', 'sph2', skip=\"x\" )\n\n# Modify the constraint so that it constrains all axes of sph2\ncmds.orientConstraint( 'sph1', 'sph2', e=True, skip=\"none\" )\n\n# Create a cache for the orient constraint controlling cube2\ncmds.orientConstraint( 'cube2', e=True, cc=(1, 1000) )", 
    "outlinerEditor": "\n\nimport maya.cmds as cmds\n\n# Create a new regular outliner in its own window\n#\ncmds.window()\ncmds.frameLayout( labelVisible=False )\npanel = cmds.outlinerPanel()\noutliner = cmds.outlinerPanel(panel, query=True,outlinerEditor=True)\ncmds.outlinerEditor( outliner, edit=True, mainListConnection='worldList', selectionConnection='modelList', showShapes=False, showRepresentationNodes=False, showReferenceNodes=False, showAttributes=False, showConnected=False, showAnimCurvesOnly=False, autoExpand=False, showDagOnly=True, ignoreDagHierarchy=False, expandConnections=False, showNamespace=True, showCompounds=True, showNumericAttrsOnly=False, highlightActive=True, autoSelectNewObjects=False, doNotSelectNewObjects=False, transmitFilters=False, showSetMembers=True, setFilter='defaultSetFilter' )\ncmds.showWindow()", 
    "outlinerPanel": "\n\nimport maya.cmds as cmds\n\n# Create a new regular outliner in its own window\n#\ncmds.window()\ncmds.frameLayout( labelVisible=False )\npanel = cmds.outlinerPanel()\noutliner = cmds.outlinerPanel(panel, query=True,outlinerEditor=True)\ncmds.outlinerEditor( outliner, edit=True, mainListConnection='worldList', selectionConnection='modelList', showShapes=False, showReferenceNodes=False, showAttributes=False, showConnected=False, showAnimCurvesOnly=False, autoExpand=False, showDagOnly=True, ignoreDagHierarchy=False, expandConnections=False, showCompounds=True, showNumericAttrsOnly=False, highlightActive=True, autoSelectNewObjects=False, doNotSelectNewObjects=False, transmitFilters=False, showSetMembers=True, setFilter='defaultSetFilter' )\ncmds.showWindow()", 
    "overrideModifier": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\n#    Map the \"a\" key such that it behaves just like the \"Alt\" key.\n#\ncmds.nameCommand( 'alternateAltPressCommand', annotation='\"Alternate Alt-press modifier key\"', command='\"overrideModifier -press Alt\"' )\ncmds.nameCommand( 'alternateAltReleaseCommand', annotation='\"Alternate Alt-release modifier key\"', command='\"overrideModifier -release Alt\"' )\ncmds.hotkey( keyShortcut='a', name='alternateAltPressCommand' )\ncmds.hotkey( keyShortcut='a', releaseName='alternateAltPressCommand' )\n\n#    Example 2.\n#\n#    The following should restore the \"a\" hotkey to what it was\n#    previously.\n#\ncmds.overrideModifier( clear=True )\ncmds.hotkey( factorySettings=True )\ncmds.hotkey( sourceUserHotkeys=True )", 
    "paint3d": "", 
    "paintEffectsDisplay": "\n\nimport maya.cmds as cmds\n\ncmds.paintEffectsDisplay( meshDrawEnable=True )\nmeshDrawEnabled = cmds.paintEffectsDisplay(query=True, me=True)", 
    "pairBlend": "\n\nimport maya.cmds as cmds\n\n# Create a pairBlend node and connect sphere1's tx and ty to the pairBlend's input1\ncmds.nurbsSphere(n='sphere1')\ncmds.pairBlend( nd='sphere1', at=['tx','ty'] )\n# Query the nodes connected to input1.\n#\ninputs = cmds.pairBlend('pairBlend1' ,query=True, input1=True)", 
    "palettePort": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.frameLayout(labelVisible=0)\n\n# create a palette of 20 columns and 15 rows\ncmds.palettePort( 'palette', dim=(20, 15) )\n\n# select cell #30\ncmds.palettePort( 'palette', edit=True, scc=30 )\n\n# return RGB value for this cell\ncmds.palettePort( 'palette', query=True, rgb=True )\n\n# make cell #100 transparent and blue\ncmds.palettePort( 'palette', edit=True, transparent=100, rgb=(100, 0.0, 0.0, 1.0) )\ncmds.palettePort( 'palette', edit=True, redraw=True )\n\n# returns the current transparent cell (there can be only one)\ncmds.palettePort( 'palette', query=True, transparent=True )\ncmds.showWindow()", 
    "panZoom": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\n\ncmds.panZoom( 'cameraShape1', d=0.3 )\n\ncmds.panZoom( 'cameraShape1', abs=True, u=0.4 )\n\ncmds.panZoom( 'cameraShape1', z=0.5 )", 
    "panZoomCtx": "\n\nimport maya.cmds as cmds\n\ncmds.panZoomCtx( 'panZoomContext', zs=1.0 )", 
    "paneLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.paneLayout( configuration='quad' )\ncmds.button()\ncmds.textScrollList( append=['one', 'two', 'three'] )\ncmds.scrollField()\ncmds.scrollLayout()\ncmds.columnLayout()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "panel": "\n\nimport maya.cmds as cmds\n\nMyLabel = 'My Panel'\ncmds.window()\ncmds.frameLayout( lv=0 )\ncmds.modelPanel( l=MyLabel )\ncmds.showWindow()\n\npanels = cmds.getPanel( all=True )\n\nfor panel in panels:\n        if MyLabel == cmds.panel( panel, q=True, label=True ):\n                myPanel = panel\n                print( 'Found: '+MyLabel )", 
    "panelConfiguration": "\n\nimport maya.cmds as cmds\n\n#    Create a custom panel configuration.\n#\nconfigName = cmds.panelConfiguration(\n                                label=\"Custom Panel Layout\",\n                                sceneConfig=False,\n                                configString=\"paneLayout -e -cn \\\"vertical2\\\" -ps 1 39 100 -ps 2 61 100 $gMainPane;\",\n                                addPanel=[\n                                        (False,\n                                        'Outliner',\n                                        'outlinerPanel',\n                                        (\"{global int $gUseMenusInPanels;\\\n                                        $panelName = `outlinerPanel -mbv $gUseMenusInPanels -unParent -l \\\"Outliner\\\"`;\\\n                                        outlinerEditor -e -highlightActive true $panelName;}\"),\n                                        \"outlinerPanel -edit -l \\\"Outliner\\\"  $panelName\"),\n\n                                        (True,\n                                        \"Persp View\",\n                                        \"modelPanel\",\n                                        (\"{global int $gUseMenusInPanels;\\\n                                        modelPanel -mbv $gUseMenusInPanels\\\n                                        -unParent -l \\\"Persp View\\\" -cam persp;}\" ),\n                                        \"modelPanel -edit -l \\\"Persp View\\\"  -cam \\\"persp\\\" $panelName\")\n                                ]\n                        )\n\n#    Update the main Maya window to reflect the custom panel configuration.\n#    Note also that your custom configuration may be selected from any\n#    panel's \"Panels-\"Saved Layouts\" menu.\n#\nmaya.mel.eval('setNamedPanelLayout( \"Custom Panel Layout\" )')", 
    "panelHistory": "\n\nimport maya.cmds as cmds\n\n#    Create a window containing a pane layout.  The window also contains\n#    an option menu for changing the layout configuration and two buttons\n#    for stepping through the configuration history.\n#\nwindow = cmds.window( title='panelHistory Example' )\nform = cmds.formLayout()\n\n#    Create the option menu for panel configuration.\n#\nconfiguration = cmds.optionMenuGrp( label='Configuration', columnWidth2=( 100, 150 ) )\n\nsingle = cmds.menuItem( label='Single' )\nstacked = cmds.menuItem( label='2 Stacked' )\nsideBySide = cmds.menuItem( label='2 Side by Side' )\nfour = cmds.menuItem( label='Four' )\n\n#    Create the buttons for stepping through configuration history.\n#\nhistory = cmds.rowLayout( numberOfColumns=3 , columnWidth3=( 100, 75, 75 ),\n                                                  columnAttach=[( 2, 'both', 0 ),( 3, 'both', 0 )] )\ncmds.text( label='History' )\nbackBtn = cmds.button( label='Back' )\nforwardBtn = cmds.button( label='Forward' )\ncmds.setParent( '..' )\n\n#    Create the pane layout.\n#\nframe = cmds.frameLayout( labelVisible=False )\npanes = cmds.paneLayout()\ncmds.text( label='Pane 1' )\ncmds.text( label='Pane 2' )\ncmds.text( label='Pane 3' )\ncmds.text( label='Pane 4' )\n\n#    Set up the attachments.\n#\ncmds.formLayout( form, edit=True,\n                                 attachForm=[(configuration, 'top', 5),\n                                                         (configuration, 'left', 5),\n                                                         (history, 'left', 5),\n                                                         (history, 'right', 5),\n                                                         (frame, 'left', 5),\n                                                         (frame, 'right', 5),\n                                                         (frame, 'bottom', 5)],\n                                 attachControl=[(history, 'top', 5, configuration),\n                                                                (frame, 'top', 5, history)] )\n\n#    Create the panel history object.\n#\npanelHistory = cmds.panelHistory(targetPane=panes)\n\n#    Attach a command to the option menu to change the panel layout\n#    configuration accordingly.\n#\ncmds.optionMenuGrp( configuration,\n                                        edit=True,\n                                        changeCommand=('ExampleUpdatePaneLayout( \\\"'+ configuration + '\\\", \\\"' + panes + '\\\" )') )\n\n#    Attach commands to the buttons for stepping through the configuration\n#    history.  The commands should also update the value of the option menu.\n#\ncmds.button( backBtn, edit=True,\n                         command='cmds.panelHistory( panelHistory, edit=True, back=True ); ExampleUpdateConfiguration( \\\"' + configuration + '\\\", \\\"' + panes + '\\\" )' )\ncmds.button( forwardBtn, edit=True,\n                         command='cmds.panelHistory( panelHistory, edit=True, forward=True ); ExampleUpdateConfiguration( \\\"' + configuration + '\\\", \\\"' + panes + '\\\" )' )\n\ncmds.showWindow( window )\n\n#    Call this procedure whenever the option menu's configuration value\n#    changes.  This procedure will update the configuration of the\n#    pane layout to reflect the change.\n#\ndef ExampleUpdatePaneLayout( optionMenuGrp, paneLayout ):\n        if optionMenuGrp == \"\" or paneLayout == \"\":\n                return\n\n        value = cmds.optionMenuGrp( optionMenuGrp, query=True, value=True )\n        if value == \"Single\":\n                cmds.paneLayout( paneLayout, edit=True, configuration='single' )\n        elif value == \"2 Stacked\":\n                cmds.paneLayout( paneLayout, edit=True, configuration='horizontal2' )\n        elif value == \"2 Side by Side\":\n                cmds.paneLayout( paneLayout, edit=True, configuration='vertical2' )\n        elif value == \"Four\":\n                cmds.paneLayout( paneLayout, edit=True, configuration='quad' )\n\n#    Call this procedure whenever the panel configuration changes due to\n#    stepping through the panel history (ie. pressing either the \"Forward\"\n#    or \"Back\" buttons.  This procedure will update the value of the\n#    option menu to reflect the new pane layout configuration.\n#\ndef ExampleUpdateConfiguration( optionMenuGrp, paneLayout ):\n        if optionMenuGrp == \"\" or paneLayout == \"\":\n                return\n\n        configuration = cmds.paneLayout( paneLayout, query=True, configuration=True );\n\n        if configuration == 'single':\n                cmds.optionMenuGrp( optionMenuGrp, edit=True, value='Single' )\n        elif configuration == 'horizontal2':\n                cmds.optionMenuGrp( optionMenuGrp, edit=True, value='2 Stacked' )\n        elif configuration == 'vertical2':\n                cmds.optionMenuGrp( optionMenuGrp, edit=True, value='2 Side by Side' )\n        elif configuration == 'quad':\n                cmds.optionMenuGrp( optionMenuGrp, edit=True, value='Four' )", 
    "paramDimContext": "\n\nimport maya.cmds as cmds\n\ncmds.paramDimContext()", 
    "paramDimension": "\n\nimport maya.cmds as cmds\n\ncmds.curve(d=3, p=((-9.3, 0, 3.2), (-4.2, 0, 5.0), (6.0, 0, 8.6), (2.1, 0, -1.9)), k=(0, 0, 0, 1, 2, 2));\ncmds.paramDimension( 'curveShape1.u[0.5]' )\n# displays where u = 0.5 is on the curve\ncmds.sphere();\ncmds.paramDimension( 'nurbsSphere1.uv[0.5][0.5]' )\n# displays where u = 0.5 and v = 0.5 is on the surface", 
    "paramLocator": "\n\nimport maya.cmds as cmds\n\n# Creates a locator on curve1 at parameter value 0.5.\ncmds.paramLocator( 'curve1.u[0.5]' )\n\n# Creates a locator on curve1 at its second edit point. (ep[0] is the 1st edit point).\ncmds.paramLocator( 'curve1.ep[1]' )\n\n# Creates a locator on curve1 at normalized parameter value 0.25.\ncmds.paramLocator( 'curve1.un[0.25]' )\n\n# Creates a locator on surface1 at parameter value (0.5,0.5).\ncmds.paramLocator( 'surface1.uv[0.5][0.5]' )", 
    "parent": "\n\nimport maya.cmds as cmds\n\n# Create some objects\ncmds.circle( name='circle1' )\ncmds.move( 5, 0, 0 )\ncmds.group( n='group1' )\ncmds.move( -5, 0, 0 )\ncmds.group( em=True, n='group2' )\n\n# Move the circle under group2.\n# Note that the circle remains where it is.\ncmds.parent( 'circle1', 'group2' )\n\n# Let's try that again with the -relative flag. This time\n# the circle will move.\ncmds.undo()\ncmds.parent( 'circle1', 'group2', relative=True )\n\n# Create an instance of the circle using the parent command.\n# This makes circle1 a child of group1 and group2.\ncmds.undo()\ncmds.parent( 'circle1', 'group2', add=True )\n\n# Remove group1 as a parent of the circle\ncmds.parent( 'group1|circle1', removeObject=True )\n\n# Move the circle to the top of the hierarchy\ncmds.parent( 'group2|circle1', world=True )\n\n# Remove an instance of a shape from a parent\ncmds.parent('nurbsSphere3|nurbsSphereShape1',shape=True,rm=True)", 
    "parentConstraint": "\n\nimport maya.cmds as cmds\n\n# Position cube1 at the location of cone1\n# Rotate cube1 to the rotation of cone1\ncmds.parentConstraint( 'cone1', 'cube1' )\n\n\n# Position cube1 at the average of the locations of cone1 and surf2\n# Rotate cube1 to the average of the rotations of cone1 and surf2\ncmds.parentConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.parentConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n\n# Removes surf2 from cube2's parentConstraint\ncmds.parentConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's parentConstraint with the default weight\ncmds.parentConstraint( 'surf3', 'cube2' )\n\n# Constrain position only in the y-axis with rotation\n# constraining in all axes\ncmds.parentConstraint( 'cone2', 'cube2', st=[\"x\",\"z\"] )", 
    "particle": "\n\nimport maya.cmds as cmds\n\n# Creates a particle object with four particles\ncmds.particle( p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)] )\n\n# Returns the age of the particle with id 2 in object particle1\ncmds.particle( 'particle1', q=True, attribute='age', id=2 )\n\n# Returns the velocity of the 3rd particle in the currently selected\n# particle object\ncmds.particle( attribute='velocity', q=True, order=3  )\n\n# Edits the velocity of the 7th particle in the currently selected\n# particle object to be 0.0, 1.0, 0.0\ncmds.particle( e=True, attribute='velocity', order=3, vectorValue=(0.0, 1.0, 0.0) )\n\n# Edits the mass of the particle in \"particle1\" with id 3 to be 0.7\ncmds.particle( 'particle1', e=True, attribute='mass', id=3, fv=0.7 )", 
    "particleExists": "\n\nimport maya.cmds as cmds\n\n# If the object does not exist then false (0) is returned\ncmds.file( f=True, new=True )\ncmds.particleExists( 'particleShape1' )\n# Result: 0 #\n\n# Create a particle shape and then querying for\n# it will return true (1)\ncmds.emitter()\n# Result: emitter1 #\ncmds.particle()\n# Result: particle1 particleShape1 #\ncmds.connectDynamic( 'particle1', em='emitter1' )\n# Result: particleShape1 #\ncmds.particleExists( 'particleShape1' )\n# Result: 1 #\n\n# You may also query using the transform name\ncmds.particleExists( 'particle1' )\n# Result: 1 #\n\n# The name of a soft body object can be used to query as well\ncmds.polySphere( r=1, sx=20, sy=20, ax=(0, 1, 0), tx=2, ch=1 )\n# Result: pSphere1 polySphere1 #\ncmds.soft( c=True )\n# Result: pSphere1Particle #\ncmds.particleExists( 'pSphere1Particle' )\n# Result: 1 #", 
    "particleFill": "\n\nimport maya.cmds as cmds\n\n# create a poly torus with particles filling interior\ncmds.polyTorus()\ncmds.particleFill()", 
    "particleInstancer": "\n\nimport maya.cmds as cmds\n\n# create a cube and a particle emitter\ncmds.polyCube()\ncmds.emitter(pos=(0,0,0), type='omni', r=100, sro=0, nuv=0, cye='none', cyi=1, spd=1, srn=0, nsp=1, tsp=0, mxd=0, mnd=0, dx=1, dy=0, dz=0, sp=0)\ncmds.particle()\ncmds.connectDynamic('particle1',em='emitter1')\n# instance the cube to each particle emitted\ncmds.particleInstancer( 'particleShape1', addObject=True, object='pCube1', cycle='None', cycleStep=1, cycleStepUnits='Frames', levelOfDetail='Geometry', rotationUnits='Degrees', rotationOrder='XYZ', position='worldPosition', age='age')\n# query the instancer associated with the particle\ncmds.particleInstancer( 'particle1', q=True, name=True )\n# query the particle attribute name corresponding to the position attribute for the instancer\ncmds.particleInstancer( 'particle1', name='instancer1', q=True, position=True )", 
    "particleRenderInfo": "\n\nimport maya.cmds as cmds\n\n#Return the list of all render attributes\ncmds.particleRenderInfo(query=True, ala=True)", 
    "partition": "\n\nimport maya.cmds as cmds\n\n# To create a partition calls p1 which contains set1 and set2 ...\ncmds.partition( 'set1', 'set2', n='p1' )\n\n# To create an empty render partition ...\ncmds.partition( render=True )\n\n# To add/remove sets from partition p1 ...\ncmds.partition( 'set3', add='p1' )\ncmds.partition( 'set1', rm='p1' )\n\n# To get a list of all sets in a partition ...\ncmds.partition( 'p1', q=True )\n\n# To check if the partition is a render partition\ncmds.partition( 'p1', q=True, re=True )", 
    "pasteKey": "\n\nimport maya.cmds as cmds\n\n# Paste keyframes onto nurbsSphere1's translateX attribute at time 10\n#\ncmds.pasteKey( 'nurbsSphere1', time=(10,10), attribute='translateX' )\n\n# Paste to all active objects, preserving the timing from the clipboard.\n#\ncmds.pasteKey()", 
    "pathAnimation": "\n\nimport maya.cmds as cmds\n\n# Create a set of simple objects for the motion path animation\n\n# create a path, e,g, a curve\npath = cmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\n\n# create an object, e.g. a sphere\nobject = cmds.sphere()\ncmds.scale( 0.5, 2.0, 0.2 )\n\n# 1. To animate the sphere along the curve, with one keyframe at\n# the current time:\n\ncmds.pathAnimation( object[0], c=path )\n\n# or:\n\ncmds.select( object[0], path )\ncmds.pathAnimation()\n\n# 2. To animate the sphere along the curve, from time 0 to time 30:\n\ncmds.pathAnimation( object[0], stu=0, etu=30, c=path )\n\n# 3. To align the sphere to its path:\n\ncmds.pathAnimation( object[0], stu=0, etu=30, follow=True, c=path )\n\n# 4. To align the Z axis of sphere to the tangent of the curve, and\n# to align the Y axis of the sphere to the up direction of the\n# motion curve:\n\ncmds.pathAnimation( object[0], stu=0, etu=30, fa='z', ua='y', c=path )\n\n# 5. To align the Z axis of sphere to the tangent of the motion curve,\n# to align the Y axis of sphere to the up direction of the motion\n# curve, and to bank with the curvature of the motion curve:\n\ncmds.pathAnimation( object[0], stu=0, etu=30, fa='z', ua='y', bank=True, c=path )\n\n# 6. To change the setting on the bankScale for the motionPath1\n# to negative 2.5 (i.e. bank out and multiply the computed\n# bank value by 2.5):\n\ncmds.pathAnimation( 'motionPath1', edit=True, bankScale=-2.5 )\n\n# Notes:\n# If the computed bank angles are not large enough, the user can\n# specify the bankScale to amplify them. The default value is 1.\n\n# Positive bankScale produces inward bank angle,\n# negative bankScale produces outward bank angle.\n\n# The user can also change the maximum bank angle through\n# the bankThreshold option. Default value is 90 degrees.", 
    "pause": "\n\nimport maya.cmds as cmds\n\ncmds.pause( sec=10 )", 
    "percent": "\n\nimport maya.cmds as cmds\n\n# set percents on the selected items to 0.6\n#\ncmds.percent( 'cluster1', v=0.6 )\n\n# set percents on the selected items dropping off along the\n# z-axis starting at the origin. Dropoff distance is 5, and\n# the initial value is 1. Dropoff type is linear.\n#\ncmds.percent( 'cluster1', dp=(0, 0, 0), dax=(0, 0, 1), dt='linear', dds=5, v=1 )\n\n# set percents on the selected items dropping off along\n# curve1. Dropoff distance is 5, and\n# the initial value is 0.3.\n#\ncmds.percent( 'cluster2', dc='curve2', dds=3, v=0.3 )\n\n# add 0.1 to the percents of the selected items\n#\ncmds.percent( 'cluster1', v=0.1, ap=True )", 
    "performanceOptions": "\n\nimport maya.cmds as cmds\n\n# Disable the generation of stitch surfaces\ncmds.performanceOptions( ds=1 )\n\n# Put sculpt deformers into pass-through mode during interaction/playback\ncmds.performanceOptions( ps='interactive' )", 
    "pfxstrokes": "\n\nimport maya.cmds as cmds\n\ncmds.pfxstrokes( fn='/tmp/output_file' )", 
    "pickWalk": "\n\nimport maya.cmds as cmds\n\n# Given the transforms A and B which are parented to a transform C,\n# and C is instanced with parents D and E.\n\ncmds.pickWalk( 'A', direction='right' )\n\ncmds.select('|E|C')\ncmds.pickWalk( type='instances', direction='left')\n\n# The pickWalk command also works on CVs and edit points\ncmds.select('nurbsPlaneShape1.cv[2][1]')\ncmds.pickWalk(direction='right' )\n# Result: nurbsPlaneShape1.cv[3][1] #\n\ncmds.pickWalk( direction='up' )\n# Result: nurbsPlaneShape1.cv[3][2] #\n\ncmds.select( 'curveShape2.ep[1]' )\ncmds.pickWalk( direction='left' )\n# Result: curveShape2.ep[0] #", 
    "picture": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.picture( image='sphere.png' )\ncmds.showWindow( window )", 
    "pixelMove": "\n\nimport maya.cmds as cmds\n\n# move selected objects to the right (in current view) by one \"pixel\"\ncmds.pixelMove( 1, 0 )\n\n# move selected objects up by one \"pixel\"\ncmds.pixelMove( 0, 1 )", 
    "planarSrf": "\n\nimport maya.cmds as cmds\n\n# create linear planar trimmed surface given boundary curve(s)\ncmds.planarSrf( d=1 )\n\n# use boundary curve(s) to create a hole by\n# keeping the outside trimmed regions\ncmds.planarSrf( ko=True)", 
    "plane": "\n\nimport maya.cmds as cmds\n\n# Creates a plane of size (10x10) with center at (1,1,1)\ncmds.plane( p=(1, 1, 1), s=10 )\n\n# Creates a plane of size (10x10) with center at (1,1,1) using various units\ncmds.plane( p=('1ft', '1ft', '1ft'), s='10in', r=('30deg', '30deg', '45deg') )", 
    "play": "\n\nimport maya.cmds as cmds\n\n# Begin playback from min to max\n#\ncmds.play( forward=True )\n\n# Begin playback from max to min\n#\ncmds.play( forward=False )\n\n# Stop (forward or backward) playback\n#\ncmds.play( state=False )\n\n# Record mode through one playback loop\n#\ncmds.play( record=True )\n\n# Are we playing back?  Returns 1 if yes, 0 if no.\n#\ncmds.play( q=True, state=True )", 
    "playbackOptions": "\n\nimport maya.cmds as cmds\n\ncmds.playbackOptions( loop='continuous' )\ncmds.playbackOptions( minTime='0sec', maxTime='1sec' )\n\n# Playback every 2nd frame\n#\ncmds.playbackOptions( by=2 )", 
    "playblast": "\n\nimport maya.cmds as cmds\n\n# Run movieplayer on the currently playblasted range\n# (including sound) and save the movie to a file.\n#\ncmds.playblast( s=\"ohNo\", f=\"myMovie.mv\" )\n\n# Run movieplayer on the currently playblasted range\n# (at 60% of the size of the current view), and\n# save the movie to file \"myMovie.mv\" and don't\n# launch any viewing program.\n#\ncmds.playblast( p=60, s=\"ohNo\", f=\"myMovie.mv\", v=False )\n\n# Output frames 2, 3, 8 as images and launch the viewer;\n#\ncmds.playblast( frame=[8,3,2], format=\"image\", viewer=True )\n\n# Output an image sequence in 'gif' format\n#\nplayblast -format 'image' -compression 'gif'", 
    "pluginInfo": "\n\nimport maya.cmds as cmds\n\n# List the plugins that are currently loaded\ncmds.pluginInfo( query=True, listPlugins=True )\n\n# Find the vendor of a plugin\ncmds.pluginInfo( 'newNode.py', query=True, vendor=True )\n\n# Find the commands provided by a given plug-in\ncmds.pluginInfo( 'helloCmd.py', query=True, command=True )\n\n# Turn on autoloading for a plug-in\ncmds.pluginInfo( 'newNode.py', edit=True, autoload=True )\n\n# Return all custom locators registered by plug-ins.\ncmds.pluginInfo( query=True, dependNodeByType=\"kLocatorNode\" )", 
    "pointConstraint": "\n\nimport maya.cmds as cmds\n\n# Position cube1 at the location of cone1.\ncmds.pointConstraint( 'cone1', 'cube1' )\n\n# Uses the average of the position of cone1 and surf2.\ncmds.pointConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.pointConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n\n# Removes surf2 from cube2's pointConstraint\ncmds.pointConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's pointConstraint with the default weight\ncmds.pointConstraint( 'surf3', 'cube2' )\n\n# Constrain the y \"amp; z translation of sph2 to sph1\ncmds.pointConstraint( 'sph1', 'sph2', skip=\"x\" )", 
    "pointCurveConstraint": "\n\nimport maya.cmds as cmds\n\n# Apply a constraint to manipulate the  position corresponding to\n# the 1st edit point on curve1.\ncmds.pointCurveConstraint( 'curve1.ep[1]', ch=True )\n\n# Apply a constraint to manipulate the end point on curve1.\ncmds.pointCurveConstraint( 'curve1.un[1.0]', ch=True, w=1.0 )\n\n# Apply a constraint around the midpoint in the parameter domain on curve1.\ncmds.pointCurveConstraint( 'curve1.un[0.5]', ch=True, w=-1.0 )", 
    "pointLight": "\n\nimport maya.cmds as cmds\n\ncmds.pointLight()", 
    "pointOnCurve": "\n\nimport maya.cmds as cmds\n\ncmds.pointOnCurve( 'curve1', pr=0.5, p=True )\n# Returns the (x,y,z) position of curve1 at parameter 0.5.\n\ncmds.pointOnCurve( 'curve1', pr=0.5 )\n# Returns the (x,y,z) position of curve1 at parameter 0.5, since\n# position is the default information.\n\ncmds.pointOnCurve( 'curve1', pr=0.5, nn=True )\n# Returns the (x,y,z) normalized normal of curve1 at parameter 0.5.\n\ncmds.pointOnCurve( 'curve1', pr=0.5, cr=True )\n# Returns the curvature radius of curve1 at parameter 0.5.\n\ninfoNode = cmds.pointOnCurve('curve1', ch=True, pr=0.55)\ncmds.getAttr(infoNode + \".position\")  # returns the position\ncmds.getAttr(infoNode + \".normal\")    # returns the normal\n\n# Returns a string which is the name of a new pointOnCurveInfo\n# dependency node.  With this node connected to the curve,\n# the output values of the pointOnCurveInfo node are always current\n# even if, for example, the parameter is being animated.", 
    "pointOnPolyConstraint": "\n\nimport maya.cmds as cmds\n\n# Position cube1 at the location of cone1.\ncmds.pointOnPolyConstraint( 'cone1', 'cube1' )\n\n# Uses the average of the position of cone1 and surf2.\ncmds.pointOnPolyConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.pointOnPolyConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n\n# Removes surf2 from cube2's pointOnPolyConstraint\ncmds.pointOnPolyConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's pointOnPolyConstraint with the default weight\ncmds.pointOnPolyConstraint( 'surf3', 'cube2' )\n\n# Constrain the y \"amp; z translation of sph2 to sph1\ncmds.pointOnPolyConstraint( 'sph1', 'sph2', skip=\"x\" )", 
    "pointOnSurface": "\n\nimport maya.cmds as cmds\n\ncmds.pointOnSurface( 'surface1', u=0.5, v=1.0, position=True )\n# Returns the (x,y,z) position of the surface at parameter (u=0.5,v=1.0).\n\ninfoNode = cmds.pointOnSurface('surface1', ch= True, u=0.55, v=0.33)\ncmds.getAttr(infoNode + \".position\" )  # returns the position\n# The pointOnSurface command returns  a string which is the name of\n# a new pointOnSurfaceInfo dependency node.  With this node connected\n# to the surface, the output values of the pointOnSurfaceInfo node\n# are always current even if, for example, the surface parameters are\n# being animated.", 
    "pointPosition": "\n\nimport maya.cmds as cmds\n\ncmds.pointPosition( 'curve1.cv[3]' )\n# Returns the (x,y,z) world position of curve1's 3rd CV.\n\ncmds.pointPosition( 'particle1.pt[1]', l=True )\n# Returns the (x,y,z) local position of the particle point.", 
    "poleVectorConstraint": "\n\nimport maya.cmds as cmds\n\n# aims the pole vector of handle1 at cone1.\ncmds.poleVectorConstraint( 'cone1', 'handle1' )\n\n# uses the average of the position of cone1 and surf2.\ncmds.poleVectorConstraint( 'cone1', 'surf2', 'handle2', w=.1 )\n\n# sets the weight for cone1's effect on handle2's poleVector to 10.\ncmds.poleVectorConstraint( 'cone1', 'handle2', e=True, w=10. )\n\n# removes surf2 from handle2's poleVectorConstraint.\ncmds.poleVectorConstraint( 'surf2', 'handle2', e=True, rm=True )\n\n# adds surf3 to handle2's poleVectorConstraint with the default weight.\ncmds.poleVectorConstraint( 'surf3', 'handle2' )", 
    "polyAppend": "\n\nimport maya.cmds as cmds\n\ncmds.polyCreateFacet( p=[(0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0)] )\n\n#add a new triangular facet described by the edge #0, and a free point\ncmds.polyAppend( a=[0, (5, -5, 0)] )\n\n#add a new quadrangular facet with 2 triangular holes.\ncmds.polyAppend( a=[1, (20, 0, 0), (20, 10, 0), (), (12, 6, 0), (14, 5, 0), (12, 4, 0), (), (16, 5, 0), (18, 6, 0), (18, 4, 0)] )", 
    "polyAppendFacetCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create a new poly append facet context, set it to add four vertices per new edge, and then switch to it\ncmds.polyAppendFacetCtx('polyAppendFacetCtx1', s=4)\ncmds.setToolTo('polyAppendFacetCtx1')", 
    "polyAppendVertex": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( sx=3, sy=3 )\n\n# add a new face\ncmds.polyAppendVertex( a=[6, 10, (.167, .3, -.167), (.167, .3, .167)] )\n\n# add a new holed face\ncmds.polyAppendVertex( a=[9, 5, (-.167, .3, .167), (-.167, .3, -.167), (), (-.167, .2, .1), (-.167, .1, 0), (-.167, .2, -.1)] )\n\n# connect the two new faces\ncmds.polyAppendVertex( a=[18, 17, 16, 19] )\n\n# add a new unconnected quad\ncmds.polyAppendVertex( a=[(-.5, .5, -.5), (.5, .5, -.5), (.5, .5, .5), (-.5, .5, .5)] )", 
    "polyAutoProjection": "\n\nimport maya.cmds as cmds\n\n# Create a plane with default UVs.\ncmds.polySphere( n='sph' )\n\n# Automatic projections with 6 planes.\ncmds.polyAutoProjection( 'sphShape.f[*]' )", 
    "polyAverageNormal": "\n\nimport maya.cmds as cmds\n\n# To average normals when they are within 0.2 distance.\ncmds.polyAverageNormal( distance=0.2 )\n# To average normals when they are within 0.2 distance.\n# Normalize the normals before computing the average.\ncmds.polyAverageNormal( distance=0.2, prenormalize=True )\n# To averge normals when they are within 0.2 distance. Do not\n# normalize the normals before computing the average (so to get weighted\n# average). But do normalize the resulting normal.\ncmds.polyAverageNormal( distance=0.2, postnormalize=True )\n# To average normals when they are within 0.2 distance. Do not\n# allow zero normal and replace zero normal with (1 0 0).\ncmds.polyAverageNormal( distance=0.2, allowZeroNormal=False, replaceNormalXYZ=(1,0,0) )", 
    "polyAverageVertex": "\n\nimport maya.cmds as cmds\n\n# Create a cube with a 5x5x5 subdivision.\ncmds.polyCube( sx=5, sy=5, sz=5, n='plg' )\n\n# Average all the vertices\ncmds.polyAverageVertex( 'plg.vtx[*]' )", 
    "polyBevel": "\n\nimport maya.cmds as cmds\n\n# Replace an edge by 1 face, the width of the new face is given by the offset value.\ncmds.polyCube( n='plg' )\ncmds.polyBevel( 'plg.e[7]', offset=0.2 )\ncmds.delete( 'plg' )\n\n# Replace an edge by 4 faces, the new faces are rounding a smooth angle.\ncmds.polyCube( n='plg' )\ncmds.polyBevel( 'plg.e[7]', segments=4, offset=0.4 )\ncmds.delete( 'plg' )\n\n# Replace an edge by 4 faces, the new faces are rounding an angle specified by the default value of roundness (i.e 0.5).\ncmds.polyCube( n='plg' )\ncmds.polyBevel( 'plg.e[7]', segments=4, autoFit=Flase )\ncmds.delete( 'plg' )", 
    "polyBlendColor": "\n\nimport maya.cmds as cmds\n\n# This example creates two poly color sets for pPlane1.\n# Apply red and green to the vertices of pPlane1 using two separate color sets, then blend their colors to the second color set\n# After that, delete the first color set\n\n# Create a poly plane pPlane1\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create colorSet1, set to use RGBA channels\ncmds.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet1')\n# Apply red color to the vertices of pPlane1\ncmds.polyColorPerVertex(r=1, g=0, b=0, a=1, cdo=True)\n\n# Create colorSet2, set to use RGBA channels\ncmds.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet2')\n# Apply green color to the vertices of pPlane1\ncmds.polyColorPerVertex(r=0, g=1, b=0, a=1, cdo=True)\n\n# Blend the two color sets to colorSet2, set to use ColorChannel blend style, set all the blend weights to 0.5\ncmds.polyBlendColor(bcn='colorSet1', src='colorSet2', dst='colorSet2', bfn=6, bwa=0.5, bwb=0.5, bwc=0.5, bwd=0.5)\n# Delete colorSet1\ncmds.polyColorSet(delete=True, colorSet='colorSet1')", 
    "polyBlindData": "\n\nimport maya.cmds as cmds\n\ncmds.polyBlindData( 'pPlane1.vtx[2]', 'pPlane1.vtx[8]', id=9001, associationType='vertex', ldn='bdFloat', dbd=234 )", 
    "polyBoolOp": "\n\nimport maya.cmds as cmds\n\n# Union\ncmds.polyCube( n='Cube1', w=1, h=10, d=1 )\ncmds.polyCube( n='cub1', w=3, h=3, d=3 )\ncmds.polyBoolOp( 'cub1', 'Cube1', op=1, n='result1' )\n\n# Difference\ncmds.polyCube( n='Cube2', w=1, h=10, d=1 )\ncmds.polyCube( n='cub2', w=3, h=3, d=3 )\ncmds.polyBoolOp( 'cub2', 'Cube2', op=2, n='result2' )\ncmds.move( 5, 0, 0, 'result2' )\n\n# Intersection\ncmds.polyCube( n='Cube3', w=1, h=10, d=1 )\ncmds.polyCube( n='cub3', w=3, h=3, d=3 )\ncmds.polyBoolOp( 'cub3', 'Cube3', op=3, n='result3' )\ncmds.move( 10, 0, 0, 'result3' )", 
    "polyBridgeEdge": "\n\nimport maya.cmds as cmds\n\ncmds.file( f=True, new=True )\ncmds.polyCube( sx=3, sy=3, sz=3 )\ncmds.delete( 'pCube1.f[9:17]' )\ncmds.move( -2, 0, 0, r=True )\ncmds.rotate( 0, 0, -90, r=True, os=True )\ncmds.polyCube( sx=3, sy=3, sz=3 )\ncmds.delete( 'pCube2.f[9:17]' )\ncmds.move( 2, 0, 0, r=True )\ncmds.rotate( 0, 0, 90, r=True, os=True )\ncmds.polyUnite( 'pCube1', 'pCube2', ch=1 )\n\n# Now bridge the two sets of border edges\ncmds.polyBridgeEdge( 'polySurface1.e[9:14]', 'polySurface1.e[42:47]', 'polySurface1.e[105:110]', 'polySurface1.e[138:143]', sv1=12, sv2=67, divisions=10 )", 
    "polyCacheMonitor": "\n\nimport maya.cmds as cmds\n\n# increment cache counter on polyExtrudeFace1 node\ncmds.polyCacheMonitor( nodeName='polyExtrudeFace1' )\n# update/edit manipulate nodes which are present downstream\n# with respect to polyExtrudeFace1\n# decrement cache counter on polyExtrudeFace1 node\n# so that the cache is set free\ncmds.polyCacheMonitor( nodeName='polyExtrudeFace1', cacheValue=False )", 
    "polyCheck": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane()\ncmds.polyCheck()\ncmds.polyCheck( f=True )", 
    "polyChipOff": "\n\nimport maya.cmds as cmds\n\n# Duplicate\ncmds.polyPlane( n='plg', w=10, h=10 )\ncmds.polyChipOff( 'plg.f[71:72]', 'plg.f[81:82]', dup=True, ltz=1 )\n#facets are duplicated and translated in local space\n\n# Extract\ncmds.polyChipOff( 'plg.f[11:12]', 'plg.f[21:22]', dup=False, ty=1 )\n#facets are extracted and translated in world space\n\n# Separate\ncmds.polyChipOff( 'plg.f[15:16]', 'plg.f[23:24]', dup=False, kft=False, ls=(.5, .5, 0) )\n#facets are extracted then scaled separately\n\n# Together\ncmds.polyChipOff( 'plg.f[73:74]', 'plg.f[83:84]', dup=False, kft=True, ls=(.5, .5, 0) )\n#facets are extracted then scaled together", 
    "polyClipboard": "\n\nimport maya.cmds as cmds\n\n# Copy uv, color and shader attributes\ncmds.polyClipboard( copy=True, uv=True, color=True, shader=True )\n# Paste only shader attribute\ncmds.polyClipboard( paste=True, shader=True )\n# Copy color attribute only\ncmds.polyClipboard( copy=True, color=True )\n# Clear all the clipboard attributes\ncmds.polyClipboard( clear=True, uv=True, color=True, shader=True )", 
    "polyCloseBorder": "\n\nimport maya.cmds as cmds\n\n# Creation of a plane.\ncmds.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n\n# Display the poly Borders\ncmds.polyOptions( db=True )\n\n# Delete some facets of the plane.\ncmds.delete( 'plg.f[33:36]', 'plg.f[43:46]', 'plg.f[53:56]', 'plg.f[63:66]' )\n\n# Close the border on one of the edges of the hole\n# Note that only one edge for each hole needs to be given\ncmds.select( 'plg.e[89]', r=True )\ncmds.polyCloseBorder()\n# There is now a face where the hole was\n\n#Reset display\ncmds.polyOptions( db=False )", 
    "polyCollapseEdge": "\n\nimport maya.cmds as cmds\n\n# Create a plane.\ncmds.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n\n# Collapse one edge,\ncmds.polyCollapseEdge( 'plg.e[200]' )\n\n# Or multiple edges:\ncmds.select( 'plg.e[74]', 'plg.e[92]', 'plg.e[94:95]' )\n# Command works on selection list if\n# no command line arguments are given.\ncmds.polyCollapseEdge()\n\n# Note that the command works on one edge at a time, so the\n# resulting vertex from a selection of multiple edges will\n# not typically be in the center of the selection.", 
    "polyCollapseFacet": "\n\nimport maya.cmds as cmds\n\n# Create a plane.\ncmds.polyPlane( n='plg', sx=10, sy=10, h=20, w=20 )\n\n# You can collapse a facet,\ncmds.polyCollapseFacet( 'plg.f[54]' )\n\n# Or several ones.\ncmds.polyCollapseFacet( 'plg.f[33:35]', 'plg.f[43:45]', 'plg.f[53:55]' )", 
    "polyColorBlindData": "\n\nimport maya.cmds as cmds\n\n# In these examples we have type 1000, with one double attribute\n# called \"fluffy\", and type 1001 with attributes \"grimy\" and \"slimy\".\n# Color all items of id 1000 red. Note that we must also specify\n# None color (black) and Clash color(cyan). Note that we must also\n# specify the names of the attributes, even if we don't care about\n# the attribute values:\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=0, n='fluffy', cr=1, cg=0, cb=0 )\n# Now color only those values of \"fluffy\" between 2 and 5:\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=2, dt='double', n='fluffy', umn=1, mnv=2, umx=1, mxv=5, cr=1, cg=0, cb=0 )\n# Note for a continuous range query we must specify min, max and\n# out of range color instead of just color (here values between 2 and 5\n# are colored between white and gray, out of range values are yellow):\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=6, dt='double', n='fluffy', bmr=1, bmg=1, bmb=0, amr=1, amg=1, amb=0, mnr=0.250980407, mng=0.250980407, mnb=0.250980407, mxr=1, mxg=1, mxb=1, mnv=2, mxv=5 )\n# Now, for attribute \"fluffy\", color values of 2 red and values of 2 green:\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1000, num=1, m=1, dt='double', n='fluffy', v='2', cr=1, cg=0, cb=0, id=1000, num=1, m=1, dt='double', n='fluffy', v='3', cr=0, cg=1, cb=0 )\n# To just query and not color, filter the active selection list\n# and return the list of components that meet the criteria (in this\n# case having blind data of type 1000)\ncmds.polyColorBlindData( 1000, '-num', 1, '-m', 0, '-n', 'fluffy', query=True, id=True )\n# Now if we have 2 attributes:\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1001, num=2, m=0, n='grimy', n='slimy', cr=1, cg=0, cb=0 )\n# Note that when querying for value, values of all attrs must be specified\n# here we set (grimy = 22, slimy = 1) to be red, and (grimy = 55, slimy = 2)\n# to be green\ncmds.polyColorBlindData( ncr=0, ncg=0, ncb=0, ccr=0, ccg=1, ccb=1, id=1001, num=2, m=1, dt='double', n='grimy', v='22', cr=1, cg=0, cb=0, dt='int', n='slimy', v='1', cr=1, cg=0, cb=0, id=1001, num=2, m=1, dt='double', n='grimy', v='55', cr=0, cg=1, cb=0, dt='int', n='slimy', v='2', cr=0, cg=1, cb=0 )", 
    "polyColorDel": "\n\nimport maya.cmds as cmds\n\n# Create a plane.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=20, h=20 )\npolyColorPerVertex -r 0 -g 0 -b 1 -a 1 -cdo;\n\n# Delete the color from the given faces.\ncmds.polyColorDel( 'plg.f[11:13]', 'plg.f[16:18]' )", 
    "polyColorMod": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane pPlane1\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create colorSet1 , set to use RGBA channel\ncmds.polyColorSet(create=True, clamped=0, rpt='RGBA', colorSet='colorSet1')\n# Apply red color to the vertices of pPlane1\ncmds.polyColorPerVertex(r=1, g=0, b=0, a=1, cdo=True)\n\n# Modified the color of colorSet1 to green\ncmds.polyColorMod('pPlane1',huev=120, bcn='colorSet1')", 
    "polyColorPerVertex": "\n\nimport maya.cmds as cmds\n\n# To set the rgb channels of selected vertices:\ncmds.polyColorPerVertex( rgb=(0.8, 0.0, 0.4) )\n# To set just the \"g\" channel of selected vertices:\ncmds.polyColorPerVertex( g =0.5 )\n# To add to the current value of just the \"g\" channel of selected vertices:\ncmds.polyColorPerVertex( rel=True, g =0.2 )\n# To query the \"g\" and \"b\" channels of color on selected vertices:\ncmds.polyColorPerVertex( query=True, g=True, b=True )", 
    "polyColorSet": "\n\nimport maya.cmds as cmds\n\n# To set the current color set to be \"color2\".\ncmds.polyColorSet(currentColorSet=True, colorSet= 'color2' )\n# To query the current color set.\ncmds.polyColorSet( query=True, currentColorSet=True )\n# To create a per-instance color set family with one set member\n# per selected instance.\ncmds.polyColorSet(create=True,colorSet='perInst',perInstance=True,unshared=True)\n# To create a per-instance color set family with one set member\n# for all selected instances.\ncmds.polyColorSet(create=True,colorSet='perInst',perInstance=True)\n# To rename a currently existing color set from \"color3\" to \"color4\".\ncmds.polyColorSet( rename=True, colorSet= 'color3', newColorSet= 'color4' )\n# Rename the current color set (if any) to \"color3\".\ncmds.polyColorSet( rename=True, newColorSet= 'color3')\n# To delete a currently existing color set \"color3\".\ncmds.polyColorSet( delete= True, colorSet= 'color3')\n# To delete the current color set (if any)\ncmds.polyColorSet( delete=True )\n# Copy values of color set \"color1\" to \"color2\"\n# Note if the second color set exist it will be overwriten by\n# the copy. Leaving the destination color blank and the command\n# will generate a new unique name based on the source name.\ncmds.polyColorSet( copy= True, colorSet='color1', newColorSet ='color2')\n# Copy values of the current color set to \"color2\"\ncmds.polyColorSet( copy= True, newColorSet='color2')\n# Make a copy of \"color1\" to a new color set. The\n# name of which is automatically generated and returned.\ncmds.polyColorSet( copy= True, colorSet='color1' )\n# Create a new empty color set\ncmds.polyColorSet( create=True, colorSet='newColor')\n# To query all of the color sets\ncmds.polyColorSet( query=True, allColorSets=True )\n# To query all of the color set names and their representation values\ncmds.polyColorSet( query=True, allColorSets=True, representation=True )\n# To query the clamped value of the current color set\ncmds.polyColorSet( query=True, currentColorSet=True, clamped=True )", 
    "polyCompare": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere()\ncmds.polySphere()\ncmds.select( cl=True )\ncmds.select( 'pSphere1', 'pSphere2', r=True )\ncmds.polyCompare()", 
    "polyCone": "\n\nimport maya.cmds as cmds\n\n# Create a cone, with 10 subdivisions in the X direction,\n# 15 subdivisions in the Y direction and 20 subdivisions in the Z direction,\n# the radius of the cone is 20, the height of the cone is 10.\ncmds.polyCone( sx=10, sy=15, sz=5, r=20, h=10)\n\n# Create a cone, called \"myCone\", on each direction there are 5 subdivisions.\ncmds.polyCone( n='myCone', sx=5, sy=5, sz=5)\n\n# Query the radius of \"myCone\"\nr = cmds.polyCone( 'myCone', q=True, r=True )", 
    "polyConnectComponents": "\n\nimport maya.cmds as cmds\n\n# make a sphere\ncmds.polySphere( r=1, sx=20, sy=20, ax=(0,1,0), cuv=2, ch=1, name='sph' )\n# split two faces by specifying 3 vertices\ncmds.polyConnectComponents( 'sph.vtx[254]', 'sph.vtx[256]', 'sph.vtx[275]', ch=1 )\n# split two faces by specifying 3 edges\ncmds.polyConnectComponents( 'sph.e[278]', 'sph.e[637:638]', ch=1 )\n# split three faces\ncmds.polyConnectComponents( 'sph.f[66]', 'sph.f[215:217]', ch=1 )\n# a complex split involving vertices, edges and faces, in a loop\ncmds.polyConnectComponents( 'sph.f[270:271]', 'sph.vtx[273]', 'sph.e[232]', 'sph.e[252]',  'sph.e[592]', 'sph.f[210]', 'sph.vtx[229]', 'sph.e[249]', 'sph.e[269]', ch=1 )", 
    "polyCopyUV": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere, with default UVset.\ncmds.polySphere()\n\n# Create a second UV set\ncmds.select( 'pSphere1.f[0:399]', r=True )\ncmds.polyProjection( type='Planar', ra=0, isu=1, isv=1, cm=True, uvSetName='newUVs' )\n\n# Copy the UVs of the fisrt 200 faces from the new set to the default one\ncmds.polyCopyUV( 'pSphere1.f[0:199]', uvi='newUVs', uvs='map1' )", 
    "polyCrease": "\n\nimport maya.cmds as cmds\n\n# To set a crease value of 0.9 on the selected edges or vertices\ncmds.polyCrease( value=0.9 )", 
    "polyCreaseCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n\n# Create a new poly crease context, then switch to it\ncmds.polyCreaseCtx('polyCreaseCtx1')\ncmds.setToolTo('polyCreaseCtx1')", 
    "polyCreateFacet": "\n\nimport maya.cmds as cmds\n\n# Create a triangular facet\ncmds.polyCreateFacet( p=[(0.0, 0.0, 0.0), (10.0, 0.0, 0.0), (10.0, 10.0, 0.0)] )\n\n# Create a quadrangular facet with two triangular holes inside\n# Note that, in Python, specifying an empty tuple in the point list marks the\n# beginning of a hole specification\ncmds.polyCreateFacet( p=[(0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0), (), (4, 2, 0), (5, 4, 0), (6, 2, 0), (), (5, 6, 0), (4, 8, 0), (6, 8, 0)] )\ncmds.move( 0, 0, 10, r=True )", 
    "polyCreateFacetCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new poly facet create context, set it to add four vertices per new edge, then switch to it\ncmds.polyCreateFacetCtx('polyCreateFacetCtx1', s=4)\ncmds.setToolTo('polyCreateFacetCtx1')", 
    "polyCube": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( sx=10, sy=15, sz=5, h=20 )\n#result is a 20 units height rectangular box\n#with 10 subdivisions along X, 15 along Y and 20 along Z.\n\ncmds.polyCube( sx=5, sy=5, sz=5 )\n#result has 5 subdivisions along all directions, default size\n\n# query the width of a cube\nw = cmds.polyCube( 'polyCube1', q=True, w=True )", 
    "polyCut": "\n\nimport maya.cmds as cmds\n\n# Introduce new edges at the middle of a cylinder\n#\ncmds.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylA' )\ncmds.polyCut( 'pCylA.f[0:59]', cd='Y', ch=1 )\n\n# Delete the bottom half of the cylinder\n#\ncmds.select( cl=True )\ncmds.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylB' )\ncmds.move( 3, 0, 0, r=True )\ncmds.polyCut( 'pCylB.f[0:59]', cd='Y', df=1, ch=1 )\ncmds.select( cl=True )\n\n\n# Split the bottom half of the cylinder\n#\ncmds.select( cl=True )\ncmds.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), cuv=1, ch=1, name='pCylC' )\ncmds.move( 6, 0, 0, r=True )\ncmds.polyCut( 'pCylC.f[0:59]', cd='Y', ef=1, ch=1 )\n\n# select one of the cylinders, and select the polyCut node from the\n# channel box, and enter the showManipulator Tool, on the Toolbar.\n# You can interactively place the cutting plane, and the result of\n# cut operation will adjust accordingly.", 
    "polyCutCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n\n# Create a new cut facets context, then switch to it\ncmds.polyCutCtx('polyCutCtx1')\ncmds.setToolTo('polyCutCtx1')", 
    "polyCylinder": "\n\nimport maya.cmds as cmds\n\n# Create a rectangle, with 10 subdivisions in the X direction,\n# 15 subdivisions in the Y direction and 20 subdivisions in the Z direction,\n# the height of the cylinder is 20.\ncmds.polyCylinder( sx=10, sy=15, sz=5, h=20)\n\n# Create a cylinder, called \"myCylinder\", on each direction there are 5 subdivisions.\ncmds.polyCylinder(n='myCylinder', sx=5, sy=5, sz=5)\n\n# Query the radius of \"myCylinder\"\nr = cmds.polyCylinder( 'myCylinder', q=True, r=True )", 
    "polyCylindricalProjection": "\n\nimport maya.cmds as cmds\n\n# Create a sphere with default UVs.\ncmds.polySphere( n='sphere', r=10 )\n\n# Create a lambert node.\ncmds.shadingNode( 'lambert', n='myLambert', asShader=True )\ncmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\ncmds.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n\n# Create a texture checker.\ncmds.shadingNode( 'checker', asTexture=True )\ncmds.shadingNode( 'place2dTexture', asUtility=True )\ncmds.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n\n# Assign the texture the the lambert node.\ncmds.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n\n# Set the textured display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n\n# Assign the lambert shader to all faces of the sphere.\ncmds.sets('sphere.f[0:399]', edit=True, forceElement= 'myLambertSG' )\n\n# Replace default UVs on the top of the sphere :\n# Rotates the map of 90 degrees, reduces its U aperture to 36 degrees, and its V scale to 0.1\ncmds.polyCylindricalProjection( 'sphere.f[180:359]', 'sphere.f[380:399]', ra=90.0, pc=(0, 0, 0), psu=36, isv=0.1 )\n\n# Set the wireframe display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polyDelEdge": "\n\nimport maya.cmds as cmds\n\n# Without cleanup\ncmds.polyPlane( n='plg1', w=10, h=10 )\ncmds.move( -6, 0, 0 )\ncmds.select( 'plg1.e[26]', 'plg1.e[28]', 'plg1.e[30]', 'plg1.e[32]', 'plg1.e[34]', 'plg1.e[36]', 'plg1.e[38]', 'plg1.e[47]', 'plg1.e[49]', 'plg1.e[51]', 'plg1.e[53]', 'plg1.e[55]', 'plg1.e[57]', 'plg1.e[59]' )\ncmds.polyDelEdge( cv=False )\n\n# With cleanup\ncmds.polyPlane( n='plg2', w=10, h=10 )\ncmds.move( 6, 0, 0 )\ncmds.select( 'plg2.e[26]', 'plg2.e[28]', 'plg2.e[30]', 'plg2.e[32]', 'plg2.e[34]', 'plg2.e[36]', 'plg2.e[38]', 'plg2.e[47]', 'plg2.e[49]', 'plg2.e[51]', 'plg2.e[53]', 'plg2.e[55]', 'plg2.e[57]', 'plg2.e[59]' )\ncmds.polyDelEdge( cv=True )\n\ncmds.select( 'plg1', 'plg2' )\ncmds.polyOptions( ao=True, dv=True )", 
    "polyDelFacet": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere( n='plg', sx=10, sy=20, r=10 )\ncmds.polyDelFacet( 'plg.f[115]', 'plg.f[125]', 'plg.f[117]', 'plg.f[127]', 'plg.f[55:57]', 'plg.f[65]', 'plg.f[67]' )", 
    "polyDelVertex": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg' )\ncmds.select( 'plg.vtx[59:61]' )\n# These vertices are not winged, so they can not be deleted\ncmds.polyDelVertex()\n\ncmds.select( 'plg.e[93]', 'plg.e[95]', 'plg.e[97]', 'plg.e[114]', 'plg.e[116]', 'plg.e[118]' )\ncmds.delete()\ncmds.select( 'plg.vtx[59:61]' )\n# Now they are winged, as they are only connected to two edges.\ncmds.polyDelVertex()\n\n# Corners are winged, so they can be deleted\ncmds.select( 'plg.vtx[0]', 'plg.vtx[10]', 'plg.vtx[107]', 'plg.vtx[117]' )\ncmds.polyDelVertex()\n\ncmds.select( 'plg' )\ncmds.polyOptions( ao=True, dv=True )", 
    "polyDuplicateAndConnect": "\n\nimport maya.cmds as cmds\n\ncmds.polyDuplicateAndConnect( 'pPlane1' )", 
    "polyDuplicateEdge": "\n\nimport maya.cmds as cmds\n\ncmds.polyTorus()\ncmds.polyDuplicateEdge( 'pTorus1.e[121:126]', of=0.5 )", 
    "polyEditUV": "\n\nimport maya.cmds as cmds\n\n# To query the u and v values of selected uvs:\ncmds.polyEditUV( query=True )\n# To tweak the u and v values of selected uvs:\ncmds.polyEditUV( relative=True, uValue=0.05925926, vValue=0.05555556 )\n# To set absolute values for u and v values of selected uvs:\ncmds.polyEditUV( relative=False, uValue=0.556, vValue=0.56 )\n# To rotate selected uv points about a pivot:\ncmds.polyEditUV( pivotU=0.5, pivotV=0.5, angle=-15 )\n# To scale selected uv points about a pivot:\ncmds.polyEditUV( pivotU=0.5, pivotV=0.5, scaleU=-0.06, scaleV=-0.06 )", 
    "polyEditUVShell": "\n\nimport maya.cmds as cmds\n\n# To query the u and v values of selected uvs:\ncmds.polyEditUVShell( query=True )\n# To tweak the u and v values of selected uvs:\ncmds.polyEditUVShell( relative=True, uValue=0.05925926, vValue=0.05555556 )\n# To rotate selected uv points about a pivot:\ncmds.polyEditUVShell( pivotU=0.5, pivotV=0.5, angle=-15 )", 
    "polyEvaluate": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', sx=4, sy=4, w=5, h=5 )\ncmds.select( 'plg.f[2]', 'plg.f[4]' )\n\n# query the number of faces\ncmds.polyEvaluate( f=True )\n# Result: 16\n\n# query the number of triangles\ncmds.polyEvaluate( t=True )\n# Result: 32\n\n# query the number of selected faces\ncmds.polyEvaluate( faceComponent=True )\n# Result: 2\n\n# query the number of vertices and faces\ncmds.polyEvaluate( v=True, f=True )\n# Result: {'vertex': 25, 'face': 16}\n\n# formatted query of the number of vertices and faces\ncmds.polyEvaluate( v=True, f=True, fmt=True )\n# Result: \"face=16 vertex=25\"\n\n# query all\ncmds.polyEvaluate()\n# Result: {'vertexComponent': 0, 'shell': 1, 'triangle': 32, 'faceComponent': 2, 'vertex': 25, 'face': 16, 'triangleComponent': 0, 'edge': 40, 'uvcoord': 25, 'uvComponent': 0, 'edgeComponent': 0}\n\n#formatted query of all information\ncmds.polyEvaluate( fmt=True )\n# Result: vertex=25 edge=40 face=16 uvcoord=25 triangle=32 shell=1\n#    vertexComponent=0 edgeComponent=0 faceComponent=2 uvComponent=0\n#    boundingBox= X[-2.50,2.50] Y[0.00,0.00] Z[-2.50,2.50]\n#    boundingBoxComponent= X[-2.50,1.25] Y[0.00,0.00] Z[0.00,2.50]\n#    boundingBox2d= U[0.00,1.00] V[0.00,1.00]\n#    boundingBoxComponent2d= U[0.00,0.75] V[0.00,0.50]\n#    area=25.00 worldArea=25.00\n\n# accurate bounding box evaluation\ncmds.polyCylinder( r=1, h=2, sx=20, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1 )\n# Result: pCylinder1 polyCylinder1 #\ncmds.rotate( 38.340875, 0, 0, r=True, os=True )\ncmds.rotate( 0, 0, -36.177835, r=True, os=True )\n\ncmds.polyEvaluate( b=True )\n# Result: ((-1.3974823703620598, 1.39748217791327), (-1.7164316223605844, -1.7164316223605844), (-1.6512467204212007, 1.6512465272260637)) #\ncmds.polyEvaluate( b=True, ae=True )\n# Result: ((-1.3974823951721191, 1.39748215675354), (-1.4071073532104492, -1.4071073532104492), (-1.3598332405090332, 1.3598330020904541)) #\n\n# Local and World Space Area\ncmds.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 0, 1), cuv=1, ch=1 )\ncmds.setAttr( 'pCube1.scaleY', 2 )\ncmds.polyEvaluate( a=True )\n# Result: 6\ncmds.polyEvaluate( wa=True )\n# Result: 10", 
    "polyExtrudeEdge": "\n\nimport maya.cmds as cmds\n\n# Separate\ncmds.polyPlane( n='plg', w=10, h=10 )\ncmds.polyExtrudeEdge( 'plg.e[71:72]', 'plg.e[81:82]', kft=False,, ltz=2, ls=(.5, .5, 0) )\n# Edges are extruded then scaled separately\ncmds.delete( 'plg' )\n\n\n# Together\ncmds.polyPlane( n='plg', w=10, h=10 )\ncmds.polyExtrudeEdge( 'plg.e[71:72]', 'plg.e[81:82]', kft=True, ltz=2, ls=(.5, .5, 0) )\n# Edges are extruded then scaled together\ncmds.delete( 'plg' )", 
    "polyExtrudeFacet": "\n\nimport maya.cmds as cmds\n\n# Separate\ncmds.polyPlane( n='plg', w=10, h=10 )\ncmds.polyExtrudeFacet( 'plg.f[71:72]', 'plg.f[81:82]', kft=False, ltz=2, ls=(.5, .5, 0) )\n# Facets are extruded then scaled separately\n\n\n# Together\ncmds.polyExtrudeFacet( 'plg.f[17:18]', 'plg.f[27:28]', kft=True, ltz=2, ls=(.5, .5, 0) )\n# Facets are extruded then scaled together", 
    "polyExtrudeVertex": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( h=10, w=10, d=10 )\ncmds.polyExtrudeVertex( l=2, w=3, d=4 )\n# A cube is created and then all of its vertices are extruded into 4 divisions with length 2 and width 3", 
    "polyFlipEdge": "\n\nimport maya.cmds as cmds\n\n# To flip the selected edge\ncmds.polyFlipEdge()", 
    "polyFlipUV": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere with default UVs.\ncmds.polySphere( n='sph' )\n\n# Flip uvs on all faces of the sphere shape.\ncmds.polyFlipUV( 'sphShape.f[*]' )", 
    "polyForceUV": "\n\nimport maya.cmds as cmds\n\ncmds.polyForceUV( uni=True )\n# unitize the UV values of the selected faces separately\ncmds.polyForceUV( cp=True )\n# create UVs on the selected faces based on the current camera\ncmds.polyForceUV( 'pCylinder1.f[11:14]', 'pCylinder1.vtx[33:34]', 'pCylinder1.vtx[13:14]', ni=1 )\n# create the UVs for the first item (ie, 4 polygonal faces, in this case)\n# in the selection list, by computing the plane using the rest of the\n# items in the list", 
    "polyGeoSampler": "\n\nimport maya.cmds as cmds\n\n# Example 1. Sample for color values.\n#    a. No arguments. Will perform sampling of color + transparency at\n#     the vertex level, and store color values for affected vertices.\n#     No shadows will be computed.\ncmds.polyGeoSampler()\n# b. With shadows and illumination only\ncmds.polyGeoSampler( lightingOnly=True, computeShadows=True )\n# c. Sampling only complete selected faces\ncmds.polyGeoSampler( sampleByFace=True )\n# d. \"Flat shading\".\n# Example 2. Sample for displacement values.\n# a. Using displace option\ncmds.polyGeoSampler( displaceGeometry=True )\n# Example 3. Scaling the sampled data.\n# a. Scaling option\ncmds.polyGeoSampler( scaleFactor=0.1 )\n# Example 4. Don't force unshared UV value usage, and force\n# the storage of shared colors for vertices.\ncmds.polyGeoSampler( shareUV=True, averageColor=True )\n# Example 5. Clamping colors. In this example the alpha and\n# RGB channels of the colors are clamped between a min of 0,0,0,1\n# and a max of 1,2,1,0.5 .\ncmds.polyGeoSampler( amn=0.0, amx=0.5, cmn=[0.0,0.0,0.0], cmx=[1.0,2.0,1.0] )\n# Example 6. Multiply the new sample color values    with the existing\n# colors stored on the geometry, but leave the alpha values\n# as they were on the geometry.\ncmds.polyGeoSampler( colorBlend='multiply', alphaBlend='none' )", 
    "polyHelix": "\n\nimport maya.cmds as cmds\n\n# Create a helix with radius 1.0 in anti clockwise direction with no UV's for texture.\ncmds.polyHelix(r=1, d=1, cuv=0)\n\n# Create a helix, called \"myHelix\" with default values.\ncmds.polyHelix(n='myHelix')", 
    "polyHole": "\n\nimport maya.cmds as cmds\n\n# To toggle hole on/off on the selected faces\ncmds.polyHole( )", 
    "polyInfo": "\n\nimport maya.cmds as cmds\n\n# To find all non-manifold edges on a polygonal object called pPlane1\ncmds.polyInfo( nme=True )\n# Result: pPlane1.e[74] #\n# To find all non-manifold vertices on a polygonal object called pPlane1\ncmds.polyInfo( nmv=True )\n# Result: pPlane1.vtx[38] pPlane1.vtx[49] #", 
    "polyInstallAction": "\n\nimport maya.cmds as cmds\n\n# Will set pickmask to edges, install internal constraint\n# so that only border edges may be selected.\ncmds.polyInstallAction( 'polyCloseBorder', ic=True )\n\n# Same as previous, plus force the display of borders if the\n# user didn't asked explicitely for it before.\ncmds.polyInstallAction( 'polyCloseBorder', ic=True, id=True )\n\n# Shortcut for polyInstallAction -ic -id polyCloseBorder;\ncmds.polyInstallAction( 'polyCloseBorder' )\n\n# Assuming the previous install was for closeBorder,\n# will release internal border constraint, but go on displaying\n# borders if the user didn't asked explicitely for it before.\ncmds.polyInstallAction( uc=True )\n\n# Assuming the previous install was for closeBorder,\n# will release internal border constraint, stop displaying\n# borders if the user didn't asked explicitely for it before.\ncmds.polyInstallAction( uc=True, ud=True )\n\n# Shortcut for polyInstallAction -uc -ud;\ncmds.polyInstallAction()", 
    "polyIterOnPoly": "", 
    "polyLayoutUV": "\n\nimport maya.cmds as cmds\n\n# Create a sphere.\ncmds.polySphere( n='sph' )\n\n# Use a plane projection on half the faces\ncmds.select( 'sph.f[0:200]' )\ncmds.polyProjection( type='Planar' )\n\n# Layout all UVs in the texture plane.\ncmds.polyLayoutUV( 'sph.f[*]', l=2, fr=True, se=2, sc=1 )", 
    "polyListComponentConversion": "\n\nimport maya.cmds as cmds\n\n# Convert the vertices to envolved poly face(s) and list results.\ncmds.polyListComponentConversion( 'plg.vtx[5:6]', 'plg.vtx[9:10]', fv=True, tf=True, internal=True )\n# Result: plg.f[4] #\n\n# Convert anything to related poly face(s) and list results.\ncmds.polyListComponentConversion( 'plg.vtx[0]', 'plg.vtx[3]', 'plg.vtx[8]', tf=True )\n# Result: plg.f[0] plg.f[2] plg.f[3] plg.f[6] #\n\n# Convert an object to faces and list results.\ncmds.polyListComponentConversion( 'plg', tf=True )\n# Result: plg.f[*] #\n\n# Convert vertices to faces on selectionList and list results.\ncmds.select( 'plg.vtx[0]', 'plg.vtx[3]', 'plg.vtx[8]', r=True )\ncmds.polyListComponentConversion( fv=True, tf=True )\n# Result: plg.f[0] plg.f[2] plg.f[3] plg.f[6] #\n\n# Use several calls of the command to list edges in the order\n# in which they appear in a face.\ncmds.polyPlane( w=1, h=1, sx=1, sy=1 )\n# Will return the edges in numeric order:\ncmds.polyListComponentConversion( 'pPlane1.f[0]', ff=True, te=True )\n# Result: pPlane1.e[0:3]\n# Now convert to vertexFace and then to edge to get the edges in the order they\n# appear within the face:\nvfList = cmds.polyListComponentConversion( 'pPlane1.f[0]', ff=True, tvf=True )\nvfList = cmds.ls( vfList, flatten=True )\n# Result: pPlane1.vtxFace[0][0] pPlane1.vtxFace[1][0] pPlane1.vtxFace[3][0] pPlane1.vtxFace[2][0]\nfor vf in vfList:\n        edge = cmds.polyListComponentConversion( vf, fvf=True, te=True )\n        print edge\n# Prints out the edges in the order they show up in the face.\npPlane1.e[0]\npPlane1.e[2]\npPlane1.e[3]\npPlane1.e[1]\n\n# Illustrate the vertexFaceAllEdges flag\ncmds.polyPlane( w=1, h=1, sx=1, sy=1 )\ncmds.select( 'pPlane1.vtxFace[0][0]', r=True )\n# Get the edge that originates at the selected face vertex\nprint cmds.polyListComponentConversion( fvf=True, te=True )\n# Result: pPlane1.e[0]\n# Get both edges that adjoin the selected face vertex\nprint cmds.polyListComponentConversion( fvf=True, te=True, vfa=True )\n# Result: pPlane1.e[0:1]", 
    "polyMapCut": "\n\nimport maya.cmds as cmds\n\n# Opening up the textureView will make this example much easier to visualize.\n\n# Create a plane and select it.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\ncmds.select( 'plg' )\n\n# Display map borders.\ncmds.polyOptions( ao=True, dmb=True )\n\n# Cut the map.\ncmds.polyMapCut( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]', 'plg.e[50]', 'plg.e[52]' )\n# now that it's cut, we may move the row separately\n\n# Move some UVs\ncmds.polyMoveUV('plg.map[24:28]', 'plg.map[30:35]', 'plg.map[37]', tv=0.3 )", 
    "polyMapDel": "\n\nimport maya.cmds as cmds\n\n# Create a plane.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=20, h=20 )\n\n# Delete the mapping from the given faces.\ncmds.polyMapDel( 'plg.f[11:13]', 'plg.f[16:18]' )", 
    "polyMapSew": "\n\nimport maya.cmds as cmds\n\n# Opening the texture view will make this example much clearer.\n\n# Create a plane and select it.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\ncmds.select( 'plg' )\n\n# Display map borders.\ncmds.polyOptions( ao=True, dmb=True )\n\n# Cut the map.\ncmds.polyMapCut( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]', 'plg.e[50]', 'plg.e[52]' )\n\n# Move the row\ncmds.polyMoveUV( 'plg.map[24:28]', 'plg.map[30:35]', 'plg.map[37]', t=(0.0, 0.5 ))\n\n# Now sew some border edges\ncmds.polyMapSew( 'plg.e[44]', 'plg.e[46]', 'plg.e[48]' )", 
    "polyMapSewMove": "\n\nimport maya.cmds as cmds\n\n# Build a plane\ncmds.polyPlane()\n\n# Map and move some faces. Scale them so that seams do not mathc any more\ncmds.select( 'pPlane1.f[0:49]', r=True )\ncmds.polyProjection( type='Planar' )\ncmds.setAttr( 'polyPlanarProj1.rotateX', -90 )\ncmds.setAttr( 'polyPlanarProj1.imageCenter', 0.630609, 0.38805)\ncmds.setAttr( 'polyPlanarProj1.rotationAngle', 10 )\ncmds.setAttr( 'polyPlanarProj1.imageScaleU', 1.2 )\ncmds.setAttr( 'polyPlanarProj1.imageScaleV', 1.2 )\n\n# Select the seams\ncmds.select( 'pPlane1.e[105]', 'pPlane1.e[107]', 'pPlane1.e[109]', 'pPlane1.e[111]', 'pPlane1.e[113]', 'pPlane1.e[115]', 'pPlane1.e[117]', 'pPlane1.e[119]', 'pPlane1.e[121]', 'pPlane1.e[123]' )\n# merge them back, with the appropriate move.\ncmds.polyMapSewMove()", 
    "polyMergeEdge": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( sx=3, sy=3, n='plg1' )\ncmds.move( -2, 0, 0, 'plg1' )\ncmds.delete( 'plg1.f[3:5]' )\ncmds.polyPlane( sx=3, sy=3, n='plg2' )\ncmds.delete( 'plg2.f[3:5]' )\ncmds.polyPlane( sx=3, sy=3, n='plg3' )\ncmds.move( 2, 0, 0, 'plg3' )\ncmds.delete( 'plg3.f[3:5]' )\n\n# First\ncmds.polyMergeEdge( 'plg1', mm=0, fe=8, se=12 )\n\n# Between\ncmds.polyMergeEdge( 'plg2', mm=1, fe=8, se=12 )\n\n# Last\ncmds.polyMergeEdge( 'plg3', mm=2, fe=8, se=12 )", 
    "polyMergeEdgeCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create a new poly merge edge context, set to use first selected edge as the new edge, then switch to it\ncmds.polyMergeEdgeCtx('polyMergeEdgeCtx1', mm=0)\ncmds.setToolTo('polyMergeEdgeCtx1')", 
    "polyMergeFacet": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', h=10, w=10, sx=5, sy=5 )\ncmds.polyChipOff( 'plg.f[16]', 'plg.f[18]', 'plg.f[7]', dup=1, ltz=1, ls=(.5, .5, .5) )\n\n# First\ncmds.polyMergeFacet( 'plg', mm=0, ff=16, sf=26 )\n# A new face with face #16 as an outer loop and face #26 as a hole\n# is replacing faces #16 and #26, and is located on face #16\n\n# Between\ncmds.polyMergeFacet( 'plg', mm=1, ff=7, sf=25 )\n# A new face with face #7 as an outer loop and face #25 as a hole\n# is replacing faces #7 and #25, and is located in between.\n\n# Last\ncmds.polyMergeFacet( 'plg', mm=2, ff=18, sf=25 )\n# A new face with face #18 as an outer loop and face #25 as a hole\n# is replacing faces #18 and #25, and is located on face #25", 
    "polyMergeFacetCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create a new poly merge facet context, set the merge mode to merging the second face to the first face, then switch to it\ncmds.polyMergeFacetCtx('polyMergeFacetCtx1', mm=0)\ncmds.setToolTo('polyMergeFacetCtx1')", 
    "polyMergeUV": "\n\nimport maya.cmds as cmds\n\n# Create a poly cube\ncmds.polyCube()\ncmds.select( 'pCube1.map[4]', 'pCube1.map[13]', r=True )\n\n# Merge two UVs\ncmds.polyMergeUV()", 
    "polyMergeVertex": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( sx=5, sy=5, n='plg1' )\ncmds.polyPlane( sx=5, sy=5, n='plg2' )\ncmds.move( 0.55, 0, -1.25, 'plg1', ws=True )\ncmds.move( -0.55, 0, -1.25, 'plg2', ws=True )\ncmds.polyPlane( sx=5, sy=5, n='plg3' )\ncmds.polyPlane( sx=5, sy=5, n='plg4' )\ncmds.polyPlane( sx=5, sy=5, n='plg5' )\ncmds.move( 0.55, 0, 1.25, 'plg4', ws=True )\ncmds.move( -0.55, 0, 1.25, 'plg5', ws=True )\n\n# First method:\ncmds.polyUnite( 'plg1Shape', 'plg2Shape' )\ncmds.select( 'polySurface1.vtx[6]', 'polySurface1.vtx[12]', 'polySurface1.vtx[18]', 'polySurface1.vtx[24]', 'polySurface1.vtx[47]', 'polySurface1.vtx[53]', 'polySurface1.vtx[59]', 'polySurface1.vtx[65]', r=True )\ncmds.polyMergeVertex( d=0.15 )\n\n# Second method:\ncmds.polyMergeVertex( 'plg3.vtx[24]', 'plg3.vtx[30:31]', 'plg3.vtx[8:10]', 'plg3.vtx[14:16]', 'plg3.vtx[20:22]', d=0.25 )\n\n# To create non-manifold geometry:\ncmds.polyUnite( 'plg4Shape', 'plg5Shape' )\ncmds.select( 'polySurface2.vtx[0]', 'polySurface2.vtx[6]', 'polySurface2.vtx[12]', 'polySurface2.vtx[18]', 'polySurface2.vtx[24]', 'polySurface2.vtx[30]', 'polySurface2.vtx[41]', 'polySurface2.vtx[47]', 'polySurface2.vtx[53]', 'polySurface2.vtx[59]', 'polySurface2.vtx[65]', 'polySurface2.vtx[71]', r=True )\ncmds.polyMergeVertex( d=0.25 )\n# Note that there is only one vertex at this merged point and the\n# resulting polygonal object is non-manifold;()", 
    "polyMirrorFace": "\n\nimport maya.cmds as cmds\n\n# Mirror about +X direction by merging the border vertices\ncmds.polyCube( name='poly1' )\ncmds.delete( 'poly1.f[4]' )\ncmds.polyMirrorFace( 'poly1', direction=0, mergeMode=1 )\n\n# Mirror about +Y direction by connecting the border edges\n# in world reference, by explicitly specifying a pivot point (0, 2, 0)\ncmds.polyCube( name='poly2' )\ncmds.delete( 'poly2.f[4]' )\ncmds.rotate( 0, 0, 45, 'poly2', r=True, os=True )\ncmds.polyMirrorFace( 'poly2', direction=2, p=(0, 2, 0), mergeMode=2, worldSpace=1 )", 
    "polyMoveEdge": "\n\nimport maya.cmds as cmds\n\n# Create a sphere.\ncmds.polySphere( n='plg', r=5 )\n\ncmds.select( 'plg.e[200:219]', 'plg.e[560:599]' )\n# Translate selected edges along Z in local coordinates.\ncmds.polyMoveEdge( ltz=1.0 )\n\n# Scale selected edges by (0.5 0.5 0.5)\ncmds.polyMoveEdge( 'plg.e[100:119]', s=(0.5, 0.5, 0.5) )", 
    "polyMoveFacet": "\n\nimport maya.cmds as cmds\n\n# Create a sphere.\ncmds.polySphere( n='plg', r=5 )\n\n# Translate selected facets along Y by 1.0 in world coordinates\ncmds.polyMoveFacet( 'plg.f[300:359]', 'plg.f[380:399]', ty=1.0 )\n\n# Scale selected facets by (0.5, 0.5, 0.5);\ncmds.polyMoveFacet( 'plg.f[0:59]', 'plg.f[360:379]', sx=0.5, sy=0.5, sz=0.5 )", 
    "polyMoveFacetUV": "\n\nimport maya.cmds as cmds\n\n# Opening up the textureView will make this example easier to visualize.\n\n# Create a plane and select it.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\ncmds.select( 'plg' )\n\n# Display map borders.\ncmds.polyOptions( ao=True, dmb=True )\n\n# Translate selected UVs as the vector (0.0, 1.0).\ncmds.polyMoveFacetUV( 'plgShape.map[30:35]', tu=0.0, tv=1.0 )\n\n# Scale selected UVs as the scaling (0.5, 0.5);\ncmds.polyMoveFacetUV( 'plgShape.map[30:35]', su=0.5, sv=0.5 )", 
    "polyMoveUV": "\n\nimport maya.cmds as cmds\n\n# Opening up the textureView will make this example easier to visualize.\n\n# Create a plane and select it.\ncmds.polyPlane( n='plg', sx=5, sy=5, w=10, h=10 )\ncmds.select( 'plg' )\n\n# Display map borders.\ncmds.polyOptions( ao=True, dmb=True )\n\n# Translate selected UVs as the vector (0.0, 1.0).\ncmds.polyMoveUV( 'plgShape.map[30:35]', tu=0.0, tv=1.0 )\n\n# Scale selected UVs as the scaling (0.5, 0.5);\ncmds.polyMoveUV( 'plgShape.map[30:35]', su=0.5, sv=0.5 )", 
    "polyMoveVertex": "\n\nimport maya.cmds as cmds\n\n# Create a sphere.\ncmds.polySphere( r=5, n='plg' )\n\n# Move vertices as the scaling vector (1.0, 1.5, 1.0).\ncmds.polyMoveVertex( 'plg.vtx[200:379]', 'plg.vtx[381]', s=(1.0, 1.5, 1.0) )\n\n# Translate vertices as the vector (0.0, 2.0, 0.0).\ncmds.polyMoveVertex( 'plg.vtx[200:379]', 'plg.vtx[381]', ty=2.0 )", 
    "polyMultiLayoutUV": "\n\nimport maya.cmds as cmds\n\n# Create 3 objects with overlapping UVs\nsphere = cmds.polySphere()\ncylinder = cmds.polyCylinder()\ntorus = cmds.polyTorus()\ncmds.polyAutoProjection( sphere[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\ncmds.polyAutoProjection( cylinder[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\ncmds.polyAutoProjection( torus[0], ibd=1, cm=0, l=2, sc=1, o=1, p=4, ps=0.2 )\ncmds.select( sphere[0], cylinder[0], torus[0] )\n# Layout the UVs in a square, allow free rotations, scale uniformly\ncmds.polyMultiLayoutUV( scale=1, rotateForBestFit=2, layout=2 )", 
    "polyNormal": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', w=3, h=3 )\ncmds.polyOptions( ao=True, dn=True, db=True, bc=True )\n\n#\"I\"reverse and cut\"/I\"\ncmds.select( 'plg.f[40:59]' )\ncmds.polyNormal( nm=3 )\n\n#\"I\"reverse and propagate\"/I\"\ncmds.polyNormal( 'plg.f[11]', nm=4 )\n# Notice that only the shell containing face 11 is reversed.\n\n# We can reverse all the shells by passing in the object\ncmds.polyNormal( 'plg', nm=3 )", 
    "polyNormalPerVertex": "\n\nimport maya.cmds as cmds\n\n# To set the xyz values of normals of selected vertices:\ncmds.polyNormalPerVertex( xyz=(0.2, 0.3, 0.4) )\n# To set just the \"x\" value of normal of selected vertices:\ncmds.polyNormalPerVertex( x=.37 )\n# To add to the current value of the \"y\" normal value of selected vertices:\ncmds.polyNormalPerVertex( rel=True, y=.13 )\n# To query the normal values on selected vertices - This returns all normals\n# regardless of whether they are shared or not:\ncmds.polyNormalPerVertex( query=True, xyz=True )\n# To query if the normals on the selected vertices are locked or not\ncmds.polyNormalPerVertex( query=True, freezeNormal=True )\n# To query if all the normals on the selected vertices are locked or not\ncmds.polyNormalPerVertex( query=True, allLocked=True )\n# More examples\ncmds.file( f=True, new=True )\ncmds.polyCube()\ncmds.select( 'pCube1.vtxFace[2][1]', r=True )\ncmds.polyNormalPerVertex( query=True, freezeNormal=True )\n# Result: 0 #\n# Now, lock the normal of a VertexFace on the cube\ncmds.select('pCube1.vtxFace[2][1]', r=True )\ncmds.polyNormalPerVertex( xyz=(0.7071, 0, 0.7071) )\n# Query if the normal is locked for this vertexFace\ncmds.polyNormalPerVertex( query=True, freezeNormal=True )\n# Result: 1 #\n# Query if the normal is locked for all the normals on this vertex\n# Should return 0, because there are some other normals on\n# this vertex that are not locked.\ncmds.select('pCube1.vtx[2]', r=True)\ncmds.polyNormalPerVertex( query=True, allLocked=True )\n# Result: 0 #", 
    "polyNormalizeUV": "\n\nimport maya.cmds as cmds\n\n# Create a poly sphere with default UVs.\ncmds.polySphere( n='sph' )\n\n# rescale it\ncmds.polyEditUV('sph.map[*]', pu=0.5, pv=0.5, su=1.5, sv=1.5)\n\n# normalize the UV values of all the faces\ncmds.polyNormalizeUV( 'sph.f[*]' )", 
    "polyOptUvs": "\n\nimport maya.cmds as cmds\n\n# Create a sphere and select it.\ncmds.polySphere()\n\n# Optimise the position of some Uvs\ncmds.polyOptUvs( 'pSphere1.map[189:398]' )", 
    "polyOptions": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( n='plg', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\ncmds.delete( 'plg.f[9:17]' )\n\n# Vertices\ncmds.polyOptions( displayVertex=True )\n# Toggle vertices\ncmds.polyOptions( r=True, displayVertex=True )\n# Toggle, whatever the value given to the flag in this command.\n# It was previously true, it is set to false : vertices are not drawn.\n\n# Facet centers\ncmds.polyOptions( displayCenter=True )\ncmds.polyOptions( displayCenter=False )\n\n# Triangulation\ncmds.polyOptions( displayTriangle=True )\ncmds.polyOptions( displayTriangle=False )\n\n# Reusing Triangulation\ncmds.polyOptions( reuseTriangles=True )\ncmds.polyOptions( reuseTriangles=False )\n\n# Borders\ncmds.polyOptions( displayBorder=True )\n# Border size\ncmds.polyOptions( sb=3 )\n# Increase border size\ncmds.polyOptions( r=True, sb=2 )\ncmds.polyOptions( displayBorder=False, sb=3 )\n# Map borders\ncmds.polyOptions( displayMapBorder=True )\ncmds.polyOptions( displayMapBorder=False )\n\n# Normals\n# Normal type\ncmds.polyOptions( displayNormal=True )\ncmds.polyOptions( pt=True )# on vertices\ncmds.polyOptions( pf=True )# on vertices and facets\ncmds.polyOptions( f=True )# on facets\n# Normal size\ncmds.polyOptions( sn=2 )\n# Increase normal size\ncmds.polyOptions( r=True, sn=1.5 )\ncmds.polyOptions( displayNormal=False )\n\n# Edges\ncmds.polyOptions( softEdge=True )\ncmds.polyOptions( hardEdge=True )\ncmds.polyOptions( allEdges=True )\n\n# Geometry\ncmds.polyOptions( displayGeometry=False )\ncmds.polyOptions( displayGeometry=True )\n\n# Backculling\ncmds.polyOptions( wireBackCulling=True )\ncmds.polyOptions( hardBack=True )\ncmds.polyOptions( fullBack=True )\ncmds.polyOptions( displayVertex=True, backCullVertex=True )\ncmds.polyOptions( backCullVertex=False )\ncmds.polyOptions( displayVertex=False )\ncmds.polyOptions( backCulling=True )\n\n# Color Shaded Display\ncmds.polyOptions( colorShadedDisplay=True )\ncmds.polyOptions( colorMaterialChannel='DIFFUSE' )", 
    "polyOutput": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane()\ncmds.polyOutput( a=True )\n\n# If a polygon operation is performed such as Add Divisions:\ncmds.polySubdivideFacet('pPlane1', dv=1, m=0, ch=1)\n\n# then the command can get information on geometry data feeding into the polySubdFace1 node.\ncmds.polyOutput( 'polySubdFace1.inputPolymesh' )\n\n# The command can also get information on geometry data coming out of the\n# polySubdFace1 node.\ncmds.polyOutput( 'polySubdFace1.output' )", 
    "polyPipe": "\n\nimport maya.cmds as cmds\n\n# Create a pipe with height 20 radius 1.0 thickness 0.5 with\n# 10 subdivisions along height\ncmds.polyPipe( sh=10, h=20 )\n\n# Create a pipe, called \"myPipe\", on thickness cap there are 5\n# subdivisions.\ncmds.polyPipe( n='myPipe', sc=5);", 
    "polyPlanarProjection": "\n\nimport maya.cmds as cmds\n\n# Create a plane with default UVs.\ncmds.polyPlane( n='plane', h=20, w=20 )\n\n# Create a lambert node.\ncmds.shadingNode( 'lambert', n= 'myLambert', asShader=True )\ncmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\ncmds.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n\n# Create a texture checker.\ncmds.shadingNode( 'checker', asTexture=True )\ncmds.shadingNode( 'place2dTexture', asUtility=True )\ncmds.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n\n# Assign the texture the the lambert node.\ncmds.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n\n# Set the textured display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n\n# Assign the lambert shader to all facets of the plane.\ncmds.sets('planeShape.f[0:99]', edit=True, forceElement= 'myLambertSG' )\n\n# Replace default UVs on half of the plane :\n# Rotates projection around X, rotate the map of 45 degrees,\n# and reduces of half the projected map.\ncmds.polyPlanarProjection( 'plane.f[0:49]', rx=90, ra=45.0, pc= (0, 0, 0), imageScale=(0.5, 0.5))\n\n# Set the wireframe display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polyPlane": "\n\nimport maya.cmds as cmds\n\n# Create a mesh (plane), with 10 subdivisions in the X direction,\n# 15 subdivisions in the Y direction,\n# the width of the mesh is 15, the height of the mesh is 20.\ncmds.polyPlane( sx=10, sy=15, w=15, h=20)\n\n# Create a mesh, called \"myPlane\", on each direction there are 5 subdivisions.\ncmds.polyPlane(n='myPlane', sx=5, sy=5)", 
    "polyPlatonicSolid": "\n\nimport maya.cmds as cmds\n\n# Create a icosahedron with radius 2 side length 2\ncmds.polyPlatonicSolid( r=2, l=2, st=1)\n\n# Create a platonic solid, called \"myPlatonicsolid\", of type octahedron.\ncmds.polyPlatonicSolid( n='myPlatonicsolid', st=2 )", 
    "polyPoke": "\n\nimport maya.cmds as cmds\n\n# To poke all the faces of a polyCube...\n#\ncmds.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1, n='pCube' )\ncmds.polyPoke( 'pCube.f[0:5]', ch=1 )\n\n# To poke all the faces of a polyCube, and pull the\n# new vertices by one unit along the face normal\n#\ncmds.polyCube( w=1, h=1, d=1, sx=1, sy=1, sz=1, ax=(0, 1, 0), tx=1, ch=1, n='pCubePull' )\ncmds.polyPoke( 'pCubePull.f[0:5]', ltx=0, lty=0, ltz=1, ch=1 )", 
    "polyPrimitive": "\n\nimport maya.cmds as cmds\n\n# Create a soccerBall with radius 1 side length 0.4037\ncmds.polyPrimitive( r=1, l=0.4036, pt=0)", 
    "polyPrimitiveMisc": "", 
    "polyPrism": "\n\nimport maya.cmds as cmds\n\n# Create a prism, with 10 subdivisions on the caps,\n# and 15 subdivisions along the length,\n# the edge length of the prism is 20.\ncmds.polyPrism ( sc=10, sh=15, w=20)\n\n# Create a prism, called \"myprism\", on each direction there are 5 subdivisions.\ncmds.polyPrism( n='myprism', sc=5, sh=5)", 
    "polyProjectCurve": "\n\nimport maya.cmds as cmds\n\n# create a poly plane in the z axis\npoly = cmds.polyPlane(w=10, h=10, sx=10, sy=10, ax=(0,0,1), cuv=2, ch=1)\n\n# create a nurbs circle also in the z axis\nnurbs = cmds.circle(ch=1, o=1, r=2, nr=(0,0,1))\n\n# and project it onto the poly plane along the z axis\nresults = cmds.polyProjectCurve(poly[0], nurbs[0], direction=(0,0,1))", 
    "polyProjection": "\n\nimport maya.cmds as cmds\n\ncmds.file( f=True, new=True )\n# To create a planar projection\n#\ncmds.polyPlane( sx=10, sy=10 )\ncmds.move( 0, 0, r=3 )\ncmds.polyProjection( 'pPlane1.f[0:99]', type='Planar', md='y' )\n# Result: polyPlanarProj1 #\n# To create a cylindrical projection\n#\ncmds.polyCylinder()\ncmds.polyProjection( 'pCylinder1.f[0:21]', type='Cylindrical' )\n# Result: polyCylProj1 #\n# To create a spherical projection\n#\ncmds.polySphere()\ncmds.move( 0, 0, r=-3 )\ncmds.polyProjection( 'pSphere1.f[0:399]', type='Spherical' )\n# Result: polySphProj1 #", 
    "polyPyramid": "\n\nimport maya.cmds as cmds\n\n# Create a pyramid, with 10 subdivisions on the caps,\n# 15 subdivisions along the height and num ber of sides 5,\n# the side length of the pyramid is 20, the height of the pyramid is 10.\ncmds.polyPyramid( sc=10, sh=15, ns=5, w=20)\n\n# Create a pyramid, called \"mypyramid\", olong height there are 5 subdivisions\n# and with 5 sides.\ncmds.polyPyramid( n='mypyramid', sh=5, ns=5, sc=5)\n\n# Query the side length of \"mypyramid\"\nw = cmds.polyPyramid( 'mypyramid', q=True, w=True )", 
    "polyQuad": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( n='plg1', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\ncmds.move( -5, 0, 0 )\ncmds.polyCube( n='plg2', sx=3, sy=3, sz=3, w=5, h=5, d=5 )\ncmds.move( 5, 0, 0 )\ncmds.delete( 'plg1.f[9:17]' )\ncmds.polyTriangulate( 'plg1.f[0:44]' )\ncmds.delete( 'plg2.f[9:17]' )\ncmds.polyTriangulate( 'plg2.f[0:44]' )\ncmds.polyMoveVertex( 'plg1.vtx[20:35]', ltz=2.5 )\ncmds.polyMoveVertex( 'plg2.vtx[20:35]', ltz=2.5 )\n\n#Only coplanar triangles will be merged.\ncmds.polyQuad( 'plg1.f[0:89]', a=0.0 )\n\n#All possible triangles will be merged.\ncmds.polyQuad( 'plg2.f[0:89]', a=180.0 )", 
    "polyQueryBlindData": "\n\nimport maya.cmds as cmds\n\ncmds.polyQueryBlindData( 'pPlane1.vtx[2]', 'pPlane1.vtx[8]', id=9001, associationType='vertex', ldn='bdFloat', dbd=234 )\ncmds.polyQueryBlindData( id=9005, sc='pPlane1.vtx[0:100]' )\ncmds.polyQueryBlindData( 'pPlane1.f[0:10]', sc='pPlane1.vtx[0:100]' )", 
    "polyReduce": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere( n='plg' )\ncmds.polyReduce( 'plg.f[0:399]', p=35 )", 
    "polySelect": "\n\nimport maya.cmds as cmds\n\ncmds.polySelect( 'pCube1', edgeRing=1 )\ncmds.polySelect( 'pCube1', toggle=True, edgeRingPath=(1, 10) )\ncmds.polySelect( 'pCube1', ns=True, edgeRingPath=(1, 10) )\ncmds.polySelect( 'pCube1', edgeRingPath=((1, 10), (11, 20)) )\ncmds.polySelect( 'pPlane1', shortestEdgePath=(10, 100) )", 
    "polySelectConstraint": "\n\nimport maya.cmds as cmds\n\ncmds.selectMode( co=True )\n\n# \"b\"Propagation\"/b\"\n\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.delete( 'plg.f[20:29]' )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( sh=True ) # next mouse selections will propagate to all shell\ncmds.polySelectConstraint( sh=False )\ncmds.polySelectConstraint( bo=True ) # next mouse selections will propagate along border\ncmds.polySelectConstraint( bo=False )\ncmds.polySelectConstraint( cr=True ) # next mouse selections will propagate to all connected creased components\ncmds.polySelectConstraint( cr=False )\n\ncmds.select( 'plg.f[54:55]' )\ncmds.polySelectConstraint( pp=1 )\ncmds.polySelectConstraint( pp=1 ) # to get more and more\ncmds.polySelectConstraint( pp=1 )\ncmds.polySelectConstraint( pp=2 ) # to get less\ncmds.polySelectConstraint( pp=3 ) # to get selection border\ncmds.delete( 'plg' )\n\n#\"b\"Properties\"/b\"\n\n#location\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.selectType( pv=True )\ncmds.polySelectConstraint( m=3, t=1, w=1 ) # to get border vertices\ncmds.polySelectConstraint( m=3, t=1, w=2 ) # to get inner vertices\ncmds.polySelectConstraint( w=0 ) # turn off location constraint\ncmds.delete( 'plg' )\n\n#edge smoothness\ncmds.polyCylinder( n='plg' )\ncmds.selectType( pe=True )\ncmds.polySelectConstraint( m=3, t=0x8000, sm=1 ) # to get hard edges\ncmds.polySelectConstraint( m=3, t=0x8000, sm=2 ) # to get soft edges\ncmds.polySelectConstraint( sm=0 ) # turn off edge smoothness constraint\ncmds.delete( 'plg' )\n\n#face size\ncmds.polyCylinder( n='plg', sz=1 )\ncmds.delete( 'plg.f[40:59]' )\ncmds.polyCloseBorder( 'plg.e[27]' )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, sz=1 ) # to get triangles\ncmds.polySelectConstraint( m=3, t=8, sz=2 ) # to get quads\ncmds.polySelectConstraint( m=3, t=8, sz=3 ) # to get N-sided\ncmds.polySelectConstraint( sz=0 ) # turn off face size constraint\ncmds.delete( 'plg' )\n\n#face planarity\n#    polyPlane -n plg -w 5 -h 5; polyMoveVertex -ltz 1 plg.vtx[79] plg.vtx[85];\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, p=1 ) # to get non-planar faces\ncmds.polySelectConstraint( m=3, t=8, p=2 ) # to get planar faces\ncmds.polySelectConstraint( p=0 ) # turn off face planarity constraint\ncmds.delete( 'plg' )\n\n#face convexity\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.delete( 'plg.f[51]', 'plg.f[61]', 'plg.f[52:53]' )\ncmds.polyCloseBorder( 'plg.e[146]' )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, c=1 )# to get non-convex faces\ncmds.polySelectConstraint( m=3, t=8, c=2 )# to get convex faces\ncmds.polySelectConstraint( c=0 )#  turn off face convexity constraint\ncmds.delete( 'plg' )\n\n#face holes\ncmds.polyCreateFacet( n='plg', p=[(-2, 2, 0), (-2, -2, 0), (2, -2, 0), (2, 2, 0)] )\ncmds.polyAppend( a=[2, (6, -2, 0), (6, 2, 0), (), (3, 1, 0), (3, -1, 0), (5, 0, 0)] )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, h=1 )# to get holed faces\ncmds.polySelectConstraint( m=3, t=8, h=2 )# to get non-holed faces\ncmds.polySelectConstraint( h=0 )# turn off hole constraint\ncmds.delete( 'plg' )\n\n#face mapping\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.polyMapDel( 'plg.f[60:69]' )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, tx=1 ) # to get mapped faces\ncmds.polySelectConstraint( m=3, t=8, tx=2 ) # to get non-mapped faces\ncmds.polySelectConstraint( tx=0 ) # turn off face mapping constraint\ncmds.delete( 'plg' )\n\n#face topology\ncmds.polyCreateFacet( n='plg', p=((-3, 3, 0),(-3, -3, 0),(3, -3, 0),(3, 3, 0)) )\ncmds.polyAppend( a= [2, (8, -3, 0), (8, 3, 0)] )\ncmds.polyAppend( a= (4, 6, 5 ) )\ncmds.polyAppend( a =[0, (-7, 2, 0),(-7, -1, 0),(-8, 2, 0),(-5, 4, 0)] )\ncmds.selectType( pf=True)\ncmds.polySelectConstraint( m=3, t=8, tp=1 ) # to get non triangulatable faces\ncmds.polySelectConstraint( m=3, t=8, tp=2 ) # to get lamina faces\ncmds.polySelectConstraint( tp=0 ) # turn off the face topology constraint\ncmds.delete( 'plg' )\n\n#\"b\"Length\"/b\"\ncmds.polyCylinder( n='plg', sz=1, h=3 )\ncmds.selectType( pe=True )\ncmds.polySelectConstraint( m=3, t=0x8000, l=True, lb=(2, 4) ) # to get edges of length 2 to 4 units\ncmds.polySelectConstraint( m=3, t=0x8000, l=True, lb=(1, 2) ) # to get edges of length 1 to 2 units\ncmds.polySelectConstraint( l=False ) # turn off the length constraint\ncmds.delete( 'plg' )\n\n#\"b\"Angle\"/b\"\ncmds.polyCube( n='plg', w=5, h=5, d=5 )\ncmds.polyBevel( 'plg.e[7]', sg=1 )\ncmds.polyBevel( 'plg.e[9]', sg=3 )\ncmds.selectType( pe=True )\ncmds.polySelectConstraint( m=3, t=0x8000, a=True, ab=(0, 89) ) # to get edges with angle between 0-89\ncmds.polySelectConstraint( m=3, t=0x8000, a=True, ab=(45, 89) ) # to get edges with angle between 45-89\ncmds.polySelectConstraint( a=False ) # turn off angle constraint\ncmds.delete( 'plg' )\n\n#\"b\"3D Area\"/b\"\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.polyMoveFacet( 'plg.f[70:79]', ls=(.5, .5, 0) )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, ga=True, gab=(0, 0.2) ) # to get faces with area between 0 and 0.2\ncmds.polySelectConstraint( m=3, t=8, ga=True, gab=(0.2, 0.3) ) # to get faces with area between 0 and 0.2\ncmds.polySelectConstraint( ga=False ) # turn off 3D area constraint\ncmds.delete( 'plg' )\n\n#\"b\"2D area\"/b\"\ncmds.polyCylinder( n='plg' )\ncmds.selectType( pf=True )\ncmds.polySelectConstraint( m=3, t=8, ta=True, tab=(0, 0.5) ) # to get face with texture area between 0-0.5\ncmds.polySelectConstraint( ta=True ) # turn off the 2D area constraint\ncmds.delete( 'plg' )\n\n#\"b\"Distance\"/b\"\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.selectType( pv=True )\ncmds.polySelectConstraint( m=3, t=1, d=1, db=(0, 5), dp=(5, 0, 0) ) # to get vertices located\n# between 0-5 units from a given point\ncmds.polySelectConstraint( m=3, t=1, d=1, db=(5, 5), dp=(5, 0, 0) ) # to get vertices located\n# at exactly 5 units from a given point\ncmds.polySelectConstraint( m=3, t=1, d=2, db=(5, 6), dp=(5, 0, 0) ) # to get vertices located\n# between 5-6 units from a given axis\ncmds.polySelectConstraint( d=0 )# turn off the distance constraint\ncmds.delete( 'plg' )\n\n#\"b\"Orientation\"/b\"\ncmds.polySphere( n='plg' )\ncmds.selectType( pv=True' )\ncmds.polySelectConstraint( m=3, t=1, o=1, ob=(0, 30), oa=(0, 1, 0) )# to get vertices oriented between\n# 0-30 degree to a given axis\ncmds.polySelectConstraint( m=3, t=1, o=2, ob=(0, 30), oa=(0, 1, 0) )\ncmds.polySelectConstraint( o=0 )# turn off the orintation constraint\ncmds.delete( 'plg' )\n\n#\"b\"Order (Neighbor)\"/b\"\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.selectType( pv=True )\ncmds.polySelectConstraint( m=3, t=1, order=True, orb=(0, 2) ) # to get vertices with 0 to 2 neighbors\ncmds.polySelectConstraint( order=False ) # turn off the order (neighbor) constraint\ncmds.delete( 'plg' )\n\n#\"b\"Visibility\"/b\"\ncmds.polySphere( n='plg' )\ncmds.selectType( pv=True )\ncmds.polySelectConstraint( m=3, t=1, v=True, va=60, vp=(10, 0, 0) ) # to get vertices in the 60 degree angle from a given point\ncmds.polySelectConstraint( v=False ) # turn off the visbility constraint\ncmds.delete( 'plg' )\n\n#\"b\"Random\"/b\"\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.selectType( pv=True )\ncmds.polySelectConstraint( m=3, t=1, r=True, rr=.5 )\ncmds.polySelectConstraint( r= False ) # turn off the random constraint\ncmds.delete( 'plg' )\n\n# NOTE: Make sure you turn off the constraint you have used. Otherwise it may\n# affect your next selection (if \"i\"mode\"/i\" flag is ON).", 
    "polySelectConstraintMonitor": "\n\nimport maya.cmds as cmds\n\n# create Monitor\ncmds.polySelectConstraintMonitor( create=True )\n\n# set up a callback for when the constraints are changed\ncmds.polySelectConstraintMonitor( changeCommand=('polygonConstraintUpdate', 'MyPanel'));\n\n# delete Monitor\ncmds.polySelectConstraintMonitor( delete=True )", 
    "polySelectCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Create a new poly select context, then switch to it\ncmds.polySelectCtx('polySelectCtx1')\ncmds.setToolTo('polySelectCtx1')", 
    "polySelectEditCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=5, sy=5, n='pPlane1')\n\n# Create a new poly select and edit context, then switch to it\ncmds.polySelectEditCtx('polySelectEditCtx1')\ncmds.setToolTo('polySelectEditCtx1')", 
    "polySelectEditCtxDataCmd": "", 
    "polySelectSp": "", 
    "polySeparate": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', w=5, h=5 )\ncmds.delete( 'plg.f[20:29]' )\n\ncmds.polySeparate( 'plg' )", 
    "polySetToFaceNormal": "\n\nimport maya.cmds as cmds\n\n# Create user normals and set them to the face normals\ncmds.polySetToFaceNormal( setUserNormal=True )\n# Set the normals to the default normal values (internally computed)\ncmds.polySetToFaceNormal()", 
    "polySetVertices": "", 
    "polySewEdge": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( sx=1, sy=1, n='plg1' )\ncmds.polyPlane( sx=1, sy=1, n='plg2' )\ncmds.rotate( 0, 0, 30, 'plg1' )\ncmds.rotate( 0, 0, -30, 'plg2' )\ncmds.move( -0.5, 0, 0, 'plg1', ws=True )\ncmds.move( 0.5, 0, 0, 'plg2', ws=True )\n# For the polyUnite we assume that plg1's shape node is named\n#  plg1Shape, plg2's shape node is plg2Shape, and the resulting\n#  transform is named polySurface1. One or more of these may not\n#  hold true if objects have previously been created and\n#  manipulated in the scene.\ncmds.polyUnite( 'plg1Shape', 'plg2Shape' )\ncmds.polySewEdge( 'polySurface1.e[2]', 'polySurface1.e[5]', t=0.25 )", 
    "polyShortestPathCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new poly shortest edge path context:\n#\ncmds.polyShortestPathCtx( 'PolyViewPortShortestPath' )", 
    "polySlideEdge": "\n\nimport maya.cmds as cmds\n\n# Moves the selected edge loops to the left by 50% of their neighbouring left edges\ncmds.polySlideEdge(edgeDirection=0.5, direction=1)\n\n# Moves the selected edge loops to the right by 200% of the length of the shortest neighbouring right edge\ncmds.polySlideEdge(edgeDirection=2, absolute=True)", 
    "polySlideEdgeCtx": "", 
    "polySmooth": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( n='plg1' )\ncmds.move( -3, 0, 2 )\ncmds.polyCube( n='plg2' )\ncmds.move( -3, 0, -2 )\ncmds.polyCube( n='plg3' )\ncmds.move( 0, 0, 2 )\ncmds.delete( 'plg3.f[1]' )\ncmds.polyCube( n='plg4' )\ncmds.move( 0, 0, -2 )\ncmds.delete( 'plg4.f[1]' )\ncmds.polyCube( n='plg5' )\ncmds.move( 3, 0, 2 )\ncmds.polyCube( n='plg6' )\ncmds.move( 3, 0, -2 )\n\ncmds.polyOptions( ao=True, db=1 )\n\n# only one division:\ncmds.polySmooth( 'plg1.f[0:5]', dv=1 )\n\n# 2 divisions produces a round-ish object\ncmds.polySmooth( 'plg2.f[0:5]', dv=2 )\n\n# keep border edges\ncmds.select( 'plg3.f[0:4]' )\ncmds.polySmooth( kb=1 )\n\n# don't keep border edges\ncmds.select( 'plg4.f[0:4]' )\ncmds.polySmooth( kb=0 )\n\n# 1 division, continuity 0.2\ncmds.select( 'plg5' )\ncmds.polySmooth( c=0.2 )\n\n# 1 division, continuity 0.8\ncmds.polySmooth( 'plg6.f[0:5]', c=0.8 )", 
    "polySoftEdge": "\n\nimport maya.cmds as cmds\n\n# Turn smooth shading on\n# Soft and hard edges are much easier to see with smooth shading on\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='smoothShaded', dl='default')\n\ncmds.polySphere(n= 'plg', sx= 15, sy= 10 )\n# hard bottom\ncmds.select( 'plgShape.e[0:59]', 'plgShape.e[135:194]', 'plgShape.e[255:269]', r=True )\ncmds.polySoftEdge( a=0 )\n# smooth top\ncmds.select( 'plg.e[75:134]', 'plg.e[195:254]', 'plg.e[270:284]', r=True )\ncmds.polySoftEdge( a=180 )\ncmds.select( 'plg' )\ncmds.polyOptions( ao=True, se=True )\n\n# Set display mode back to wireframe (default mode)\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polySphere": "\n\nimport maya.cmds as cmds\n\n# Create a sphere, with 10 subdivisions in the X direction,\n# and 15 subdivisions in the Y direction,\n# the radius of the sphere is 20.\ncmds.polySphere(sx=10, sy=15, r=20)\n\n# Create a sphere, called \"mySphere\", on each direction there are 5 subdivisions.\ncmds.polySphere( n='mySphere', sx=5, sy=5)\n\n# Query the radius of the new sphere\nr = cmds.polySphere( 'mySphere', q=True, sx=True )", 
    "polySphericalProjection": "\n\nimport maya.cmds as cmds\n\n# Create a sphere with default UVs.\ncmds.polySphere( n='sphere', r=10 )\n\n# Create a lambert node.\ncmds.shadingNode( 'lambert', '-n', 'myLambert', asShader=True )\ncmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='myLambertSG' )\ncmds.connectAttr( 'myLambert.outColor', 'myLambertSG.surfaceShader', f=True )\n\n# Create a texture checker.\ncmds.shadingNode( 'checker', asTexture=True )\ncmds.shadingNode( 'place2dTexture', asUtility=True )\ncmds.connectAttr( 'place2dTexture1.outUV', 'checker1.uv' )\n\n# Assign the texture the the lambert node.\ncmds.connectAttr( 'checker1.outColor', 'myLambert.color', f=True )\n\n# Set the textured display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='smoothShaded', displayTextures=True, dl='default')\n\n# Assign the lambert shader to all faces of the sphere.\ncmds.sets('sphere.f[0:399]', edit=True, forceElement= 'myLambertSG' )\n\n# Replace default UVs on the top of the sphere :\n# Rotates the map of 45 degrees and reduces its aperture to 20 degrees in both directions\ncmds.polySphericalProjection( 'sphere.f[180:359]', 'sphere.f[380:399]', ra=45.0, pc=(0, 0, 0), ps=(20, 20) )\n\n# Set the wireframe display mode.\ncurrentPanel = cmds.getPanel(withFocus= True)\nif currentPanel != '':\n        cmds.modelEditor(currentPanel, edit=True, da='wireframe')", 
    "polySpinEdge": "", 
    "polySplit": "\n\nimport maya.cmds as cmds\n\n# Note that in Python, you must use the ip/insertpoint flag which determines\n# whether you are splitting an edge or a face based on the number of\n# arguments to the flag (2 for an edge, and 4 for a face)\ncmds.polyCreateFacet( p=[(0, 2, 0), (0, -2, 0), (4, -2, 0), (4, 2, 0)] )\ncmds.polySplit( ip=[(2, 0.1), (3, 0.5), (0, 2, -1, 0.0), (0, 0.9)] )", 
    "polySplitCtx": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n\n# Create a new poly split context, then switch to it\ncmds.polySplitCtx('polySplitCtx1')\ncmds.setToolTo('polySplitCtx1')", 
    "polySplitCtx2": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=1, sy=1, n='pPlane1')\n\n# Create a new poly split context, then switch to it\ncmds.polySplitCtx2('polySplitCtx2')\ncmds.setToolTo('polySplitCtx2')", 
    "polySplitEdge": "\n\nimport maya.cmds as cmds\n\n# An example taking a non-manifold edge and splitting it to\n# make it manifold\ncmds.polyPlane( w=1, h=1, sx=10, sy=10, ax=(0, 1, 0), cuv=1, ch=1 )\ncmds.scale( 15, 15, 15, r=True )\ncmds.move( -8, 0, 6, r=True )\n\ncmds.select( 'polyPlane1', addFirst=True )\ncmds.setAttr( 'polyPlane1.subdivisionsWidth', 3 )\ncmds.setAttr( 'polyPlane1.subdivisionsHeight', 3 )\ncmds.select( 'pPlane1.e[12]', r=True )\ncmds.polyExtrudeEdge( 'pPlane1.e[12]', ch=1, kft=0, pvx=-5.5, pvy=0.0, pvz=6.0 )\n# Result: polyExtrudeEdge1 #\ncmds.setAttr( 'polyExtrudeEdge1.localTranslate', 0, 0, 5.093611)\ncmds.select( 'pPlane1.e[12]', r=True )\ncmds.polySplitEdge(op=0)\n# Result: polySplitEdge1 #\n\n# The edge is now split..\ncmds.select( 'pPlane1.f[9]', r=True)\ncmds.move(0, 0.5, 0, r=True)\n\n\n# An example which splits loops of manifold edges\ncmds.polyPlane(w=10, h=10, sx=4, sy=4, ch=1, name='ManifoldTest')\ncmds.select('ManifoldTest.e[3]', 'ManifoldTest.e[12:15]', 'ManifoldTest.e[21]', 'ManifoldTest.e[23]', 'ManifoldTest.e[29]')\n\ncmds.polySplitEdge(operation=1)\n\ncmds.select('ManifoldTest.f[1:3]', 'ManifoldTest.f[5]', 'ManifoldTest.f[9]')\ncmds.move(0, 0, 5, r=True)\n\ncmds.select('ManifoldTest.f[0]', 'ManifoldTest.f[4]', 'ManifoldTest.f[6:8]', 'ManifoldTest.f[10:15]')\ncmds.move(0, 0, -5, r=True)", 
    "polySplitRing": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube()\ncmds.select('pCube1.e[0:3]')\ncmds.polySplitRing( sma=180, wt=0.2)", 
    "polySplitVertex": "\n\nimport maya.cmds as cmds\n\n# Objective: split the four middle vertices of a 3x3 plane so\n# that the middle face can be moved seperately\n\n# Create a 3x3 plane\n#\ncmds.polyPlane( sx=3, sy=3, name='polyPlane' )\n# Result: polyPlane polyPlane1\n\n# Count the number of vertices we start out with\n#\ncmds.polyEvaluate( 'polyPlane', vertex=True )\n# Result: 16\n\n# Split the four middle vertices\n#\ncmds.polySplitVertex( 'polyPlane.vtx[5]', 'polyPlane.vtx[6]', 'polyPlane.vtx[9]', 'polyPlane.vtx[10]' )\n# Result: polySplitVert1\n\n# Count the number of vertices we have now\n#\ncmds.polyEvaluate( 'polyPlane', vertex=True )\n# Result: 28\n\n# Note that because we split the 4 middle vertices, the 8\n# surrounding faces have become non-manifold", 
    "polyStraightenUVBorder": "\n\nimport maya.cmds as cmds\n\n# Create a plane and select it.\ncmds.polyPlane()\ncmds.select( 'pPlane1.map[0:65]', r=True )\n\n# Straighten half the border\ncmds.polyStraightenUVBorder()", 
    "polySubdivideEdge": "\n\nimport maya.cmds as cmds\n\ncmds.polyCube( n='plg', w=5, h=5, d=5 )\ncmds.scale( 2, 2, 2 )\ncmds.select( 'plg' )\ncmds.polyOptions( ao=True, dv='true' )\ncmds.select( cl=True )\n\n# Simple subdivision\ncmds.select( 'plg.e[1]' )\ncmds.polySubdivideEdge( dv=4 )\n# The selected edges are subdivided by 4 vertices (5 subedges).\n\n# Local bound\ncmds.select( 'plg.e[7]' )\ncmds.polySubdivideEdge( dv=4, s=1.5 )\n# The length of each subedge must be greater or equal to 1.5\n# in local space. Length of original edge is 5 in local space.\n# Min size indicates that only 3 subedges can be created.\n\n# World bound\ncmds.select( 'plg.e[5]' )\ncmds.polySubdivideEdge( dv=4, s=2, ws=True )\n# The length of each subedge has to be greater or equal to 2\n# in world space. Length of original edge is 10 in world space.\n# All required subdivisions are done.", 
    "polySubdivideFacet": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', w=10, h=10, sx=1, sy=3 )\n\n# Quads\ncmds.polySubdivideFacet( 'plg.f[0]', dv=2 )  # becomes 16 quads.\n\n# Triangles\ncmds.polySubdivideFacet( 'plg.f[2]', dv=1, m=1 )  # becomes 4 triangles", 
    "polySuperCtx": "", 
    "polyTestPop": "", 
    "polyToCurve": "", 
    "polyToSubdiv": "\n\nimport maya.cmds as cmds\n\n# To create a new subdivision surface from a polygon:\ncmds.polyToSubdiv( 'polySphere1' )\n\n# To create a new subdivision surface from a polygon with history so that\n# the tesselation can be edited afterwards:\ncmds.polyToSubdiv( 'polySphere1', ch=True )", 
    "polyTorus": "\n\nimport maya.cmds as cmds\n\ncmds.polyTorus( sx=8, sy=16, r=10, sr=1 )\n#result has 8 sections of 16 segments,\n#the main radius is 10, the section radius is 1.\n\ncmds.polyTorus( sx=5, sy=4, tx=False )\ncmds.move( -3, 0, 0 )\n#result has 5 sections of 4 segments, default sizes.\n#no texture offsets are generated.\n\ncmds.polyTorus( sx=5, sy=4, tw=45 )\ncmds.move( 3, 0, 0 )\n#result has 5 sections of 4 segments, default sizes.\n#The sections are rotated.\n\n#Query the radius of the torus\nr = cmds.polyTorus( 'polyTorus1' ,q=True, r=True )", 
    "polyTransfer": "\n\nimport maya.cmds as cmds\n\n# Create two objects with same a cube.\ncmds.polyCube( sx=5, sy=5, sz=5, n='plg' )\ncmds.polyCube( sx=5, sy=5, sz=5, n='atlPlg' )\n\n# Tweak the geometry of the first object\ncmds.select( 'plg.vtx[0:50]', r=True )\ncmds.move( .1, .2, .3, r=True )\n\n# Spherical mapping on the alternate object\ncmds.polyProjection( 'atlPlg.f[0:149]', type='Spherical' )\n\n# Copy the UVs from the alternate to the first object.\ncmds.polyTransfer( 'plg', uv=1, ao='atlPlg' )", 
    "polyTriangulate": "\n\nimport maya.cmds as cmds\n\n# Non-planar faces\ncmds.polyPlane( n='plg1', sx=5, sy=5, w=5, h=5 )\ncmds.move( -6, 0, 0 )\ncmds.polyMoveVertex( 'plg1.vtx[7]', 'plg1.vtx[10]', 'plg1.vtx[25]', 'plg1.vtx[28]', ltz=1 )\ncmds.polyTriangulate( 'plg1.f[0:1]', 'plg1.f[5:6]', 'plg1.f[3:4]', 'plg1.f[8:9]', 'plg1.f[15:16]', 'plg1.f[20:21]', 'plg1.f[18:19]', 'plg1.f[23:24]' )\n\n# Holed faces\nmaya.cmds.polyCreateFacet( p=[(2.5, 0, 2.5), (2.5, 0, -2.5), (-2.5, 0, -2.5), (-2.5, 0, 2.5), (), (1, 0, -1), (-1, 0, -1), (-1, 0, 1), (1, 0, 1)],  n='plg2' )\ncmds.polyTriangulate( 'plg2.f[0]' )\n\n# Both holed and non-planar facets\ncmds.polyPlane( n='plg3', sx=3, sy=3, h=5, w=5 )\ncmds.move( 6, 0, 0 )\ncmds.polyChipOff( 'plg3.f[4]', dup=1, ltz=1, ls=(.25, .25, .25) )\ncmds.polyMergeFacet( 'plg3', ch=True, ff=4, sf=9 )\ncmds.polyTriangulate( 'plg3.f[4]' )", 
    "polyUVRectangle": "\n\nimport maya.cmds as cmds\n\n# Opening up the textureView will make this example much easier to visualize.\n\n# make a cylinder\ncmds.polyCylinder( r=1, h=2, sx=20, sy=10, sz=1, ax=(0,1,0), rcp=0, cuv=3, ch=1 )\n\n# map a 3x2 area of faces to the 0-1 UV square\ncmds.polyUVRectangle( 'pCylinderShape1.vtx[115]', 'pCylinderShape1.vtx[57]' )\n\n# map a 2x20 ring of faces to the 0-1 UV square\ncmds.polyUVRectangle( 'pCylinderShape1.vtx[136]', 'pCylinderShape1.vtx[176]' )", 
    "polyUVSet": "\n\nimport maya.cmds as cmds\n\n# start with poly object\ncmds.polySphere(n='plg', cuv=1, r=10.0)\n# Make a copy of \"map1\" to a new uvset. The\n# name of which is automatically generated and returned.\ncmds.polyUVSet( copy=True, uvSet='map1' )\n# Create a new empty uv set\ncmds.polyUVSet( create=True, uvSet='map2' )\n# To set the current uv set to be \"map2\".\ncmds.polyUVSet( currentUVSet=True,  uvSet='map2')\n# To set the current uv set to the last uv set added to an object.\ncmds.polyUVSet( currentLastUVSet=True )\n# To query the current uv set.\ncmds.polyUVSet( query=True, currentUVSet=True )\n# To rename a currently existing uv set from \"map2\" to \"map3\".\ncmds.polyUVSet(rename=True, newUVSet='map3', uvSet= 'map2')\n# Rename the current uv set (if any) to \"map4\".\ncmds.polyUVSet(rename=True, newUVSet='map4' )\n# To delete a currently existing uv set \"map4\".\ncmds.polyUVSet( delete=True, uvSet='map4')\n# To delete the current uv set (if any)\ncmds.polyUVSet( delete=True )\n# Copy values of uvset \"map1\" to \"map2\"\ncmds.polyUVSet( copy=True, nuv='map2', uvSet='map1' )\n# Copy values of the current uvset to \"map2\"\ncmds.polyUVSet( copy=True, nuv='map2' )\n# Create a new empty uv set with a generate new name\n# The newly generated name is returned.\ncmds.polyUVSet( create=True )\n# To query all of the uv sets\ncmds.polyUVSet( query=True, allUVSets=True )\n# To query the logical indices of the uv sets in the\n# uv set array of the node\nnode = \"plg\"\nindices = cmds.polyUVSet(node, query=True, allUVSetsIndices=True)\nfor i in indices[:]:\n        name = cmds.getAttr(node+\".uvSet[\"+str(i)+\"].uvSetName\")\n        print(\"Found uv set called \" + name )\n# To create a new per-instance uv set named \"myMap\"\ncmds.polyUVSet(create=True,perInstance=True,uvSet='myMap');", 
    "polyUnite": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere( n='plg1' )\ncmds.polyCube( w=2, h=.2, d=2, n='plg2' )\ncmds.move( 0, -1.1, 0 )\ncmds.polyCube( w=2, h=.2, d=2, n='plg3' )\ncmds.move( 0, 1.1, 0 )\ncmds.polyUnite( 'plg1', 'plg2', 'plg3', n='result' )\ncmds.rotate( 0, 0, 90, 'result' )", 
    "polyVertexNormalCtx": "", 
    "polyWarpImage": "", 
    "polyWedgeFace": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane( n='plg', w=10, h=10 )\n\n# Wedge about a single axis\ncmds.polyWedgeFace( 'plg.f[24:29]', 'plg.f[34]', 'plg.f[44]', 'plg.f[54]', 'plg.f[64]', 'plg.f[74:79]', ws=1, wedgeAngle=90, divisions=8, ed=(62,167), ch=1 )\n\n# Wedge about multiple axes (one axis for each command)\ncmds.polyCube( n='plg', w=1, h=1, d=1, sx=4, sy=4, sz=4, ax=(0, 1, 0), tx=1, ch=1 )\ncmds.polyWedgeFace( 'plg.f[64:79]', ws=1, wedgeAngle=90, divisions=9, ed=(128, 133, 138, 143), ch=1 )\ncmds.polyWedgeFace( 'plg.f[0:15]', ws=1, wedgeAngle=90, divisions=9, ed=(0, 1, 2, 3), ch=1 )\ncmds.polyWedgeFace( 'plg.f[80:95]', ws=1, wedgeAngle=90, divisions=9, ed=(100, 105, 110, 115), ch=1 )\ncmds.polyWedgeFace( 'plg.f[32:47]', ws=1, wedgeAngle=90, divisions=9, ed=(36, 37, 38, 39), ch=1 )", 
    "popupMenu": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.button()\ncmds.popupMenu()\ncmds.menuItem()\ncmds.menuItem()\ncmds.menuItem()\ncmds.text()\ncmds.popupMenu( button=1 )\ncmds.menuItem()\ncmds.menuItem()\ncmds.menuItem()\ncmds.checkBox( 'aCheckBox' )\ncmds.popupMenu( parent='aCheckBox', alt=True, ctl=True )\ncmds.menuItem()\ncmds.menuItem()\ncmds.menuItem()\ncmds.showWindow()", 
    "pose": "\n\nimport maya.cmds as cmds\n\n# First, create a character to hold the pose. The character will be\n# a 3-bone skeleton named \"arm\".\n#\ncmds.select( d=True )\ncmds.joint( p=(0, 0, 0) )\ncmds.joint( p=(0, 4, 0) )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 8, -1) )\ncmds.joint( 'joint2', e=True, zso=True, oj='xyz' )\ncmds.joint( p=(0, 9, -2) )\ncmds.joint( 'joint3', e=True, zso=True, oj='xyz' )\ncmds.select( 'joint2', 'joint3', 'joint1', r=True )\ncmds.character( name='arm' )\n# Create a pose for the current joint position named \"handWave\"\n#\ncmds.pose( 'arm', name='handWave' )\n# Query the existing poses\n#\ncmds.pose( 'arm', query=True, n=True )\n# Restore the pose onto the character\n#\ncmds.pose( 'arm', name='handWave', apply=True )", 
    "preloadRefEd": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.preloadRefEd()\ncmds.showWindow(window)", 
    "progressBar": "\n\nimport maya.cmds as cmds\n\n# Create a custom progressBar in a windows ...\n\nwindow = cmds.window()\ncmds.columnLayout()\n\nprogressControl = cmds.progressBar(maxValue=10, width=300)\ncmds.button( label='Make Progress!', command='cmds.progressBar(progressControl, edit=True, step=1)' )\n\ncmds.showWindow( window )\n\n# Or, to use the progress bar in the main window ...\n\ngMainProgressBar = maya.mel.eval('$tmp = $gMainProgressBar');\n\ncmds.progressBar( gMainProgressBar,\n                                edit=True,\n                                beginProgress=True,\n                                isInterruptable=True,\n                                status='\"Example Calculation ...',\n                                maxValue=5000 )\n\nfor i in range(5000) :\n        if cmds.progressBar(gMainProgressBar, query=True, isCancelled=True ) :\n                break\n\n        cmds.progressBar(gMainProgressBar, edit=True, step=1)\n\ncmds.progressBar(gMainProgressBar, edit=True, endProgress=True)", 
    "progressWindow": "\n\nimport maya.cmds as cmds\n\n# +-+------------------+\n# |-|  Doing Nothing   |\n# +--------------------+\n# | Sleeping: 40%      |\n# |                    |\n# | +----------------+ |\n# | |||||||          | |\n# | +----------------+ |\n# |                    |\n# | Hit ESC to Cancel  |\n# +--------------------+\n\n# Always use the progress dialog from a script, never directly\n# from the Script Editor.\n\namount = 0\n\ncmds.progressWindow(    title='Doing Nothing',\n                                        progress=amount,\n                                        status='Sleeping: 0%',\n                                        isInterruptable=True )\nwhile True :\n        # Check if the dialog has been cancelled\n        if cmds.progressWindow( query=True, isCancelled=True ) :\n                break\n\n        # Check if end condition has been reached\n        if cmds.progressWindow( query=True, progress=True ) \"= 100 :\n                break\n\n        amount += 5\n\n        cmds.progressWindow( edit=True, progress=amount, status=('Sleeping: ' + `amount` + '%' ) )\n\n        cmds.pause( seconds=1 )\n\ncmds.progressWindow(endProgress=1)", 
    "projectCurve": "\n\nimport maya.cmds as cmds\n\n# Project the active curve onto the active surface using the surface\n# normals:\ncmds.projectCurve( un=True )\n\n# Project this curve onto the nurbs sphere using the specified direction:\ncmds.projectCurve( 'curve1', 'nurbsSphere1', d=(0.0, 6.0, 0.0) )", 
    "projectTangent": "\n\nimport maya.cmds as cmds\n\n# Do project tangent with curvature continuity between a curve and a\n# nurbs plane surface\ncmds.projectTangent( 'curve1', 'nurbsPlane1', c=True )\n\n# Do project tangent between the 3 curves and tangent align the curve\n# with the reverse tangent of the second of the other 2 curves\n# (i.e. with curve3)\ncmds.projectTangent( 'curve1', 'curve2', 'curve3', td=2, rt=True )", 
    "projectionContext": "", 
    "projectionManip": "\n\nimport maya.cmds as cmds\n\ncmds.projectionManip( fb=True )\ncmds.projectionManip( pt=3 )", 
    "promptDialog": "\n\nimport maya.cmds as cmds\n\n# Create an OK/Cancel prompt dialog.\n#\n# +-+---------------------+\n# |-|    Rename Object    |\n# +-----------------------+\n# | Enter Name:           |\n# | +-------------------+ |\n# | |                   | |\n# | |                   | |\n# | +-------------------+ |\n# +-----------------------+\n# | +-------+  +--------+ |\n# | |  OK   |  | Cancel | |\n# | +-------+  +--------+ |\n# +-----------------------+\n#\n\nresult = cmds.promptDialog(\n                title='Rename Object',\n                message='Enter Name:',\n                button=['OK', 'Cancel'],\n                defaultButton='OK',\n                cancelButton='Cancel',\n                dismissString='Cancel')\n\nif result == 'OK':\n        text = cmds.promptDialog(query=True, text=True)", 
    "propModCtx": "\n\nimport maya.cmds as cmds\n\n# Edit type of propmod context.\ncmds.propModCtx( 'PropMod', e=True, t=1 )\n\n# Activate propmod context.\ncmds.setToolTo( 'PropMod' )\n\n# Change the type and dropoff.\ncmds.propModCtx( 'PropMod', e=True, d=(0, 1, 0) )", 
    "propMove": "\n\nimport maya.cmds as cmds\n\ncmds.propMove( 3, 6, 0, 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1] )\n# This performs a proportional translate of (3,6,0) on seven surfaces.\n# Note that there are 7 \"-p\" flags, one for each surface.\n\ncmds.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], pivot=(1, 1, 1), s=(3, 3, 3) )\n# This performs a proportional scale of (3,3,3) on seven surfaces.\n# Note that there are 7 \"-p\" flags, one for each surface. The scale\n# happened about the specified pivot (1,1,1).\n\ncmds.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', p=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], r=(30, 60, 90) )\n# This performs a proportional rotate of (30,60,90) on seven surfaces.\n# Note that there are 7 \"-p\" flags, one for each surface.\n\ncmds.propMove( 'surface1', 'surface2', 'surface3', 'surface4', 'surface5', 'surface6', 'surface7', px=[0.1, 0.5, 0.7, 1.0, 0.7, 0.5, 0.1], r=(30, 60, 90) )\n# This performs a proportional rotate of (30,60,90) on seven surfaces.\n# The percentages are only applied on the rotation 30 about the X axis. The\n# percentages along Y and Z are  1.0. Note that there are 7 \"-px\" flags, one\n# for each surface. The surfaces are rotated by 60, 90 in Y and Z.", 
    "psdChannelOutliner": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.formLayout()\ncmds.psdChannelOutliner('materialList', height=175, psdParent='lambert1',\n                        addChild=(('color', ''), ('diffuse', ''), ('transparency', '')) )\ncmds.showWindow()", 
    "psdConvSolidTxOptions": "", 
    "psdEditTextureFile": "\n\nimport maya.cmds as cmds\n\n# Create a Photoshop file with an image layer from a disk image file\ncmds.psdTextureFile(xr=512, yr=512, ifn=('C:\\\\tex.jpg', 'layerSet1', 1), psf='C:\\\\final.psd')\n# // Saved file: C:\\final.psd #\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\ncmds.select('pPlane1')\n\n# Create a snapshot file containing the UVs of pPlane1\ncmds.uvSnapshot(n='C:\\\\uvSnapshot.iff', xr=512, yr=512, o=True)\n# // Saved file: C:\\uvSnapshot.iff #\n\n# Edit the \"final.psd\" file which we have created, add a UV snapshot layer from snapshot file and an image layer from disk image file\ncmds.psdEditTextureFile(aci=('layerSet2', 'C:\\\\tex1.jpg'), ssi='C:\\\\uvSnapshot.iff', uvt=1, psf='C:\\\\final.psd')", 
    "psdExport": "\n\nimport maya.cmds as cmds\n\n# Write the layer set 1 of psd file as 16 bit tif file\ncmds.psdExport( ifn='/tmp/test.psd', ofn='/tmp/test.set1.tif', lsn='Set 1', format='tif', bpc=2 )\n# Query if the layer set \"Set 2\" is empty.\ncmds.psdExport( ifn='/tmp/test.psd', lsn='Set 2', q=True, els=True )", 
    "psdTextureFile": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\ncmds.select('pPlane1')\n\n# Create a snapshot file containing the UVs of pPlane1\ncmds.uvSnapshot(n='C:\\\\uvSnapshot.iff', xr=512, yr=512, o=True)\n# // Saved file: C:\\uvSnapshot.iff #\n\n# Create a Photoshop file containing a UV snapshot layer from UV snapshot file we have just created and an image layer from a disk image file\ncmds.psdTextureFile(xr=512, yr=512, ifn=('C:\\\\tex.jpg', 'layerSet1', 1), ssi='C:\\\\uvSnapshot.iff', uvt=1, psf='C:\\\\final.psd')\n# // Saved file: C:\\final.psd #", 
    "python": "", 
    "querySubdiv": "\n\nimport maya.cmds as cmds\n\n# find all tweaked verticies at current level\ncmds.querySubdiv( a=1 )\n# find all tweaked verticies one level finer than current level\ncmds.querySubdiv( a=1, l=1, r=True )\n# find all creased verticies at current level\ncmds.querySubdiv( a=2 )\n# find all creased edges at current level\ncmds.querySubdiv( a=3 )\n# find all faces at current level.\n# You should work with the subdivision surface shape.\n#\ncmds.querySubdiv( 'subdivShape1', a=4 )\n# find all faces at level 1.\n#\ncmds.querySubdiv( 'subdivShape1', a=4, level=1, relative=False )\n# find all faces at the next finest level from the current one.\n#\ncmds.querySubdiv( 'subdivShape1', a=4, level=1, relative=True )", 
    "quit": "\n\nimport maya.cmds as cmds\n\ncmds.quit()\ncmds.quit(force=True)", 
    "radial": "\n\nimport maya.cmds as cmds\n\ncmds.radial( 'particle1', m=5.0, mxd=2.0 )\n# Creates a radial field with magnitude 5.0 and maximum distance 2.0,\n# and adds it to the list of fields particle1 owns.\n\ncmds.radial( pos=(2, 0, 4 ))\n# Creates a radial field at position (0,2,4) in world coordinates,\n# with default magnitude(1.0), attentuation (1.0),\n# and max distance (5.0).\n\ncmds.radial( 'radialField1', e=True, att=0.98 )\n# Edits the attenuation value of the field named radialField1\n\ncmds.radial( 'radialField1', q=True, m=True )\n# Queries radialField1 for its magnitude.\n\ncmds.radial( 'radialField1', e=True, mxd=10.0 )\n# Changes the maximum distance of the field called\n# \"radialField1\" to 10.0.\n\ncmds.radial( m=2.0 )\n# Creates a radial field with magnitude 2.0 for every active selection.\n# If no there are active\n# selections, creates such a field at world position (0,0,0).", 
    "radioButton": "\n\nimport maya.cmds as cmds\n\ncmds.window( width=150 )\ncmds.columnLayout( adjustableColumn=True )\ncmds.radioCollection()\ncmds.radioButton( label='One' )\ncmds.radioButton( label='Two' )\ncmds.radioButton( label='Three' )\ncmds.radioButton( label='Four' )\ncmds.showWindow()", 
    "radioButtonGrp": "\n\nimport maya.cmds as cmds\n\n#    Create a window with two separate radio button groups.\n#\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.radioButtonGrp( label='Three Buttons', labelArray3=['One', 'Two', 'Three'], numberOfRadioButtons=3 )\ncmds.radioButtonGrp( label='Four Buttons', labelArray4=['I', 'II', 'III', 'IV'], numberOfRadioButtons=4 )\ncmds.showWindow( window )\n\n#    Create a window with two radio button groups that are\n#    linked together.\n#\nwindow = cmds.window()\ncmds.columnLayout()\ngroup1 = cmds.radioButtonGrp( numberOfRadioButtons=3, label='Colors', labelArray3=['Red', 'Blue', 'Green'] )\ncmds.radioButtonGrp( numberOfRadioButtons=3, shareCollection=group1, label='', labelArray3=['Yellow', 'Orange', 'Purple'] )\ncmds.showWindow( window )", 
    "radioCollection": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout( adjustableColumn=True, rowSpacing=10 )\ncmds.frameLayout( label='Colors' )\ncmds.columnLayout()\ncollection1 = cmds.radioCollection()\nrb1 = cmds.radioButton( label='Red' )\nrb2 = cmds.radioButton( label='Blue' )\nrb3 = cmds.radioButton( label='Green' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.frameLayout( label='Position' )\ncmds.columnLayout()\ncollection2 = cmds.radioCollection()\nrb4 = cmds.radioButton( label='Top' )\nrb5 = cmds.radioButton( label='Middle' )\nrb6 = cmds.radioButton( label='Bottom' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.radioCollection( collection1, edit=True, select=rb2 )\ncmds.radioCollection( collection2, edit=True, select=rb6 )\ncmds.showWindow()", 
    "radioMenuItemCollection": "\n\nimport maya.cmds as cmds\n\ncmds.window( menuBar=True )\ncmds.menu( label='Position' )\ncmds.radioMenuItemCollection()\ncmds.menuItem( label='Top', radioButton=False )\ncmds.menuItem( label='Middle', radioButton=False )\ncmds.menuItem( label='Bottom', radioButton=True )\ncmds.menu( label='Number' )\ncmds.radioMenuItemCollection()\ncmds.menuItem( label='One', radioButton=True )\ncmds.menuItem( label='Two', radioButton=False )\ncmds.menuItem( label='Three', radioButton=False )\ncmds.showWindow()", 
    "rampColorPort": "\n\nimport maya.cmds as cmds\n\nramp = cmds.createNode('ramp')\ncmds.window()\ncmds.columnLayout()\ncmds.rampColorPort( node=ramp )\ncmds.showWindow()", 
    "rampWidget": "", 
    "rampWidgetAttrless": "", 
    "rangeControl": "\n\nimport maya.cmds as cmds\n\n# This will create a window with a scrollable playback range control. The initial\n# range is set up to be from 0 to 30, and the maximum values the\n# slider can access are 0 to 60.  Dragging the control's slider sets the\n# 30-frame-long playback range within the bounded values of\n# 0 to 60.\n#\ncmds.window()\ncmds.frameLayout( lv=False )\ncmds.playbackOptions( minTime=0, maxTime=30 )\ncmds.rangeControl( 'myRangeSlider', minRange=0, maxRange=60 )\ncmds.showWindow()", 
    "readPDC": "", 
    "readTake": "\n\nimport maya.cmds as cmds\n\n#    Read data info the clock device and apply.\ncmds.readTake( device='clock', take='clock.mov' )\ncmds.applyTake( device='clock' )", 
    "rebuildCurve": "\n\nimport maya.cmds as cmds\n\n# rebuild curve to 5 uniform spans\ncmds.rebuildCurve( rt=0, s=5 )\n\n# rebuild curve by reducing redundant spans\ncmds.rebuildCurve( rt=1 )\n\n# rebuild curve by matching the parameterization of another curve\n# curve1 is the curve to rebuild\n# curve2 is the reference curve\ncmds.rebuildCurve( 'curve1', 'curve2', rt=2 )\n\n# rebuild curve by removing all multiple interior knots\ncmds.rebuildCurve( rt=3 )\n\n# rebuild curve using the curvature of the curve\n# to create more spans where curvature is higher\ncmds.rebuildCurve( rt=4 )", 
    "rebuildSurface": "\n\nimport maya.cmds as cmds\n\n# rebuild the surface using uniform parameterization\n# The rebuilt surface will have 5 spans in u and\n# 10 spans in v\ncmds.rebuildSurface( rt=0, dir=2, su=5, sv=10 )\n\n# rebuild the surface by removing its redundant spans\ncmds.rebuildSurface( rt=1 )\n\n# rebuild the surface by matching the u parameterization\n# of another surface. surface1 is the surface to rebuild\n# surface2 is the reference surface\ncmds.rebuildSurface( 'surface1', 'surface2', rt=2, dir=0 )\n\n# rebuild the surface by removing all multiple interior knots\ncmds.rebuildSurface( rt=3 )\n\n# rebuild the surface using uniform parameterization\ncmds.rebuildSurface( rt=4 )", 
    "recordAttr": "\n\nimport maya.cmds as cmds\n\n# This command will setup the translateX and translateY\n# attributes for recording.\ncmds.recordAttr( at=['translateX', 'translateZ'] )", 
    "recordDevice": "\n\nimport maya.cmds as cmds\n\n#    Record the clock device for 30 seconds and apply the data.\n#\nimport time\ncmds.recordDevice( device='clock', duration=30 )\ntime.sleep( 30 )\ncmds.recordDevice( device='clock', state=False )\ncmds.applyTake( device='clock' )", 
    "redo": "\n\nimport maya.cmds as cmds\n\n# In this particular example, each line needs to be executed\n# separately one after the other. Executing lines separately\n# guaranties that commands are properly registered in the undo\n# stack.\n\ncmds.polyCube()\n# Result: [u'pCube1', u'polyCube1'] #\n\ncmds.undo()\n# Undo: cmds.polyCube()\n #\n\ncmds.redo()\n# Redo: cmds.polyCube()\n #\n# Result: [u'pCube1', u'polyCube1'] #", 
    "reference": "", 
    "referenceEdit": "\n\nimport maya.cmds as cmds\n\n#\n# EXAMPLE FOR -removeEdits\n#\n# Assume:\n# main.ma contains a reference to mid.ma.\n# mid.ma contains a reference to bot.ma.\n# NOTE: The target reference must be unloaded for the\n# following commands to work.\n# Remove all the edits which apply to mid.ma.\n# This can be done by specifying either the reference\n# node or the reference file.\ncmds.referenceEdit( 'midRN', removeEdits=True )\ncmds.referenceEdit( 'mid.ma', removeEdits=True )\n# Remove all \"setAttr\" edits which apply to mid.ma.\n# This can be done by specifying either the reference\n# node or the reference file.\ncmds.referenceEdit( 'midRN', editCommand='setAttr', removeEdits=True )\ncmds.referenceEdit( 'mid.ma', editCommand='setAttr', removeEdits=True )\n# Remove all the \"parent\" edits which apply to mid:pSphere1.\ncmds.referenceEdit( 'mid:pSphere1', editCommand='parent', removeEdits=True )\n# Remove all the \"connectAttr\" edits which apply to mid:pSphere1.translateX.\ncmds.referenceEdit( 'mid:pSphere1.translateX', editCommand='connectAttr', removeEdits=True )\n# Remove all the edits which apply to bot.ma and are stored on midRN.\n# The referenceEdit command is only capable of removing edits which\n# are stored on a top level reference node. The only edits which\n# are stored on a top level reference node are those which were made\n# from the main scene. If you had previously opened mid.ma and made\n# modifications to bot.ma, those edits can only be removed by opening\n# mid.ma and issuing a referenceEdit command.\n#\ncmds.referenceEdit( 'mid:botRN', removeEdits=True )\ncmds.referenceEdit( 'bot.ma', removeEdits=True )\n#\n# EXAMPLE FOR -changeEditTarget\n#\ntempDir = cmds.internalVar(utd=True)\n# Create a reference containing pSphere1.\n#\ncmds.file( f=True, new=True )\ncmds.polySphere( ch=1, r=1, sx=20, sy=20, ax=(0, 1, 0) )\nnewFileName = '%sref.ma' % tempDir\ncmds.file( rename=newFileName )\ncmds.file( f=True, s=True, type='mayaAscii')\n# Reference the file in and position pSphere1\n#\ncmds.file( f=True, new=True )\ncmds.file( newFileName, r=True, ns='ref' )\ncmds.select( 'ref:pSphere1', r=True )\ncmds.move( 5, 5, 5 )\ntopFileName = '%stop.ma' % tempDir\ncmds.file( rename=topFileName )\ncmds.file( f=True, s=True, type='mayaAscii')\n# Later on its determined that pSphere1 is actually\n# BobMrozowski.\n#\ncmds.file( newFileName, f=True, o=True )\ncmds.rename( 'pSphere1', 'BobMrozowski' )\ncmds.file( f=True, s=True, type='mayaAscii')\n# Now go to open your main scene again...\n#\ncmds.file( topFileName, f=True, o=True )\n# ... and notice that BobMrozowski is back at\n# the origin.\n#\n# So remap all edits so that anything that used to\n# affect ref:pSphere1 now affects ref:BobMrozowski...\n#\ncmds.referenceEdit( 'refRN', changeEditTarget=('ref:pSphere1','ref:BobMrozowski') )\n# ... and then force all previously failing edits affecting\n# refRN to be re-applied.\n#\ncmds.referenceEdit( 'refRN', applyFailedEdits=True )\n# BobMrozowski should now be back at 5 5 5.\n#", 
    "referenceQuery": "\n\nimport maya.cmds as cmds\n\n# Build a sample scene:\n# main scene contains a reference to mid.ma.\n# mid.ma contains a reference to bot.ma.\n# Create bot.ma with a poly sphere.\n#\ncmds.polySphere()\ncmds.file( rename='bot.ma' )\ncmds.file( f=True, s=True, type='mayaAscii')\n# Create mid.ma with a poly cone.\n# Reference bot.ma into mid.ma and group\n# the sphere in bot.ma\n#\ncmds.file( f=True, new=True )\ncmds.file( 'bot.ma', r=True,ns='bot' )\ncmds.polyCone()\ncmds.group( 'bot:pSphere1' )\ncmds.file( rename='mid.ma' )\ncmds.file( f=True, s=True, type='mayaAscii')\n# Create a poly plane.\n# Reference mid.ma into the main scene,\n# move the cone in mid.ma, and connect\n# the plane to the sphere in bot.ma.\n#\ncmds.file( f=True, new=True )\ncmds.file( 'mid.ma', r=True, ns='mid' )\ncmds.select( 'mid:pCone1', r=True )\ncmds.move( 5, 5, 5, r=True )\ncmds.polyPlane()\ncmds.connectAttr( 'pPlane1.ty', 'mid:bot:polySphere1.radius' )\n# Now perform some queries:\n#\ncmds.referenceQuery( 'midRN',filename=True )\n# Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/mid.ma\ncmds.referenceQuery( 'mid:pCone1', filename=True, shortName=True )\n# Result: mid.ma\ncmds.referenceQuery( 'mid:botRN', filename=True, parent=True )\n# Result: C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/mid.ma\ncmds.referenceQuery( 'mid.ma', referenceNode=True )\n# Result: midRN\ncmds.referenceQuery( 'C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/bot.ma', referenceNode=True)\n# Result: mid:botRN\ncmds.referenceQuery( 'bot.ma', referenceNode=True, parent=True )\n# Result: midRN\ncmds.referenceQuery( 'bot.ma', referenceNode=True, topReference=True )\n# Result: midRN\ncmds.referenceQuery( 'mid:botRN',nodes=True )\n# Result:[u'mid:bot:pPlane1', u'mid:bot:pPlaneShape1', u'mid:bot:outputCloth1', u'mid:bot:nCloth1', u'mid:bot:nClothShape1', u'mid:bot:dynamicConstraint1', u'mid:bot:dynamicConstraintShape1', u'mid:bot:nurbsSphere1', u'mid:bot:nurbsSphereShape1', u'mid:bot:pSphere1', u'mid:bot:pSphereShape1', u'mid:bot:lightLinker1', u'mid:bot:layerManager', u'mid:bot:defaultLayer', u'mid:bot:renderLayerManager', u'mid:bot:defaultRenderLayer', u'mid:bot:polyPlane1', u'mid:bot:nucleus1', u'mid:bot:nComponent1', u'mid:bot:uiConfigurationScriptNode', u'mid:bot:sceneConfigurationScriptNode', u'mid:bot:nClothShape1Cache1Start', u'mid:bot:cacheBlend1', u'mid:bot:nClothShape1Cache2', u'mid:bot:nClothShape1Cache1End', u'mid:bot:makeNurbSphere1', u'mid:bot:polySphere1'] #\ncmds.referenceQuery( 'pPlane1', isNodeReferenced=True )\n# Result: 0\ncmds.referenceQuery( 'mid:pCone1', isNodeReferenced=True )\n# Result: 1\ncmds.referenceQuery( 'mid:botRN', parentNamespace=True )\n# Result: mid\ncmds.referenceQuery( 'mid:bot:pSphere1', parentNamespace=True )\n# Result: mid\ncmds.referenceQuery( 'C:/Documents and Settings/user/My Documents/maya/projects/default/scenes/bot.ma', parentNamespace=True )\n# Result: mid\nprint cmds.referenceQuery( 'bot.ma', namespace=True )\n# Result: :mid:bot\nprint cmds.referenceQuery( 'mid:botRN', namespace=True )\n# Result: :mid:bot\nprint cmds.referenceQuery( 'bot.ma', namespace=True, shortName=True )\n# Result: bot\nprint cmds.referenceQuery( 'mid.ma', namespace=True )\n# Result: :mid\nprint cmds.referenceQuery( 'mid.ma', namespace=True, shortName=True )\n# Result: mid", 
    "refineSubdivSelectionList": "\n\nimport maya.cmds as cmds\n\n# after selecting components of a subdivision surface\ncmds.refineSubdivSelectionList()", 
    "refresh": "\n\nimport maya.cmds as cmds\n\ncmds.refresh()", 
    "refreshEditorTemplates": "\n\nimport maya.cmds as cmds\n\n# The following command will cause the currently\n# selected AE tab and all copied AE tab windows\n# to be refreshed.\n#\ncmds.refreshEditorTemplates", 
    "regionSelectKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a manipulator style scale key context for the graph editor\n#\ncmds.regionSelectKeyCtx( 'regionSelectKeyContext' )", 
    "rehash": "", 
    "relationship": "\n\nimport maya.cmds as cmds\n\ncmds.relationship('ignore', 'lightLinker1', 'pCube1', 'pointLight1')", 
    "reloadImage": "\n\nimport maya.cmds as cmds\n\ncmds.reloadImage( 'image.xpm', 'iconTextButtonName' )\ncmds.reloadImage( 'image', 'shelfButtonName' )\ncmds.reloadImage( '~/bitmaps/maya/image.xpm', 'toolButtonName' )", 
    "removeJoint": "\n\nimport maya.cmds as cmds\n\n# joint5 will be removed. Child joints of joint5 will be reparented under\n# joint5's parent joint.\ncmds.removeJoint( 'joint5' )", 
    "removeMultiInstance": "\n\nimport maya.cmds as cmds\n\ncmds.createNode('choice',n='choice')\ncmds.setAttr('choice.input[0]',2.0)\ncmds.setAttr('choice.input[4]',4.0)\ncmds.connectAttr('choice.input[8]','choice.input[100]')\n\n# This will remove the element with index 4 from the input of\n# the choice node as long as there are no incoming or outgoing\n# connections to the attribute.\n#\ncmds.removeMultiInstance( 'choice.input[4]' )\n\n# This will remove the element with index 100 from the input of\n# the choice node, breaking any existing connections first.\n#\ncmds.removeMultiInstance( 'choice.input[100]', b=True )", 
    "rename": "\n\nimport maya.cmds as cmds\n\n# create two namespaces under the root namespace and create\n# a sphere under the root namespace and a sphere under one\n# of the new namespaces.\ncmds.namespace( set=':' )\ncmds.sphere( n='sphere1' )\ncmds.namespace( add='nsA' )\ncmds.namespace( add='nsB' )\ncmds.namespace( set='nsA' )\ncmds.sphere( n='sphere2' )\ncmds.namespace( set=':' )\n# change name of sphere1\ncmds.rename('sphere1', 'spinning_ball')\n\n# change name of spinning_ball back to sphere1\ncmds.select( 'spinning_ball', r=True )\ncmds.rename( 'sphere1' )\n\n# move sphere2 to namespace nsB\ncmds.rename( 'nsA:sphere2', 'nsB:sphere2' )\n# Result: nsB:sphere2 #\n\n# move sphere2 back to namespace nsA when not in the root namespace\n# Note the \":\" appearing in front of the new name to indicate\n# we want to move the object to namespace nsA under the root namespace.\ncmds.namespace( set='nsB' )\ncmds.rename( 'nsB:sphere2', ':nsA:sphere2' )\n# Result: nsA:sphere2 #\n\n# Let's try this without the leading \":\" in the new name.\n# Since we are namespace nsA, in affect, what we are trying to do\n# is rename :nsB:sphere2 to :nsA:nsB:sphere3. Since there isn't a\n# nsB namespace under the namespace nsA, the namespace specification\n# on new name is ignored and a warning is issued.\ncmds.namespace( set=':nsA' )\ncmds.rename( 'nsA:sphere2', 'nsB:sphere3' )\n# Warning: Removing invalid characters from name. #\n# Result: nsA:sphere3 #\n\n# rename an object when not in the root namespace\n# and move the object to current namespace\ncmds.namespace( set=':nsB' )\ncmds.rename( 'nsA:sphere3', 'sphere4' )\n# Result: nsB:sphere4 #\n\n# rename an object with an absolute name to move it into a new namespace.\n# The namespace does not exist so will be created.\ncmds.namespace( set=':nsB' )\ncmds.rename( 'nsA:sphere3', ':nsC:sphere4' )\n# Result: nsC:sphere4 #", 
    "renameAttr": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( n='sph' )\ncmds.addAttr( sn='ms', ln='mass', dv=1.0, min=0.001, max=10000 )\n# Rename the long and short names separately\ncmds.renameAttr( 'sph.mass', 'length' )\ncmds.renameAttr( 'sph.ms', 'ln' )", 
    "renameUI": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a single button.\n#\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.button( 'exampleButton', label='Example' )\ncmds.showWindow( window )\n\n#    Edit the button label.\n#\ncmds.button( 'exampleButton', edit=True, label='New Label' )\n\n#    Rename the button.\n#\ncmds.renameUI( 'exampleButton', 'newButton' )\n\n#    Query the button label using the new object name.\n#\ncmds.button( 'newButton', query=True, label=True )", 
    "render": "\n\nimport maya.cmds as cmds\n\ncmds.render()\n\ncam = cmds.camera()\ncmds.render( cam[0], x=768, y=576 )", 
    "renderGlobalsNode": "\n\nimport maya.cmds as cmds\n\ncmds.renderGlobalsNode('bob')\n\n# this one will use defaults for resolution and quality\ncmds.renderGlobalsNode('bob', name='bob' )\n\ncmds.renderGlobalsNode('bob', rq='myTestQuality1', name='abekasTestGlobals' )", 
    "renderInfo": "\n\nimport maya.cmds as cmds\n\ncmds.renderInfo( doubleSided=False, opposite=True )", 
    "renderLayerPostProcess": "\n\nimport maya.cmds as cmds\n\ncmds.renderLayerPostProcess()", 
    "renderManip": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\n\ncmds.renderManip( 'cameraShape1' )\n\ncmds.renderManip( 'cameraShape1', e=True, st=True )\n\ncmds.renderManip( 'cameraShape1', q=True, st=True )", 
    "renderPartition": "\n\nimport maya.cmds as cmds\n\n# Query the current render partition\ncmds.renderPartition( q=True )\n\n# Set the current render partition to \"foofoo\"\ncmds.renderPartition( 'foofoo' )", 
    "renderPassRegistry": "\n\nimport maya.cmds as cmds\n\n# Get supported channel counts supported by renderer mentalRay and the passID \"DIFF\".\ncmds.renderPassRegistry(passID='DIFF',renderer='mentalRay', supportedChannelCounts=True)\n#\n# Get supported data types supported by renderer mentalRay, the passID \"DIFF\" and the channels \"3\".\ncmds.renderPassRegistry(passID='DIFF', renderer='mentalRay', channels=3, supportedDataTypes=True)", 
    "renderQualityNode": "\n\nimport maya.cmds as cmds\n\ncmds.renderQualityNode()\ncmds.renderQualityNode( name='loResTestQuality' )", 
    "renderSettings": "\n\nimport maya.cmds as cmds\n\n# Get the name of the first and last image for the current layer\nfl = cmds.renderSettings(firstImageName=True, lastImageName=True)\nprint( 'First image is '+fl[0] )\n# This is the empty string if the scene is not set for animation\nif fl[1] == '':\n    print('Not rendering animation');\nelse:\n    print( 'Last image is '+fl[1] )", 
    "renderThumbnailUpdate": "\n\nimport maya.cmds as cmds\n\n# Turns on thumbnail updates.\ncmds.renderThumbnailUpdate(True)\n\n# Turns off thumbnail updates.\ncmds.renderThumbnailUpdate(False)", 
    "renderWindowEditor": "\n\nimport maya.cmds as cmds\n\neditor = cmds.renderWindowEditor()\n\ncmds.renderWindowEditor( editor, e=True, mq=(0.7, 0.3, 0.3, 0.5) )\n\ncmds.renderWindowEditor( editor, e=True, ar='true' )\n\ncmds.renderWindowEditor( editor, e=True, snapshot=('persp', 256, 256) )\n\ncmds.renderWindowEditor( editor, q=True, crc=True )\ncmds.renderWindowEditor( editor, e=True, crc='persp' )\n\ncmds.renderWindowEditor( editor, e=True, srg=(768, 576) )", 
    "renderWindowSelectContext": "", 
    "renderer": "\n\nimport maya.cmds as cmds\n\n# To register a renderer called \"myRenderer\":\n#\ncmds.renderer( 'myRenderer' )\n# To edit a renderer called \"myRenderer\" with its rendererUIName\n# being \"My Renderer\":\n#\ncmds.renderer( 'myRenderer', edit=True, rendererUIName='My Renderer' )\n# To register a renderer called \"anotherRenderer\" with all\n# its parameters specified.\n#\ncmds.renderer( 'anotherRenderer', rendererUIName='Another Renderer', iprRenderProcedure='mayaSoftwareIprRender', -iprOptionsProcedure='', isRunningIprProcedure='mayaSoftwareIsRunningIpr', startIprRenderProcedure='mayaSoftwareStartIprRender', stopIprRenderProcedure='mayaSoftwareStopIprRender', refreshIprRenderProcedure='mayaSoftwareRefreshIprImage', pauseIprRenderProcedure='mayaSoftwarePauseIprRender', changeIprRegionProcedure='mayaSoftwareChangeIprRegion', iprOptionsMenuLabel='IPR Tuning Options', iprOptionsSubMenuProcedure='mayaSoftwareIprUpdateOptionsSubMenu', iprRenderSubMenuProcedure='mayaSoftwareIprUpdateRenderSubMenu', renderProcedure='mayaSoftwareRender', renderOptionsProcedure='RenderOptions', renderDiagnosticsProcedure='RenderDiagnostics', commandRenderProcedure='render -batch', batchRenderProcedure='BatchRender', batchRenderOptionsProcedure='BatchRenderOptions', batchRenderOptionsStringProcedure=\"mayaSoftwareBatchRenderOptionsString\", cancelBatchRenderProcedure='CancelBatchRender', showBatchRenderProcedure='ShowBatchRender', showRenderLogProcedure='', showBatchRenderLogProcedure='', renderRegionProcedure='mayaRenderRegion', textureBakingProcedure='performConvertSolidTx', polyPrelightProcedure='performPrelight', renderingEditorsSubMenuProcedure='', logoImageName='', logoCallbackProcedure='' )\n# To add a render globals node the renderer uses:\n#\ncmds.renderer( 'anotherRenderer', edit=True, addGlobalsNode='defaultRenderGlobals' )\n# To add the tabs associated with the specified renderer\n# for the unified render globals window, use the syntax\n#\n#      renderer -edit\n#               -addGlobalsTab globalsTabLabel\n#                              globalsTabCreateProcName\n#                              globalsTabUpdateProcName\n#               renderer;\n#\n# where \"globalsTabLabel\" is the label of the tab,\n# \"globalsTabCreatedProcName\" is the name of the mel procedure\n# which is used to create the content in the tab.\n# and \"globalsTabCreatedProcName\" is the name of the mel procedure\n# which is used to update the content in the tab.\n#\n# Note that if you want to add a number of tabs, you need to repeat\n# this renderer command for each tab you wish to add, as shown below.\n#\ncmds.renderer( 'anotherRenderer', edit=True, addGlobalsTab=('Maya Software', 'createMayaSoftwareGlobalsTab', 'updateMayaSoftwareGlobalsTab') )\n# To get a list of unified render globals window tab labels associated\n# with the specified renderer.\n#\ncmds.renderer( 'anotherRenderer', query=True, globalsTabLabels=True )\n# To get a list of names of mel procedures which are used to\n# create the unified render globals window tabs associated with\n# the specified renderer.\n#\ncmds.renderer( 'anotherRenderer', query=True, globalsTabCreateProcNames=True )\n# To get a list of names of mel procedures which are used to\n# update the unified render globals window tabs associated with\n# the specified renderer.\n#\ncmds.renderer( 'anotherRenderer', query=True, globalsTabUpdateProcNames=True )\n# To view a list of registered renderers.\n#\ncmds.renderer( query=True, namesOfAvailableRenderers=True )\n# To check if anotherRenderer exists.\n#\ncmds.renderer( 'anotherRenderer', exists=True )\n# To view a list of render globals nodes used by the specified\n# renderer:\n#\ncmds.renderer( 'anotherRenderer', query=True, globalsNodes=True )", 
    "reorder": "\n\nimport maya.cmds as cmds\n\n# create a hierarchy\ncmds.sphere( n='sphere1' )\ncmds.sphere( n='sphere2' )\ncmds.sphere( n='sphere3' )\ncmds.sphere( n='sphere4' )\ncmds.group( 'sphere1', 'sphere2', 'sphere3', 'sphere4', n='group1' )\n\n# The hierarchy group1 contains sphere1, sphere2, sphere3 and sphere4.\n# The command below moves sphere2 before sphere1.\ncmds.reorder( 'sphere2', r=-1 )\n\n# make sphere1 the first sibling\ncmds.reorder( 'sphere1', front=True )\n\n# move sphere3 forward 2 siblings. Moving it forward one\n# sibling would put it at the end. Moving it forward again\n# puts it at the beginning.\ncmds.reorder( 'sphere3', r=2 )", 
    "reorderContainer": "\n\nimport maya.cmds as cmds\n\n# create a container\ncmds.sphere( n='sphere1' )\ncmds.sphere( n='sphere2' )\ncmds.sphere( n='sphere3' )\ncmds.sphere( n='sphere4' )\ncmds.container( addNode=['sphere1', 'sphere2', 'sphere3', 'sphere4'], n='sphereCon' )\n# The container sphereCon contains sphere1, sphere2, sphere3 and sphere4.\n# The command below moves sphere2 before sphere1.\ncmds.reorderContainer( 'sphere2', r=-1 )\n# make sphere1 the first sibling\ncmds.reorderContainer( 'sphere1', front=True )\n# move sphere3 forward 2 siblings. Moving it forward one\n# sibling would put it at the end. Moving it forward again\n# puts it at the beginning.\ncmds.reorderContainer( 'sphere3', r=2 )", 
    "reorderDeformers": "\n\nimport maya.cmds as cmds\n\n# Create some geometry to deform\ncmds.sphere( name='sphere1' )\ncmds.sphere( name='sphere2' )\n\n# Create a couple of deformers\ncmds.select( 'sphere1Shape', 'sphere2Shape' )\ncmds.sculpt( name='sculpt1' )\ncmds.select( 'sphere1Shape', 'sphere2Shape' )\ncmds.cluster( name='cluster1' )\n\n# Change their order\ncmds.reorderDeformers( 'sculpt1', 'cluster1', 'sphere1Shape', 'sphere2Shape' )", 
    "repeatLast": "", 
    "representation": "\n\nimport maya.cmds as cmds\n\n// Create a representation of type BoundingBox on multiple object paths.\n// Representation name is optional, and will default to the type's name.\n// When name is specified, if create representation for multiple objects,\n// these new representation nodes may have different name, which depends\n// on the implementation of representation node.\n// This will invoke the createProcedure on the specified type.\n//\ncmds.representation(['One|Object|Path', 'Two|Object|Path'],\n        name='boundingBox', type='BoundingBox')\n# Create an annotation for a representation on the given path.\n# This will invoke the annotationProcedure on the given representation's type.\n#\ncmds.representation( 'A|Representation|Path', annotation='Annotation1')\n# Edit a representation called myRepresentation, setting its label to\n# \"My Representation\":\n#\ncmds.representation('myRepresentation', edit=True, label='My Representation')\n# Register a representation type called BoundingBox with all\n# its parameters specified.  If the representation does not exist, it\n# will be registered.  If the representation is already registered,\n# its parameters will be edited.\n#\ncmds.representation(edit=True, type='BoundingBox',\n   createProcedure='createBoundingBox', createPredicate='canCreateBoundingBox',\n   typeLabel='Bounding Box')\n# Get the list of registered representation types:\n#\ncmds.representation(query=True, listTypes=True)\n# Invoke the canCreate predicate for registered type BoundingBox on\n# the argument path:\n#\ncmds.representation('On|This|Path', query=True, type='BoundingBox', canCreate=True)\n# Get the label of representation node MyBoundingBox:\n#\ncmds.representation('Path|To|MyBoundingBox', query=True, label=True)\n# Activate the representation\n#\ncmds.representation('Path|To|MyRepresentation', edit=True, active=True)\n# Inactivate the representation\n#\ncmds.representation('Path|To|MyRepresentation', edit=True, active=False)", 
    "requires": "\n\nimport maya.cmds as cmds\n\ncmds.requires( 'maya', '7.0' )\ncmds.requires( 'simpleLoftNode.so', '1.0' )", 
    "reroot": "\n\nimport maya.cmds as cmds\n\n# joint5 will be a new root joint of the skeleton.\ncmds.reroot( 'joint5' )", 
    "resampleFluid": "\n\nimport maya.cmds as cmds\n\n# set width resolution to 3\ncmds.resampleFluid( rw=3 )\n# set height resolution to 12\ncmds.resampleFluid( rh=12 )\n# set all  resolutions to 20\ncmds.resampleFluid( rw=20, rh=20, rd=20 )", 
    "resetTool": "\n\nimport maya.cmds as cmds\n\ncmds.resetTool( 'moveSuperContext' )", 
    "resolutionNode": "\n\nimport maya.cmds as cmds\n\ncmds.resolutionNode( 'customRes' )\ncmds.resolutionNode( 'customRes', name='customRes' )", 
    "resourceManager": "\n\nimport maya.cmds as cmds\n\n# List all resources starting with an \"a\"\ncmds.resourceManager(nameFilter=\"a*\")", 
    "retarget": "\n\nimport maya.cmds as cmds\n\n# retarget the motion of bob onto joe using the scaled foot placement solver\n#\ncmds.retarget( 'bob', 'joe', startFrame=0, endFrame=30, lowerBody='scaledFootPlacement' )\n# Retarget the motion of birdman onto splinterFace using the scaled foot placement\n# solver (default), using the hip-to-toe measurement to compute the scale.\n# Use the hierarchy location at frame -5 as the rest pose.\n#\ncmds.select( 'splinterFace', 'birdman', r=True )\ncmds.retarget( startFrame=0, endFrame=30, lowerScale='hipToToe', restPoseFrame=-5 )", 
    "retimeHelper": "", 
    "retimeKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a manipulator style scale key context for the graph editor\n#\ncmds.retimeKeyCtx( 'retimeKeyContext' )", 
    "reverseCurve": "\n\nimport maya.cmds as cmds\n\ncmds.reverseCurve( 'curve1', constructionHistory=True )\n# Reverses curve1 with construction history on.  The result will\n# be a string array, where the first string is the name of the new\n# reversed curve and the second string is the name of the new\n# dependency node.\n\ncmds.reverseCurve( 'curve1', ch=False, replaceOriginal=True )\n# Reverses curve1 without construction history, replacing the original.\n# The result will be a string array, where the first string\n# is the name of the curve (curve1).  Because history is off,\n# no dependency node will be created.  The reversed curve will\n# replace the original curve.\n\ncmds.reverseCurve( 'curve1', ch=True, rpo=True )\n# Reverses curve1 with history, trying to replace the original.\n# If curve1 was not a result of construction history, then this command\n# will simply replace curve1 with the reversed curve.  No dependency\n# node will be created.\n\n# If curve1 was a result of construction history, then this command\n# will insert a reverse dependency node before the curve.  eg.\n# Before reverseCurve cmd:   curve0 ---\" closeCurve DN ---\" curve1\n# After cmd:  curve0 ---\" closeCurve DN ---\" reverseCurve DN ---\" curve1\n\n# The result will be a string array , where the first string\n# is the name of the curve (curve1) and the second name is the\n# new dependency node.", 
    "reverseSurface": "\n\nimport maya.cmds as cmds\n\ncmds.reverseSurface( 'surface1', ch=True, d=0 )\ncmds.reverseSurface( 'surface1.v[0.1]', ch=True )\n# Reverses surface1 with construction history in the U direction.\n# The name of the new surface and the name of the new dependency node\n# are returned.\n\ncmds.reverseSurface( 'surface1', ch=False, rpo=True, d=1 )\ncmds.reverseSurface( 'surface1.u[0.1]', ch=True )\n# Reverses surface1 without history, with replace original on,\n# in the V direction.  Because the \"-rpo\" flag is on, the name of\n# the original surface is returned as well as the new dependency node.\n# The reversed surface will \"em\"replace\"/em\" the original surface.\n\ncmds.reverseSurface( 'surface1', ch=False, rpo=True, d=2 )\n# Reverses surface1 without history, with replace original on,\n# in both the U and V directions.\n\ncmds.reverseSurface( 'surface1', ch=False, rpo=True, d=3 )\n# Swaps the U and V directions of surface1 with history, with replace\n# original on.  This has the effect of reversing the surface normal.", 
    "revolve": "\n\nimport maya.cmds as cmds\n\n# To revolve a curve about the X axis at the origin. The profile curve is\n# revolved by 360 degrees by default.\ncmds.revolve( 'curve1', ax=(1, 0, 0), p=(0, 0, 0) )\n\n# To revolve a curve about the Y axis at 1,0,1:\ncmds.revolve( 'curve1', ax=(0, 1, 0), p=(1, 0, 1) )", 
    "rigidBody": "\n\nimport maya.cmds as cmds\n\n# Creates a rigid body with a initial velocity of 10 in the x\n# direction, a bounciness of 0.5 and a static friction coefficent\n# of 0.4.\n#\ncmds.rigidBody( n='myRigidBody', active=True, iv=(10, 0, 0), b=0.5, sf=0.4 )", 
    "rigidSolver": "\n\nimport maya.cmds as cmds\n\n# Set the playback time range to [1, 100]\ncmds.playbackOptions(min=1, max=100)\n# Create a poly cube named \"floor\"\ncmds.polyCube(w=10, h=0.10, d=10, sx=10, sy=1, sz=10, ax=(0, 1, 0), name='floor')\n# Create a poly sphere named \"ball\", then move it to 0 9 0\ncmds.polySphere(r=1, sx=20, sy=20, ax=(0, 1, 0), name='ball')\ncmds.move(0, 9.0, 0, r=True)\n# Create a new rigid body solver\ncmds.rigidSolver(create=True, name='rigidSolver1')\n# Set the floor to passive rigid body\ncmds.select('floor')\ncmds.rigidBody(passive=True, solver='rigidSolver1', name='passiveRigidBody')\n# Set the ball to active rigid body\ncmds.select('ball')\ncmds.rigidBody(active=True, solver='rigidSolver1', name='activeRigidBody')\n# Add a gravity field, and connect it to ball\ncmds.gravity(pos=(0, 0, 0), m=9.8, dx=0, dy=-1, dz=0, name='gravityField')\ncmds.connectDynamic('activeRigidBody', f='gravityField')\n# Play\ncmds.play(w=True)\n\n# Set the rigid solver to allow the ball to interpenetrate the floor, then replay\ncmds.currentTime(1, e=True)\ncmds.rigidSolver('passiveRigidBody', 'activeRigidBody', 'rigidSolver1', e=True, interpenetrate=True)\ncmds.play(w=True)\n\n# Set the rigid solver to disallow the ball to interpenetrate the floor, replay\ncmds.currentTime(1, e=True)\ncmds.rigidSolver('passiveRigidBody', 'activeRigidBody', 'rigidSolver1', e=True, collide=True)\ncmds.play(w=True)\n\n# Set the rigid solver to turn off the bounciness, replay\ncmds.currentTime(1, e=True)\ncmds.rigidSolver('rigidSolver1', e=True, bounciness=False)\ncmds.play(w=True)", 
    "roll": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\n\n# Align the horizontal direction with the world horizon\ncmds.roll( 'cameraShape1', abs=True, d=0 )\n\n# Roll the camera 15 degrees clockwise\ncmds.roll( 'cameraShape1', d=15 )\n\ncmds.roll( d=15 )", 
    "rollCtx": "\n\nimport maya.cmds as cmds\n\ncmds.rollCtx( 'rollContext', rs=30.0 )", 
    "rotate": "\n\nimport maya.cmds as cmds\n\n# create a circle and grouped cone to rotate;\ncmds.circle( n='circle1' )\ncmds.cone( ax=(0, 1, 0), n='cone1' )\ncmds.group( 'cone1', n='group1' )\n\n# rotate the active objects 45 degrees about the world space X axis\n# centered at each object's rotate pivot point.\ncmds.select( 'cone1' )\ncmds.rotate( '45deg', 0, 0, r=True )\n\n# Set the rotation values for group1 to (90, 0, 0). This is\n# equivalent to:\n#   cmds.setAttr('group1.rx',90)\n#   cmds.setAttr('group1.ry',0)\n#   cmds.setAttr('group1.rz',0)\ncmds.rotate( '90deg', 0, 0, 'group1' )\n\n# rotate the circle 180 degrees about its local space Y axis\n# centered at the rotate pivot point 1 0 0.\ncmds.rotate( 0, '180deg', 0, 'circle1', pivot=(1, 0, 0) )", 
    "rotationInterpolation": "\n\nimport maya.cmds as cmds\n\n# Converts \"nurbsCone1_rotateX\" and its sibling curves to quaternion tangent dependent format.\ncmds.rotationInterpolation( 'nurbsCone1_rotateX', convert='quaternion' )", 
    "roundCRCtx": "", 
    "roundConstantRadius": "\n\nimport maya.cmds as cmds\n\n# This rounds four edges of a cube with radius 0.9.  Because a single\n# radius is specified, it is used for all edges.  The edges must\n# be specified in matching pairs if no \"sidea\" or \"sideb\" flags\n# are used.\n#\ncube = cmds.nurbsCube(w=5, lr=1, hr=1, d=3, ch=0)\nsides = cmds.listRelatives( cube[0], c=True )\nrnd = cmds.roundConstantRadius(\n    (sides[0] + \".v[0]\"), (sides[2] + \".v[1]\"),\n    (sides[0] + \".u[1]\"), (sides[4] + \".v[1]\"),\n    (sides[0] + \".v[1]\"), (sides[3] + \".u[1]\"),\n    (sides[0] + \".u[0]\"), (sides[5] + \".u[1]\"),\n    rad=0.9 )\n\n# This adds a pair of isoparms to an existing round operation,\n# named $rnd[3] (from previous example)\n#\ncmds.roundConstantRadius( (sides[3] + '.v[0]'), (sides[5] + '.v[1]'),\n                          rnd[3], append=True, rad=0.8 )\n\n# This rounds 6 edges of a cube with different radius values.\n# The first four edges have radius 0.9 and the others have radius 1.1.\n# In this case the edges are specified in matching pairs\n# since no \"sidea\" or \"sideb\" flags are used.\n#\ncube = cmds.nurbsCube( w=5, lr=1, hr=1, d=3, ch=0 )\nsides = cmds.listRelatives( cube[0], c=True )\ncmds.roundConstantRadius( (sides[0]+\".v[0]\"), (sides[2]+\".v[1]\"),\n                          (sides[0]+\".u[1]\"), (sides[4]+\".v[1]\"),\n                          (sides[0]+\".v[1]\"), (sides[3]+\".u[1]\"),\n                          (sides[0]+\".u[0]\"), (sides[5]+\".u[1]\"),\n                          (sides[3]+\".v[0]\"), (sides[5]+\".v[1]\"),\n                          (sides[2]+\".u[1]\"), (sides[4]+\".u[0]\"),\n                          rad=[0.9, 0.9, 0.9, 0.9, 1.1, 1.1] )\n\n# This rounds a 2-to-1 compound edge.  The sidea flag indicates\n# that there two edges on side A, and one on side B.\n# The edges must be specified in the corresponding order.\n#\npln1 = cmds.nurbsPlane(w=5, ch=0, ax=(0, 1, 0))\npln2 = cmds.nurbsPlane( p=(2.5, 2.5, 1.25), ax=(1, 0, 0), w=2.5, lr=2, d=3, u=1, v=1, ch=0 )\npln3 = cmds.nurbsPlane( p=(2.5, 2.5, -1.25), ax=(1, 0, 0), w=2.5, lr=2, d=3, u=1, v=1, ch=0 )\npln4 = cmds.nurbsPlane( p=(0, 2.5, -2.5), ax=(0, 0, 1), w=5, lr=1, d=3, u=1, v=1, ch=0 )\ncmds.roundConstantRadius( (pln2[0]+'.v[0]'), (pln3[0]+'.v[0]'),\n                          (pln1[0]+'.u[1]'), (pln3[0]+'.u[1]'),\n                          (pln4[0]+'.u[1]'), rad=0.9,\n                          side=[('a',2), ('b', 1), ('a', 1), ('b', 1)] )", 
    "rowColumnLayout": "\n\nimport maya.cmds as cmds\n\n#    The following script will position the buttons in a single column.\n#\n#    +----+\n#    | b1 |\n#    +----+\n#    +----+\n#    | b2 |\n#    +----+\n#    +----+\n#    | b3 |\n#    +----+\n#\ncmds.window()\ncmds.rowColumnLayout( numberOfColumns=1 )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()\n\n#    The following script will position the buttons in a single row.\n#\n#    +----++----++----+\n#    | b1 || b2 || b3 |\n#    +----++----++----+\n#\ncmds.window()\ncmds.rowColumnLayout( numberOfRows=1 )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()\n\n#    The following script will position the buttons in 3 columns, each\n#    column a different width.\n#\n#    +----++--------++------------+\n#    | b1 ||   b2   ||     b3     |\n#    +----++--------++------------+\n#    +----++--------++------------+\n#    | b4 ||   b5   ||     b6     |\n#    +----++--------++------------+\n#    +----+\n#    | b7 |\n#    +----+\n#\ncmds.window()\ncmds.rowColumnLayout( numberOfColumns=3, columnWidth=[(1, 60), (2, 80), (3, 100)] )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()\n\n#    The following script will position the buttons in 2 rows, each\n#    row a different height.\n#\n#    +----++----++----++----+\n#    | b1 || b3 || b5 || b7 |\n#    +----++----++----++----+\n#    +----++----++----+\n#    |    ||    ||    |\n#    | b2 || b4 || b6 |\n#    |    ||    ||    |\n#    +----++----++----+\n#\ncmds.window()\ncmds.rowColumnLayout( numberOfRows=2, rowHeight=[(1, 30), (2, 60)] )\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.showWindow()", 
    "rowLayout": "\n\nimport maya.cmds as cmds\n\n#    Layout a label, field and slider such that the label is right\n#    justified and the field adjusts in size as the window is resized.\n#\ncmds.window()\ncmds.rowLayout( numberOfColumns=3, columnWidth3=(80, 75, 150), adjustableColumn=2, columnAlign=(1, 'right'), columnAttach=[(1, 'both', 0), (2, 'both', 0), (3, 'both', 0)] )\ncmds.text()\ncmds.intField()\ncmds.intSlider()\ncmds.showWindow()", 
    "runTimeCommand": "", 
    "runup": "\n\nimport maya.cmds as cmds\n\ncmds.runup( mxf=10, cache=True )\n\n# Starts at the minimum start frame of all dynamic objects\n# and plays through to frame 10.  This guarantees that the system\n# is in the same state it would be as if you had rewound and played\n# forward from frame 0.  The state of the dynamic object(s) will be\n# cached after the runup.", 
    "sampleImage": "\n\nimport maya.cmds as cmds\n\n# From now on, render sample images at high quality.\n#\ncmds.sampleImage( f=False )\n\n# Render the sample image associated with lambert1 at a resolution of\n# 128 pixels by 128 pixels.\n#\ncmds.sampleImage( r=(128, 'lambert1') )", 
    "saveAllShelves": "\n\nimport maya.cmds as cmds\n\nimport maya.mel\ngShelfTopLevel = maya.mel.eval('$tmpVar=$gShelfTopLevel')\ncmds.saveAllShelves( gShelfTopLevel )", 
    "saveFluid": "\n\nimport maya.cmds as cmds\n\n# save the current state to the initial conditions cache\ncmds.saveFluid()", 
    "saveImage": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window('window')\ncmds.paneLayout()\ncmds.saveImage( currentView=True )\ncmds.showWindow( window )", 
    "saveInitialState": "\n\nimport maya.cmds as cmds\n\ncmds.saveInitialState( 'particle1' )\n# Saves current state as initial state for particle1.\n\ncmds.saveInitialState( all=True )\n# Saves current state as initial state for all dynamics objects.", 
    "saveMenu": "\n\nimport maya.cmds as cmds\n\n# Create a window with two frames.\n#\nwin = cmds.window(title='saveMenu Example')\ncmds.columnLayout()\nframe1 = cmds.frameLayout( h=90, l='Original Menu (LMB)' )\ncmds.text( l='(click here)' )\ncmds.setParent( '..' )\nframe2 = cmds.frameLayout( h=90, l='Copy of Original (LMB)' )\ncmds.text( l='(click here)' )\ncmds.setParent( '..' )\n\n# Create a menu.\n#\nmenu1 = cmds.popupMenu( parent=frame1, b=1, mm=True )\n\ncmds.menuItem( rp='N', l='Up' )\ncmds.menuItem( rp='S', l='Down' )\ncmds.menuItem( rp='E', l='Right' )\ncmds.menuItem( rp='W', l='Left' )\ncmds.menuItem( label='Warm', sm=True )\ncmds.menuItem( l='Red' )\ncmds.menuItem( l='Orange' )\ncmds.menuItem( l='Yellow' )\ncmds.setParent( '..', m=True )\ncmds.menuItem( label='Cold', sm=True )\ncmds.menuItem( l='Green' )\ncmds.menuItem( l='Blue' )\ncmds.menuItem( l='Indigo' )\ncmds.menuItem( l='Violet' )\ncmds.setParent( '..', m=True )\ncmds.setParent( '..', m=True )\n\n# Save the menu to a file.\n#\nresult = cmds.saveMenu(menu1, 'menu_example')\n\n# Use the file to rebuild another instance of the menu.\n#\nmenu1 = cmds.popupMenu( parent=frame2, b=1, mm=True )\nmaya.mel.eval( 'source \\\"' + cmds.internalVar(userMarkingMenuDir=True) + 'menu_example.mel\\\"' )\n\n# Finish up.\nprint (\"The menu was saved in [\" + cmds.internalVar(userMarkingMenuDir=True) + result + \"]\\n\" )\ncmds.showWindow( win )", 
    "savePrefObjects": "\n\nimport maya.cmds as cmds\n\ncmds.savePrefObjects()", 
    "savePrefs": "\n\nimport maya.cmds as cmds\n\n# only save the hotkeys\ncmds.savePrefs( hotkeys=True )\n\n# save everything\ncmds.savePrefs()\n\n# only save ui layout prefs\ncmds.savePrefs( uiLayout=True )", 
    "saveShelf": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a shelf in it.\n#\nwindow = cmds.window()\ntabs = cmds.tabLayout()\nshelf = cmds.shelfLayout()\ncmds.shelfButton( '\\\"Hello\\\\n\\\"\")', image1='commandButton.png', command='(\"print' )\ncmds.tabLayout( tabs, edit=True, tabLabel=(str(shelf),'Example Shelf')  )\ncmds.showWindow( window )\n\n#    At this point the example would be made more interesting if you\n#    put some additional items on this shelf.\n\n#    Now save the shelf in the temp directory.\n#\ntempDir = cmds.internalVar( userTmpDir=True )\ncmds.saveShelf( shelf, (tempDir + 'ExampleShelf') );", 
    "saveToolSettings": "\n\nimport maya.cmds as cmds\n\ncmds.saveToolSettings()", 
    "saveViewportSettings": "\n\nimport maya.cmds as cmds\n\ncmds.saveViewportSettings()", 
    "scale": "\n\nimport maya.cmds as cmds\n\ncmds.scale( 1, 1, 1 )\ncmds.scale( 3, 3, 3, 'curve1', pivot=(1, 0, 0), absolute=True )", 
    "scaleComponents": "\n\nimport maya.cmds as cmds\n\ncmds.scaleComponents( 2, 2, 2, pivot=(0, 10, 0), rotation=(30, 40, 50) )", 
    "scaleConstraint": "\n\nimport maya.cmds as cmds\n\n# Scale cube1 at the scale of cone1.\ncmds.scaleConstraint( 'cone1', 'cube1' )\n\n# Uses the average of the scale of cone1 and surf2.\ncmds.scaleConstraint( 'cone1', 'surf2', 'cube2', w=.1 )\n\n# Sets the weight for cone1's effect on cube2 to 10.\ncmds.scaleConstraint( 'cone1', 'cube2', e=True, w=10.0 )\n\n# Removes surf2 from cube2's scaleConstraint\ncmds.scaleConstraint( 'surf2', 'cube2', e=True, rm=True )\n\n# Adds surf3 to cube2's scaleConstraint with the default weight\ncmds.scaleConstraint( 'surf3', 'cube2' )\n\n# Constrain the x and z scale of sph2 to sph1\ncmds.scaleConstraint( 'sph1', 'sph2', skip=\"y\" )", 
    "scaleKey": "\n\nimport maya.cmds as cmds\n\n# Scale keyframes from frame 10 to 20 of nurbsSphere1's translateX\n# to fill frames 10 to 30.\n#\ncmds.scaleKey( 'nurbsSphere1', time=(10,20), newStartTime=10, newEndTime=30, attribute='tx' )\n\n# Scale all the animation of the active objects\n# (range 0-30) to fill range 0 to 60.\n#\ncmds.scaleKey( time=(0,30), timeScale=2, timePivot=0 )", 
    "scaleKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a manipulator style scale key context for the graph editor\n#\ncmds.scaleKeyCtx( 'scaleKeyContext', type='rect' )", 
    "sceneEditor": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.paneLayout()\ncmds.sceneEditor()\ncmds.showWindow(window)", 
    "sceneUIReplacement": "\n\nimport maya.cmds as cmds\n\nimport maya.mel as mm\ngMainPane = mm.eval( 'global string $gMainPane; $temp = $gMainPane;' )\ncmds.sceneUIReplacement( update=gMainPane )\n\n# Try to find the modelPanel named Top View\ncmds.sceneUIReplacement( getNextPanel=('modelPanel','Top View') )\n# Result: modelPanel1 #\ncmds.modelPanel( 'modelPanel1', q=True, label=True )\n# Result: Top View #\n\n# Try to find Front View\ncmds.sceneUIReplacement( getNextPanel=('modelPanel', 'Front View') )\n# Result: modelPanel3 #\ncmds.modelPanel( 'modelPanel3', q=True, label=True )\n# Result: Front View #\n\n# Is there another Front View?  (No: all we find is a model panel called Persp View)\ncmds.sceneUIReplacement( getNextPanel=('modelPanel', 'Front View') )\n# Result: modelPanel4\ncmds.modelPanel( 'modelPanel4', q=True, label=True )\n# Result: Persp View", 
    "scmh": "\n\nimport maya.cmds as cmds\n\n# Create a new move manip context, set the active handle to X axis handle, then swith to it\ncmds.manipMoveContext('manipMoveContext1', ah=0)\ncmds.setToolTo('manipMoveContext1')\n\n# Set the active handle value to 10.(Translate the pSphere1 by (10, 0, 0))\ncmds.scmh(10, r=True)", 
    "scriptCtx": "\n\nimport maya.cmds as cmds\n\n# Simple example of \"attach curve\" tool created using scriptCtx. This tool\n# prompts the user to select two curves to attach. As soon as two curves\n# are selected, the attach is performed. It uses the selection type\n# flag 'curveParameterPoint' from \"selectType\" command to specify the\n# selection mask for this tool.\n\ncmds.scriptCtx( title='Attach Curve', totalSelectionSets=1, fcs=\"select -r $Selection1; performAttachCrv 0 \\\"\\\"\", cumulativeLists=True, expandSelectionList=True, setNoSelectionPrompt='Select two curves close to the attachment points', setSelectionPrompt='Select a second curve close to the attachment point', setDoneSelectionPrompt='Never used because setAutoComplete is set', setAutoToggleSelection=True, setSelectionCount=2, setAutoComplete=True, curveParameterPoint=True )\n\n# And a more complex example of fillet blend tool (two sets of any number\n# of \"surface curves\").  Notice how the selection lists are passed as\n# arguments to the callback function, performBlendGiven.\n\ncmds.scriptCtx( i1='birail3Gen.xpm', title='\"Birail 3+ Tool', toolCursorType='edit', totalSelectionSets=2, cumulativeLists=True, expandSelectionList=True, fcs='select -r $Selection2; performBirail 0 3 \\\"birailThreePlusProfileContext\\\" ', setAutoToggleSelection=[True,True], setAutoComplete=[False, False], setSelectionCount=[0,2], nurbsCurve=[True,True], isoparm=[True,True], curveOnSurface=[True,True], surfaceEdge=[True,True], polymeshEdge=[True,True], setNoSelectionPrompt=['Select any number of profiles','Select two rails'], setSelectionPrompt=['Select additional profiles or hit ENTER', 'Select the second rail'], setDoneSelectionPrompt=['Profiles selected. Hit ENTER to start rail selection.', 'Rails selected. Hit ENTER to compute birail. '] )\n\n# Here's Birail 3+ where you select any number of curves, then 2 rails:\n\ncmds.scriptCtx( i1='birail3Gen.xpm', title='\"Birail 3+ Tool', toolCursorType='edit', totalSelectionSets=2, cumulativeLists=True, expandSelectionList=True, fcs='select -r $Selection2; performBirail 0 3 \\\"birailThreePlusProfileContext\\\" ', setAutoToggleSelection=[True,True], setAutoComplete=[False, False], setSelectionCount=[0,2], nurbsCurve=[True,True], isoparm=[True,True], curveOnSurface=[True,True], surfaceEdge=[True,True], polymeshEdge=[True,True], setNoSelectionPrompt=['Select any number of profiles','Select two rails'], setSelectionPrompt=['Select additional profiles or hit ENTER', 'Select the second rail'], setDoneSelectionPrompt=['Profiles selected. Hit ENTER to start rail selection.', 'Rails selected. Hit ENTER to compute birail. '] )\n\n# userBirailContextCallback has \"true\" as the first argument, which suggests\n# that $Selection2 contains all of $Selection1 items (as -cumulativeLists\n# true is specified in the tool creation.)", 
    "scriptEditorInfo": "\n\nimport maya.cmds as cmds\n\n# Set the text of the input area of the Script Editor.\ncmds.scriptEditorInfo(input='// select -all; delete;')\n# Clear the input area of the Script Editor.\ncmds.scriptEditorInfo(input=\"\")\n\n# Begin recording the Script Editor history to a file called\n# tempHistoryLog.txt in your maya directory.\ncmds.scriptEditorInfo( historyFilename='tempHistoryLog.txt', writeHistory=True )\n\n# Stop recording the Script Editor history\ncmds.scriptEditorInfo(writeHistory=False )\n\n# On Windows the following line would print something like \"C:/maya/tempHistoryLog.txt\"\n# On Linux it would be \"~/maya/tempHistoryLog.txt\"\ncmds.scriptEditorInfo(query=True, historyFilename=True)\n\n# Suppress all warning and info messages\ncmds.scriptEditorInfo(suppressWarnings=True)\ncmds.scriptEditorInfo(suppressInfo=True)", 
    "scriptJob": "\n\nimport maya.cmds as cmds\n\n# create a job that deletes things when they are seleted\njobNum = cmds.scriptJob( ct= [\"SomethingSelected\",\"cmds.delete()\"], protected=True)\n\n# Now display the job\njobs = cmds.scriptJob( listJobs=True )\n\n# Now kill it (need to use -force flag since it's protected)\ncmds.scriptJob( kill=jobNum, force=True)\n\n# create a sphere, but print a warning the next time it\n# is raised over 10 units high\ndef warn():\n        height = cmds.getAttr( 'mySphere.ty' )\n        if height \" 10.0:\n                print 'Sphere is too high!'\ncmds.sphere( n='mySphere' )\n\ncmds.scriptJob( runOnce=True, attributeChange=['mySphere.ty', warn] )\n\n# create a job to detect a new attribute named \"tag\"\n#\ndef detectNewTagAttr():\n        print \"New tag attribute was added\"\n\ncmds.scriptJob( runOnce=True, attributeAdded=['mySphere.tag',detectNewTagAttr] )\ncmds.addAttr( 'mySphere', ln='tag', sn='tg', dt='string')\n\n# list all the existing conditions and print them\n# nicely\nconds2 = cmds.scriptJob( listConditions=True )\nfor cond in sorted(conds2):\n        print cond", 
    "scriptNode": "\n\nimport maya.cmds as cmds\n\n#    Create a scriptNode named script that creates a sphere when a file\n#    containing this node is loaded.\n#\nnodeName = cmds.scriptNode( st=2, bs='cmds.sphere()', n='script', stp='python')\n\n#    Test the before script.\n#\ncmds.scriptNode( nodeName, executeBefore=True )\n\n#    Add a script to create a cone when the script node is deleted.\n#\ncmds.scriptNode( nodeName, e=True, as='cmds.cone()', stp='python' )\n\n#    Test the after script\n#\ncmds.scriptNode( nodeName, executeAfter=True )", 
    "scriptTable": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window(widthHeight=(400, 300))\nform = cmds.formLayout()\ntable = cmds.scriptTable(rows=4, columns=2, label=[(1,\"Column 1\"), (2,\"Column 2\")])\n\naddButton = cmds.button(label=\"Add Row\",command=\"cmds.scriptTable(table, edit=True,insertRow=1)\")\ndeleteButton = cmds.button(label=\"Delete Row\",command=\"cmds.scriptTable(table, edit=True,deleteRow=1)\")\n\ncmds.formLayout(form, edit=True, attachForm=[(table, 'top', 0), (table, 'left', 0), (table, 'right', 0), (addButton, 'left', 0), (addButton, 'bottom', 0), (deleteButton, 'bottom', 0), (deleteButton, 'right', 0)], attachControl=(table, 'bottom', 0, addButton), attachNone=[(addButton, 'top'),(deleteButton, 'top')],  attachPosition=[(addButton, 'right', 0, 50), (deleteButton, 'left', 0, 50)] )\n\ncmds.showWindow( window )", 
    "scriptedPanel": "\n\nimport maya.cmds as cmds\n\n// NOTE: The scriptedPanelType command does not support python\n//               callbacks; these callbacks must be MEL.\n\n\nglobal proc sampleCreateCallback(string $panelName) {\n//\n//  Description:\n//      Create any editors unparented here and do\n//      any other initialization required.\n//\n//      In this example we will only declare a global array to\n//        maintain some state information.\n//\n    global float $gSampleState[5];\n\n}\n\n\nglobal proc sampleInitCallback(string $panelName) {\n//\n//  Description:\n//      Re-initialize the panel on file -new or file -open.\n//\n//      In this example we will only re-init the global array.\n//\n    global float $gSampleState[];\n\n       $gSampleState[0] = 20.2;\n       $gSampleState[1] = 50.5;\n       $gSampleState[2] = 34.7;\n       $gSampleState[3] = 2.0;\n       $gSampleState[4] = 1.0;\n\n}\n\nglobal proc sampleAddCallback(string $panelName) {\n//\n//  Description:  Create UI and parent any editors.\n//\n    global float $gSampleState[];\n\n    columnLayout -adj true topCol;\n    separator -style \"none\" -h 10;\n        frameLayout -l \"Sliders\" -mw 10;\n            columnLayout -adj true sampleCol;\n                separator -style \"none\" -h 10;\n\n                floatSliderGrp -l \"Property A\" -f true\n                    -v $gSampleState[0]\n                    fsg1;\n                floatSliderGrp -l \"Property B\" -f true\n                    -v $gSampleState[1]\n                    fsg2;\n                floatSliderGrp -l \"Property C\" -f true\n                    -v $gSampleState[2]\n                    fsg3;\n                separator -style \"none\" -h 10;\n            setParent ..;\n        setParent ..;\n\n        separator -style \"none\" -h 10;\n        frameLayout -l \"Radio Buttons\" -mw 10;\n            columnLayout sampleCol2;\n                separator -style \"none\" -h 10;\n                radioButtonGrp -nrb 3\n                    -l \"Big Options\"\n                    -la3 \"Option 1\" \"Option 2\" \"Option 3\"\n                    -select $gSampleState[3]\n                    rbg;\n                radioButtonGrp -nrb 3\n                    -l \"Little Options\"\n                    -la3 \"Option 4\" \"Option 5\" \"Option 6\"\n                    -select $gSampleState[4]\n                    rbg2;\n                separator -style \"none\" -h 10;\n\n}\n\nglobal proc sampleRemoveCallback(string $panelName) {\n//\n//  Description:\n//        Unparent any editors and save state if required.\n//\n        global float $gSampleState[];\n       //  Scope the control names to this panel.\n       //\n       string $control = `scriptedPanel -q -control $panelName`;\n       setParent $control;\n\n       $gSampleState[0] = `floatSliderGrp -q -v fsg1`;\n       $gSampleState[1] = `floatSliderGrp -q -v fsg2`;\n       $gSampleState[2] = `floatSliderGrp -q -v fsg3`;\n       $gSampleState[3] = `radioButtonGrp -q -sl rbg`;\n       $gSampleState[4] = `radioButtonGrp -q -sl rbg2`;\n}\n\nglobal proc sampleDeleteCallback(string $panelName) {\n//\n//  Description:\n//        Delete any editors and do any other cleanup required.\n\n}\n\nglobal proc string sampleSaveStateCallback(string $panelName) {\n//\n//  Description:\n//        Return a string that will restore the current state\n//        when it is executed.\n\n        global float $gSampleState[];\n       $indent = \"\\n\\t\\t\\t\";\n\n       return ($indent+\"$gSampleState[0]=\"+$gSampleState[0]+\";\" +\n               $indent+\"$gSampleState[1]=\"+$gSampleState[1]+\";\" +\n               $indent+\"$gSampleState[2]=\"+$gSampleState[2]+\";\" +\n               $indent+\"$gSampleState[3]=\"+$gSampleState[3]+\";\" +\n               $indent+\"$gSampleState[4]=\"+$gSampleState[4]+\";\" +\n               $indent+\"setSamplePanelState $panelName;\\n\" );\n}\n\nglobal proc setSamplePanelState( string $whichPanel ) {\n//\n//  Description:\n//        This is a convenience proc to set the panel state from the\n//        global array\n\n        global float $gSampleState[];\n\n       //  Scope the control names to this panel.\n       //\n       string $control = `scriptedPanel -q -control $whichPanel`;\n       if (\"\" != $control) {\n              setParent $control;\n\n              floatSliderGrp -e -v $gSampleState[0] fsg1;\n              floatSliderGrp -e -v $gSampleState[1] fsg2;\n              floatSliderGrp -e -v $gSampleState[2] fsg3;\n              if (0 != $gSampleState[3]) {\n               radioButtonGrp -e -sl $gSampleState[3] rbg;\n              };\n           if (0 != $gSampleState[4]) {\n               radioButtonGrp -e -sl $gSampleState[4] rbg2;\n           }\n       }\n}\n\n# Below is the python code to create and use scriptedPanelType and scriptedPanel using the MEL\n# callbacks defined above.\n\n# Use unique flag as we don't want two panels sharing the same global data.\ncmds.scriptedPanelType( 'sampleScriptedPanelType', ccb='sampleCreateCallback', icb='sampleInitCallback', acb='sampleAddCallback', rcb='sampleRemoveCallback', dcb='sampleDeleteCallback', scb='sampleSaveStateCallback', unique=True )\n\n#  This script will create an unparented scripted panel, place it\n#  in one window, remove it, and place it in another window then\n#  return it to the first window.\n#\n#\n#  Create unparented scripted panel\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', unParent=True, type='sampleScriptedPanelType', label='Sample' )\n\n#    Create a couple of windows and parent the scripted panel to the first.\n#\ncmds.window( 'sampleWin' )\ncmds.frameLayout( 'frm', lv=False, bv=False )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\ncmds.showWindow()\n\ncmds.window( 'sampleWin2', w=cmds.window('sampleWin', q=True, w=True), h=cmds.window('sampleWin', q=True, h=True) )\ncmds.frameLayout( 'frm', lv=False, bv=False )\ncmds.showWindow()\n\n#    Reparent the scripted panel to the second window.\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin2|frm' )\n\n#    Reparent the scripted panel back to the first window.\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n\n#    Close both windows\n#\ncmds.window( 'sampleWin', e=True, visible=False )\ncmds.window( 'sampleWin2', e=True, visible=False )\n\n#    The scripted panel should appear in the Panel menu.  Select\n#    Panels-\"Panel-\"Sample and the panel should appear in the main window.\n#", 
    "scriptedPanelType": "\n\nimport maya.cmds as cmds\n\n// NOTE: The scriptedPanelType command does not support python\n//               callbacks; these callbacks must be MEL.\n\n\nglobal proc sampleCreateCallback(string $panelName) {\n//\n//  Description:\n//      Create any editors unparented here and do\n//      any other initialization required.\n//\n//      In this example we will only declare a global array to\n//        maintain some state information.\n//\n    global float $gSampleState[5];\n\n}\n\n\nglobal proc sampleInitCallback(string $panelName) {\n//\n//  Description:\n//      Re-initialize the panel on file -new or file -open.\n//\n//      In this example we will only re-init the global array.\n//\n    global float $gSampleState[];\n\n       $gSampleState[0] = 20.2;\n       $gSampleState[1] = 50.5;\n       $gSampleState[2] = 34.7;\n       $gSampleState[3] = 2.0;\n       $gSampleState[4] = 1.0;\n\n}\n\nglobal proc sampleAddCallback(string $panelName) {\n//\n//  Description:  Create UI and parent any editors.\n//\n    global float $gSampleState[];\n\n    columnLayout -adj true topCol;\n    separator -style \"none\" -h 10;\n        frameLayout -l \"Sliders\" -mw 10;\n            columnLayout -adj true sampleCol;\n                separator -style \"none\" -h 10;\n\n                floatSliderGrp -l \"Property A\" -f true\n                    -v $gSampleState[0]\n                    fsg1;\n                floatSliderGrp -l \"Property B\" -f true\n                    -v $gSampleState[1]\n                    fsg2;\n                floatSliderGrp -l \"Property C\" -f true\n                    -v $gSampleState[2]\n                    fsg3;\n                separator -style \"none\" -h 10;\n            setParent ..;\n        setParent ..;\n\n        separator -style \"none\" -h 10;\n        frameLayout -l \"Radio Buttons\" -mw 10;\n            columnLayout sampleCol2;\n                separator -style \"none\" -h 10;\n                radioButtonGrp -nrb 3\n                    -l \"Big Options\"\n                    -la3 \"Option 1\" \"Option 2\" \"Option 3\"\n                    -select $gSampleState[3]\n                    rbg;\n                radioButtonGrp -nrb 3\n                    -l \"Little Options\"\n                    -la3 \"Option 4\" \"Option 5\" \"Option 6\"\n                    -select $gSampleState[4]\n                    rbg2;\n                separator -style \"none\" -h 10;\n\n}\n\nglobal proc sampleRemoveCallback(string $panelName) {\n//\n//  Description:\n//        Unparent any editors and save state if required.\n//\n        global float $gSampleState[];\n       //  Scope the control names to this panel.\n       //\n       string $control = `scriptedPanel -q -control $panelName`;\n       setParent $control;\n\n       $gSampleState[0] = `floatSliderGrp -q -v fsg1`;\n       $gSampleState[1] = `floatSliderGrp -q -v fsg2`;\n       $gSampleState[2] = `floatSliderGrp -q -v fsg3`;\n       $gSampleState[3] = `radioButtonGrp -q -sl rbg`;\n       $gSampleState[4] = `radioButtonGrp -q -sl rbg2`;\n}\n\nglobal proc sampleDeleteCallback(string $panelName) {\n//\n//  Description:\n//        Delete any editors and do any other cleanup required.\n\n}\n\nglobal proc string sampleSaveStateCallback(string $panelName) {\n//\n//  Description:\n//        Return a string that will restore the current state\n//        when it is executed.\n\n        global float $gSampleState[];\n       $indent = \"\\n\\t\\t\\t\";\n\n       return ($indent+\"$gSampleState[0]=\"+$gSampleState[0]+\";\" +\n               $indent+\"$gSampleState[1]=\"+$gSampleState[1]+\";\" +\n               $indent+\"$gSampleState[2]=\"+$gSampleState[2]+\";\" +\n               $indent+\"$gSampleState[3]=\"+$gSampleState[3]+\";\" +\n               $indent+\"$gSampleState[4]=\"+$gSampleState[4]+\";\" +\n               $indent+\"setSamplePanelState $panelName;\\n\" );\n}\n\nglobal proc setSamplePanelState( string $whichPanel ) {\n//\n//  Description:\n//        This is a convenience proc to set the panel state from the\n//        global array\n\n        global float $gSampleState[];\n\n       //  Scope the control names to this panel.\n       //\n       string $control = `scriptedPanel -q -control $whichPanel`;\n       if (\"\" != $control) {\n              setParent $control;\n\n              floatSliderGrp -e -v $gSampleState[0] fsg1;\n              floatSliderGrp -e -v $gSampleState[1] fsg2;\n              floatSliderGrp -e -v $gSampleState[2] fsg3;\n              if (0 != $gSampleState[3]) {\n               radioButtonGrp -e -sl $gSampleState[3] rbg;\n              };\n           if (0 != $gSampleState[4]) {\n               radioButtonGrp -e -sl $gSampleState[4] rbg2;\n           }\n       }\n}\n\n# Below is the python code to create and use scriptedPanelType and scriptedPanel using the MEL\n# callbacks defined above.\n\n# Use unique flag as we don't want two panels sharing the same global data.\ncmds.scriptedPanelType( 'sampleScriptedPanelType', ccb='sampleCreateCallback', icb='sampleInitCallback', acb='sampleAddCallback', rcb='sampleRemoveCallback', dcb='sampleDeleteCallback', scb='sampleSaveStateCallback', unique=True )\n\n#  This script will create an unparented scripted panel, place it\n#  in one window, remove it, and place it in another window then\n#  return it to the first window.\n#\n#\n#  Create unparented scripted panel\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', unParent=True, type='sampleScriptedPanelType', label='Sample' )\n\n#    Create a couple of windows and parent the scripted panel to the first.\n#\ncmds.window( 'sampleWin' )\ncmds.frameLayout( 'frm', lv=False, bv=False )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\ncmds.showWindow()\n\ncmds.window( 'sampleWin2', w=cmds.window('sampleWin', q=True, w=True), h=cmds.window('sampleWin', q=True, h=True) )\ncmds.frameLayout( 'frm', lv=False, bv=False )\ncmds.showWindow()\n\n#    Reparent the scripted panel to the second window.\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin2|frm' )\n\n#    Reparent the scripted panel back to the first window.\n#\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, unParent=True )\ncmds.scriptedPanel( 'sampleScriptedPanel', e=True, parent='sampleWin|frm' )\n\n#    Close both windows\n#\ncmds.window( 'sampleWin', e=True, visible=False )\ncmds.window( 'sampleWin2', e=True, visible=False )\n\n#    The scripted panel should appear in the Panel menu.  Select\n#    Panels-\"Panel-\"Sample and the panel should appear in the main window.\n#", 
    "scrollField": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.paneLayout( configuration='horizontal4' )\ncmds.scrollField( editable=False, wordWrap=True, text='Non editable with word wrap' )\ncmds.scrollField( editable=False, wordWrap=False, text='Non editable with no word wrap' )\ncmds.scrollField( editable=True, wordWrap=True, text='Editable with word wrap' )\ncmds.scrollField( editable=True, wordWrap=False, text='Editable with no word wrap' )\ncmds.showWindow()", 
    "scrollLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window( widthHeight=(350, 150) )\nscrollLayout = cmds.scrollLayout(\n        horizontalScrollBarThickness=16,\n        verticalScrollBarThickness=16)\ncmds.rowColumnLayout( numberOfColumns=3 )\n\nfor index in range(10):\n        cmds.text()\n        cmds.intField()\n        cmds.intSlider()\n\ncmds.showWindow()\n\nvalue = cmds.scrollLayout(scrollLayout, query=True, scrollAreaValue=True)\ntop = value[0]\nleft = value[1]", 
    "sculpt": "\n\nimport maya.cmds as cmds\n\ncmds.polyPlane(w=24,h=24,sx=20,sy=20)\n\n# Deforms whatever is currently on the selection list\ncmds.sculpt()\n\n# Increase the effect of the deformation\ncmds.sculpt( 'sculpt1', edit=True, maxDisplacement=3.0 )\n\n# Try another faster deformation mode\ncmds.sculpt( 'sculpt1', edit=True, mode='flip', insideMode='ring' )", 
    "selLoadSettings": "\n\nimport maya.cmds as cmds\n\n# Given the scene:\n#\n#\n#        a [+]\n#       /     \\\n#      b [-]   c [+]\n#             /     \\\n#            d [-]   e [+]\n#\n# With the IDs:\n#    a = 0\n#    b = 1\n#    c = 2\n#    d = 3\n#    e = 4\n# set c, d, and e to the unloaded state\ncmds.selLoadSettings( '2', '3', '4', e=True, deferReference=1 )\n# this will also set c, d, and e to the unloaded state\ncmds.selLoadSettings( '2', e=True, deferReference=1 )\n# set b to the loaded state\ncmds.selLoadSettings( '1', e=True, deferReference=0 )\n# set b and d to the loaded state\ncmds.selLoadSettings( '1', '3', e=True, deferReference=0 )", 
    "select": "\n\nimport maya.cmds as cmds\n\n# create some objects and add them to a set\ncmds.sphere( n='sphere1' )\ncmds.sphere( n='sphere2' )\ncmds.sets( 'sphere1', 'sphere2', n='set1' )\n\n# select all dag objects and all dependency nodes\ncmds.select( all=True )\n\n# clear the active list\ncmds.select( clear=True )\n\n# select sphere2 only if it is visible\ncmds.select( 'sphere2', visible=True )\n\n# select a couple of objects regardless of visibilty\ncmds.select( 'sphere1', r=True )\ncmds.select( 'sphere2', add=True )\n\n# remove one of the spheres from the active list (using toggle)\ncmds.select( 'sphere1', tgl=True )\n\n# remove the other sphere from the active list\ncmds.select( 'sphere2', d=True )\n\n# the following selects all the members of set1\ncmds.select( 'set1' )\n\n# this selects set1 itself\ncmds.select( 'set1', ne=True )\n\n\n# Some examples selecting with namespaces:\n\n# create a namespace and an object in the namespace\ncmds.namespace( add='foo' )\ncmds.namespace( set='foo' )\ncmds.sphere( n='bar' )\n\n# 'select bar' will not select \"bar\" unless bar is in the\n# root namespace. You need to qualify the name with the\n# namespace (shown below).\ncmds.select( 'foo:bar' )\n\n# select all the objects in a namespace\ncmds.select( 'foo:*' )", 
    "selectContext": "\n\nimport maya.cmds as cmds\n\n# Create a new select context, then switch to it\ncmds.selectContext('selectContext1')\ncmds.setToolTo('selectContext1')", 
    "selectKey": "\n\nimport maya.cmds as cmds\n\n# Select all translateX keyframes on nurbsSphere1 in the range 10 to 20.\n#\ncmds.selectKey( 'nurbsSphere1', time=(10,20), attribute='translateX' )\n\n# select all the animation of the active objects, range 0-30\n#\ncmds.selectKey( time=(0,30) )", 
    "selectKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a select key context for the graph editor\n#\ncmds.selectKeyCtx( 'selectKeyContext' )", 
    "selectKeyframe": "", 
    "selectKeyframeRegionCtx": "\n\nimport maya.cmds as cmds\n\n# Create a select key context for the dope sheet editor\n#\ncmds.selectKeyframeRegionCtx( 'selectKeyframeRegionContext' )", 
    "selectMode": "\n\nimport maya.cmds as cmds\n\ncmds.selectMode( object=True )\ncmds.selectMode( q=True, component=True )", 
    "selectPref": "\n\nimport maya.cmds as cmds\n\ncmds.selectPref(popupMenuSelection=True,disableComponentPopups=True)", 
    "selectPriority": "\n\nimport maya.cmds as cmds\n\ncmds.selectPriority( q=True, nurbsCurve=True )\ncmds.selectPriority( nurbsCurve=10 )\ncmds.selectPriority( handle=9, ikHandle=8 )", 
    "selectType": "\n\nimport maya.cmds as cmds\n\ncmds.selectType( allObjects=True )\ncmds.selectType( q=True, cv=True )\ncmds.selectType( allObjects=True, allComponents=False )", 
    "selectedNodes": "", 
    "selectionConnection": "\n\nimport maya.cmds as cmds\n\n#    Example 1.\n#\n#    Create a window with two Outliner editors and a\n#    selection connection network.  Editor 1 will display the\n#    current scene's active list.  Editor 2 will display the items\n#    selected in Editor 1.\n#\nwindow = cmds.window('window', wh=(400, 300))\ncmds.paneLayout( configuration='vertical2' )\neditor1 = cmds.outlinerEditor()\neditor2 = cmds.outlinerEditor()\n\n#    Create the selection connection network.\n#\ninputList = cmds.selectionConnection( activeList=True )\nfromEditor1 = cmds.selectionConnection()\nfromEditor2 = cmds.selectionConnection()\ncmds.editor( editor1, edit=True, mainListConnection=inputList )\ncmds.editor( editor1, edit=True, selectionConnection=fromEditor1 )\ncmds.editor( editor2, edit=True, mainListConnection=fromEditor1 )\ncmds.editor( editor2, edit=True, selectionConnection=fromEditor2 )\n\ncmds.showWindow( window )\n\n#    Create some objects and select them.\n#\ncmds.sphere()\ncmds.cone()\ncmds.cylinder()\ncmds.select( all=True )\n\n# Now as you select objects on the left side, they will be\n# displayed on the right side.  You can also add a callback\n# script to do further processing on the list when objects\n# are added. (Use -removeScript for when objects are removed.)\n\ndef addScriptCallback( array ):\n    print \"Contents of callback array: %s\\n\" % array\n\ncmds.selectionConnection( fromEditor1, e=True, addScript=addScriptCallback )\n\n\n#    Example 2.\n#\n#    Create a selection connection for a paritcular object.  Delete\n#    the selection connection and the object.\n#\ncmds.sphere( name='sphere' )\n\n#    Create a selection connection to wrap the sphere.\n#\ncmds.selectionConnection( 'holder', object='sphere' )\n\n#    Select the sphere using the selection connection.\n#\ncmds.select( 'holder' )\n\n#    Delete the members (sphere) of the selection connection\n#\ncmds.delete( 'holder' )\n\n#    Delete the selection connection (does not delete the members of\n#    the selection connection.\n#\ncmds.deleteUI( 'holder' )", 
    "separator": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.rowColumnLayout( numberOfColumns=2, columnAlign=(1, 'right'), columnAttach=(2, 'both', 0), columnWidth=(2, 150) )\n\ncmds.text( label='Default' )\ncmds.separator()\ncmds.text( label='None' )\ncmds.separator( style='none' )\ncmds.text( label='Single' )\ncmds.separator( style='single' )\ncmds.text( label='Double' )\ncmds.separator( height=10, style='double' )\ncmds.text( label='Single Dash' )\ncmds.separator( height=10, style='singleDash' )\ncmds.text( label='Double Dash' )\ncmds.separator( height=40, style='doubleDash' )\ncmds.text( label='Etched In' )\ncmds.separator( height=40, style='in' )\ncmds.text( label='Etched Out' )\ncmds.separator( height=40, style='out' )\ncmds.setParent( '..' )\ncmds.showWindow()", 
    "sequenceManager": "\n\nimport maya.cmds as cmds\n\n// Get the current Maya time, based on the Sequence time\ncmds.sequenceManager(q=True, currentTime=True);", 
    "setAttr": "\n\nimport maya.cmds as cmds\n\ncmds.sphere( n=\"sphere\" )\n\n# Set a simple numeric value\ncmds.setAttr( 'sphere.translateX', 5 )\n\n# Lock an attribute to prevent further modification\ncmds.setAttr( 'sphere.translateX', lock=True )\n\n# Make an attribute unkeyable\ncmds.setAttr( 'sphere.translateZ', keyable=False )\n\n# Set an entire list of multi-attribute values in one command\ncmds.setAttr( 'sphereShape.weights[0:6]',1, 1, 2, 1, 1, 1, 2,size=7)\n# Set an attribute with a compound numeric type\ncmds.setAttr('sphere.rotate', 0, 45, 90, type=\"double3\")\n\n# Clamp the value of the attribute to the min/max\n# Useful floating point math leaves the value just\n# a little out of range - here the min is .01\ncmds.setAttr( 'anisotropic1.roughness', 0.0099978, clamp=True )\n\n# Set a multi-attribute with a compound numeric type\ncmds.setAttr( 'sphereShape.controlPoints[0:2]', 0, 0, 0, 1, 1, 1, 2, 2, 2,type=\"double3\" )", 
    "setAttrMapping": "\n\nimport maya.cmds as cmds\n\ncmds.attachDeviceAttr( d='spaceball', ax='XAxis', at='translateX' )\ncmds.setAttrMapping( d='spaceball', ax='XAxis', at='translateX', scale=0.01 )\n\n# The first command will assign the XAxis of the spaceball to\n# the translateX attribute of the selected objects.\n# The second command sets the scaling of attribute value to\n# 0.01 of the value of the axis. This results in finer control\n# since the motions of the spaceball are damped.", 
    "setDefaultShadingGroup": "\n\nimport maya.cmds as cmds\n\n# Create a new blue shader\nblinn = cmds.shadingNode( 'blinn', asShader=True )\ncmds.setAttr( blinn+\".color\", 0.15, 0.35, 1.0,  type='double3' )\nblinnSG = cmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='blinnSG' );\ncmds.connectAttr( blinn+\".outColor\", blinnSG+\".surfaceShader\", force=True)\n\n# Make it the default\ncmds.setDefaultShadingGroup( blinnSG )", 
    "setDrivenKeyframe": "\n\nimport maya.cmds as cmds\n\n# Create a curve and a cone\n#\ncmds.curve(d=3,p=[(-10, 0, 0),(-6, 0, 10),(-3, 0, -10),(10, 0, 0)],k=[0, 0, 0, 1, 1, 1])\ncmds.polyCone()\n\n# To set the keyframe on the selected object's translateX based on\n# curve1's rotateZ:\ncmds.setDrivenKeyframe( at='translateX', cd='curve1.rz' )\n\n# To set the keyframe on pCone1.tx based on the value of curve1.rz:\ncmds.setDrivenKeyframe( 'pCone1.tx', cd='curve1.rz' )\n\n# To query the current driver of pCone1.tx:\ncmds.setDrivenKeyframe( 'pCone1.tx', q=True, cd=True )\n\n# To query the available drivers of pCone1.tx:\ncmds.setDrivenKeyframe( 'pCone1.tx', q=True, dr=True )", 
    "setDynamic": "\n\nimport maya.cmds as cmds\n\ncmds.setDynamic( 'myParticles', on=True )\n# Sets myParticles.isDynamic true.\n\ncmds.setDynamic( all=True, off=True )\n# Sets isDynamic false for all particle objects in the scene.", 
    "setEditCtx": "\n\nimport maya.cmds as cmds\n\ncmds.setEditCtx( 'setEditContext' )", 
    "setFluidAttr": "\n\nimport maya.cmds as cmds\n\n# set density for entire fluid\ncmds.setFluidAttr( at='density', fv=1.0 )\n# add 3.5 to the density at the cell x=1, y=2, z=3\ncmds.setFluidAttr( at='density', ad=True, fv-3.5, xi=1, yi=2, zi=3 )\n# clear the density for the whole fluid\ncmds.setFluidAttr( at='density', cl=True )\n# reset the velocity at the cell x=1, y=2, z=3\ncmds.setFluidAttr( at='velocity', re=True, xi=1, yi=2, zi=3 )\n# set the velocity at the centers of the voxels on plane y=5\n# to approximately (-1, 0, 0)\ncmds.setFluidAttr( at='velocity', vv=(-1, 0, 0), yi=5 )\n# set the Z-component of the velocity at the bottom of cell [0, 0, 0]\n# to exactly 1.3\ncmds.setFluidAttr( at='velocity', z=True, xi=0, yi=0, zi=0, fv=1.3 )\n# set the X-component of the velocity at the right of cell [5, 3, 2]\n# (which is also the left of cell [6, 3, 2]) to exactly 4.8\ncmds.setFluidAttr( at='velocity', x=True, xi=5, yi=3, zi=2, fv=4.8 )\n# set the density to a random value in the range 0.1 to 0.9\n# the fv flag specfies the base value, and then we add a a\n# random value in the range of -fr to +fr\ncmds.setFluidAttr( at='density', fv=0.5, fr=0.4 )", 
    "setFocus": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.textField('tf0', changeCommand='cmds.setFocus(\"tf1\")' )\ncmds.textField('tf1', changeCommand='cmds.setFocus(\"tf2\")' )\ncmds.textField('tf2', changeCommand='cmds.setFocus(\"tf0\")' )\ncmds.showWindow()", 
    "setInfinity": "\n\nimport maya.cmds as cmds\n\ncmds.setInfinity( pri='linear', poi='constant' )", 
    "setInputDeviceMapping": "\n\nimport maya.cmds as cmds\n\ncmds.assignInputDevice( '\"move -r XAxis YAxis ZAxis\"', d='spaceball' )\ncmds.setInputDeviceMapping( d='spaceball', ax=['XAxis', 'YAxis', 'ZAxis'], scale=0.01, r=True )\n\n# The first command will assign the move command to the spaceball.\n# The second command will scale the three named axes by 0.01 and\n# only return the changes in device position.", 
    "setKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create a set key context for the graph editor\n#\ncmds.setKeyCtx( 'setKeyContext' )", 
    "setKeyPath": "\n\nimport maya.cmds as cmds\n\n# Apply setKeyPath command on the currently selected object at current time:\ncmds.setKeyPath()\n\n# Apply setKeyPath command on an object named \"ball\" at current time:\ncmds.setKeyPath( 'ball' )", 
    "setKeyframe": "\n\nimport maya.cmds as cmds\n\n# Set a keyframe at the current time on all \"keyable\"\n# attributes of the selected objects.\n#\ncmds.setKeyframe()\n\n# Set a keyframe so that translateX has a value of 10\n# at the current time, regardless of its current position\n#\ncmds.setKeyframe( v=10, at='translateX' )\n\n# Set keyframes for translateX on two objects at t=0 and\n# t=10 seconds.  (Note that if mysteryObject has no\n# attribute named translateX, no keyframe is set for mysteryObject.)\n#\ncmds.setKeyframe( 'nurbsSphere1', 'mysteryObject', attribute='translateX', t=['0sec','10sec'] )", 
    "setKeyframeBlendshapeTargetWts": "\n\nimport maya.cmds as cmds\n\n# first create a blendShape\n#\ncmds.polySphere()\ncmds.duplicate()\ncmds.duplicate()\ncmds.select( 'pSphere2', 'pSphere1', 'pSphere3', r=True )\ncmds.blendShape()\n# Select one of the targets, and key its per-point weights.\n# Typically this would be done after painting per-point weights\n# for the target.\n#\ncmds.select( 'pSphere2', r=True )\ncmds.setKeyframeBlendshapeTargetWts()", 
    "setMenuMode": "\n\nimport maya.cmds as cmds\n\n# Use the \"Rendering\" Menu Set, and at the same time get the one currently used.\nprevMenuMode = cmds.setMenuMode('renderingMenuSet')\n# Print the current Menu Set: \"renderingMenuSet\".\nprint( cmds.setMenuMode() )", 
    "setNodeTypeFlag": "\n\nimport maya.cmds as cmds\n\n# don't display unit conversion nodes\ncmds.setNodeTypeFlag( cmds.objectType(tagFromType='unitConversion'), display=False )\ncmds.setNodeTypeFlag( 'mesh', threadSafe=True )\ncmds.setNodeTypeFlag( 'mesh', q='true', threadSafe=True )\n// Returns 1", 
    "setParent": "\n\nimport maya.cmds as cmds\n\n#  Create a window with a menu bar and two menu bar layouts.\n#\nwindow = cmds.window(menuBar=True, widthHeight=(300, 200) )\nfileMenu = cmds.menu( label='File')\ncmds.menuItem( label='Open' )\n\ncmds.paneLayout( configuration='vertical2' )\n\nleftMenuBarLayout = cmds.menuBarLayout()\nleftMenu = cmds.menu( label='Left' )\ncmds.menuItem( label='One' )\ncmds.setParent( '..' )\n\ncmds.menuBarLayout()\ncmds.menu( label='Right' )\nrightSubMenu = cmds.menuItem(subMenu=True, label='Colors' )\ncmds.setParent( '..' )\ncmds.showWindow( window )\n\n#  Add item to the \"File\" menu.\n#\ncmds.setParent( fileMenu, menu=True )\ncmds.menuItem( label='Save' )\n\n#  Add item to the \"Left\" menu, explicitly ignore default parent\n#    by setting -p/parent flag.\n#\ncmds.menuItem( parent=leftMenu, label='Two' )\n\n#  Add more items to the \"File\" menu because it is still the\n#    default parent.\n#\ncmds.menuItem( divider=True )\ncmds.menuItem( label='Close' )\n\n#  Add another menu to the left menu bar layout.\n#\ncmds.setParent( leftMenuBarLayout )\ncmds.menu( label='Middle' )\ncmds.menuItem( label='Three' )\n\n#  Add items to right sub menu.\n#\ncmds.setParent( rightSubMenu, menu=True )\ncmds.menuItem( label='Red' )\ncmds.menuItem( label='Blue' )\ncmds.menuItem( label='Green' )", 
    "setParticleAttr": "\n\nimport maya.cmds as cmds\n\ncmds.setParticleAttr( 'particle1', at='velocity', vv=(1, 2, 3) )\n# This will set the velocity of all of the particles in particle1\n# to \"\" 1, 2, 3 \"\".\n\ncmds.select( 'particleShape1.pt[0:7]', 'particleShape1.pt[11]' )\ncmds.setParticleAttr( vv=(1, 2, 3), at='velocity' )\ncmds.setParticleAttr( 'particleShape1', at='velocity' )\n\n# This will set the velocity of particles 0-7 and 11 of\n# particleShape1 to \"\" 1, 2, 3 \"\".  The rest of the particles are\n# not changed.", 
    "setRenderPassType": "\n\nimport maya.cmds as cmds\n\n# create a render pass for diffuse reflection\n#\ncmds.createNode( 'renderPass', name='myDiffusePass' );\n# Result: myDiffusePass #\ncmds.setRenderPassType( 'myDiffusePass', type='diffuse' );\n# Result: true #", 
    "setStartupMessage": "\n\nimport maya.cmds as cmds\n\ncmds.setStartupMessage( 'Initializing Main View' )", 
    "setToolTo": "\n\nimport maya.cmds as cmds\n\ncmds.setToolTo( 'moveSuperContext' )", 
    "setUITemplate": "\n\nimport maya.cmds as cmds\n\n#    Create a new template.\n#\nif cmds.uiTemplate( 'ExampleTemplate', exists=True ):\n        cmds.deleteUI( 'ExampleTemplate', uiTemplate=True )\n\ncmds.uiTemplate( 'ExampleTemplate' )\n\ncmds.button( defineTemplate='ExampleTemplate', width=100, height=40, align='left' )\ncmds.frameLayout( defineTemplate='ExampleTemplate', borderVisible=True, labelVisible=False )\n\n#    Create a window and apply the template.\n#\nwindow = cmds.window()\ncmds.setUITemplate( 'ExampleTemplate', pushTemplate=True )\ncmds.columnLayout( rowSpacing=5 )\n\ncmds.frameLayout()\ncmds.columnLayout()\ncmds.button( label='One' )\ncmds.button( label='Two' )\ncmds.button( label='Three' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.frameLayout()\ncmds.columnLayout()\ncmds.button( label='Red' )\ncmds.button( label='Green' )\ncmds.button( label='Blue' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.setUITemplate( popTemplate=True )\n\ncmds.showWindow( window )", 
    "setXformManip": "\n\nimport maya.cmds as cmds\n\n# makes manip disappear\ncmds.setXformManip( suppress=True )\n\n# set manip to object space\ncmds.setXformManip( worldSpace=False )\n\n# returns false\ncmds.setXformManip( q=True, ws=True )", 
    "sets": "\n\nimport maya.cmds as cmds\n\n# create some objects\ncmds.sphere( n=\"sphere1\" )\ncmds.cone( n=\"cone1\" )\n\n# create a set with whatever is currently active\ncmds.select( 'sphere1' )\nnewSet1 = cmds.sets()\ncmds.select( 'cone1' )\nnewSet2 = cmds.sets()\n\n# Query the members of a set\ncmds.sets( newSet1, q=True )\n\n# create a set which contains two sets\ncmds.sets( newSet1, newSet2, n=\"setOfSets\" )\n\n# To select a set, the -noExpand flag must be used. Otherwise\n# the members of a set are selected instead.\ncmds.select( newSet1, noExpand=True )\ncmds.ls( selection=True )\n\n# Select the members of a set\ncmds.select( newSet1 )\ncmds.ls( selection=True )\n\n# Create a vertex set named ballVertices. This will contain\n# all the vertices of the sphere.\ncmds.sets( 'sphere1', n=\"ballVertices\", v=1 )\ncmds.select( 'ballVertices' )\n\n# Return the union of two sets\ncmds.sets( newSet2, un=newSet1 )\n\n# Test whether a list of sets have common members\ncmds.sets( 'ballVertices',ii=newSet1)\n\n# Test whether the sphere is a member of the set\ncmds.sets('sphere1',im=newSet1)\n\n# Remove the sphere from a set\ncmds.sets( 'sphere1', rm=newSet1 )\n\n# Test again whether the sphere is a member of the set\ncmds.sets( 'sphere1', im=newSet1 )", 
    "shadingConnection": "\n\nimport maya.cmds as cmds\n\ncmds.shadingConnection( 'lambert1.color', e=True, cs=0 )\ncmds.shadingConnection( 'spotLightShape1.intensity', q=True, cs=True )", 
    "shadingGeometryRelCtx": "\n\nimport maya.cmds as cmds\n\ncmds.shadingGeometryRelCtx()", 
    "shadingLightRelCtx": "\n\nimport maya.cmds as cmds\n\ncmds.shadingLightRelCtx()", 
    "shadingNetworkCompare": "\n\nimport maya.cmds as cmds\n\ncmds.shadingNetworkCompare( 'blinn1SG', 'blinn2SG' )\n# Result: shadingNetworkComparison1\ncmds.shadingNetworkCompare( 'shadingNetworkComparison1', query=True, equivalent=True )\n# Result: 1\ncmds.shadingNetworkCompare( 'shadingNetworkComparison1', query=True, network1=True )\n# Result: blinn1SG blinn1\ncmds.shadingNetworkCompare( 'shadingNetworkComparison1', delete=True )", 
    "shadingNode": "\n\nimport maya.cmds as cmds\n\nmyShader = cmds.shadingNode('anisotropic', asShader=True)", 
    "shapeCompare": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere()\ncmds.polySphere()\ncmds.select( cl=True )\ncmds.select( 'pSphere1', 'pSphere2', r=True )\ncmds.shapeCompare()", 
    "shelfButton": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a shelf in it.  You can add more items to\n#    this shelf by creating more 'shelfButton' objects or by dragging\n#    other shelf items to the window.  Similary, you can delete the\n#    shelf items with the 'deleteUI' command or by dragging the items\n#    to the trash can located on the main Maya window shelf.\n#\nwindow = cmds.window( title = 'shelfButton Example')\ntabs = cmds.tabLayout()\nshelf = cmds.shelfLayout()\n\n#    Create some shelf buttons...\n#\n#    1.  A button that prints a message to the Command Line.\n#\ncmds.shelfButton( annotation='Print \"Hello\".', image1='commandButton.png', command='print \"Hello\\\\n\"' )\n\n#    2.  A button that will create a sphere.\n#\ncmds.shelfButton( annotation='Create a sphere.', image1='sphere.png', command='cmds.sphere()' )\n\n#    3.  A button that will open the Attribute Editor window.\n#\ncmds.shelfButton(annotation='Show the Attribute Editor.', image1='menuIconWindow.png', command='import maya.mel; maya.mel.eval(\"openAEWindow\")' )\n\n#    4.  A button with a label that will create a cone\n#\ncmds.shelfButton(annotation='Create a cone.', image1='cone.png', command='cmds.cone()', imageOverlayLabel='4th')\n\n#    5.  A button with a label and color that will call undo\n#\ncmds.shelfButton(annotation=\"Undo last operation.\",\n    image1=\"undo.png\", command=\"undo\", imageOverlayLabel=\"undo\",\n    overlayLabelColor=(1, .25, .25))\n\n#    6.  A button with a label, color and background that will call redo\n#\ncmds.shelfButton(annotation=\"Redo last operation.\",\n    image1=\"redo.png\", command=\"redo\", imageOverlayLabel=\"redo\",\n    overlayLabelColor=(1, 1, .25), overlayLabelBackColor=(.15, .9, .1, .4))\n\ncmds.tabLayout( tabs, edit=True, tabLabel=(shelf, 'Example Shelf') )\n\ncmds.showWindow( window )", 
    "shelfLayout": "\n\nimport maya.cmds as cmds\n\n# Create 4 shelves with 3 icons\ncmds.window()\ncmds.tabLayout()\n\nsh1 = cmds.shelfLayout(\"First\", style=\"iconOnly\",\n                                           backgroundColor=(.9, .2, .2))\nsh1b1 = cmds.shelfButton(image1=\"textureEditor.png\",\n                                                 label=\"textureEditor\", annotation=\"textureEditor\",\n                                                 command=\"TextureViewWindow\",\n                                                 imageOverlayLabel=\"1\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(1, .25, .25, .5))\nsh1b2 = cmds.shelfButton(image1=\"undo.png\",\n                                                 label=\"undo\", annotation=\"undo\",\n                                                 command=\"undo\",\n                                                 imageOverlayLabel=\"1\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(1, .25, .25, .5))\nsh1b3 = cmds.shelfButton(image1=\"redo.png\",\n                                                 label=\"redo\", annotation=\"redo\",\n                                                 command=\"redo\",\n                                                 imageOverlayLabel=\"1\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(1, .25, .25, .5))\ncmds.setParent('..')\n\nsh2 = cmds.shelfLayout(\"Second\", style=\"textOnly\",\n                                           backgroundColor=(.2, .9, .2))\nsh2b1 = cmds.shelfButton(image1=\"textureEditor.png\",\n                                                 label=\"textureEditor\", annotation=\"textureEditor\",\n                                                 command=\"TextureViewWindow\",\n                                                 imageOverlayLabel=\"2\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, .25, .5))\nsh2b2 = cmds.shelfButton(image1=\"undo.png\",\n                                                 label=\"undo\", annotation=\"undo\",\n                                                 command=\"undo\",\n                                                 imageOverlayLabel=\"2\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, .25, .5))\nsh2b3 = cmds.shelfButton(image1=\"redo.png\",\n                                                 label=\"redo\", annotation=\"redo\",\n                                                 command=\"redo\",\n                                                 imageOverlayLabel=\"2\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, .25, .5))\ncmds.setParent('..')\n\nsh3 = cmds.shelfLayout(\"Third\", style=\"iconAndTextHorizontal\",\n                                           backgroundColor=(.2, .2, .9))\nsh3b1 = cmds.shelfButton(image1=\"textureEditor.png\",\n                                                 label=\"textureEditor\", annotation=\"textureEditor\",\n                                                 command=\"TextureViewWindow\",\n                                                 imageOverlayLabel=\"3\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, .25, 1, .5))\nsh3b2 = cmds.shelfButton(image1=\"undo.png\",\n                                                 label=\"undo\", annotation=\"undo\",\n                                                 command=\"undo\",\n                                                 imageOverlayLabel=\"3\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, .25, 1, .5))\nsh3b3 = cmds.shelfButton(image1=\"redo.png\",\n                                                 label=\"redo\", annotation=\"redo\",\n                                                 command=\"redo\",\n                                                 imageOverlayLabel=\"3\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, .25, 1, .5))\ncmds.setParent('..')\n\n\nsh4 = cmds.shelfLayout(\"Fourth\", style=\"iconAndTextVertical\")\nsh4b1 = cmds.shelfButton(image1=\"textureEditor.png\",\n                                                 label=\"textureEditor\", annotation=\"textureEditor\",\n                                                 command=\"TextureViewWindow\",\n                                                 imageOverlayLabel=\"4\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, 1, .5))\nsh4b2 = cmds.shelfButton(image1=\"undo.png\",\n                                                 label=\"undo\", annotation=\"undo\",\n                                                 command=\"undo\",\n                                                 imageOverlayLabel=\"4\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, 1, .5))\nsh4b3 = cmds.shelfButton(image1=\"redo.png\",\n                                                 label=\"redo\", annotation=\"redo\",\n                                                 command=\"redo\",\n                                                 imageOverlayLabel=\"4\",\n                                                 overlayLabelColor=(.1, .1, .1),\n                                                 overlayLabelBackColor=(.25, 1, 1, .5))\ncmds.setParent('..')\n\ncmds.setParent('..')\ncmds.showWindow()\n\n# Move some icons around\n\n# Move undo to the first position in shelf 1\ncmds.shelfLayout(sh1, edit=True, position=(sh1b2, 1))\n\n# This does nothing\ncmds.shelfLayout(sh2, edit=True, position=(sh2b2, 2))\n\n# Move undo to the last position in shelf 3\ncmds.shelfLayout(sh3, edit=True, position=(sh3b2, 3))\n\n# Swap textureEditor and redo in shelf 4\ncmds.shelfLayout(sh4, edit=True, position=[(sh4b1, 3), (sh4b3, 1)])", 
    "shelfTabLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.shelfTabLayout( 'mainShelfTab', image='smallTrash.png', imageVisible=True )\ncmds.shelfLayout( 'Dynamics' )\ncmds.setParent( '..' )\ncmds.shelfLayout( 'Rendering' )\ncmds.setParent( '..' )\ncmds.shelfLayout( 'Animation' )\ncmds.setParent( '..' )\ncmds.showWindow()", 
    "shot": "\n\nimport maya.cmds as cmds\n\nmyShot = cmds.shot('myShot', st=10, et=19);\ncmds.shot(myShot, e=True, sst=100, set=119);\ncmds.shot(myShot, q=True, st=True);\n# Result: 10.0 #\ncmds.shot(myShot, q=True, sst=True);\n# Result: 100.0 #\ncmds.shot(myShot, e=True, pst=10);\ncmds.shot(myShot, q=True, set=True);\n# Result: 119.0 #\ncmds.shot(myShot, e=True, prt=5);\ncmds.shot(myShot, q=True, set=True);\n# Result: 124.0 #\ncmds.shot(myShot, q=True, sd=True);\n# Result: 25.0 #", 
    "shotRipple": "\n\nimport maya.cmds as cmds\n\n// A shot initially starting at sequence time 0 was edited to start 10 frames later.\n// adjust the rest of the shots accordingly\ncmds.shotRipple(shotName, startTime=0, startDelta=10)\n// A shot initially ending at frame 10 was edited to start 5 frames earlier.\n// adjust the rest of the shots accordingly\ncmds.shotRipple(shotName, endTime=10, endDelta=-5)\n// A shot starting at frame 10 and ending at frame 20 was just deleted\n// adjust the rest of the shots accordingly (if necessary)\ncmds.shotRipple(shotName, delete=1,startTime=10,endTime=20)", 
    "shotTrack": "\n\nimport maya.cmds as cmds\n\n#  Move the shot named \"shot2\" to track 3\n#\ncmds.shotTrack( 'shot2', track=3 )\n# Lock the track containing the shot named \"shot1\"\n#\ncmds.shotTrack( 'shot1', lock=True )\n# Remove any empty tracks\n#\ncmds.shotTrack(removeEmptyTracks=True)\n# shotTrack -q -track shot1;\n#\ncmds.shotTrack( 'shot1', q=True, track=True )", 
    "showHelp": "\n\nimport maya.cmds as cmds\n\n# View the documentation for the launchBrowser command\n#\ncmds.showHelp( 'Commands/showHelp.html', docs=True )\n# View the Autodesk home page\n#\ncmds.showHelp( 'http://www.autodesk.com/', absolute=True )\n# Query for the full path to the help page on the Align Tool\n#\ncmds.showHelp( 'AlignTool', q=True )\n# Set the help lookup-table to $MAYA_APP_DIR/customHelpTable\n#\ncmds.showHelp( 'customHelpTable', helpTable=True )\n# View the help topic \"Particle\" found in customHelpTable.dat\n#\ncmds.showHelp( 'Particle' )", 
    "showHidden": "\n\nimport maya.cmds as cmds\n\n# create a sphere and group it, then hide the sphere and the group.\ncmds.sphere( n='sphere1' )\ncmds.group( n='group1' )\ncmds.hide( 'group1', 'sphere1' )\n\n# make the sphere visible. Note that you still can't see it\n# because the group is invisible.\ncmds.showHidden( 'sphere1' )\n\n# make the sphere and the group visible.\ncmds.showHidden( 'sphere1', above=True )\n\n# make everything visible. This will make the cameras (which are\n# normally invisible) visible as well.\ncmds.showHidden( all=True )", 
    "showManipCtx": "\n\nimport maya.cmds as cmds\n\n# Creates a new show manip context.\ncmds.showManipCtx()", 
    "showSelectionInTitle": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window(widthHeight=(400, 100))\ncmds.paneLayout()\ncmds.scrollField(wordWrap=True, text='The title of this window will reflect the current object selection.')\ncmds.showWindow(window)\n\ncmds.showSelectionInTitle(window)\ncmds.sphere()", 
    "showShadingGroupAttrEditor": "\n\nimport maya.cmds as cmds\n\ncmds.showShadingGroupAttrEditor()", 
    "showWindow": "\n\nimport maya.cmds as cmds\n\ncmds.showWindow( 'myWindow1' )", 
    "simplify": "\n\nimport maya.cmds as cmds\n\ncmds.polySphere()\ncmds.setKeyframe( '.tx' )\ncmds.simplify( time=(1,10) )", 
    "singleProfileBirailSurface": "\n\nimport maya.cmds as cmds\n\n#Create a surface by sweeping profile \"curve1\" along the two rails\n#given by isoparms surface1.u[0] and surface2.u[0.5].\ncmds.singleProfileBirailSurface( 'curve1', 'surface1.u[0]', 'surface2.u[0.5]', ch=True )\n\n# create a tangent continuous surface across the profile.\ncmds.singleProfileBirailSurface( 'surface1.u[0]', 'curve1', 'curve2', ch=True, tp1=True )", 
    "skinBindCtx": "\n\nimport maya.cmds as cmds\n\ncmds.skinBindCtx( 'skinBindContext' )", 
    "skinCluster": "\n\nimport maya.cmds as cmds\n\n# Create a joint chain and a polygonal plane.\ncmds.select(d=True)\ncmds.joint(p=(-3.0, 0.0,-12.0))\ncmds.joint(p=(-3.0, 0.0, -5.0))\ncmds.joint(p=(1.0, 0.0, 5.5))\ncmds.joint(p=(6.0, 0.0, 10.0))\ncmds.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\n\n# Bind the joint chain that contains joint1 to pPlane1\n# and assign a dropoff of 4.5 to all the joints\n#\ncmds.skinCluster( 'joint1', 'pPlane1', dr=4.5)\n\n# Undo the previous command and bind only joint1 and joint3 to pPlane1\n#\ncmds.undo();\ncmds.skinCluster('joint1', 'joint3', 'pPlane1',tsb=True)\n\n# Set the maximum number of transforms influencing each\n# point to 3\ncmds.skinCluster('skinCluster1',e=True,mi=3)\n\n# Add transform joint2 to the list of transforms\n# that influence the bound skin\n#\ncmds.select('pPlane1')\ncmds.skinCluster(edit=True,ai='joint2')\n\n# Query the influences for the skinCluster\n#\ncmds.skinCluster('skinCluster1',query=True,inf=True)\n\n# Add a curve influence object\n#\ncmds.curve(d=3,p=[(2.0, 0.0, -7.0),(5.0, 0.0, -4.0),(6.0, 0.0, 1.0),(6.0, 0.0, 4.0),(5.0, 0.0, 6.0)],k=[0,0,0,1,2,2,2])\n\n# Get the number of nurbsSamples taken along curve1\n#\ncmds.skinCluster('skinCluster1',edit=True,ai='curve1')\ncmds.skinCluster('skinCluster1',inf='curve1',query=True,ns=True)\n\n# Set the dropoff for joint3 to 5.0\n#\ncmds.skinCluster('skinCluster1',e=True,inf='joint3',dr=5.0)\n\n# Query for the dropoff for joint3\n#\ncmds.skinCluster('skinCluster1',inf='joint3',q=True,dr=True)", 
    "skinPercent": "\n\nimport maya.cmds as cmds\n\n# Create a joint chain and a polygonal plane and bind them as skin\ncmds.select(d=True)\ncmds.joint(p=(-3.0, 0.0,-12.0))\ncmds.joint(p=(-3.0, 0.0, -5.0))\ncmds.joint(p=(1.0, 0.0, 5.5))\ncmds.joint(p=(6.0, 0.0, 10.0))\ncmds.polyPlane(w=20.0,h=20.0,sx=25,sy=25)\ncmds.skinCluster( 'joint1', 'pPlane1' )\n\n# For vtx[100], set the weight wrt joint1 to 0.2, the weight\n# wrt joint3 to 0.8 and adjust the remaining weights to keep\n# the overall weight normalized (i.e. set all other joints to zero,\n# since the weights we are setting sum to 1.0)\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', transformValue=[('joint1', 0.2), ('joint3', 0.8)])\n\n# Get the weight values corresponding to all of the influences\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', query=True, value=True )\n\n# Get the weight values that are above 0.5\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', ignoreBelow=0.5, query=True, value=True )\n\n# Get the weight of vtx[100] corresponding to joint1\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', transform='joint1', query=True )\n\n# Normalize the existing weights for vtx[100]\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', normalize=True )\n\n# Reset the weights for vtx[100] to their default values\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1.vtx[100]', resetToDefault=True )\n\n# Zero all the weights that are below 0.1\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1', pruneWeights=0.1 )\n\n# Zero all the weights\n#\ncmds.skinPercent( 'skinCluster1', 'pPlane1', pruneWeights=100, normalize=False )\n\n# Assign weights to a large number of vertices,\n# several at a time to reduce the number of calls\n# to the skinPercent command.\n#\nfor i in range(0,675,10):\n   cmds.select('pPlane1.vtx[%i]' % i,'pPlane1.vtx[%i]' % (i+1), 'pPlane1.vtx[%i]' % (i+2), 'pPlane1.vtx[%i]' % (i+3), 'pPlane1.vtx[%i]' % (i+4), 'pPlane1.vtx[%i]' % (i+5), 'pPlane1.vtx[%i]' % (i+6), 'pPlane1.vtx[%i]' % (i+7), 'pPlane1.vtx[%i]' % (i+8), 'pPlane1.vtx[%i]' % (i+9))\n   cmds.skinPercent( 'skinCluster1',transformValue=[('joint1', 0.5),('joint2', 0.5)] )", 
    "smoothCurve": "\n\nimport maya.cmds as cmds\n\n#Create a curve, then smooth it\ncmds.curve(p=[(0, 0, 0), (3, 5, 6), (5, 6, 7), (9, 9, 9)], n='curve1')\ncmds.smoothCurve('curve1.cv[*]', s=10)", 
    "smoothTangentSurface": "\n\nimport maya.cmds as cmds\n\ncmds.smoothTangentSurface( 'surface1', ch=True, p=0.3, d=0 )\ncmds.smoothTangentSurface( 'surface1.v[0.3]', ch=True )\n# Smoothes surface1 along parameter value v = 0.3. When the\n# isoparm is specified, the direction and parameter value is\n# implied and the \"p\" and \"d\" flags can be omitted.\n\ncmds.smoothTangentSurface( 'surface1', ch= True, p= (0.3, 0.5, 0.8), nk=2, d=0 )\n# Smoothes along parameter values v = 0.3, 0.5 and 0.8.", 
    "snapKey": "\n\nimport maya.cmds as cmds\n\n# Two ways to snap all keys on nurbsSphere1 to integer values.\n#\ncmds.snapKey( 'nurbsSphere1', tm=1.0 )\ncmds.snapKey( 'nurbsSphere1' )\n\n# Snap active objects' keys between times 10 and 20 so that\n# they have times that are multiples of 0.5.\n#\ncmds.snapKey( t=(10,20), tm=0.5 )\n\n# Snap active objects' keys between times 10 and 20 so that\n# they have times that are multiples of 0.5 and values that\n# are multiples of 1.0.\n#\ncmds.snapKey( t=(10,20), tm=0.5, vm=1.0 )", 
    "snapMode": "\n\nimport maya.cmds as cmds\n\n# Turn curve snapping on\ncmds.snapMode( curve=True )\n\n# Returns true if point snapping is on\ncmds.snapMode( q=True, point=True )", 
    "snapTogetherCtx": "\n\nimport maya.cmds as cmds\n\n# Create two nurbs spheres, then move them apart\ncmds.sphere(r=3, n='nurbsSphere1')\ncmds.move(5, 0, 0)\ncmds.sphere(r=3, n='nurbsSphere2')\ncmds.move(-5, 0, 0)\n\n# Create a new snap together tool context, set it to move objects only, then switch to it\n# You can use this tool to snap two spheres together\ncmds.snapTogetherCtx('snapTogetherCtx1', so=False)\ncmds.setToolTo('snapTogetherCtx1')", 
    "snapshot": "\n\nimport maya.cmds as cmds\n\n# animate a sphere\ncmds.sphere(n='sphere1')\ncmds.currentTime('0')\ncmds.setKeyframe('.t')\ncmds.currentTime('30')\ncmds.move(10,0,1)\ncmds.setKeyframe('.t')\n\n# Evaluate and display \"sphere1\" as it appears\n# at times 0, 10, 20, and 30.  Modifications to sphere1\n# will update the copies.\n#\ncmds.snapshot( 'sphere1', constructionHistory=True, startTime=0, endTime=30, increment=10 )\n\n# Evaluate and display \"sphere1\" as it appears\n# at times 0, 10, 20, and 30.  Further modifications to sphere1\n# should have no affect on the copies since constructionHistory is off.\n#\ncmds.snapshot( 'sphere1', constructionHistory=False, startTime=0, endTime=30, increment=10 )", 
    "snapshotBeadContext": "", 
    "snapshotBeadCtx": "\n\nimport maya.cmds as cmds\n\n# Create a snapshot bead context that will show in tangents\nctx = cmds.snapshotBeadCtx(inTangent = True)\ncmds.setToolTo(ctx)", 
    "snapshotModifyKeyCtx": "\n\nimport maya.cmds as cmds\n\n# Create an insert key context\nctx = cmds.snapshotModifyKeyCtx()\ncmds.setToolTo(ctx)", 
    "soft": "\n\nimport maya.cmds as cmds\n\ncmds.sphere()\ncmds.soft( 'nurbsSphere1', c=True )\n\n# Creates a sphere named nurbsSphere1 and converts nurbSphere1 into\n# a soft object.  The particle portion of the soft object will\n# be parented (with its own transform) under nurbsSphere1.\n\ncmds.sphere()\ncmds.soft( 'nurbsSphere1', d=True )\n\n# Same as the previous example, except that the soft command will make\n# a duplicate of nurbsSphereShape1.  The resulting soft body will be\n# completely independent of nurbSphere1 and its children.  Input connections\n# to nurbsSphereShape1 will be duplicated, but not any upstream history\n# (in other words, just plain \"duplicate\").\n\ncmds.sphere()\ncmds.soft( 'nurbsSphere1', dh=True )\n\n# Same as the previous example, except that upstream history on\n# nurbsSphereShape1 will be duplicated as well (equivalent to\n# \"duplicate history\").\n\ncmds.sphere()\ncmds.soft( 'nurbSphere1', g=0.3 )\n\n# This will make a duplicate of the shape under nurbSphere1 (as for -d),\n# and  use it as the shape for the newly created soft object.\n# The original nurbsSphereShape1 will be made a goal for the particles of\n# softy, with a goal weight of 0.3.  This will make those particles try to\n# follow nurbSphere1 loosely as it moves around.\n\ncmds.soft( 'foobar', q=True )\n# Returns true if foobar is a soft object.\n\ncmds.soft( 'foobar', 'foobarParticles', q=True )\n\n# Returns true if foobar and foobarParticles are parts of the same\n# soft object.  This is useful because when you select a soft body,\n# both the overall transform and the particle transform get put into\n# the selection list.", 
    "softMod": "\n\nimport maya.cmds as cmds\n\n# Create a softMod which uses the transformation of elbow1\n#\ncmds.joint(p=(2,0,0),name=\"elbow1\")\ncmds.joint(p=(4,0,0),name=\"wrist1\")\n\ncmds.sphere()\ncmds.softMod( wn=('elbow1', 'elbow1') )\n\n# Edit softMod1 to use the transformation of wrist1.\n#\ncmds.softMod( 'softMod1', e=True, wn=('wrist1', 'wrist1') )\n\n# Create a relative softMod with its own softMod handle. The\n# softMod handle is drawn as the letter \"S\".\n#\ncmds.polyCube();\ncmds.softMod( rel=True )\n\n# Modify the membership of an existing softMod. First, find\n# the name of the softMod's associated set, then use the sets\n# command to edit the set membership (add a cube and remove a plane).\n#\ncmds.listConnections( 'softMod1', type='objectSet' )\n# Result:[u'softMod1Set'] #\ncmds.sets( 'pCube2', add='softMod1Set' )\ncmds.sets( 'pCube1', rm='softMod1Set' )", 
    "softModContext": "", 
    "softModCtx": "\n\nimport maya.cmds as cmds\n\ncmds.softModCtx()", 
    "softSelect": "\n\nimport maya.cmds as cmds\n\n# Enable soft selection\ncmds.softSelect(sse=1)\n\n# Setup global soft select with radius and curve\ncmds.softSelect(sse=1,ssd=2.0,ssc='0,1,2,1,0,2',ssf=2)", 
    "softSelectOptionsCtx": "", 
    "sound": "\n\nimport maya.cmds as cmds\n\n# Create an audio node for a sound file, and have it\n# start at time 10.  This command will return the name\n# of the created node, something like \"audio1\".\n#\ncmds.sound( offset=10, file='ohNo.aiff' )\n\n# In order to have this sound displayed in a\n# timeControl widget (like the timeSlider) use a\n# command like this one, where the global MEL variable\n# $gPlayBackSlider is the name of the widget to display\n# the sound in.\n#\nimport maya.mel\ngPlayBackSlider = maya.mel.eval( '$tmpVar=$gPlayBackSlider' )\ncmds.timeControl( gPlayBackSlider, edit=True, sound='audio1' )", 
    "soundControl": "\n\nimport maya.cmds as cmds\n\n# To display sound in a soundControl, there must first be a sound\n# node in the scene. We'll create one and give it the name \"ohNo\".\n# Note that the argument to the -file flag must be a path to a valid\n# soundfile.\n#\ncmds.sound( file='ohNo.aiff', name='ohNo' )\n\n# Create a sound control (named \"soundScrubber\")\n# and have it display the sound associated with audio node \"ohNo\".\n#\ncmds.window()\ncmds.frameLayout( lv=False )\ncmds.soundControl( 'soundScrubber', width=600, height=45, sound='ohNo', displaySound=True, waveform='both' )\ncmds.showWindow()\n\n# Now setup \"soundScrubber\" to actually scrub with\n# mouse drags.\n#\npressCmd = \"soundControl -e -beginScrub soundScrubber\"\nreleaseCmd = \"soundControl -e -endScrub soundScrubber\"\ncmds.soundControl( 'soundScrubber', e=True, pc=cmds.soundControl('soundScrubber',e=True,beginScrub=True, rc=cmds.sound('soundScrubber',e=True,endScrub=True)))", 
    "spBirailCtx": "", 
    "spaceLocator": "\n\nimport maya.cmds as cmds\n\n# Creates a space locator at (1, 1, 1).\ncmds.spaceLocator( p=(1, 1, 1) )\n# Creates a space locator at (1, 1, 1) in inches.\ncmds.spaceLocator( p=('1in', '1in', '1in') )\n# Creates a space locator at the default position (0, 0, 0).\ncmds.spaceLocator()", 
    "sphere": "\n\nimport maya.cmds as cmds\n\n# Create sphere with radius 10\ncmds.sphere( r=10 )\n\n# Query the radius of the new sphere\nr = cmds.sphere( 'nurbsSphere1', q=True, r=True )\n\n# Create half sphere\ncmds.sphere( ssw=0, esw=180 )\n\n# Use tolerance to determine how many spans the new sphere has\ncmds.sphere( ut=True, tol=0.01 )\n\n# Use sections to determine how many spans the new sphere has\ncmds.sphere( ut=False, s=8 )", 
    "spotLight": "\n\nimport maya.cmds as cmds\n\n# Create a spot light\nlight = cmds.spotLight(coneAngle=45)\n\n# Change the cone angle value\ncmds.spotLight( light, e=True, coneAngle=33 )\n\n# Query it\ncmds.spotLight( light, q=True, coneAngle=True )\n# Result:33#", 
    "spotLightPreviewPort": "\n\nimport maya.cmds as cmds\n\nlight = cmds.spotLight()\ncmds.window()\ncmds.columnLayout('r')\ncmds.spotLightPreviewPort('slPP', widthHeight=(256, 256), spotLight=light)\ncmds.showWindow()", 
    "spreadSheetEditor": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window( widthHeight=(400, 300) )\ncmds.paneLayout()\nactiveList = cmds.selectionConnection( activeList=True )\ncmds.spreadSheetEditor( mainListConnection=activeList )\ncmds.showWindow( window )", 
    "spring": "\n\nimport maya.cmds as cmds\n\ncmds.spring( 'particle1', s=1.5, d=.3, mnd=0, mxd=5, n='spring1' )\n# Creates a spring object named spring1 with a strength of 1.5 and a\n# damping factor of 0.3 containing a spring between every pair of points in\n# particle1 that are within 0.0 and 5.0 units apart (except those already\n# connected by a spring).\n\ncmds.spring( 'particle1', 'spring1', add=True, mnd=0, mxd=5 )\n# Creates between every pair of points in particle1 that are within 0.0\n# and 5.0 units apart (except those already connected by a spring), and adds\n# them to the existing spring object spring1.\n\ncmds.spring( 'particle1', 'spring1', add=True, mnd=0, mxd=5, ce='false' )\n# Same as the previous example, but will not check for existing springs\n# in order to avoid duplication, and will create a new spring even between\n# pairs of particles which already have one.\n\ncmds.spring( 'particle1', 'particle2', exclusive=1, all=1 )\n# Creates a spring between every pair of particles such that one\n# particle is in particle1 and the other is in particle2.  Does not create\n# any springs between pairs in the same object.  Does not create springs\n# between particles already connected by a spring.", 
    "squareSurface": "\n\nimport maya.cmds as cmds\n\n# Creating square surfaces with three curves and fixed continuity type:\n\ncrv1 = cmds.curve( d=3, p=( (8, 0, 3), (5, 0, 3), (2, 0, 2), (0, 0, 0)) )\ncrv2 = cmds.curve( d=3, p=( (8, 0, -4), (5, 0, -3), (2, 0, -2), (0, 0, 0)) )\ncrv3 = cmds.curve( d=3, p=( (8, 0, 3), (9, 3, 2), (11, 3, 1), (8, 0, -4)) )\n\n# These curves form a rough triangle shape pointing at the origin.\n\ncmds.squareSurface( crv3, crv1, crv2, ct1=1, ct2=1, ct3=1 )\n\n# Creating square surfaces with four curves, tangent continuity\n# type and to use 6 points per span in checking the continuity:\n\ncrv1 = cmds.curve( d=3, p=( (-2, 0, 4), (-2, 0, 5), (1, 0, 3), (3, 0, 4), (6, 0, 5) ) )\ncrv2 = cmds.curve( d=3, p=( (6, 0, 5), (8, 0, 2), (8, 0, -3), (7, 0, -4 ) ) )\ncrv3 = cmds.curve( d=3, p=( (7, 0, -4), (2, 0, -3), (-1, 0, -5), (-2, 0, -4) ) )\ncrv4 = cmds.curve( d=3, p=( (-2, 0, 4), (-4, 0, 1), (-4, 0, -3), (-2, 0, -4) ) )\n\n# These curves form a rough square shape around the origin.\n\ncmds.squareSurface( crv1, crv2, crv3, crv4, cfc=6, ct1=2, ct2=2, ct3=2, ct4=2 )", 
    "srtContext": "\n\nimport maya.cmds as cmds\n\n# To see if an srtContext named \"Transform\" exists:\ncmds.srtContext( 'Transform', q=True, exists=True )", 
    "stackTrace": "", 
    "stitchSurface": "\n\nimport maya.cmds as cmds\n\n# Stitch the two surfaces along the two specified surface isoparam with C0 continuity.\n# Since wt0 = 0.0, both the surfaces are stitched to surface2.vn[0] really.\ncmds.stitchSurface( 'surface1.vn[1.0]', 'surface2.vn[0.0]', kg0=False, kg1=True, cascade=False, ns=100, wt0=0.0, wt1=1.0 )", 
    "stitchSurfaceCtx": "", 
    "stitchSurfacePoints": "\n\nimport maya.cmds as cmds\n\n# stitch together four corner control vertices to the average of the four corners.\ncmds.stitchSurfacePoints( 'nurbsPlane2.cv[0][0]', 'nurbsPlane1.cv[3][0]', 'nurbsPlane4.cv[0][3]', 'nurbsPlane3.cv[3][3]', ewt=True )\n\n# stitch together two edit points to the edit point nurbsPlane2.ep[0][0].\ncmds.stitchSurfacePoints( 'nurbsPlane2.ep[0][0]', 'nurbsPlane1.ep[1][0]', ewt=False )", 
    "stringArrayIntersector": "\n\nimport maya.cmds as cmds\n\n# Create an intersector\n#\nmyIntersector = cmds.stringArrayIntersector('stringArrayIntersector')\n\n# Intersect some string arrays using the intersector\n#\ninitialArray = ['Excellent', 'Smithers', 'doh']\ncmds.stringArrayIntersector( myIntersector, edit=True, intersect=initialArray )\ncmds.stringArrayIntersector( myIntersector, edit=True, intersect=['Smithers', 'Homer'] )\n\n# Query the intersector to see what the intersection is so far\n#\ncmds.stringArrayIntersector( myIntersector, query=True )\n# Result: Smithers #\n\n# Reset the intersector so that you can use it again with new string\n# arrays\n#\ncmds.stringArrayIntersector( myIntersector, edit=True, reset=True )\n\n# Delete the intersector as we are now done with it\n#\ncmds.deleteUI( myIntersector )", 
    "stroke": "\n\nimport maya.cmds as cmds\n\ncmds.stroke( s=10, n='armScar' )", 
    "subdAutoProjection": "\n\nimport maya.cmds as cmds\n\n# Create a subd sphere with default UVs.\nmel.eval( \"createSubdSphereProc\" )\n\n# Automatic projections with 6 planes.\ncmds.subdAutoProjection( 'subdivSphere1.smf[*][*]' )", 
    "subdCleanTopology": "\n\nimport maya.cmds as cmds\n\n# To clean topology of two subdiv surfaces.\ncmds.subdCleanTopology( 'surface', 'surface2' )", 
    "subdCollapse": "\n\nimport maya.cmds as cmds\n\n# To create a new subd surface whose level 0 (base mesh) matches\n# the level 3 vertices of the given surface.\ncmds.subdCollapse( 'subdivShape1', level=3 )", 
    "subdDisplayMode": "", 
    "subdDuplicateAndConnect": "\n\nimport maya.cmds as cmds\n\ncmds.subdDuplicateAndConnect( 'pSubd1' )", 
    "subdEditUV": "\n\nimport maya.cmds as cmds\n\n# To tweak the u and v values of selected uvs:\ncmds.subdEditUV( relative=True, uValue=0.05925926, vValue=0.05555556 )\n# To set absolute values for u and v values of selected uvs:\ncmds.subdEditUV( relative=False, uValue=0.556, vValue=0.56 )\n# To rotate selected uv points about a pivot:\ncmds.subdEditUV( pivotU=0.5, pivotV=0.5, angle=-15 )\n# To scale selected uv points about a pivot:\ncmds.subdEditUV( pivotU=0.5, pivotV=0.5, scaleU=-0.06, scaleV=-0.06 )", 
    "subdLayoutUV": "\n\nimport maya.cmds as cmds\n\n# Create a cube\nmel.eval( \"createSubdCubeProc\" )\n\n# Layout all UVs in the texture plane.\ncmds.subdLayoutUV( 'subdivCube1.smf[*][*]', l=2, fr=True, se=2, sc=1 )", 
    "subdListComponentConversion": "\n\nimport maya.cmds as cmds\n\ncmds.subdListComponentConversion( 'subdShape.smp[5][6]', 'subdShape.smp[9][10]', fv=True, tf=True )\n# Returns a list of faces that are connected to the given vertices.\n\ncmds.subdListComponentConversion( 'subdShape.sme[0][0]', 'subdShape.smp[3][0]', 'subdShape.smp[8][0]', tf=True )\n# Returns a list of faces that are connected to the given components.\n\ncmds.subdListComponentConversion( 'subdShape.smp[5][9]', fv=True, tf=True, in=True )\n# Returns a list of only those faces that are completely contained\n# by the given vertices.\n\ncmds.select( 'subdShape.smp[0][0]', 'subdShape.smp[3][0]', 'subdShape.smp[8][0]', r=True )\ncmds.subdListComponentConversion( fv=True, tf=True )\n# Returns the conversion of selected vertices to faces.\n\ncmds.subdListComponentConversion( 'subdShape.smm[3]', fuv=True, tuv=True, uvs=True )\n# Returns a list of all uv map components in the\n# same UV shell (contiguous region in texture space).\n# (You can view these regions in the UV Texture Editor.)\n\ncmds.subdListComponentConversion( 'subdShape.smm[3]', fuv=True, tuv=True, uvb=True )\n# Returns a list of the uv map components on the border of the\n# same UV shell (contiguous region in texture space).  (You can\n# view these regions in the UV Texture Editor.)", 
    "subdMapCut": "\n\nimport maya.cmds as cmds\n\n# Opening up the textureView will make this example much easier to visualize.\n\n# Create a cube\nmel.eval( \"createSubdCube\" )\n\n# Cut the map.\ncmds.subdMapCut( 'subdivCube1.sme[2560][2]', 'subdivCube1.sme[2816][2]' )\n# now that it's cut, we may move the row separately\n\n# Move some UVs\ncmds.subdEditUV( 'subdivCube1.smm[21:22]', 'subdivCube1.smm[25]', u=0, v=0.05 )", 
    "subdMapSewMove": "\n\nimport maya.cmds as cmds\n\n# Create a subd sphere with default UVs.\nimport maya.mel as mel\nmel.eval( \"createSubdSphere\" )\n\n# Automatic projections with 6 planes.\ncmds.subdAutoProjection( 'subdivSphere1.smf[*][*]' )\n\n# Select the seams\ncmds.select( 'subdivSphere1.sme[0:1][67108864]', 'subdivSphere1.sme[256][67108867]', 'subdivSphere1.sme[513][67108864]' )\n\n# merge them, with the appropriate move.\ncmds.subdMapSewMove()", 
    "subdMatchTopology": "\n\nimport maya.cmds as cmds\n\n# To match topology across two subdiv surfaces.\ncmds.subdMatchTopology( 'surface', 'surface2' )", 
    "subdMirror": "\n\nimport maya.cmds as cmds\n\n# To create a new subd surface mirrored in the X direction.\ncmds.subdMirror( 'subdivShape1', xMirror=True )", 
    "subdPlanarProjection": "\n\nimport maya.cmds as cmds\n\n# Create a cube\nmel.eval( \"createSubdCubeProc\" )\n\n# Layout all UVs in the texture plane.\ncmds.subdPlanarProjection( 'subdivCube1.smf[*][*]',  rx=90, ra=45.0, pc= (0, 0, 0), imageScale=(0.5, 0.5))", 
    "subdToBlind": "\n\nimport maya.cmds as cmds\n\ncmds.subdToBlind( 'subdShape1', 'polyShape4' )", 
    "subdToNurbs": "", 
    "subdToPoly": "\n\nimport maya.cmds as cmds\n\n# To create a new polygon from a subdivision surface:\ncmds.subdToPoly( 'subd1' )", 
    "subdTransferUVsToCache": "\n\nimport maya.cmds as cmds\n\ncmds.subdTransferUVsToCache( 'subdShape1', 'polyShape4' )", 
    "subdiv": "\n\nimport maya.cmds as cmds\n\n# To find the deepest subdivided level of polyToSubdShape1\n#\ncmds.subdiv( 'polyToSubdShape1', query=True, deepestLevel=True )\n# To find the level of the  selected subdiv CV\n#\ncmds.select( 'polyToSubdShape1.smp[2][67108865]', r=True)\ncmds.subdiv( currentLevel=True )\n# Result: 1 #", 
    "subdivCrease": "\n\nimport maya.cmds as cmds\n\n# after selecting components of a subdivision surface\ncmds.subdivCrease()", 
    "subdivDisplaySmoothness": "\n\nimport maya.cmds as cmds\n\ncmds.subdivDisplaySmoothness( s=0 )# Set smoothness to hull for selected subdivs\ncmds.subdivDisplaySmoothness( s=1 )# Set smoothness to rough for selected subdivs\ncmds.subdivDisplaySmoothness( s=2 )# Set smoothness to medium for selected subdivs\ncmds.subdivDisplaySmoothness( s=3 )# Set smoothness to fine for selected subdivs\ncmds.subdivDisplaySmoothness( s=1, all=True )# Set smoothness to rough for all subdivs\ncmds.subdivDisplaySmoothness( query=True )# Query display smoothness for selected subdivs", 
    "subgraph": "", 
    "substituteGeometry": "\n\nimport maya.cmds as cmds\n\n# substitute the smooth skinned outPutGeom with newInputShape.\n#\ncmds.substituteGeometry( 'outPutGeom', 'newInputShape' )", 
    "superCtx": "", 
    "surface": "\n\nimport maya.cmds as cmds\n\n# This following command produces a flat, rectangular surface that is degree 3\n# in both directions.  This means that there must be at least 4 x 4\n# points to define the surface, since 4 is the (degree + 1).  There\n# must be 6 knots in each direction, because the knot vector must\n# be (number of points + degree - 1), ie. (4 points + degree 3 - 1).\n# The CVs are specified in rows of U and columns of V, as you\n# would read a book from left to right, up to down. ie. in this order:\n# surface.cv[0][0] surface.cv[0][1] surface.cv[0][2] surface.cv[0][3]\n# surface.cv[1][0] surface.cv[1][1] surface.cv[1][2] surface.cv[1][3]\n# surface.cv[2][0] surface.cv[2][1] surface.cv[2][2] surface.cv[2][3]\n# surface.cv[3][0] surface.cv[3][1] surface.cv[3][2] surface.cv[3][3]\n\ncmds.surface( du=3, dv=3, ku=(0, 0, 0, 1, 1, 1), kv=(0, 0, 0, 1, 1, 1), p=((-0.5, 0, 0.5), (-0.5, 0, 0.16), (-0.5, 0, -0.16), (-0.5, 0, -0.5), (-0.16, 0, 0.5), (-0.16, 0, 0.16), (-0.16, 0, -0.16), (-0.16, 0, -0.5), (0.16, 0, 0.5), (0.16, 0, 0.16), (0.16, 0, -0.16), (0.16, 0, -0.5), (0.5, 0, 0.5), (0.5, 0, 0.16), (0.5, 0, -0.16), (0.1, 0, -0.1)) )\n\n# This following command produces a surface that is degree 3 and periodic in\n# the U direction, and degree 1 in the V direction.  Notice that\n# the first 3 pairs of points match the last 3 pairs of\n# points, which is required for a degree 3 periodic surface.\n\ncmds.surface( du=3, dv=1, fu='periodic', fv='open', ku=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), kv=(0, 1), pw=((4, -4, 0, 1), (4, -4, -2.5, 1), (5.5, 0, 0, 1), (5.5, 0, -2.5, 1), (4, 4, 0, 1), (4, 4, -2.5, 1), (0, 5.5, 0, 1), (0, 5.5, -2.5, 1), (-4, 4, 0, 1), (-4, 4, -2.5, 1), (-5.5, 0, 0, 1), (-5.5, 0, -2.5, 1), (-4, -4, 0, 1), (-4, -4, -2.5, 1), (0, -5.5, 0, 1), (0, -5.5, -2.5, 1), (4, -4, 0, 1), (4, -4, -2.5, 1), (5.5, 0, 0, 1), (5.5, 0, -2.5, 1), (4, 4, 0, 1), (4, 4, -2.5, 1)) )\n\n# This following command produces a surface that is degree 5 in both directions.\n\ncmds.surface( du=5, dv=5, fu='open', fv='open', p=((-7, 0, 1), (-6, 0, 4), (-3, 0, 6), (0, 0, 7), (4, 0, 5), (6, 0, 3), (-7, 2, 1), (-6, 2, 4), (-3, 2, 7), (0, 2, 8), (4, 2, 5), (6, 2, 3), (-7, 3, 1), (-6, 3, 4), (-3, 3, 8), (0, 3, 9), (4, 3, 5), (6, 3, 3), (-7, 4, 1), (-6, 4, 4), (-3, 4, 9), (0, 4, 8), (4, 4, 5), (6, 4, 3), (-7, 5, 1), (-6, 5, 4), (-3, 5, 8), (0, 5, 7.5), (4, 5, 5), (6, 5, 3), (-7, 6, 1), (-6, 6, 4), (-3, 6, 6), (0, 6, 7), (4, 6, 5), (6, 6, 3)), ku=(0, 0, 0, 0, 0, 1, 1, 1, 1, 1), kv=(0, 0, 0, 0, 0, 1, 1, 1, 1, 1) )\n\n\n# How to query surface properties:\n\ncmds.getAttr( 'surface1.degreeU' )\n# Returns an integer that is the surface degree in U\n\ncmds.getAttr( 'surface1.degreeV' )\n# Returns an integer that is the surface degree in V\n\ncmds.getAttr( 'surface1.spansU' )\n# Returns an integer that is the # spans in U\n\ncmds.getAttr( 'surface1.spansV' )\n# Returns an integer that is the # spans in V\n\ncmds.getAttr( 'surface1.formU' )\n# Return 0 = open, 1 = closed, 2 = periodic\n\ncmds.getAttr( 'surface1.formV' )\n# Returns 0 = open, 1 = closed, 2 = periodic\n\ncmds.getAttr( 'surface1.minValueU' )\ncmds.getAttr( 'surface1.maxValueU' )\ncmds.getAttr( 'surface1.minValueV' )\ncmds.getAttr( 'surface1.maxValueV' )\n# These return the minimum and maximum parameter ranges in each direction.\n\ncmds.getAttr( 'surface1.cv[0][0]' )\n# Returns the position of a CV of surface1 in local space.  If the\n# surface is a result of construction history, use a surface info\n# node instead to get the CV position.\n\ncmds.getAttr( 'surface1.cv[*][0]' )\n# Returns the positions of a row of CVs of surface1 in local space.\n# If the surface is a result of construction history, use a surface info\n# node instead to get the CV positions.\n\ncmds.createNode( 'surfaceInfo' )\ncmds.connectAttr( 'surfaceShape1.worldSpace', 'surfaceInfo1.inputSurface', f=True )\ncmds.getAttr( 'surfaceInfo1.controlPoints[*]' )\n# Returns the surface CVs in world space.   A surface info node can\n# also be used to query the surface knot vectors.", 
    "surfaceSampler": "\n\nimport maya.cmds as cmds\n\n# Generate an object space normal map of a cube onto a sphere called test.dds\ncmds.surfaceSampler( mapOutput='normal', filename='C:/test', fileFormat='dds', source='pCube1', target='pSphere1', uv='map1' )", 
    "surfaceShaderList": "\n\nimport maya.cmds as cmds\n\n# Create a NURBS plane.\ncmds.nurbsPlane( d=3, p=(0, 0, 0), lr=1, axis=(0, 0, 0), n='plane1' )\n\n# Make it red.\ncmds.sets( name='redMaterialGroup', renderable=True, empty=True )\ncmds.shadingNode( 'phong', name='redShader', asShader=True )\ncmds.setAttr( 'redShader.color', 1, 0, 0, type='double3' )\ncmds.surfaceShaderList( 'redShader', add='redMaterialGroup' )\ncmds.sets( 'plane1', e=True, forceElement='redMaterialGroup' )", 
    "swatchDisplayPort": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout('r')\nmyShader = cmds.shadingNode('anisotropic', asShader=True)\ncmds.swatchDisplayPort('slPP', wh=(256, 256), sn=myShader)\ncmds.showWindow()", 
    "swatchRefresh": "\n\nimport maya.cmds as cmds\n\n# Refresh the swatch for the layer1 node\ncmds.swatchRefresh('layer1')", 
    "switchTable": "\n\nimport maya.cmds as cmds\n\ncmds.window(width=200)\ncmds.formLayout('theForm')\ncmds.switchTable('theSwitch')\ncmds.formLayout('theForm', e=True,\n                af=(('theSwitch', 'top', 0),\n                    ('theSwitch', 'left', 0),\n                    ('theSwitch', 'bottom', 0),\n                    ('theSwitch', 'right', 0)))\ncmds.showWindow()", 
    "symbolButton": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.symbolButton( image='circle.png' )\ncmds.symbolButton( image='sphere.png' )\ncmds.symbolButton( image='cube.png' )\ncmds.showWindow()", 
    "symbolCheckBox": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.symbolCheckBox( image='circle.png' )\ncmds.symbolCheckBox( image='sphere.png' )\ncmds.symbolCheckBox( image='cube.png' )\ncmds.showWindow()", 
    "symmetricModelling": "\n\nimport maya.cmds as cmds\n\n# What is the current reflection setting\ncmds.symmetricModelling(query=True, symmetry=True)\n\n# What is the current reflection axis\ncmds.symmetricModelling(query=True, axis=True)\n\n# Change the space to apply reflection to (object or world)\ncmds.symmetricModelling(about='world')\n\n# Change the current tolerance to 0.34\ncmds.symmetricModelling(tolerance=0.34)", 
    "sysFile": "\n\nimport maya.cmds as cmds\n\n# Create a new directory path\ncmds.sysFile( 'C:/temp/mayaStuff', makeDir=True )# Windows\ncmds.sysFile( '/tmp/mayaStuff', makeDir=True )# Unix\n\n# Move a scene to the new directory (we can rename it at the same time).\ncmds.sysFile( 'C:/maya/projects/default/scenes/myScene.mb', rename='C:/temp/mayaStuff/myScene.mb.trash' )# Windows\ncmds.sysFile( '/maya/projects/default/scenes/myScene.mb', rename='/tmp/mayaStuff/myScene.mb.trash' )# Unix\n\n\n# Rename the scene to \"myScene.will.be.deleted\"\ncmds.sysFile( 'C:/temp/mayaStuff/myScene.mb.trash', rename='C:/temp/mayaStuff/myScene.will.be.deleted' )# Windows\ncmds.sysFile( '/tmp/mayaStuff/myScene.mb.trash', rename='/tmp/mayaStuff/myScene.will.be.deleted' )# Unix\n\n# Copy a scene to the new directory\ndestWindows = \"C:/temp/mayaStuff/myScene.mb.trash\"\nsrcWindows = \"C:/maya/projects/default/scenes/myScene.mb\"\ncmds.sysFile( srcWindows, copy=destWindows )# Windows\n\ndestUnix = \"/tmp/mayaStuff/myScene.mb.trash\"\nsrcUnix = \"maya/projects/default/scenes/myScene.mb\"\ncmds.sysFile( srcUnix, copy=destUnix )# Unix\n\n# Delete the scene\ncmds.sysFile( 'C:/temp/mayaStuff/myScene.will.be.deleted', delete=True )# Windows\ncmds.sysFile( '/tmp/mayaStuff/myScene.will.be.deleted', delete=True )# Unix", 
    "tabLayout": "\n\nimport maya.cmds as cmds\n\ncmds.window( widthHeight=(200, 150) )\nform = cmds.formLayout()\ntabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)\ncmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)) )\n\nchild1 = cmds.rowColumnLayout(numberOfColumns=2)\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.setParent( '..' )\n\nchild2 = cmds.rowColumnLayout(numberOfColumns=2)\ncmds.button()\ncmds.button()\ncmds.button()\ncmds.setParent( '..' )\n\ncmds.tabLayout( tabs, edit=True, tabLabel=((child1, 'One'), (child2, 'Two')) )\n\ncmds.showWindow()", 
    "tangentConstraint": "\n\nimport maya.cmds as cmds\n\n# orients the aim vector of cube1 in it's local coordinate space,\n# to the tangent vector of curve1 at the closest point to  cube1.\ncmds.tangentConstraint( 'curve1', 'cube1' )\n\n# uses the average of the tangents from curve1 and curve2.\ncmds.tangentConstraint( 'curve1', 'curve2', 'cube2', w=.1 )\n\n# sets the weight for curve1's effect on cube2 to 10.\ncmds.tangentConstraint( 'curve1', 'cube2', e=True, w=10. )\n\n# removes curve2 from cube2's tangentConstraint\ncmds.tangentConstraint( 'curve2', 'cube2', e=True, rm=True )\n\n# adds curve3 to cube2's tangent constraint with the default weight\ncmds.tangentConstraint( 'curve3', 'cube2' )", 
    "targetWeldCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new target weld context:\ncmds.targetWeldCtx()\n\n# To query if it is set to merge to the center:\ncmds.targetWeldCtx('targetWeldCtx1', q=True, mergeToCenter=True )\n\n# To set it to merge at the target:\ncmds.targetWeldCtx('targetWeldCtx1', e=True, mergeToCenter=False )", 
    "testPa": "", 
    "testPassContribution": "", 
    "texLatticeDeformContext": "\n\nimport maya.cmds as cmds\n\n# Create a lattice manipulator with 4 x 4 lattice.\n#\ncmds.texLatticeDeformContext( 'latticeContext', latticeColumns=4, latticeRows=4 )", 
    "texManipContext": "\n\nimport maya.cmds as cmds\n\ncmds.texManipContext()", 
    "texMoveContext": "\n\nimport maya.cmds as cmds\n\n# To create a new move context:\ncmds.texMoveContext()\n\n# To query the position of the manipulator\ncmds.texMoveContext( 'texMoveContext', q=True, position=True )", 
    "texMoveUVShellContext": "\n\nimport maya.cmds as cmds\n\n# To create a new move context:\ncmds.texMoveUVShellContext()\n\n# To query the position of the manipulator\ncmds.texMoveUVShellContext( 'texMoveUVShellContext', q=True, position=True )", 
    "texRotateContext": "\n\nimport maya.cmds as cmds\n\n# To create a new rotate context:\ncmds.texRotateContext()\n\n# To query the position of the manipulator\ncmds.texRotateContext( 'texRotateContext', q=True, position=True )", 
    "texScaleContext": "\n\nimport maya.cmds as cmds\n\n# To create a new scale context:\ncmds.texScaleContext()\n\n# To query the position of the manipulator\ncmds.texScaleContext( 'texScaleContext', q=True, position=True )", 
    "texSelectContext": "\n\nimport maya.cmds as cmds\n\ncmds.texSelectContext()", 
    "texSelectShortestPathCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new poly shortest edge path context:\n#\ncmds.texSelectShortestPathCtx( 'PolyTexShortestPath' )", 
    "texSmoothContext": "", 
    "texSmudgeUVContext": "\n\nimport maya.cmds as cmds\n\n# Create a poly plane\ncmds.polyPlane(w=10, h=10, sx=10, sy=10, n='pPlane1')\n\n# Select all UVs\ncmds.select('pPlane1.map[0:120]', r=True)\n\n# Create a new smudge UV tool context, set the effect type to smudge mode, set the radius to 0.1 and pressure to 0.2, then switch to it\n# In order to use this tool to smudge the UVs of pPlane1, you must open the texture UV editor\ncmds.texSmudgeUVContext('texSmudgeUVContext1', effectType='smudge', r=0.1, prs=0.2)\ncmds.setToolTo('texSmudgeUVContext1')", 
    "texWinToolCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new texture window tool context, set this tool to dolly in the texture window, then switch to it\ncmds.texWinToolCtx('texWinToolCtx1', do=True)\ncmds.setToolTo('texWinToolCtx1')", 
    "text": "\n\nimport maya.cmds as cmds\n\ncmds.window( width=150 )\ncmds.columnLayout( adjustableColumn=True )\ncmds.text( label='Default' )\ncmds.text( label='Left', align='left' )\ncmds.text( label='Centre', align='center' )\ncmds.text( label='Right', align='right' )\ncmds.showWindow()", 
    "textCurves": "\n\nimport maya.cmds as cmds\n\n# Create curves for text string \"Maya\" in the \"Times-Roman\" font:\ncmds.textCurves( f='Times-Roman', t='Maya' )\n\n# Create curves for text \"hello world\" in the \"Courier\" font.\n# The \"-n\" flag specifies the name of the resulting transform\n# and shape.\ncmds.textCurves( n= 'first', f='Courier', t='hello world' )", 
    "textField": "\n\nimport maya.cmds as cmds\n\n#    Create a window with a some fields for entering text.\n#\nwindow = cmds.window()\ncmds.rowColumnLayout( numberOfColumns=2, columnAttach=(1, 'right', 0), columnWidth=[(1, 100), (2, 250)] )\ncmds.text( label='Name' )\nname = cmds.textField()\ncmds.text( label='Address' )\naddress = cmds.textField()\ncmds.text( label='Phone Number' )\nphoneNumber = cmds.textField()\ncmds.text( label='Email' )\nemail = cmds.textField()\n\n#    Attach commands to pass focus to the next field if the Enter\n#    key is pressed. Hitting just the Return key will keep focus\n#    in the current field.\n#\ncmds.textField( name, edit=True, enterCommand=('cmds.setFocus(\\\"' + address + '\\\")') )\ncmds.textField( address, edit=True, enterCommand=('cmds.setFocus(\\\"' + phoneNumber + '\\\")') )\ncmds.textField( phoneNumber, edit=True, enterCommand=('cmds.setFocus(\\\"' + email + '\\\")') )\ncmds.textField( email, edit=True, enterCommand=('cmds.setFocus(\\\"' + name + '\\\")') )\n\ncmds.showWindow( window )", 
    "textFieldButtonGrp": "\n\nimport maya.cmds as cmds\n\nwindow = cmds.window()\ncmds.columnLayout()\ncmds.textFieldButtonGrp( label='Label', text='Text', buttonLabel='Button' )\ncmds.showWindow( window )", 
    "textFieldGrp": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.textFieldGrp( label='Group 1', text='Editable' )\ncmds.textFieldGrp( label='Group 2', text='Non-editable', editable=False )\ncmds.showWindow()", 
    "textManip": "\n\nimport maya.cmds as cmds\n\n# Hide the text manip, then call headsUpMessage to draw a message in the 3d view. You can't see the message now because it's invisible\ncmds.textManip(v=False)\ncmds.headsUpMessage('Ouch!', time=5.0)\n\n# Show the text manip\ncmds.textManip(v=True)", 
    "textScrollList": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.paneLayout()\ncmds.textScrollList( numberOfRows=8, allowMultiSelection=True,\n                        append=['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',\n                                        'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen'],\n                        selectItem='six', showIndexedItem=4 )\ncmds.showWindow()", 
    "textureLassoContext": "", 
    "texturePlacementContext": "\n\nimport maya.cmds as cmds\n\ncmds.texturePlacementContext()", 
    "textureWindow": "\n\nimport maya.cmds as cmds\n\n# As a UV Texture Editor typically exists on start-up, you normally\n# will not need to create one.. Hence all the examples that follow\n# explain how to query and edit the editor settings.\n\n# Get the panel that the editor belongs to.\ntexWinName = cmds.getPanel(sty='polyTexturePlacementPanel')\n\n# Get the space between main grid lines\ncmds.textureWindow(texWinName[0], q=True, sp=True)\n# Result: 0.05 #\n\n# Change the space between main grid lines\ncmds.textureWindow( texWinName[0], e=True, sp=0.1 )\n\n# Get the size of the grid\ncmds.textureWindow( texWinName[0], q=True, s=True )\n# Result: 12 #\n\n# Change the size of the grid\ncmds.textureWindow( texWinName[0], e=True, s=0.8 )\n\n# Zoom on the whole scene\ncmds.textureWindow( texWinName[0], e=True, fa=True )\n\n# Set display mode to related (connected) faces\ncmds.textureWindow(texWinName[0], e=True, rf=True )", 
    "threadCount": "\n\nimport maya.cmds as cmds\n\n# sets Maya to use 4 threads for multithreaded evaluation\ncmds.threadCount( n=4 )\n\n# sets Maya to use one thread per logical CPU\ncmds.threadCount( n=0 )\n\n# query number of threads currently set\ncmds.threadCount( q=True, n=True )", 
    "threePointArcCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new context that will create curves of degree 1:\ncmds.threePointArcCtx( \"arcContext\", degree=1 )\ncmds.setToolTo(\"arcContext\")\n\n# To query the degree of an existing context:\ncmds.threePointArcCtx( \"arcContext\", q=True, degree=True )\n\n# To edit the degree of an existing context:\ncmds.threePointArcCtx( \"arcContext\", e=True, degree=3 )", 
    "timeCode": "\n\nimport maya.cmds as cmds\n\n# set the production start time to 1 hour, 33 min, 52 seconds, and 23 frames\ncmds.timeCode(productionStartHour=1,productionStartMinute=33,productionStartSecond=52,productionStartFrame=23)\n# query the production start time\n#\ncmds.timeCode(query=1,productionStartHour=True)\n// result: 1\ncmds.timeCode(query=1,productionStartMinute=True)\n// result: 33", 
    "timeControl": "\n\nimport maya.cmds as cmds\n\n# To display sound in the time slider, there must first be a sound\n# node in the scene. We'll create one and give it the name \"ohNo\".\n# Note that the argument to the -file flag must be a path to a valid\n# soundfile.\n#\ncmds.sound( file='C:/My Documents/maya/projects/default/sound/ohNo.aiff', name='ohNo' )\n\n\n# To display sound in the time slider, you must specify\n# the sound node to display and turn display of sound \"on.\"\n# First we need to get the name of the playback slider from\n# the global mel variable called gPlayBackSlider\n#\nimport maya.mel\naPlayBackSliderPython = maya.mel.eval('$tmpVar=$gPlayBackSlider')\ncmds.timeControl( aPlayBackSliderPython, e=True, sound='ohNo', displaySound=True )\n\n# To hear sound while scrubbing in the time slider, set the press and\n# release commands to begin and end sound scrubbing.\n#\ncmds.timeControl( aPlayBackSliderPython,edit=True,pressCommand='cmds.timeControl(aPlayBackSliderPython,edit=True,beginScrub=True)')\ncmds.timeControl( aPlayBackSliderPython,edit=True,releaseCommand='cmds.timeControl(aPlayBackSliderPython,edit=True,endScrub=True)')", 
    "timePort": "\n\nimport maya.cmds as cmds\n\n# Create a window that has a timePort in it\n#\ncmds.window( w=500, h=35 )\ncmds.columnLayout()\ncmds.timePort( 'myTimePort' )\ncmds.showWindow()\n\n# Turn snapping off on the above timePort\n#\ncmds.timePort( 'myTimePort', e=True, snap=False )", 
    "timeWarp": "\n\nimport maya.cmds as cmds\n\n# Create a time warp on the animation curves driving a cylinder and a sphere,\n# and specify the warping is to occur at frames 1 and 20.\n# Note: Time warps are only applied to animated objects.\n#\nwarp = cmds.timeWarp( 'pCylinder1', 'pSphere1',f=[1,20])\n# Move the first warp to frame 5\n#\ncmds.timeWarp(warp,e=1,mf=(0,5))\n# Move the 2nd warp to frame 10\n#\ncmds.timeWarp(warp,e=1,mf=(1,10))\n# Modify the interpolation between the 1st and 2nd warp to easeIn\n#\ncmds.timeWarp(warp,e=1,it=(0,'easeIn'))\n# query the original frames\n#\ncmds.timeWarp(warp,q=1,f=1)\n# Result: [1.0, 20.0, 30.0] #\n# query the modified frames\n#\ncmds.timeWarp(warp,q=1,mf=1)\n# Result: [5.0, 10.0, 30.0] #\n# query the interpolation\n#\ncmds.timeWarp(warp,q=1,it=1)\n# Result: [u'easeIn', u'linear'] #", 
    "timer": "\n\nimport maya.cmds as cmds\n\ncmds.timer( s=True )\n# code being timed\nprint \"START: time this\"\nfor i in range (0, 50):\n        print (\"time this \"+str(i))\nprint \"END: time this\"\ncmds.timer( e=True )\n# Named timers can be used for nesting\ncmds.timer( s=True, name=\"outerLoop\" )\nprint \"START: macro loop timing\"\nfor i in range(0,50):\n        cmds.timer( s=True )\n        for j in range(5,50):\n                newObjs = cmds.sphere( spans=j )\n                cmds.delete( newObjs )\n        innerTime = cmds.timer( e=True )\n        lapTime = cmds.timer( lap=True, name=\"outerLoop\" )\n        print \"\\tInner loop %d = %g\" % (i, innerTime)\n        print \"\\t       SUB = %g\" % lapTime\nfullTime = cmds.timer( e=True, name=\"outerLoop\" )\nprint \"END: Full timing was %g\" % fullTime", 
    "timerX": "\n\nimport maya.cmds as cmds\n\n# Example 1: Simple timing\n#\nstart = cmds.timerX()\n# code that is being timed\ntotalTime = cmds.timerX(startTime=start)\nprint \"Total time: \", totalTime\n\n# Example 2: Iterative timing\n#\nstartTime = cmds.timerX()\nfor i in range(0,5):\n  elapsedTime = cmds.timerX()\n  print \"Elapsed Time: \", elapsedTime\n\n# Example 3: Stacked timing calls\n#\nstartTime1 = cmds.timerX()\nstartTime2 = cmds.timerX()\nfor i in range(0,5):\n  elapsedTime = cmds.timerX()\n  print \"Elapsed Time: \", elapsedTime\n\ntotalTime = cmds.timerX(startTime=startTime1)\nprint \"Total Time: \", totalTime", 
    "toggle": "\n\nimport maya.cmds as cmds\n\nsurface1 = cmds.sphere()\ncmds.toggle( surface1, cv=True )\ncmds.toggle( g=True, cv=True )\ncmds.toggle( q=True, cv=True )\n# Returns 0 if the queried state is false.\n# Returns 1 if the queried state is true.", 
    "toggleAxis": "\n\nimport maya.cmds as cmds\n\n# Turns origin axis on\ncmds.toggleAxis( o=True )\n\n# Turns origin axis off.\ncmds.toggleAxis( o=False )\n\n# Returns true if the axis at the origin is on.\ncmds.toggleAxis( q=True, o=True )\n\n# Toggles the display of the axis\ncmds.toggleAxis()", 
    "toggleWindowVisibility": "\n\nimport maya.cmds as cmds\n\nwindow1 = cmds.window( retain=True )\ncmds.columnLayout()\ncmds.checkBox()\ncmds.checkBox()\ncmds.checkBox()\ncmds.button( label='Close', command='cmds.window( window1, edit=True, visible=False )' )\n\n#    Create another window with a button that will toggle the visibility\n#    of the first window.\n#\nwindow2 = cmds.window()\ncmds.columnLayout()\ncmds.button( label='Toggle Window Visibility', command=('cmds.toggleWindowVisibility(\\\"' + window1 +'\\\")' ) )\n\ncmds.showWindow( window1 )\ncmds.showWindow( window2 )", 
    "tolerance": "\n\nimport maya.cmds as cmds\n\ncmds.tolerance( linear=0.02 )# sets the tolerance to 0.02, in the current unit\ncmds.tolerance( linear='0.02cm' )# sets the tolerance to 0.02 cm\ncmds.tolerance( angular='0.02rad' )# sets the angle tolerance to 0.02 radians\ncmds.tolerance( q=True, linear=True )# returns the current tolerance in the current unit\ncmds.tolerance( q=True, angular=True )# returns the current tolerance in the current unit", 
    "toolBar": "\n\nimport maya.cmds as cmds\n\nmyWindow = cmds.window()\nbuttonForm = cmds.formLayout( parent = myWindow )\ncmds.button( parent = buttonForm )\nallowedAreas = ['top', 'bottom']\ncmds.toolBar( area='top', content=myWindow, allowedArea=allowedAreas )", 
    "toolButton": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.toolCollection()\ncmds.toolButton( tool='selectSuperContext', toolImage1=('selectSuperContext', 'aselect.xpm') )\ncmds.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.xpm') )\ncmds.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\ncmds.showWindow()\n\n# example showing how to create tool buttons for artisan tools\n#\n# create the contexts\nselectCtx = cmds.artSelectCtx()\nputtyCtx = cmds.artPuttyCtx()\nsetPaintCtx = cmds.artSetPaintCtx()\n\ncmds.window()\ncmds.gridLayout()\ncmds.toolCollection()\n# create the tool buttons using the contexts returned\ncmds.toolButton(\n                amt=True, piv=True,\n                doubleClickCommand='cmds.toolPropertyWindow()',\n                tool=(selectCtx, puttyCtx, setPaintCtx),\n                toolImage1=(selectCtx, 'artSelect.xpm'),\n                toolImage2=(puttyCtx, 'putty.png'),\n                toolImage3=(setPaintCtx, 'paintSetMembership.png') )\ncmds.showWindow()", 
    "toolCollection": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\ncmds.toolCollection()\ncmds.toolButton( tool='selectSuperContext', toolImage1=('selectSuperContext', 'aselect.xpm') )\ncmds.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.png') )\ncmds.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\ncmds.showWindow()", 
    "toolDropped": "\n\nimport maya.cmds as cmds\n\n# Create move tool button and scale tool button in a new window\ncmds.window()\ncmds.columnLayout()\ncmds.toolCollection()\ncmds.toolButton( tool='moveSuperContext', toolImage1=('moveSuperContext', 'move_M.png') )\ncmds.toolButton( tool='scaleSuperContext', toolImage1=('scaleSuperContext', 'scale_M.png') )\ncmds.showWindow()\n\n# Drop select tool to the created window\ncmds.toolDropped('selectTool')", 
    "toolHasOptions": "\n\nimport maya.cmds as cmds\n\nif cmds.toolHasOptions('moveSuperContext'):\n        print 'moveSuperContext tool has options'", 
    "toolPropertyWindow": "\n\nimport maya.cmds as cmds\n\ncmds.toolPropertyWindow()\npictureObject = cmds.toolPropertyWindow(q=True, icon=True)", 
    "torus": "\n\nimport maya.cmds as cmds\n\ncmds.torus()\ncmds.torus( ch=True, radius=10, hr=3 )\ncmds.torus( r=5, axis=(1, 1, 1), pivot=(0, 0, 1), ssw='0deg', esw='90deg', msw='45deg' )\ncmds.torus( ut=True, tol=0.01 )\n# query the torus radius\nr = cmds.torus( 'nurbsTorus1', r=True, q=True )", 
    "track": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\n\ncmds.track( 'cameraShape1', d=10 )# To track the camera down\n\ncmds.track( 'cameraShape1', u=-10 )\n\ncmds.track( u=-10 )", 
    "trackCtx": "\n\nimport maya.cmds as cmds\n\ncmds.trackCtx( 'trackContext', ac=False, tg=False, ts=1.0 )", 
    "transferAttributes": "\n\nimport maya.cmds as cmds\n\n# Transfer all UV and color sets from pCube1 onto pSphere1\ncmds.transferAttributes( 'pCube1', 'pSphere1', transferUVs=2, transferColors=2 )", 
    "transferShadingSets": "\n\nimport maya.cmds as cmds\n\n# make a low res sphere with shaders\nlow = cmds.polySphere( sx=6, sy=6 )[0]\nlowShape = cmds.listRelatives( low, fullPath=True, shapes=True )[0]\nredSG = cmds.sets( r=True, em=True )\nredMat = cmds.shadingNode( \"lambert\", asShader=True )\ncmds.setAttr( redMat + \".color\", 1, 0, 0, type='double3' )\ncmds.connectAttr( redMat + \".outColor\", redSG + \".surfaceShader\", f=True )\ngreenSG = cmds.sets( r=True, em=True )\ngreenMat = cmds.shadingNode( \"lambert\", asShader=True )\ncmds.setAttr( greenMat + \".color\", 0, 1, 0, type='double3' )\ncmds.connectAttr( greenMat + \".outColor\", greenSG + \".surfaceShader\", f=True )\ncmds.sets( lowShape + '.f[0:17]', e=True, fe=redSG )\ncmds.sets( lowShape + '.f[18:36]', e=True, fe=greenSG )\n# make a high res sphere\nhigh = cmds.polySphere( sx=20, sy=20 )[0]\nhighShape = cmds.listRelatives( high, fullPath=True, shapes=True )[0]\ncmds.xform( high, ws=True, t=(2, 0, 0) )\n# transfer the shading sets\ncmds.select( low, r=True )\ncmds.select( high, tgl=True )\ncmds.transferShadingSets( sampleSpace=1 )", 
    "transformCompare": "\n\nimport maya.cmds as cmds\n\n# Create some joints\n#\ncmds.select( d=True )\ncmds.joint( p=(-3.226531, 0, -4.866136) )\ncmds.joint( p=(2.817897, 0, -4.016915) )\ncmds.joint( 'joint1', e=True, zso=True, oj='xyz', sao='yup' )\n\n# Compare 2 different joints, a 1 will be returned\n#\ncmds.select( 'joint1', 'joint2', r=True )\ncmds.transformCompare()\n\n# Duplicate joint1 and compare the duplicate\n#\ncmds.select( 'joint1', r=True )\ncmds.duplicate()\ncmds.select( cl=True )\ncmds.select( 'joint1', 'joint3', r=True )\ncmds.transformCompare()", 
    "transformLimits": "\n\nimport maya.cmds as cmds\n\n# Create an object, e.g.\ncmds.cone()\n\n# 1. To set the limits for the translation of the cone to within\n# a unit volume centered at the origin\ncmds.transformLimits( tx=(-1, 1), ty=(-1, 1), tz=(-1, 1) )\n\n# 2. To disable the lower limits\ncmds.transformLimits( etx=(False, True), ety=(False, True), etz=(False, True ) )", 
    "translator": "\n\nimport maya.cmds as cmds\n\n# Returns true if dxf files can be read.\ncmds.translator( 'dxf', q=True, rs=True )", 
    "treeLister": "\n\nimport maya.cmds as cmds\n\nw = cmds.window(width=200)\nfl = cmds.formLayout()\ntl = cmds.treeLister()\ncmds.formLayout(fl, e=True,\n                af=((tl, 'top', 0),\n                    (tl, 'left', 0),\n                    (tl, 'bottom', 0),\n                    (tl, 'right', 0)))\ncmds.showWindow(w)\nitems=['root/branchone/leafone',\n       'root/branchone/leaftwo',\n       'root/branchtwo/leafthree']\ncmds.treeLister(tl, e=True, add=[(i, 'sphere.png', cmds.sphere) for i in items])", 
    "treeView": "\n\nimport maya.cmds as cmds\n\ndef selectTreeCallBack(*args):\n  print 'selection'\n\ndef pressTreeCallBack(*args):\n  print 'press'\n\nfrom maya import cmds\nwindow = cmds.window()\nlayout = cmds.formLayout()\n\ncontrol = cmds.treeView( parent = layout, numberOfButtons = 3, abr = False )\n\ncmds.formLayout(layout,e=True, attachForm=(control,'top', 2))\ncmds.formLayout(layout,e=True, attachForm=(control,'left', 2))\ncmds.formLayout(layout,e=True, attachForm=(control,'bottom', 2))\ncmds.formLayout(layout,e=True, attachForm=(control,'right', 2))\n\ncmds.showWindow( window )\n\ncmds.treeView( control, e=True, addItem = (\"layer 1\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 2\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 3\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 4\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 5\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 6\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 7\", \"layer 2\"))\ncmds.treeView( control, e=True, addItem = (\"layer 8\", \"layer 2\"))\ncmds.treeView( control, e=True, addItem = (\"layer 9\", \"layer 2\"))\ncmds.treeView( control, e=True, addItem = (\"layer 10\", \"layer 8\"))\ncmds.treeView( control, e=True, addItem = (\"layer 11\", \"layer 2\"))\ncmds.treeView( control, e=True, addItem = (\"layer 12\", \"\"))\ncmds.treeView( control, e=True, addItem = (\"layer 13\", \"layer 10\"))\ncmds.treeView(control,edit=True,pressCommand=[(1,pressTreeCallBack),(2,pressTreeCallBack),(3,pressTreeCallBack)])\ncmds.treeView(control,edit=True,selectCommand=selectTreeCallBack)\n\n\ncmds.treeView( control, edit=True, removeAll = True )", 
    "trim": "\n\nimport maya.cmds as cmds\n\n# Keep all selected regions\ncmds.trim( sl=0 )\n\n# Discard all selected regions\ncmds.trim( sl=1 )\n\n# shrink the underlying surface to just outside the\n# outermost boundary curve\ncmds.trim( sh=1 )", 
    "trimCtx": "", 
    "truncateFluidCache": "\n\nimport maya.cmds as cmds\n\n# Truncate a fluid cache that has a start time of 1\n# and an end time of 25 so that only the first 10\n# frames are preserved and the end time of the\n# cache is set to 10.\n#\ncmds.currentTime( 10 )\ncmds.truncateFluidCache()", 
    "truncateHairCache": "\n\nimport maya.cmds as cmds\n\n# Truncate a hair cache that has a start time of 1\n# and an end time of 25 so that only the first 10\n# frames are preserved and the end time of the\n# cache is set to 10.\n#\ncmds.currentTime( 10 )\ncmds.truncateHairCache()", 
    "tumble": "\n\nimport maya.cmds as cmds\n\ncmds.camera()\ncmds.tumble( 'cameraShape1', aa=-30 )# To change the azimuth angle\n\ncmds.tumble( 'cameraShape1', ea=15 )# To change the elevation angle\n\ncmds.tumble( ra=(-30, 15) )# To change the azimuth angle and the elevation angle", 
    "tumbleCtx": "\n\nimport maya.cmds as cmds\n\ncmds.tumbleCtx( 'tumbleContext', ts=1.0, lt=False, ac=False, ol=True )", 
    "turbulence": "\n\nimport maya.cmds as cmds\n\n# Creates a new field\ncmds.turbulence( n='turbulenceF', m=5.0, pos=(0.25, 0, 0) )\n\n# Edits the frequency value of the field named turbulenceF\ncmds.turbulence( 'turbulenceF', e=True, f=0.5 )\n\n# Queries turbulenceF for its frequency value\ncmds.turbulence( 'turbulenceF', q=True, f=1 )", 
    "twoPointArcCtx": "\n\nimport maya.cmds as cmds\n\n# To create a new context that will create curves of degree 1:\ncmds.twoPointArcCtx( degree=1 )\n\n# To query the degree of an existing context:\ncmds.twoPointArcCtx( 'arcContext1', q=True, degree=True )", 
    "ubercam": "\n\nimport maya.cmds as cmds\n\ncamera = cmds.shot('myUbercam');", 
    "uiTemplate": "\n\nimport maya.cmds as cmds\n\n#    Create a new template.\n#\nif cmds.uiTemplate( 'ExampleTemplate', exists=True ):\n        cmds.deleteUI( 'ExampleTemplate', uiTemplate=True )\n\ncmds.uiTemplate( 'ExampleTemplate' )\n\ncmds.button( defineTemplate='ExampleTemplate', width=100, height=40, align='left' )\ncmds.frameLayout( defineTemplate='ExampleTemplate', borderVisible=True, labelVisible=False )\n\n#    Create a window and apply the template.\n#\nwindow = cmds.window()\ncmds.setUITemplate( 'ExampleTemplate', pushTemplate=True )\ncmds.columnLayout( rowSpacing=5 )\n\ncmds.frameLayout()\ncmds.columnLayout()\ncmds.button( label='One' )\ncmds.button( label='Two' )\ncmds.button( label='Three' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.frameLayout()\ncmds.columnLayout()\ncmds.button( label='Red' )\ncmds.button( label='Green' )\ncmds.button( label='Blue' )\ncmds.setParent( '..' )\ncmds.setParent( '..' )\n\ncmds.setUITemplate( popTemplate=True )\n\ncmds.showWindow( window )", 
    "unassignInputDevice": "\n\nimport maya.cmds as cmds\n\n# This deletes all command strings associated with the spaceball.\ncmds.unassignInputDevice( d='spaceball' )", 
    "undo": "\n\nimport maya.cmds as cmds\n\n# In this particular example, each line needs to be executed\n# separately one after the other. Executing lines separately\n# guaranties that commands are properly registered in the undo\n# stack.\n\ncmds.polyCube()\n# Result: [u'pCube1', u'polyCube1'] #\n\ncmds.polySphere()\n# Result: [u'pSphere1', u'polySphere1'] #\n\ncmds.undo()\n# Undo: cmds.polySphere()\n #\n\ncmds.undo()\n# Undo: cmds.polyCube()\n #", 
    "undoInfo": "\n\nimport maya.cmds as cmds\n\n# Turn undo on, with an infinite queue length\ncmds.undoInfo( state=True, infinity=True )\n# Turn undo on, with a queue length of 200\ncmds.undoInfo( state=True, infinity=False, length=200 )\n# Turn undo off\ncmds.undoInfo( state=False )\n# Query the queue length\ncmds.undoInfo( q=True, length=True )", 
    "unfold": "\n\nimport maya.cmds as cmds\n\n# Create a sphere and select it.\ncmds.polySphere()\n# Optimise the position of some Uvs\ncmds.unfold( 'pSphere1.map[189:398]' )", 
    "ungroup": "\n\nimport maya.cmds as cmds\n\n# Create a simple hierarchy\ncmds.sphere( n='sphere1' )\ncmds.move( 2, 0, 0 )\ncmds.sphere( n='sphere2' )\ncmds.move( -2, 0, 0 )\ncmds.group( 'sphere1', 'sphere2', n='group1' )\ncmds.move( 0, 2, 0 )\ncmds.sphere( n='sphere3' )\ncmds.move( 0, 0, 2 )\ncmds.group( 'group1', 'sphere3', n='group2' )\ncmds.group( em=True, n='group3' )\n\n# Remove group1 from the hierarchy. What should remain\n# is group2 with sphere3, sphere1, and sphere2 as children.\n# Note that the objects don't move since the absolute flag\n# is implied.\n#\ncmds.ungroup( 'group1' )\n\n# Try the same ungroup with the -relative flag.\n# Now sphere1 and sphere2 will move down 2 units in Y.\n#\ncmds.undo()\ncmds.ungroup( 'group1', relative=True )\n\n# Now try the same ungroup operation with the -parent flag.\n# This will move the children of group1 under group3.\ncmds.undo()\ncmds.ungroup( 'group1', parent='group3' )", 
    "uniform": "\n\nimport maya.cmds as cmds\n\ncmds.uniform( dx=0, dy=1.0, dz=0.5 )\n# Creates a uniform field pushing in direction (0,1,0.5) for every\n# active selection. If there is no active selection, it creates this\n# field at world position (0,0,0).\n\ncmds.uniform( 'uniformF', e=True, att=0.98 )\n# edits the acceleration value of the field uniformF\ncmds.uniform( 'uniformF', q=True, att=1 )\n# queries uniformF for its acceleration value", 
    "unloadPlugin": "\n\nimport maya.cmds as cmds\n\n# Unload the plugin that has the internal name \"newNode\"\n#\ncmds.unloadPlugin( 'newNode.py' )", 
    "untangleUV": "\n\nimport maya.cmds as cmds\n\ncmds.untangleUV( mb='shape_square' )\n# map the border associated with the selected UV trying to retain the\n# shape of the object and use a square mapping to iron out crossings\ncmds.untangleUV( r='one_over_length', pb=True, ps=False, pu=False, rt=0.1 )\n# relax the shell associated with the selected UV using edge weights\n# that are inversely proportional to length of world space lengths\n# pin the UV on borders and use a tolerance of 0.1", 
    "untrim": "\n\nimport maya.cmds as cmds\n\n# Untrim surface with history.\ncmds.untrim( 'surface', ch=True )\n\n# Untrims surface without history.\ncmds.untrim( 'surface', ch=False )", 
    "upAxis": "\n\nimport maya.cmds as cmds\n\n# 1. to make the Y-axis of the world to be the up axis:\ncmds.upAxis( ax='y' )\n\n# 2. to make the Z-axis of the world to be the up axis,\n# and rotate the view:\ncmds.upAxis( ax='z', rv=True )\n\n# 3. to query which axis is the current up axis\n# (returns a string: a \"y\" or a \"z\"):\ncmds.upAxis( q=True, axis=True )", 
    "userCtx": "", 
    "uvLink": "\n\nimport maya.cmds as cmds\n\ncmds.uvLink( uvSet='pSphereShape1.uvSet[2].uvSetName', texture='checker1' )\n# causes a UV link to be created between uvSet[2] on pSphereShape1\n# and the checker1 texture.\n# Note that no make, break or query flag is specified so make is\n# assumed since both uvSet and texture are specified.\n\ncmds.uvLink( make=True, uvSet='pCubeShape2.uvSet[0].uvSetName', texture='file8' )\n# causes a UV link to be created between uvSet[0] of pCubeShape2 and\n# the file8 file texture.\n\ncmds.uvLink( uvSet='pCubeShape2.uvSet[0].uvSetName', texture='file8' )\n# causes a UV link to be created between uvSet[0] of pCubeShape2 and\n# the file8 file texture. Note: no make, break or query flag is\n# specified so the make flag is assumed since both uvSet\n# and texture are specified.\n\ncmds.uvLink( query=True, uvSet='pCubeShape2.uvSet[0].uvSetName' )\n# will return a string array of textures which use the UV set\n# pCubeShape2.uvSet[0].setName. For example, the return value might\n# be:\n# file8 file9 checker4 slimeMap\n\ncmds.uvLink( query=True, texture='checker4' )\n# will return a string array of the UV sets that are used by the\n# texture. For example, the return value might be\n# pCubeShape2.uvSet[0].setName pCylinderShape1.uvSet[4].setName\n# pCylinderShape2.uvSet[3].setName\n\ncmds.uvLink( texture='checker4' )\n# will return a string array of the UV sets that are used by the\n# texture. For example, the return value might be\n# pCubeShape2.uvSet[0].setName pCylinderShape1.uvSet[4].setName\n# pCylinderShape2.uvSet[3].setName\n# Note that no make, break or query flag is specified, so query is\n# assumed since no uvSet was specified.\n\ncmds.uvLink( b=True, uvSet='pCylinderShape2.uvSet[3].uvSetName', texture='checker4' )\n# causes the checker4 texture to no longer use the UV set\n# pCylinderShape2.uvSet[3].setName.\n# The texture will use the default UV set on pCylinderShape2 instead.\n# If checker4 wasn't using pCylinderShape2.uvSet[3].setName,\n# nothing changes and a warning is produced.\n\ncmds.uvLink( isValid=True, texture='myTexture' )\n# Returns true if myTexture is a texture to which a UV set can be\n# linked, or false otherwise.\n\nmyPlug = getSomePlugFromSomewhere()\ncmds.uvLink( isValid=True, uvSet=myPlug )\n# Returns true if $myPlug is a UV set, or false otherwise.", 
    "uvSnapshot": "\n\nimport maya.cmds as cmds\n\n# Create a polygonal sphere\ncmds.polySphere()\n# Save the UVs in a image\ncmds.uvSnapshot( o=True, n='/tmp/uvImage2.iff', xr=256, yr=256 )", 
    "view2dToolCtx": "\n\nimport maya.cmds as cmds\n\n# Create a new view2dTool context, set it to do dolly in the Hypergraph window, then switch to this tool\ncmds.view2dToolCtx('view2dToolCtx1', dolly=True)\ncmds.setToolTo('view2dToolCtx1')", 
    "viewCamera": "\n\nimport maya.cmds as cmds\n\ncmds.viewCamera( 'cameraShape2', m='cameraShape1' )\n\n# Move current view camera to top of camera1\ncmds.viewCamera( 'camera1' )", 
    "viewClipPlane": "\n\nimport maya.cmds as cmds\n\ncmds.viewClipPlane( 'perspShape', acp=True )\n\ncmds.viewClipPlane( acp=True )\n\ncmds.viewClipPlane( acp=True, ncp=3.0 )\n\ncmds.viewClipPlane( ncp='3.0cm' )\n\ncmds.viewClipPlane( 'perspShape', q=True, ncp=True )", 
    "viewFit": "\n\nimport maya.cmds as cmds\n\n# Position the active camera to view the active objects\ncmds.viewFit()\n\n# Position cameraShape-1 to view all objects\ncmds.viewFit( 'cameraShape1', all=True )\n\n# Fill 50 percent of the active view with active objects\ncmds.viewFit( f=0.5 )\n\ncmds.viewFit( all=True )", 
    "viewHeadOn": "\n\nimport maya.cmds as cmds\n\n# Create a new camera\ncam = cmds.camera()\ncamera = cam[0]\n\n# Create a polygonal cone, rotate it, make it live\nobject = cmds.polyCone( ax=(0, 1, 0) )\ncmds.rotate( 15, 30, 45 )\ncmds.makeLive( object[0] )\n\ncmds.viewHeadOn( camera )\n\ncmds.makeLive( none=True )", 
    "viewLookAt": "\n\nimport maya.cmds as cmds\n\n# Create a new camera\ncam = cmds.camera()\ncamera = cam[0]\n\ncmds.viewLookAt( camera, pos=(0.0, 1.0, 0.0) )", 
    "viewManip": "\n\nimport maya.cmds as cmds\n\n#Position the view cube in the top left of the screen and set it to fully opaque\ncmds.viewManip(topLeft=True, minOpacity=1)", 
    "viewPlace": "\n\nimport maya.cmds as cmds\n\n# Create a new camera\ncam = cmds.camera();\ncamShape = cam[1];\n\ncmds.viewPlace( camShape, p=True, fov=20 )\n\ncmds.viewPlace( camShape, eye=(0, 0, 20) )\n\ncmds.viewPlace( camShape, la=(0, 0, 0) )", 
    "viewSet": "\n\nimport maya.cmds as cmds\n\n# Create a new camera\ncam = cmds.camera();\ncamShape = cam[1];\n\n# Set cameraShape1 to the persp position\ncmds.viewSet( camShape, p=True )\n\n# Set the camera in the active view to the top position\ncmds.viewSet( t=True )", 
    "visor": "\n\nimport maya.cmds as cmds\n\n# The visor command is not one which would commonly be used by the user.\n# For examples of its use, refer to visorPanel.mel and addVisorFolders.mel.", 
    "volumeAxis": "\n\nimport maya.cmds as cmds\n\ncmds.volumeAxis( pos=(0, 0, 0), afc=1.0, afx=2.0, arx=3.0, alx=4.0, drs=6.0 )\n\n# Creates a volume axis field with the following attribute values:\n# awayFromCenter = 1.0, awayFromAxis = 2.0, aroundAxis = 3.0, alongAxis = 4.0,\n# directionalSpeed = 6.0.", 
    "volumeBind": "\n\nimport maya.cmds as cmds\n\ncmds.volumeBind();", 
    "vortex": "\n\nimport maya.cmds as cmds\n\ncmds.vortex( ax=0, ay=1.0, az=0.5 )\n# Creates a vortex field with axis (0,1,0.5) for every active\n# selection. If there is no active\n# selection, it creates this field at world position (0,0,0).", 
    "waitCursor": "\n\nimport maya.cmds as cmds\n\ncmds.waitCursor( state=True )\ncmds.waitCursor( state=False )", 
    "warning": "\n\nimport maya.cmds as cmds\n\nimport maya.cmds as cmds\ndef lightWarning():\n    l = cmds.ls( lights=True )\n    if len(l) == 0:\n        cmds.warning( \"No Lights\" )\nlightWarning()\n#\n# The above will produce the following output:\n#\n#   # Warning: No Lights #\n#\n# When the option to show line numbers in errors is enabled the output will\n# be the following:\n#\n#   # Warning: line 4 of 'lightWarning' in '\"maya console'\": No Lights #\n#", 
    "webBrowser": "\n\nimport maya.cmds as cmds\n\ncmds.window()\ncmds.columnLayout()\nbrowser = cmds.webBrowser(width=800, height=600, url='www.alias.com')\ncmds.showWindow()", 
    "webBrowserPrefs": "", 
    "window": "\n\nimport maya.cmds as cmds\n\n# Make a new window\n#\nwindow = cmds.window( title=\"Long Name\", iconName='Short Name', widthHeight=(200, 55) )\ncmds.columnLayout( adjustableColumn=True )\ncmds.button( label='Do Nothing' )\ncmds.button( label='Close', command=('cmds.deleteUI(\\\"' + window + '\\\", window=True)') )\ncmds.setParent( '..' )\ncmds.showWindow( window )\n\n# Resize the main window\n#\n\n# This is a workaround to get MEL global variable value in Python\ngMainWindow = maya.mel.eval('$tmpVar=$gMainWindow')\ncmds.window( gMainWindow, edit=True, widthHeight=(900, 777) )", 
    "windowPref": "\n\nimport maya.cmds as cmds\n\n#    Check if the window exists.\n#\nif cmds.window('ExampleWindow', exists=True):\n        cmds.deleteUI('ExampleWindow', window=True)\n\n#    Create a window.\n#\ncmds.window( 'ExampleWindow' )\ncmds.columnLayout()\ncmds.text( label='Size and position the window before closing it.' )\ncmds.button( label='Close', command='cmds.deleteUI(\"ExampleWindow\", window=True)' )\ncmds.showWindow( 'ExampleWindow' )\n\n#    When the window is closed a window preference object is\n#    created for the window. It has the same name as the window\n#    object.\n#\ncmds.windowPref( 'ExampleWindow', exists=True )\n\n#    Query the window preference size and position.\n#\ncmds.windowPref( 'ExampleWindow', query=True, topLeftCorner=True )\ncmds.windowPref( 'ExampleWindow', query=True, widthHeight=True )\n\n#    Create a window with the same name. When it is shown\n#    it will be sized and positioned according to the\n#    window preference.\n#\nif cmds.window('ExampleWindow', exists=True):\n        cmds.deleteUI('ExampleWindow', window=True)\n\ncmds.window( 'ExampleWindow' )\ncmds.columnLayout()\ncmds.text( label='Size and position the window before closing it.' )\ncmds.button( label='Close', command='cmds.deleteUI(\"ExampleWindow\", window=True)' )\ncmds.showWindow( 'ExampleWindow' )\n\n#    Delete the window preference and the window will have a\n#    default size and position.\n#\ncmds.windowPref( 'ExampleWindow', remove=True )\n\n#    Create the window one last time.\n#\nif cmds.window('ExampleWindow', exists=True):\n        cmds.deleteUI('ExampleWindow', window=True)\n\ncmds.window( 'ExampleWindow' )\ncmds.columnLayout()\ncmds.text( label='Size and position the window before closing it.' )\ncmds.button( label='Close', command='cmds.deleteUI(\"ExampleWindow\", window=True)' )\ncmds.showWindow( 'ExampleWindow' )", 
    "wire": "\n\nimport maya.cmds as cmds\n\n# select a surface and a curve that you want to be a wire, then enter\ncmds.wire()\n\n# create a wire deformer on surface1 using curve1 and curve2\ncmds.wire( 'surface1', 'curve1', 'curve2' )\n\n# modify the dropoff distance and envelope on wire1\ncmds.wire( 'wire1', edit=True, en=0.8, dds=[(0, 6),(1, 3.2)] )", 
    "wireContext": "\n\nimport maya.cmds as cmds\n\ncmds.wireContext( 'wireCtx' )", 
    "workspace": "\n\nimport maya.cmds as cmds\n\n# Set the current workspace to \"alphabet\".\ncmds.workspace( 'alphabet', openWorkspace=True )\n\n# Save the current workspace settings (for \"alphabet\").\ncmds.workspace( saveWorkspace=True )\n\n# Create a new workspace named \"newWorkspace\".\ncmds.workspace( 'newWorkspace', newWorkspace=True )\n\n# The settings of \"newWorkspace\" are based on \"default\" workspace\ncmds.workspace( baseWorkspace='default' )\n\n# Return the list of existing workspaces\ncmds.workspace( listWorkspaces=True )\n# Result: default   newWorkspace\n\n# Add a scriptJob to run on workspaceChanged events\ndef workspaceChangedCallback():\n    print 'My workspaceChangedCallback was called'\n\nworkspaceChangedID = cmds.scriptJob( event = [\"workspaceChanged\", workspaceChangedCallback] )\n\n# add a file rule to the current workspace\ncmds.workspace(fileRule = ['newFileRuleName', 'newFileRuleValue'])\nMy workspaceChangedCallback was called            #workspaceChangedCallback was called\n\n# look up the value of the file rule entry\ncmds.workspace(q = True, fileRuleEntry = 'newFileRuleName')\n# Result: newFileRuleValue\n\n# remove specified file rule entry\ncmds.workspace(removeFileRuleEntry = 'newFileRuleName')\nMy workspaceChangedCallback was called            #workspaceChangedCallback is called\n\n# kill the scriptJob with the number\ncmds.scriptJob(kill = workspaceChangedID)\n\n# The following example shows how to expand environment and workspace variables\n\n# expand a path value to be a full path relative to the project directory\n# relative path example\ncmds.workspace( expandName = 'relativePathName')\n# Result: /h/userName/maya/projects/newWorkspace/relativePathName/\n# full path example\ncmds.workspace( expandName = '/h/userName/maya/projects/default/')\n# Result: /h/userName/maya/projects/default/\n\n# The following examples show various formats for expanding workspace and\n# environment variables.\n\n# add a variable to the current workspace\ncmds.workspace(variable = ['newVariableName', 'newVariableValue'])\ncmds.workspace( expandName = '%newVariableName%')\n# Result: /h/userName/maya/projects/newWorkspace/newVariableValue/\n\n# add an environment variable with the same as the workspace variable\nmaya.mel.eval('putenv \"newEnvVariableName\" \"newEnvVariableValue\"')\ncmds.workspace( expandName = '%newEnvVariableName%')\n# Result: /h/userName/maya/projects/newWorkspace/newEnvVariableValue/\n\n# The following example shows how conflicting names in both workspace\n# and environment variables are resolved.\n# add a environment variable with the same name as a workspace variable\nmaya.mel.eval('putenv \"newVariableName\" \"newEnvVariableValue\"')\n# maya considers workspace variables first before matching environment variables\ncmds.workspace( expandName = '%newVariableName%')\n# Result: /h/userName/maya/projects/newWorkspace/newVariableValue/\n\n# When a tilde is used, maya will only consider the environment variable\n# not the workspace variable.\ncmds.workspace( expandName = '~%newVariableName%')\n# Result: /h/userName/maya/projects/newWorkspace/~newEnvVariableValue/\n\n# The following example shows how to set multiple paths into a fileRule value\ncmds.workspace(fileRule = ['newMultiPathFileRuleName', '/h/userName/maya/projects/default;newFileRuleValue'])\nmultipath = cmds.workspace(q = True, fileRuleEntry = 'newMultiPathFileRuleName')\n# Result : /h/userName/maya/projects/default;newFileRuleValue\n\n# The following will only return the first expanded path.\ncmds.workspace( expandName = multipath)\n# Result : /h/userName/maya/projects/default\n\n# Note that white space at the beginning or end of each path is significant.\n# Add a file rule that uses multiple paths with the white space at the beginning and end of each path\ncmds.workspace(fileRule = ['newMultiPathFileRuleName', ' /h/userName/maya/projects/default ; newFileRuleValue '])\n# Querying and expanding the path value shows that the white space is still included.\nmultipath = cmds.workspace(q = True, fileRuleEntry = 'newMultiPathFileRuleName')\n# Result :  /h/userName/maya/projects/default ; newFileRuleValue\n\n# Find the current workspace area.\ncmds.workspace( q=True, directory=True )\n# Result : /h/userName/maya/projects/default\n\n# Note that the \"current working directory\" as defined by the\n# 'pwd' and 'chdir' commands is unrelated to the directories\n# used by the workspace command\n#\ncmds.pwd()\n# Result : /usr/tmp\n\ncmds.chdir( '/tmp' )\ngetcwd()\n# Result : /tmp\ncmds.workspace( q=True, directory=True )\n# Result : /h/userName/maya/projects/default\n\ncmds.workspace( directory='/h/userName/maya/projects/commercial' )\ngetcwd()\n# Result : /tmp", 
    "wrinkle": "\n\nimport maya.cmds as cmds\n\n# Apply radial wrinkles to a sphere:\n\nmySph = cmds.sphere()\ncmds.wrinkle( mySph, st='radial', wc=3, brc=2, bd=0, th=1, rnd=0.2, wi=0.5, uv=(2.0, 4.0, 0.0, 2.0, 4.0) )\n\n# Apply a 5-line tangential wrinkle to a plane:\n\nmyPlane = cmds.nurbsPlane( w=50, u=20, v=20 )\ncmds.wrinkle( myPlane, st='lines', wc=5, th=1.0, rnd=0.2, wi=0.5, uv=(1.0, 1.0, 0.0, 0.5, 0.5) )", 
    "wrinkleContext": "\n\nimport maya.cmds as cmds\n\ncmds.wrinkleContext( 'wrinkleCtx' )", 
    "writeTake": "\n\nimport maya.cmds as cmds\n\n#    Record data from the clock device and write out the virtual\n#    device definition and take file.\ncmds.recordDevice( device='clock' )\ncmds.recordDevice( device='clock', stop=True )\ncmds.writeTake( device='clock', take='clock.mov', virtualDevice='virtualClock.mel' )\n\n#    Read the virtualClock and virtualClock take data.\nmaya.mel.eval(\"virtualClock\")\ncmds.readTake( device='virtualClock', take='clock.mov' )", 
    "xform": "\n\nimport maya.cmds as cmds\n\n# create object to manipulate\ncmds.sphere( n='sphere1' )\n\n# set rotation of sphere\ncmds.xform( r=True, ro=(0, 90, 0) )\n\n# change the rotate order but preserve the overall transformation\ncmds.xform( p=True, roo='yzx' )"
}